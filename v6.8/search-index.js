var searchIndex = JSON.parse('{\
"alloc":{"doc":"The Rust core allocation and collections library","t":"AAAAADIDIDGDLLFKFLKLLLLLLLLLLLLLLLLLLFKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDELLLLLLLLLLLLLLLLLLLLLLLLMDDDDDDDIDDDDDIQQQDDDDDDDDIDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["alloc","boxed","collections","slice","vec","AllocError","Allocator","Global","GlobalAlloc","Layout","LayoutErr","LayoutError","align","align_to","alloc","alloc","alloc_zeroed","alloc_zeroed","allocate","allocate","allocate_zeroed","allocate_zeroed","array","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone","clone","clone","dangling","dealloc","dealloc","deallocate","deallocate","default","eq","eq","eq","extend","extend_packed","fmt","fmt","fmt","fmt","fmt","fmt","for_value","for_value_raw","from","from","from","from","from_size_align","from_size_align_unchecked","grow","grow","grow_zeroed","grow_zeroed","hash","into","into","into","into","new","pad_to_align","padding_needed_for","realloc","realloc","repeat","repeat_packed","shrink","shrink","size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Box","allocator","as_mut","as_ref","assume_init","assume_init","borrow","borrow","borrow_mut","borrow_mut","call","call_mut","call_once","cause","cmp","deref","deref_mut","description","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","eq","finish","fmt","fmt","fmt","from","from","from_raw","from_raw_in","ge","gt","hash","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_suffix_of","last","le","leak","len","lt","ne","next","next_back","nth","nth_back","partial_cmp","poll","poll_next","resume","size_hint","size_hint","source","strip_prefix_of","strip_suffix_of","try_from","try_from","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","AllocError","CapacityOverflow","TryReserveError","TryReserveErrorKind","borrow","borrow","borrow_mut","borrow_mut","clone","clone","eq","eq","fmt","fmt","fmt","from","from","from","from","into","into","kind","try_from","try_from","try_into","try_into","type_id","type_id","layout","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Concat","EscapeAscii","GroupBy","GroupByMut","Iter","IterMut","Join","Output","Output","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","Split","SplitInclusive","SplitInclusiveMut","SplitMut","SplitN","SplitNMut","Windows","advance_back_by","advance_back_by","advance_by","advance_by","all","all","any","any","as_mut_slice","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","concat","count","count","count","count","count","count","count","count","count","count","count","count","count","count","default","default","find","find","find_map","find_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_ptr_range","from_ptr_range","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_slice","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_sorted_by","join","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","len","len","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","position","position","range","remainder","remainder","remainder","rposition","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","ExtractIf","IntoIter","Vec","advance_back_by","advance_by","allocator","allocator","allocator","allocator","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","cmp","count","dedup","dedup_by","dedup_by_key","default","default","deref","deref_mut","drain","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","extract_if","fmt","fmt","fmt","fmt","from","from","from","from","from","from_raw_parts","from_raw_parts_in","hash","index","index_mut","into","into","into","into","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_empty","is_empty","keep_rest","leak","len","ne","ne","ne","ne","ne","ne","new","new_in","next","next","next","next_back","next_back","next_chunk","partial_cmp","pop","push_within_capacity","remove","retain","retain_mut","set_len","size_hint","size_hint","size_hint","spare_capacity_mut","split_at_spare_mut","swap_remove","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_push","try_reserve","try_reserve_exact","try_resize","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id"],"q":[[0,"alloc"],[5,"alloc::alloc"],[92,"alloc::boxed"],[189,"alloc::collections"],[217,"alloc::collections::TryReserveErrorKind"],[218,"alloc::slice"],[707,"alloc::vec"],[843,"core::result"],[844,"core::ptr::non_null"],[845,"core::marker"],[846,"core::fmt"],[847,"core::fmt"],[848,"core::any"],[849,"core::mem::maybe_uninit"],[850,"core::marker"],[851,"core::ops::function"],[852,"core::option"],[853,"core::cmp"],[854,"core::cmp"],[855,"core::str::pattern"],[856,"core::iter::traits::exact_size"],[857,"core::iter::traits::iterator"],[858,"core::iter::traits::double_ended"],[859,"core::task::wake"],[860,"core::task::poll"],[861,"core::future::future"],[862,"core::marker"],[863,"core::ops::generator"],[864,"core::ops::generator"],[865,"core::clone"],[866,"core::ops::range"],[867,"core::ops::range"],[868,"core::default"],[869,"core::array::iter"]],"d":["Memory allocation APIs","The <code>Box&lt;T&gt;</code> type for heap allocation.","Collection types.","Utilities for the slice primitive type.","A contiguous growable array type with heap-allocated …","The <code>AllocError</code> error indicates an allocation failure that …","An implementation of <code>Allocator</code> can allocate, grow, shrink, …","The global memory allocator.","A memory allocator that can be registered as the standard …","Layout of a block of memory.","","The parameters given to <code>Layout::from_size_align</code> or some …","The minimum byte alignment for a memory block of this …","Creates a layout describing the record that can hold a …","Allocate memory with the global allocator.","Allocate memory as described by the given <code>layout</code>.","Allocate zero-initialized memory with the global allocator.","Behaves like <code>alloc</code>, but also ensures that the contents are …","Attempts to allocate a block of memory.","","","Behaves like <code>allocate</code>, but also ensures that the returned …","Creates a layout describing the record for a <code>[T; n]</code>.","","","","","","","","","Creates a “by reference” adapter for this instance of …","","","","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …","Deallocate memory with the global allocator.","Deallocate the block of memory at the given <code>ptr</code> pointer …","Deallocates the memory referenced by <code>ptr</code>.","","","","","","Creates a layout describing the record for <code>self</code> followed by","Creates a layout describing the record for <code>self</code> followed by","","","","","","","Produces layout describing a record that could be used to …","Produces layout describing a record that could be used to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …","Creates a layout, bypassing all checks.","","Attempts to extend the memory block.","","Behaves like <code>grow</code>, but also ensures that the new contents …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.","Creates a layout by rounding the size of this layout up to …","Returns the amount of padding we must insert after <code>self</code> to …","Reallocate memory with the global allocator.","Shrink or grow a block of memory to the given <code>new_size</code> in …","Creates a layout describing the record for <code>n</code> instances of …","Creates a layout describing the record for <code>n</code> instances of …","","Attempts to shrink the memory block.","The minimum size in bytes for a memory block of this …","","","","","","","","","","","","","A pointer type that uniquely owns a heap allocation of …","Returns a reference to the underlying allocator.","","","Converts to <code>Box&lt;T, A&gt;</code>.","Converts to <code>Box&lt;[T], A&gt;</code>.","","","","","","","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","Returns the argument unchanged.","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","","","","","","","","","","","","","","","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","The error type for <code>try_reserve</code> methods.","Details of the allocation that caused a <code>TryReserveError</code>","","","","","","","","","","","","","Returns the argument unchanged.","Always evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Details about the allocation that caused the error","","","","","","","The layout of allocation request that failed","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","Helper trait for <code>[T]::concat</code>.","An iterator over the escaped version of a byte slice.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable chunks …","Immutable slice iterator","Mutable slice iterator.","Helper trait for <code>[T]::join</code>","The resulting type after concatenation","The resulting type after concatenation","The output type returned by methods.","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector which …","An iterator over the mutable subslices of the vector which …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","","","","","","","","","Views the underlying data as a mutable subslice of the …","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns a slice which contains items not yet handled by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of <code>[T]::concat</code>","","","","","","","","","","","","","","","Creates an empty slice iterator.","Creates an empty slice iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a reference to T into a slice of length 1 …","Forms a mutable slice from a pointer range.","Forms a slice from a pointer range.","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Views the underlying data as a subslice of the original …","","","","","","","","","","","Implementation of <code>[T]::join</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A draining iterator for <code>Vec&lt;T&gt;</code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","","","Returns an unsafe mutable pointer to the vector’s …","Returns the remaining items of this iterator as a mutable …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","Extracts a slice containing the entire vector.","","","","","","","","","","","Returns the total number of elements the vector can hold …","Clears the vector, removing all values.","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>vec::IntoIter</code>.","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","","","","","","","","","","","Creates an iterator which uses a closure to determine if …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert a boxed slice into a vector by transferring …","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","","","Creates a consuming iterator, that is, one that moves each …","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","","Returns <code>true</code> if the vector contains no elements.","Keep unyielded elements in the source <code>Vec</code>.","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element if there is sufficient spare capacity, …","Removes and returns the element at position <code>index</code> within …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","","","","Returns the remaining spare capacity of the vector as a …","Returns vector content as a slice of <code>T</code>, along with the …","Removes an element from the vector and returns it.","Shortens the vector, keeping the first <code>len</code> elements and …","Tries to clone and append all elements in a slice to the …","","","","","","","","","Tries to append an element to the back of a collection.","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","Tries to resize the <code>Vec</code> in-place so that <code>len</code> is equal to …","Tries to construct a new, empty <code>Vec&lt;T&gt;</code> with at least the …","Tries to construct a new, empty <code>Vec&lt;T, A&gt;</code> with at least …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,101,0,101,19,9,9,19,1,9,1,3,8,9,1,3,8,19,9,1,3,8,1,0,101,19,9,9,1,3,8,1,1,9,1,3,3,8,8,1,1,9,1,3,8,1,1,9,19,9,19,1,9,1,3,8,1,1,1,0,101,1,1,9,19,1,9,1,3,8,9,1,3,8,9,1,3,8,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,60,60,0,0,59,60,59,60,59,60,59,60,59,59,60,59,59,60,60,59,60,59,59,60,59,60,59,60,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,104,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,63,61,63,61,63,61,63,63,61,63,61,63,64,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,64,66,67,68,69,70,71,72,73,74,75,103,61,63,69,70,76,71,77,72,73,78,74,79,75,80,61,63,61,63,61,63,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,68,61,63,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,0,0,0,0,0,0,99,99,99,99,99,99,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,77,78,80,63,61,63,71,77,72,73,78,75,80,61,104,61,63,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,64,66,81,82,67,83,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,69,70,76,71,77,72,73,78,74,79,75,80,61,63,69,70,76,71,77,72,73,78,74,79,75,80,61,63,0,71,73,75,61,63,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,68,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,61,63,64,66,81,82,67,83,84,85,86,87,88,89,68,69,70,76,71,77,72,73,78,74,79,75,80,0,0,0,0,94,94,95,94,96,97,96,96,96,94,96,96,95,94,96,96,95,94,96,95,94,96,96,97,95,94,96,96,97,96,96,96,94,96,96,96,94,96,96,96,96,95,94,96,97,96,96,96,96,96,96,96,95,94,96,97,95,94,96,96,97,96,96,96,96,96,95,94,96,97,96,95,94,96,96,96,97,96,96,95,94,96,95,96,96,96,96,96,96,96,96,96,96,95,94,97,95,94,94,96,96,96,96,96,96,96,95,94,97,96,96,96,96,96,95,94,96,97,95,94,96,97,96,96,96,96,96,96,95,94,96,97],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[1,2],[[4,[1,3]]]],[1,5],[[-1,1],5,[]],[1,5],[[-1,1],5,[]],[[-1,1],[[4,[[7,[[6,[5]]]],8]]],[]],[[9,1],[[4,[[7,[[6,[5]]]],8]]]],[[9,1],[[4,[[7,[[6,[5]]]],8]]]],[[-1,1],[[4,[[7,[[6,[5]]]],8]]],[]],[2,[[4,[1,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,10],[9,9],[1,1],[3,3],[8,8],[1,[[7,[5]]]],[[5,1],11],[[-1,5,1],11,[]],[[-1,[7,[5]],1],11,[]],[[9,[7,[5]],1],11],[[],9],[[1,1],12],[[3,3],12],[[8,8],12],[[1,1],[[4,[[11,[1,2]],3]]]],[[1,1],[[4,[1,3]]]],[[9,13],14],[[1,13],[[4,[11,15]]]],[[3,13],[[4,[11,15]]]],[[3,13],[[4,[11,15]]]],[[8,13],[[4,[11,15]]]],[[8,13],[[4,[11,15]]]],[-1,1,10],[[],1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[2,2],[[4,[1,3]]]],[[2,2],1],[[9,[7,[5]],1,1],[[4,[[7,[[6,[5]]]],8]]]],[[-1,[7,[5]],1,1],[[4,[[7,[[6,[5]]]],8]]],[]],[[9,[7,[5]],1,1],[[4,[[7,[[6,[5]]]],8]]]],[[-1,[7,[5]],1,1],[[4,[[7,[[6,[5]]]],8]]],[]],[[1,-1],11,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,1],[[1,2],2],[[5,1,2],5],[[-1,5,1,2],5,[]],[[1,2],[[4,[[11,[1,2]],3]]]],[[1,2],[[4,[1,3]]]],[[9,[7,[5]],1,1],[[4,[[7,[[6,[5]]]],8]]]],[[-1,[7,[5]],1,1],[[4,[[7,[[6,[5]]]],8]]],[]],[1,2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,[[[18,[-1,-2]]],-2,10,19],[[[18,[-1,-2]]],-1,10,19],[[[18,[-1,-2]]],-1,10,19],[[[18,[[20,[-1]],-2]]],[[18,[-1,-2]]],[],19],[[[18,[[6,[[20,[-1]]]],-2]]],[[18,[[6,[-1]],-2]]],[],19],[-1,-2,[],[]],[[[18,[-1,-2]]],-1,10,19],[-1,-2,[],[]],[[[18,[-1,-2]]],-1,10,19],[[[18,[-2,-3]],-1],[],21,[[22,[-1]],10],19],[[[18,[-2,-3]],-1],[],21,[[23,[-1]],10],19],[[[18,[-2,-3]],-1],[],21,[[24,[-1]],10],19],[[[18,[-1]]],[[26,[25]]],25],[[[18,[-1,-2]],[18,[-1,-2]]],27,[10,28],19],[[[18,[-1,-2]]],-1,10,19],[[[18,[-1,-2]]],-1,10,19],[[[18,[-1]]],29,25],[[[18,[30,-1]]],[[4,[[18,[-2,-1]],[18,[30,-1]]]]],19,30],[[[18,[30,-1]]],[[4,[[18,[-2,-1]],[18,[30,-1]]]]],19,30],[[[18,[30,-1]]],[[4,[[18,[-2,-1]],[18,[30,-1]]]]],19,30],[[[18,[30,-1]]],[[18,[-2,-1]]],19,30],[[[18,[30,-1]]],[[18,[-2,-1]]],19,30],[[[18,[30,-1]]],[[18,[-2,-1]]],19,30],[[[18,[-1,-2]]],11,10,19],[[[18,[-1,-2]],[18,[-1,-2]]],12,[10,31],19],[[[18,[-1,-2]]],32,[10,16],19],[[[18,[-1,-2]],13],14,[33,10],19],[[[18,[-1,-2]],13],14,10,19],[[[18,[-1,-2]],13],14,[34,10],19],[-1,-1,[]],[[[18,[29,-1]]],[[18,[[6,[5]],-1]]],19],[[],[[18,[-1]]],10],[-1,[[18,[-2,-1]]],19,10],[[[18,[-1,-2]],[18,[-1,-2]]],12,[10,35],19],[[[18,[-1,-2]],[18,[-1,-2]]],12,[10,35],19],[[[18,[-1,-2]],-3],11,[10,36],19,16],[-1,-2,[],[]],[[[18,[-1,-2]]],[[18,[[6,[-1]],-2]]],[],19],[-1,[],[]],[[[18,[-1,-2]]],-1,[],19],[-1,-2,[],[]],[[[18,[-1,-2]]],[[37,[[18,[-1,-2]]]]],10,19],[[[18,[-1,-2]]],[],10,19],[[[18,[-1,-2]]],[[11,[-2]]],10,19],[[-1,29],[[38,[-2]]],[],[]],[[-1,29],12,[]],[[[18,[-1,-2]]],12,[39,10],19],[[-1,29],12,[]],[[-1,29],12,[]],[[[18,[-1,-2]]],26,[40,10],19],[[[18,[-1,-2]],[18,[-1,-2]]],12,[10,35],19],[[[18,[-1,-2]]],-1,10,19],[[[18,[-1,-2]]],2,[39,10],19],[[[18,[-1,-2]],[18,[-1,-2]]],12,[10,35],19],[[[18,[-1,-2]],[18,[-1,-2]]],12,[10,31],19],[[[18,[-1,-2]]],26,[40,10],19],[[[18,[-1,-2]]],26,[41,10],19],[[[18,[-1,-2]],2],26,[40,10],19],[[[18,[-1,-2]],2],26,[41,10],19],[[[18,[-1,-2]],[18,[-1,-2]]],[[26,[27]]],[10,35],19],[[[37,[[18,[-1,-2]]]],42],43,[10,44,45],19],[[[37,[[18,[-1]]]],42],[[43,[26]]],[10,46,45]],[[[37,[[18,[-2,-3]]]],-1],47,[],[10,[48,[-1]],45],19],[[[18,[-1,-2]]],[[11,[2,[26,[2]]]]],[40,10],19],[[[18,[-1]]],[[11,[2,[26,[2]]]]],[10,46,45]],[[[18,[-1]]],[[26,[25]]],25],[[-1,29],[[26,[29]]],[]],[[-1,29],[[26,[29]]],[]],[-1,[[4,[-2]]],[],[]],[[[18,[[6,[-1]]]]],[[4,[[18,[[49,[-1]]]]]]],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[[18,[-1]],8]]],[]],[[-1,-2],[[4,[[18,[-1,-2]],8]]],[],[19,19]],[[],[[4,[[18,[[20,[-1]]]],8]]],[]],[-1,[[4,[[18,[[20,[-2]],-1]],8]]],[19,19],[]],[2,[[4,[[18,[[6,[[20,[-1]]]]]],8]]],[]],[[],[[4,[[18,[[20,[-1]]]],8]]],[]],[-1,[[4,[[18,[[20,[-2]],-1]],8]]],[19,19],[]],[2,[[4,[[18,[[6,[[20,[-1]]]]]],8]]],[]],[-1,17,[]],[[[18,[-1,-2]],[6,[5]]],11,[10,16],19],[[[18,[[20,[-1]],-2]],-1],[[18,[-1,-2]]],[],19],[[[18,[-1,-2]],50],11,[10,16],19],[[[18,[-1,-2]],51],11,[10,16],19],[[[18,[-1,-2]],52],11,[10,16],19],[[[18,[-1,-2]],53],11,[10,16],19],[[[18,[-1,-2]],54],11,[10,16],19],[[[18,[-1,-2]],55],11,[10,16],19],[[[18,[-1,-2]],2],11,[10,16],19],[[[18,[-1,-2]],29],11,[10,16],19],[[[18,[-1,-2]],56],11,[10,16],19],[[[18,[-1,-2]],57],11,[10,16],19],[[[18,[-1,-2]],58],11,[10,16],19],[[[18,[-1,-2]],32],11,[10,16],19],[[[18,[-1,-2]],5],11,[10,16],19],[[[18,[-1,-2]],2],11,[10,16],19],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[59,59],[60,60],[[59,59],12],[[60,60],12],[[59,13],[[4,[11,15]]]],[[59,13],14],[[60,13],14],[60,59],[-1,-1,[]],[3,60],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[59,60],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[61,[-1]],2],[[4,[11,62]]],[]],[[[63,[-1]],2],[[4,[11,62]]],[]],[[[61,[-1]],2],[[4,[11,62]]],[]],[[[63,[-1]],2],[[4,[11,62]]],[]],[[[61,[-1]],-2],12,[],23],[[[63,[-1]],-2],12,[],23],[[[61,[-1]],-2],12,[],23],[[[63,[-1]],-2],12,[],23],[[[63,[-1]]],[[6,[-1]]],[]],[[[61,[-1]]],[[6,[-1]]],[]],[[[63,[-1]]],[[6,[-1]]],[]],[[[61,[-1]]],[[6,[-1]]],[]],[[[63,[-1]]],[[6,[-1]]],[]],[[[64,[-1,-2]]],[[6,[-1]]],[],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[-1]]],[[61,[-1]]],[]],[[[64,[-1,-2]]],[[64,[-1,-2]]],[],[65,23]],[[[66,[-1,-2]]],[[66,[-1,-2]]],[],[65,23]],[[[67,[-1,-2]]],[[67,[-1,-2]]],[],[65,23]],[68,68],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1]]],[[70,[-1]]],[]],[[[71,[-1]]],[[71,[-1]]],[]],[[[72,[-1]]],[[72,[-1]]],65],[[[73,[-1]]],[[73,[-1]]],[]],[[[74,[-1]]],[[74,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[-1,[],[]],[[[61,[-1]]],2,[]],[[[63,[-1]]],2,[]],[[[69,[-1]]],2,[]],[[[70,[-1]]],2,[]],[[[76,[-1]]],2,[]],[[[71,[-1]]],2,[]],[[[77,[-1]]],2,[]],[[[72,[-1]]],2,[]],[[[73,[-1]]],2,[]],[[[78,[-1]]],2,[]],[[[74,[-1]]],2,[]],[[[79,[-1]]],2,[]],[[[75,[-1]]],2,[]],[[[80,[-1]]],2,[]],[[],[[61,[-1]]],[]],[[],[[63,[-1]]],[]],[[[61,[-1]],-2],26,[],23],[[[63,[-1]],-2],26,[],23],[[[61,[-1]],-2],[[26,[-3]]],[],23,[]],[[[63,[-1]],-2],[[26,[-3]]],[],23,[]],[[[61,[-1]],13],[[4,[11,15]]],33],[[[63,[-1]],13],[[4,[11,15]]],33],[[[64,[-1,-2]],13],[[4,[11,15]]],33,23],[[[66,[-1,-2]],13],[[4,[11,15]]],33,23],[[[81,[-1,-2]],13],[[4,[11,15]]],33,23],[[[82,[-1,-2]],13],[[4,[11,15]]],33,23],[[[67,[-1,-2]],13],[[4,[11,15]]],33,23],[[[83,[-1,-2]],13],[[4,[11,15]]],33,23],[[[84,[-1,-2]],13],[[4,[11,15]]],33,23],[[[85,[-1,-2]],13],[[4,[11,15]]],33,23],[[[86,[-1,-2]],13],[[4,[11,15]]],33,23],[[[87,[-1,-2]],13],[[4,[11,15]]],33,23],[[[88,[-1,-2]],13],[[4,[11,15]]],33,[]],[[[89,[-1,-2]],13],[[4,[11,15]]],33,[]],[[68,13],[[4,[11,15]]]],[[68,13],[[4,[11,15]]]],[[[69,[-1]],13],[[4,[11,15]]],33],[[[70,[-1]],13],[[4,[11,15]]],33],[[[76,[-1]],13],[[4,[11,15]]],33],[[[71,[-1]],13],[[4,[11,15]]],33],[[[77,[-1]],13],[[4,[11,15]]],33],[[[72,[-1]],13],[[4,[11,15]]],33],[[[73,[-1]],13],[[4,[11,15]]],33],[[[78,[-1]],13],[[4,[11,15]]],33],[[[74,[-1]],13],[[4,[11,15]]],33],[[[79,[-1]],13],[[4,[11,15]]],33],[[[75,[-1]],13],[[4,[11,15]]],33],[[[80,[-1]],13],[[4,[11,15]]],33],[[[61,[-1]],-2,-3],-2,[],[],23],[[[63,[-1]],-2,-3],-2,[],[],23],[[68,-1,-2],-1,[],23],[[[61,[-1]],-2],11,[],23],[[[63,[-1]],-2],11,[],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-1]]],[]],[90,[[6,[-1]]],[]],[90,[[6,[-1]]],[]],[2,[[6,[-1]]],[]],[2,[[6,[-1]]],[]],[-1,[[6,[-1]]],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[-1,[],[]],[-1,[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1]]],[[6,[-1]]],[]],[[[78,[-1]]],[[6,[-1]]],[]],[[[80,[-1]]],[[6,[-1]]],[]],[[[63,[-1]]],[[6,[-1]]],[]],[[[61,[-1]]],12,[]],[[[63,[-1]]],12,[]],[[[71,[-1]]],12,[]],[[[77,[-1]]],12,[]],[[[72,[-1]]],12,[]],[[[73,[-1]]],12,[]],[[[78,[-1]]],12,[]],[[[75,[-1]]],12,[]],[[[80,[-1]]],12,[]],[[[61,[-1]],-2],12,[],23],[[-1,-2],[],[],[]],[[[61,[-1]]],[[26,[-1]]],[]],[[[63,[-1]]],[[26,[-1]]],[]],[[[88,[-1,-2]]],26,[],23],[[[89,[-1,-2]]],26,[],23],[68,[[26,[5]]]],[[[69,[-1]]],26,[]],[[[70,[-1]]],26,[]],[[[76,[-1]]],26,[]],[[[71,[-1]]],26,[]],[[[77,[-1]]],26,[]],[[[72,[-1]]],26,[]],[[[73,[-1]]],26,[]],[[[78,[-1]]],26,[]],[[[74,[-1]]],26,[]],[[[79,[-1]]],26,[]],[[[75,[-1]]],26,[]],[[[80,[-1]]],26,[]],[[[61,[-1]]],2,[]],[[[63,[-1]]],2,[]],[[[61,[-1]]],[[26,[-1]]],[]],[[[63,[-1]]],[[26,[-1]]],[]],[[[64,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[66,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[81,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[82,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[67,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[83,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[84,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[85,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[86,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[87,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[88,[-1,-2]]],26,[],23],[[[89,[-1,-2]]],26,[],23],[68,[[26,[5]]]],[[[69,[-1]]],[[26,[[6,[-1]]]]],[]],[[[70,[-1]]],[[26,[[6,[-1]]]]],[]],[[[76,[-1]]],[[26,[[6,[-1]]]]],[]],[[[71,[-1]]],[[26,[[6,[-1]]]]],[]],[[[77,[-1]]],[[26,[[6,[-1]]]]],[]],[[[72,[-1]]],26,[]],[[[73,[-1]]],[[26,[[49,[-1]]]]],[]],[[[78,[-1]]],[[26,[[49,[-1]]]]],[]],[[[74,[-1]]],[[26,[[6,[-1]]]]],[]],[[[79,[-1]]],[[26,[[6,[-1]]]]],[]],[[[75,[-1]]],[[26,[[6,[-1]]]]],[]],[[[80,[-1]]],[[26,[[6,[-1]]]]],[]],[[[61,[-1]]],[[26,[-1]]],[]],[[[63,[-1]]],[[26,[-1]]],[]],[[[64,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[66,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[81,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[82,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[67,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[83,[-1,-2]]],[[26,[[6,[-1]]]]],[],23],[[[88,[-1,-2]]],26,[],23],[[[89,[-1,-2]]],26,[],23],[68,[[26,[5]]]],[[[69,[-1]]],[[26,[[6,[-1]]]]],[]],[[[70,[-1]]],[[26,[[6,[-1]]]]],[]],[[[76,[-1]]],[[26,[[6,[-1]]]]],[]],[[[71,[-1]]],[[26,[[6,[-1]]]]],[]],[[[77,[-1]]],[[26,[[6,[-1]]]]],[]],[[[72,[-1]]],[[26,[[49,[-1]]]]],[]],[[[73,[-1]]],[[26,[[49,[-1]]]]],[]],[[[78,[-1]]],[[26,[[49,[-1]]]]],[]],[[[74,[-1]]],[[26,[[6,[-1]]]]],[]],[[[79,[-1]]],[[26,[[6,[-1]]]]],[]],[[[75,[-1]]],[[26,[[6,[-1]]]]],[]],[[[80,[-1]]],[[26,[[6,[-1]]]]],[]],[[[61,[-1]],2],[[26,[-1]]],[]],[[[63,[-1]],2],[[26,[-1]]],[]],[[[69,[-1]],2],26,[]],[[[70,[-1]],2],26,[]],[[[76,[-1]],2],[[26,[[6,[-1]]]]],[]],[[[71,[-1]],2],26,[]],[[[77,[-1]],2],[[26,[[6,[-1]]]]],[]],[[[72,[-1]],2],26,[]],[[[73,[-1]],2],26,[]],[[[78,[-1]],2],26,[]],[[[74,[-1]],2],26,[]],[[[79,[-1]],2],[[26,[[6,[-1]]]]],[]],[[[75,[-1]],2],26,[]],[[[80,[-1]],2],[[26,[[6,[-1]]]]],[]],[[[61,[-1]],2],[[26,[-1]]],[]],[[[63,[-1]],2],[[26,[-1]]],[]],[[[69,[-1]],2],26,[]],[[[70,[-1]],2],26,[]],[[[76,[-1]],2],26,[]],[[[71,[-1]],2],26,[]],[[[77,[-1]],2],26,[]],[[[72,[-1]],2],[[26,[[49,[-1]]]]],[]],[[[73,[-1]],2],26,[]],[[[78,[-1]],2],26,[]],[[[74,[-1]],2],26,[]],[[[79,[-1]],2],26,[]],[[[75,[-1]],2],26,[]],[[[80,[-1]],2],26,[]],[[[61,[-1]],-2],[[26,[2]]],[],23],[[[63,[-1]],-2],[[26,[2]]],[],23],[[-1,[91,[2]]],[[90,[2]]],[[92,[2]]]],[[[71,[-1]]],[[6,[-1]]],[]],[[[73,[-1]]],[[6,[-1]]],[]],[[[75,[-1]]],[[6,[-1]]],[]],[[[61,[-1]],-2],[[26,[2]]],[],23],[[[63,[-1]],-2],[[26,[2]]],[],23],[[[61,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[63,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[64,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[66,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[81,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[82,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[67,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[83,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[84,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[85,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[86,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[87,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[88,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[[[89,[-1,-2]]],[[11,[2,[26,[2]]]]],[],23],[68,[[11,[2,[26,[2]]]]]],[[[69,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[70,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[76,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[71,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[77,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[72,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[73,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[78,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[74,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[79,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[75,[-1]]],[[11,[2,[26,[2]]]]],[]],[[[80,[-1]]],[[11,[2,[26,[2]]]]],[]],[[68,-1,-2],-3,[],23,93],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,0,0,0,[[[94,[-1,-2]],2],[[4,[11,62]]],[],19],[[[94,[-1,-2]],2],[[4,[11,62]]],[],19],[[[95,[-1,-2]]],-2,[],19],[[[94,[-1,-2]]],-2,[],19],[[[96,[-1,-2]]],-2,[],19],[[[97,[-1,-2,-3]]],-3,[],23,19],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],[[96,[-1,-2]]],[],19],[[[96,[-1,-2]]],[],[],19],[[[94,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],[],[],19],[[[95,[-1,-2]]],[[6,[-1]]],[],19],[[[94,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],[[96,[-1,-2]]],[],19],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[[[95,[-1,-2]]],[[6,[-1]]],[],19],[[[94,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1,-2]]],2,[],19],[[[96,[-1,-2]]],11,[],19],[[[96,[-1,-2]],[96,[-1,-2]]],27,28,19],[[[94,[-1,-2]]],2,[],19],[[[96,[-1,-2]]],11,31,19],[[[96,[-1,-2]],-3],11,[],19,23],[[[96,[-1,-2]],-3],11,[],19,23],[[],[[94,[-1,-2]]],[],[19,98]],[[],[[96,[-1]]],[]],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]],-3],[[95,[-1,-2]]],[],19,[[92,[2]]]],[[[95,[-1,-2]]],11,[],19],[[[94,[-1,-2]]],11,[],19],[[[96,[-1,-2]]],11,[],19],[[[97,[-1,-2,-3]]],11,[],23,19],[[[96,[-2,-3]],[96,[-1,-4]]],12,[],[[31,[-1]]],19,19],[[[96,[-2,-3]],[49,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[49,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[6,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[6,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[6,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-1,-2]],-3],[[97,[-1,-3,-2]]],[],19,23],[[[95,[-1,-2]],13],14,33,19],[[[94,[-1,-2]],13],14,33,19],[[[96,[-1,-2]],13],14,33,19],[[[97,[-1,-2,-3]],13],14,33,[23,33],[33,19]],[-1,-1,[]],[-1,-1,[]],[[[18,[[6,[-1]],-2]]],[[96,[-1,-2]]],[],19],[-1,-1,[]],[-1,-1,[]],[[2,2],[[96,[-1]]],[]],[[2,2,-1],[[96,[-2,-1]]],19,[]],[[[96,[-1,-2]],-3],11,36,19,16],[[[96,[-1,-2]],-3],[],[],19,[[99,[[6,[-1]]]]]],[[[96,[-1,-2]],-3],[],[],19,[[99,[[6,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[[49,[-1]],-2]]],[[96,[-1,-2]]],[],19],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1,-2]]],[],[],19],[[[96,[-1,-2]]],[],[],19],[[[96,[-1,-2]]],[],[],19],[-1,-2,[],[]],[[[96,[-1,-2]]],[[11,[2,2]]],[],19],[[[96,[-1,-2]]],[[11,[2,2,-2]]],[],19],[[[95,[-1,-2]]],12,[],19],[[[94,[-1,-2]]],12,[],19],[[[96,[-1,-2]]],12,[],19],[[[95,[-1,-2]]],11,[],19],[[[96,[-1,-2]]],[[6,[-1]]],[],19],[[[96,[-1,-2]]],2,[],19],[[[96,[-2,-3]],[96,[-1,-4]]],12,[],[[31,[-1]]],19,19],[[[96,[-2,-3]],[49,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[49,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[6,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[6,[-1]]],12,[],[[31,[-1]]],19],[[[96,[-2,-3]],[6,[-1]]],12,[],[[31,[-1]]],19],[[],[[96,[-1]]],[]],[-1,[[96,[-2,-1]]],19,[]],[[[95,[-1,-2]]],[[26,[-1]]],[],19],[[[94,[-1,-2]]],[[26,[-1]]],[],19],[[[97,[-1,-2,-3]]],[[26,[-1]]],[],23,19],[[[95,[-1,-2]]],[[26,[-1]]],[],19],[[[94,[-1,-2]]],[[26,[-1]]],[],19],[[[94,[-1,-2]]],[[4,[[49,[-1]],[100,[-1]]]]],[],19],[[[96,[-1,-2]],[96,[-1,-3]]],[[26,[27]]],35,19,19],[[[96,[-1,-2]]],[[26,[-1]]],[],19],[[[96,[-1,-2]],-1],[[4,[11,-1]]],[],19],[[[96,[-1,-2]],2],-1,[],19],[[[96,[-1,-2]],-3],11,[],19,23],[[[96,[-1,-2]],-3],11,[],19,23],[[[96,[-1,-2]],2],11,[],19],[[[95,[-1,-2]]],[[11,[2,[26,[2]]]]],[],19],[[[94,[-1,-2]]],[[11,[2,[26,[2]]]]],[],19],[[[97,[-1,-2,-3]]],[[11,[2,[26,[2]]]]],[],23,19],[[[96,[-1,-2]]],[[6,[[20,[-1]]]]],[],19],[[[96,[-1,-2]]],[[11,[[6,[-1]],[6,[[20,[-1]]]]]]],[],19],[[[96,[-1,-2]],2],-1,[],19],[[[96,[-1,-2]],2],11,[],19],[[[96,[-1,-2]],[6,[-1]]],[[4,[11,59]]],65,19],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[[[96,[-1,-2]],-1],[[4,[11,59]]],[],19],[[[96,[-1,-2]],2],[[4,[11,59]]],[],19],[[[96,[-1,-2]],2],[[4,[11,59]]],[],19],[[[96,[-1,-2]],2,-1],[[4,[11,59]]],65,19],[2,[[4,[[96,[-1]],59]]],[]],[[2,-1],[[4,[[96,[-2,-1]],59]]],19,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]]],"c":[10],"p":[[3,"Layout",5],[15,"usize"],[3,"LayoutError",5],[4,"Result",843],[15,"u8"],[15,"slice"],[3,"NonNull",844],[3,"AllocError",5],[3,"Global",5],[8,"Sized",845],[15,"tuple"],[15,"bool"],[3,"Formatter",846],[6,"Result",846],[3,"Error",846],[8,"Hasher",847],[3,"TypeId",848],[3,"Box",92],[8,"Allocator",5],[19,"MaybeUninit",849],[8,"Tuple",845],[8,"Fn",850],[8,"FnMut",850],[8,"FnOnce",850],[8,"Error",851],[4,"Option",852],[4,"Ordering",853],[8,"Ord",853],[15,"str"],[8,"Any",848],[8,"PartialEq",853],[15,"u64"],[8,"Debug",846],[8,"Display",846],[8,"PartialOrd",853],[8,"Hash",847],[3,"Pin",854],[3,"CharPredicateSearcher",855],[8,"ExactSizeIterator",856],[8,"Iterator",857],[8,"DoubleEndedIterator",858],[3,"Context",859],[4,"Poll",860],[8,"Future",861],[8,"Unpin",845],[8,"AsyncIterator",862],[4,"GeneratorState",863],[8,"Generator",863],[15,"array"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u32"],[3,"TryReserveError",189],[4,"TryReserveErrorKind",189],[3,"Iter",218],[3,"NonZeroUsize",864],[3,"IterMut",218],[3,"Split",218],[8,"Clone",865],[3,"SplitInclusive",218],[3,"RSplit",218],[3,"EscapeAscii",218],[3,"Windows",218],[3,"Chunks",218],[3,"ChunksExact",218],[3,"ArrayWindows",218],[3,"ArrayChunks",218],[3,"RChunks",218],[3,"RChunksExact",218],[3,"ChunksMut",218],[3,"ChunksExactMut",218],[3,"ArrayChunksMut",218],[3,"RChunksMut",218],[3,"RChunksExactMut",218],[3,"SplitMut",218],[3,"SplitInclusiveMut",218],[3,"RSplitMut",218],[3,"SplitN",218],[3,"RSplitN",218],[3,"SplitNMut",218],[3,"RSplitNMut",218],[3,"GroupBy",218],[3,"GroupByMut",218],[3,"Range",866],[3,"RangeTo",866],[8,"RangeBounds",866],[8,"Try",867],[3,"IntoIter",707],[3,"Drain",707],[3,"Vec",707],[3,"ExtractIf",707],[8,"Default",868],[8,"SliceIndex",218],[3,"IntoIter",869],[8,"GlobalAlloc",5],[13,"AllocError",217],[8,"Concat",218],[8,"Join",218]]},\
"compiler_builtins":{"doc":"Our own <code>compiler_builtins</code>.","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"core":{"doc":"The Rust Core Library","t":"","n":["BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","DIGITS","DIGITS","EPSILON","EPSILON","INFINITY","INFINITY","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","NAN","NAN","NEG_INFINITY","NEG_INFINITY","RADIX","RADIX","REPLACEMENT_CHARACTER","UNICODE_VERSION","abs","abs","abs","abs","abs","abs","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","addr","addr","align_offset","align_offset","align_to","align_to_mut","alloc","any","arch","array","array","array_chunks","array_chunks_mut","array_windows","as_ascii","as_ascii","as_ascii","as_ascii","as_ascii","as_ascii_unchecked","as_ascii_unchecked","as_bytes","as_bytes","as_bytes_mut","as_chunks","as_chunks_mut","as_chunks_unchecked","as_chunks_unchecked_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr_range","as_mut_slice","as_ptr","as_ptr","as_ptr","as_ptr_range","as_rchunks","as_rchunks_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_simd","as_simd_mut","as_slice","as_slice","as_slice","as_str","as_uninit_mut","as_uninit_ref","as_uninit_ref","as_uninit_slice","as_uninit_slice","as_uninit_slice_mut","ascii","assert","assert_eq","assert_matches","assert_ne","async_iter","backward","backward","backward","backward","backward","backward","backward","backward","backward","backward","backward","backward","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_checked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","backward_unchecked","binary_search","binary_search_by","binary_search_by_key","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","borrowing_sub","byte_add","byte_add","byte_offset","byte_offset","byte_offset_from","byte_offset_from","byte_sub","byte_sub","bytes","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_add","carrying_mul","carrying_mul","carrying_mul","carrying_mul","carrying_mul","cast","cast","cast_const","cast_mut","ceil_char_boundary","cell","cfg","cfg_match","char","char","char_indices","chars","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add_signed","checked_add_signed","checked_add_signed","checked_add_signed","checked_add_signed","checked_add_signed","checked_add_unsigned","checked_add_unsigned","checked_add_unsigned","checked_add_unsigned","checked_add_unsigned","checked_add_unsigned","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog10","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_ilog2","checked_isqrt","checked_isqrt","checked_isqrt","checked_isqrt","checked_isqrt","checked_isqrt","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_multiple_of","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub_unsigned","checked_sub_unsigned","checked_sub_unsigned","checked_sub_unsigned","checked_sub_unsigned","checked_sub_unsigned","chunks","chunks_exact","chunks_exact_mut","chunks_mut","clamp","clamp","clamp","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from_slice","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","column","compile_error","concat","concat_bytes","concat_idents","const_format_args","contains","contains","convert","copy_from","copy_from_nonoverlapping","copy_from_slice","copy_to","copy_to","copy_to_nonoverlapping","copy_to_nonoverlapping","copy_within","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","debug_assert","debug_assert_eq","debug_assert_ne","decode_utf16","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_ceil","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","div_floor","drop_in_place","each_mut","each_ref","encode_utf16","encode_utf16","encode_utf8","end_bound","end_bound","ends_with","ends_with","env","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_ignore_ascii_case","eq_ignore_ascii_case","eq_ignore_ascii_case","eq_ignore_ascii_case","error","escape_ascii","escape_ascii","escape_debug","escape_debug","escape_default","escape_default","escape_unicode","escape_unicode","expose_addr","expose_addr","extend","extend","extend_one","extend_one","extend_reserve","f32","f32","f64","f64","ffi","file","fill","fill_with","find","first","first_chunk","first_chunk_mut","first_mut","flatten","flatten_mut","floor_char_boundary","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn","format_args","format_args_nl","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_checked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_bits","from_bits","from_bits","from_bits","from_digit","from_iter","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_ne_bytes","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u32","from_u32_unchecked","future","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","get","get","get","get","get","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","group_by","group_by_mut","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","guaranteed_eq","guaranteed_eq","guaranteed_ne","guaranteed_ne","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hash_slice","hint","i128","i128","i16","i16","i32","i32","i64","i64","i8","i8","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","include","include_bytes","include_str","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_searcher","into_searcher","into_searcher","into_searcher","into_searcher","into_searcher","into_searcher","intrinsics","is_aligned","is_aligned","is_aligned_to","is_aligned_to","is_alphabetic","is_alphanumeric","is_ascii","is_ascii","is_ascii","is_ascii","is_ascii_alphabetic","is_ascii_alphabetic","is_ascii_alphanumeric","is_ascii_alphanumeric","is_ascii_control","is_ascii_control","is_ascii_digit","is_ascii_digit","is_ascii_graphic","is_ascii_graphic","is_ascii_hexdigit","is_ascii_hexdigit","is_ascii_lowercase","is_ascii_lowercase","is_ascii_octdigit","is_ascii_octdigit","is_ascii_punctuation","is_ascii_punctuation","is_ascii_uppercase","is_ascii_uppercase","is_ascii_whitespace","is_ascii_whitespace","is_char_boundary","is_contained_in","is_contained_in","is_contained_in","is_contained_in","is_contained_in","is_contained_in","is_contained_in","is_control","is_digit","is_empty","is_empty","is_empty","is_finite","is_finite","is_infinite","is_infinite","is_lowercase","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_null","is_null","is_numeric","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_prefix_of","is_prefix_of","is_prefix_of","is_prefix_of","is_prefix_of","is_prefix_of","is_prefix_of","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sorted","is_sorted_by","is_sorted_by_key","is_subnormal","is_subnormal","is_suffix_of","is_suffix_of","is_suffix_of","is_suffix_of","is_suffix_of","is_suffix_of","is_suffix_of","is_uppercase","is_utf16_surrogate","is_whitespace","isize","isize","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","isqrt","iter","iter","iter_mut","last","last_chunk","last_chunk_mut","last_mut","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","len","len","len","len","len_utf16","len_utf8","line","lines","lines_any","log_syntax","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","make_ascii_lowercase","make_ascii_lowercase","make_ascii_lowercase","make_ascii_lowercase","make_ascii_uppercase","make_ascii_uppercase","make_ascii_uppercase","make_ascii_uppercase","map","map_addr","map_addr","marker","mask","mask","match_indices","matches","matches","max","max","max","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","maximum","maximum","mem","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","min","min","min","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","minimum","minimum","module_path","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","net","never","next_down","next_down","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_multiple_of","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_up","next_up","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","num","offset","offset","offset_from","offset_from","ops","option","option_env","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add","overflowing_add_signed","overflowing_add_signed","overflowing_add_signed","overflowing_add_signed","overflowing_add_signed","overflowing_add_signed","overflowing_add_unsigned","overflowing_add_unsigned","overflowing_add_unsigned","overflowing_add_unsigned","overflowing_add_unsigned","overflowing_add_unsigned","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_div_euclid","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_mul","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_pow","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_rem_euclid","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shl","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_shr","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub","overflowing_sub_unsigned","overflowing_sub_unsigned","overflowing_sub_unsigned","overflowing_sub_unsigned","overflowing_sub_unsigned","overflowing_sub_unsigned","panic","panic","panicking","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_dedup","partition_dedup_by","partition_dedup_by_key","partition_point","pin","pointer","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prelude","primitive","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","ptr","rchunks","rchunks_exact","rchunks_exact_mut","rchunks_mut","read","read","read_unaligned","read_unaligned","read_volatile","read_volatile","recip","recip","reference","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","replace","result","reverse","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rfind","rmatch_indices","rmatches","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rsplit","rsplit","rsplit_array_mut","rsplit_array_mut","rsplit_array_ref","rsplit_array_ref","rsplit_mut","rsplit_once","rsplit_terminator","rsplitn","rsplitn","rsplitn_mut","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add_signed","saturating_add_signed","saturating_add_signed","saturating_add_signed","saturating_add_signed","saturating_add_signed","saturating_add_unsigned","saturating_add_unsigned","saturating_add_unsigned","saturating_add_unsigned","saturating_add_unsigned","saturating_add_unsigned","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub_unsigned","saturating_sub_unsigned","saturating_sub_unsigned","saturating_sub_unsigned","saturating_sub_unsigned","saturating_sub_unsigned","select_nth_unstable","select_nth_unstable_by","select_nth_unstable_by_key","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signum","signum","signum","signum","signum","signum","simd","slice","slice","slice_mut_unchecked","slice_unchecked","sort_floats","sort_floats","sort_unstable","sort_unstable_by","sort_unstable_by_key","split","split","split_array_mut","split_array_mut","split_array_ref","split_array_ref","split_ascii_whitespace","split_at","split_at","split_at_mut","split_at_mut","split_at_mut","split_at_mut_unchecked","split_at_mut_unchecked","split_at_unchecked","split_first","split_first_chunk","split_first_chunk_mut","split_first_mut","split_inclusive","split_inclusive","split_inclusive_mut","split_last","split_last_chunk","split_last_chunk_mut","split_last_mut","split_mut","split_once","split_terminator","split_whitespace","splitn","splitn","splitn_mut","start_bound","start_bound","starts_with","starts_with","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","steps_between","str","str","stringify","strip_prefix","strip_prefix","strip_prefix_of","strip_prefix_of","strip_prefix_of","strip_prefix_of","strip_prefix_of","strip_prefix_of","strip_prefix_of","strip_suffix","strip_suffix","strip_suffix_of","strip_suffix_of","strip_suffix_of","strip_suffix_of","strip_suffix_of","strip_suffix_of","strip_suffix_of","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_ptr","sub_ptr","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swap","swap","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_unchecked","swap_with_slice","sync","take","take_first","take_first_mut","take_last","take_last_mut","take_mut","task","then","then_some","time","to_ascii_lowercase","to_ascii_lowercase","to_ascii_uppercase","to_ascii_uppercase","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_bits","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_digit","to_int_unchecked","to_int_unchecked","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_lowercase","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_radians","to_radians","to_raw_parts","to_raw_parts","to_uppercase","todo","total_cmp","total_cmp","trace_macros","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trim","trim_ascii","trim_ascii_end","trim_ascii_start","trim_end","trim_end_matches","trim_left","trim_left_matches","trim_matches","trim_right","trim_right_matches","trim_start","trim_start_matches","try","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_map","tuple","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128","u128","u16","u16","u32","u32","u64","u64","u8","u8","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unicode","unimplemented","unit","unreachable","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","usize","usize","widening_mul","widening_mul","widening_mul","widening_mul","widening_mul","windows","with_addr","with_addr","with_metadata_of","with_metadata_of","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add_signed","wrapping_add_signed","wrapping_add_signed","wrapping_add_signed","wrapping_add_signed","wrapping_add_signed","wrapping_add_unsigned","wrapping_add_unsigned","wrapping_add_unsigned","wrapping_add_unsigned","wrapping_add_unsigned","wrapping_add_unsigned","wrapping_byte_add","wrapping_byte_add","wrapping_byte_offset","wrapping_byte_offset","wrapping_byte_sub","wrapping_byte_sub","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_div_euclid","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_mul","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_next_power_of_two","wrapping_next_power_of_two","wrapping_next_power_of_two","wrapping_next_power_of_two","wrapping_next_power_of_two","wrapping_next_power_of_two","wrapping_offset","wrapping_offset","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_pow","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_rem_euclid","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shl","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_shr","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub_unsigned","wrapping_sub_unsigned","wrapping_sub_unsigned","wrapping_sub_unsigned","wrapping_sub_unsigned","wrapping_sub_unsigned","write","write","write_bytes","write_unaligned","write_volatile","writeln","AllocError","Allocator","GlobalAlloc","Layout","LayoutErr","LayoutError","align","align_to","alloc","alloc_zeroed","alloc_zeroed","allocate","allocate_zeroed","array","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone","clone","dangling","dealloc","deallocate","eq","eq","eq","extend","extend_packed","fmt","fmt","fmt","fmt","fmt","for_value","for_value_raw","from","from","from","from_size_align","from_size_align_unchecked","grow","grow_zeroed","hash","into","into","into","new","pad_to_align","padding_needed_for","realloc","realloc","repeat","repeat_packed","shrink","size","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Any","TypeId","borrow","borrow_mut","clone","cmp","downcast_mut","downcast_mut","downcast_mut","downcast_mut_unchecked","downcast_mut_unchecked","downcast_mut_unchecked","downcast_ref","downcast_ref","downcast_ref","downcast_ref_unchecked","downcast_ref_unchecked","downcast_ref_unchecked","eq","fmt","fmt","fmt","fmt","from","hash","into","is","is","is","of","partial_cmp","try_from","try_into","type_id","type_id","type_name","type_name_of_val","aarch64","arm","asm","global_asm","mips","mips64","nvptx","powerpc","powerpc64","riscv32","riscv64","wasm","wasm32","wasm64","x86","x86_64","SY","_PREFETCH_LOCALITY0","_PREFETCH_LOCALITY1","_PREFETCH_LOCALITY2","_PREFETCH_LOCALITY3","_PREFETCH_READ","_PREFETCH_WRITE","_TMFAILURE_CNCL","_TMFAILURE_DBG","_TMFAILURE_ERR","_TMFAILURE_IMP","_TMFAILURE_INT","_TMFAILURE_MEM","_TMFAILURE_NEST","_TMFAILURE_REASON","_TMFAILURE_RTRY","_TMFAILURE_SIZE","_TMFAILURE_TRIVIAL","_TMSTART_SUCCESS","__crc32b","__crc32cb","__crc32cd","__crc32ch","__crc32cw","__crc32d","__crc32h","__crc32w","__dmb","__dsb","__isb","__nop","__sev","__sevl","__tcancel","__tcommit","__tstart","__ttest","__wfe","__wfi","__yield","_prefetch","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","float32x2_t","float32x2x2_t","float32x2x3_t","float32x2x4_t","float32x4_t","float32x4x2_t","float32x4x3_t","float32x4x4_t","float64x1_t","float64x1x2_t","float64x1x3_t","float64x1x4_t","float64x2_t","float64x2x2_t","float64x2x3_t","float64x2x4_t","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","int16x4_t","int16x4x2_t","int16x4x3_t","int16x4x4_t","int16x8_t","int16x8x2_t","int16x8x3_t","int16x8x4_t","int32x2_t","int32x2x2_t","int32x2x3_t","int32x2x4_t","int32x4_t","int32x4x2_t","int32x4x3_t","int32x4x4_t","int64x1_t","int64x1x2_t","int64x1x3_t","int64x1x4_t","int64x2_t","int64x2x2_t","int64x2x3_t","int64x2x4_t","int8x16_t","int8x16x2_t","int8x16x3_t","int8x16x4_t","int8x8_t","int8x8x2_t","int8x8x3_t","int8x8x4_t","into","into","into","into","into","into","into","into","poly16x4_t","poly16x4x2_t","poly16x4x3_t","poly16x4x4_t","poly16x8_t","poly16x8x2_t","poly16x8x3_t","poly16x8x4_t","poly64x1_t","poly64x1x2_t","poly64x1x3_t","poly64x1x4_t","poly64x2_t","poly64x2x2_t","poly64x2x3_t","poly64x2x4_t","poly8x16_t","poly8x16x2_t","poly8x16x3_t","poly8x16x4_t","poly8x8_t","poly8x8x2_t","poly8x8x3_t","poly8x8x4_t","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint16x4_t","uint16x4x2_t","uint16x4x3_t","uint16x4x4_t","uint16x8_t","uint16x8x2_t","uint16x8x3_t","uint16x8x4_t","uint32x2_t","uint32x2x2_t","uint32x2x3_t","uint32x2x4_t","uint32x4_t","uint32x4x2_t","uint32x4x3_t","uint32x4x4_t","uint64x1_t","uint64x1x2_t","uint64x1x3_t","uint64x1x4_t","uint64x2_t","uint64x2x2_t","uint64x2x3_t","uint64x2x4_t","uint8x16_t","uint8x16x2_t","uint8x16x3_t","uint8x16x4_t","uint8x8_t","uint8x8x2_t","uint8x8x3_t","uint8x8x4_t","vaba_s16","vaba_s32","vaba_s8","vaba_u16","vaba_u32","vaba_u8","vabal_high_s16","vabal_high_s32","vabal_high_s8","vabal_high_u16","vabal_high_u32","vabal_high_u8","vabal_s16","vabal_s32","vabal_s8","vabal_u16","vabal_u32","vabal_u8","vabaq_s16","vabaq_s32","vabaq_s8","vabaq_u16","vabaq_u32","vabaq_u8","vabd_f32","vabd_f64","vabd_s16","vabd_s32","vabd_s8","vabd_u16","vabd_u32","vabd_u8","vabdd_f64","vabdl_high_s16","vabdl_high_s32","vabdl_high_s8","vabdl_high_u16","vabdl_high_u32","vabdl_high_u8","vabdl_s16","vabdl_s32","vabdl_s8","vabdl_u16","vabdl_u32","vabdl_u8","vabdq_f32","vabdq_f64","vabdq_s16","vabdq_s32","vabdq_s8","vabdq_u16","vabdq_u32","vabdq_u8","vabds_f32","vabs_f32","vabs_f64","vabs_s16","vabs_s32","vabs_s64","vabs_s8","vabsd_s64","vabsq_f32","vabsq_f64","vabsq_s16","vabsq_s32","vabsq_s64","vabsq_s8","vadd_f32","vadd_f64","vadd_p16","vadd_p64","vadd_p8","vadd_s16","vadd_s32","vadd_s64","vadd_s8","vadd_u16","vadd_u32","vadd_u64","vadd_u8","vaddd_s64","vaddd_u64","vaddhn_high_s16","vaddhn_high_s32","vaddhn_high_s64","vaddhn_high_u16","vaddhn_high_u32","vaddhn_high_u64","vaddhn_s16","vaddhn_s32","vaddhn_s64","vaddhn_u16","vaddhn_u32","vaddhn_u64","vaddl_high_s16","vaddl_high_s32","vaddl_high_s8","vaddl_high_u16","vaddl_high_u32","vaddl_high_u8","vaddl_s16","vaddl_s32","vaddl_s8","vaddl_u16","vaddl_u32","vaddl_u8","vaddlv_s16","vaddlv_s32","vaddlv_s8","vaddlv_u16","vaddlv_u32","vaddlv_u8","vaddlvq_s16","vaddlvq_s32","vaddlvq_s8","vaddlvq_u16","vaddlvq_u32","vaddlvq_u8","vaddq_f32","vaddq_f64","vaddq_p128","vaddq_p16","vaddq_p64","vaddq_p8","vaddq_s16","vaddq_s32","vaddq_s64","vaddq_s8","vaddq_u16","vaddq_u32","vaddq_u64","vaddq_u8","vaddv_f32","vaddv_s16","vaddv_s32","vaddv_s8","vaddv_u16","vaddv_u32","vaddv_u8","vaddvq_f32","vaddvq_f64","vaddvq_s16","vaddvq_s32","vaddvq_s64","vaddvq_s8","vaddvq_u16","vaddvq_u32","vaddvq_u64","vaddvq_u8","vaddw_high_s16","vaddw_high_s32","vaddw_high_s8","vaddw_high_u16","vaddw_high_u32","vaddw_high_u8","vaddw_s16","vaddw_s32","vaddw_s8","vaddw_u16","vaddw_u32","vaddw_u8","vaesdq_u8","vaeseq_u8","vaesimcq_u8","vaesmcq_u8","vand_s16","vand_s32","vand_s64","vand_s8","vand_u16","vand_u32","vand_u64","vand_u8","vandq_s16","vandq_s32","vandq_s64","vandq_s8","vandq_u16","vandq_u32","vandq_u64","vandq_u8","vbcaxq_s16","vbcaxq_s32","vbcaxq_s64","vbcaxq_s8","vbcaxq_u16","vbcaxq_u32","vbcaxq_u64","vbcaxq_u8","vbic_s16","vbic_s32","vbic_s64","vbic_s8","vbic_u16","vbic_u32","vbic_u64","vbic_u8","vbicq_s16","vbicq_s32","vbicq_s64","vbicq_s8","vbicq_u16","vbicq_u32","vbicq_u64","vbicq_u8","vbsl_f32","vbsl_f64","vbsl_p16","vbsl_p64","vbsl_p8","vbsl_s16","vbsl_s32","vbsl_s64","vbsl_s8","vbsl_u16","vbsl_u32","vbsl_u64","vbsl_u8","vbslq_f32","vbslq_f64","vbslq_p16","vbslq_p64","vbslq_p8","vbslq_s16","vbslq_s32","vbslq_s64","vbslq_s8","vbslq_u16","vbslq_u32","vbslq_u64","vbslq_u8","vcadd_rot270_f32","vcadd_rot90_f32","vcaddq_rot270_f32","vcaddq_rot270_f64","vcaddq_rot90_f32","vcaddq_rot90_f64","vcage_f32","vcage_f64","vcaged_f64","vcageq_f32","vcageq_f64","vcages_f32","vcagt_f32","vcagt_f64","vcagtd_f64","vcagtq_f32","vcagtq_f64","vcagts_f32","vcale_f32","vcale_f64","vcaled_f64","vcaleq_f32","vcaleq_f64","vcales_f32","vcalt_f32","vcalt_f64","vcaltd_f64","vcaltq_f32","vcaltq_f64","vcalts_f32","vceq_f32","vceq_f64","vceq_p64","vceq_p8","vceq_s16","vceq_s32","vceq_s64","vceq_s8","vceq_u16","vceq_u32","vceq_u64","vceq_u8","vceqd_f64","vceqd_s64","vceqd_u64","vceqq_f32","vceqq_f64","vceqq_p64","vceqq_p8","vceqq_s16","vceqq_s32","vceqq_s64","vceqq_s8","vceqq_u16","vceqq_u32","vceqq_u64","vceqq_u8","vceqs_f32","vceqz_f32","vceqz_f64","vceqz_p64","vceqz_p8","vceqz_s16","vceqz_s32","vceqz_s64","vceqz_s8","vceqz_u16","vceqz_u32","vceqz_u64","vceqz_u8","vceqzd_f64","vceqzd_s64","vceqzd_u64","vceqzq_f32","vceqzq_f64","vceqzq_p64","vceqzq_p8","vceqzq_s16","vceqzq_s32","vceqzq_s64","vceqzq_s8","vceqzq_u16","vceqzq_u32","vceqzq_u64","vceqzq_u8","vceqzs_f32","vcge_f32","vcge_f64","vcge_s16","vcge_s32","vcge_s64","vcge_s8","vcge_u16","vcge_u32","vcge_u64","vcge_u8","vcged_f64","vcged_s64","vcged_u64","vcgeq_f32","vcgeq_f64","vcgeq_s16","vcgeq_s32","vcgeq_s64","vcgeq_s8","vcgeq_u16","vcgeq_u32","vcgeq_u64","vcgeq_u8","vcges_f32","vcgez_f32","vcgez_f64","vcgez_s16","vcgez_s32","vcgez_s64","vcgez_s8","vcgezd_f64","vcgezd_s64","vcgezq_f32","vcgezq_f64","vcgezq_s16","vcgezq_s32","vcgezq_s64","vcgezq_s8","vcgezs_f32","vcgt_f32","vcgt_f64","vcgt_s16","vcgt_s32","vcgt_s64","vcgt_s8","vcgt_u16","vcgt_u32","vcgt_u64","vcgt_u8","vcgtd_f64","vcgtd_s64","vcgtd_u64","vcgtq_f32","vcgtq_f64","vcgtq_s16","vcgtq_s32","vcgtq_s64","vcgtq_s8","vcgtq_u16","vcgtq_u32","vcgtq_u64","vcgtq_u8","vcgts_f32","vcgtz_f32","vcgtz_f64","vcgtz_s16","vcgtz_s32","vcgtz_s64","vcgtz_s8","vcgtzd_f64","vcgtzd_s64","vcgtzq_f32","vcgtzq_f64","vcgtzq_s16","vcgtzq_s32","vcgtzq_s64","vcgtzq_s8","vcgtzs_f32","vcle_f32","vcle_f64","vcle_s16","vcle_s32","vcle_s64","vcle_s8","vcle_u16","vcle_u32","vcle_u64","vcle_u8","vcled_f64","vcled_s64","vcled_u64","vcleq_f32","vcleq_f64","vcleq_s16","vcleq_s32","vcleq_s64","vcleq_s8","vcleq_u16","vcleq_u32","vcleq_u64","vcleq_u8","vcles_f32","vclez_f32","vclez_f64","vclez_s16","vclez_s32","vclez_s64","vclez_s8","vclezd_f64","vclezd_s64","vclezq_f32","vclezq_f64","vclezq_s16","vclezq_s32","vclezq_s64","vclezq_s8","vclezs_f32","vcls_s16","vcls_s32","vcls_s8","vcls_u16","vcls_u32","vcls_u8","vclsq_s16","vclsq_s32","vclsq_s8","vclsq_u16","vclsq_u32","vclsq_u8","vclt_f32","vclt_f64","vclt_s16","vclt_s32","vclt_s64","vclt_s8","vclt_u16","vclt_u32","vclt_u64","vclt_u8","vcltd_f64","vcltd_s64","vcltd_u64","vcltq_f32","vcltq_f64","vcltq_s16","vcltq_s32","vcltq_s64","vcltq_s8","vcltq_u16","vcltq_u32","vcltq_u64","vcltq_u8","vclts_f32","vcltz_f32","vcltz_f64","vcltz_s16","vcltz_s32","vcltz_s64","vcltz_s8","vcltzd_f64","vcltzd_s64","vcltzq_f32","vcltzq_f64","vcltzq_s16","vcltzq_s32","vcltzq_s64","vcltzq_s8","vcltzs_f32","vclz_s16","vclz_s32","vclz_s8","vclz_u16","vclz_u32","vclz_u8","vclzq_s16","vclzq_s32","vclzq_s8","vclzq_u16","vclzq_u32","vclzq_u8","vcmla_f32","vcmla_lane_f32","vcmla_laneq_f32","vcmla_rot180_f32","vcmla_rot180_lane_f32","vcmla_rot180_laneq_f32","vcmla_rot270_f32","vcmla_rot270_lane_f32","vcmla_rot270_laneq_f32","vcmla_rot90_f32","vcmla_rot90_lane_f32","vcmla_rot90_laneq_f32","vcmlaq_f32","vcmlaq_f64","vcmlaq_lane_f32","vcmlaq_laneq_f32","vcmlaq_rot180_f32","vcmlaq_rot180_f64","vcmlaq_rot180_lane_f32","vcmlaq_rot180_laneq_f32","vcmlaq_rot270_f32","vcmlaq_rot270_f64","vcmlaq_rot270_lane_f32","vcmlaq_rot270_laneq_f32","vcmlaq_rot90_f32","vcmlaq_rot90_f64","vcmlaq_rot90_lane_f32","vcmlaq_rot90_laneq_f32","vcnt_p8","vcnt_s8","vcnt_u8","vcntq_p8","vcntq_s8","vcntq_u8","vcombine_f32","vcombine_f64","vcombine_p16","vcombine_p64","vcombine_p8","vcombine_s16","vcombine_s32","vcombine_s64","vcombine_s8","vcombine_u16","vcombine_u32","vcombine_u64","vcombine_u8","vcopy_lane_f32","vcopy_lane_f64","vcopy_lane_p16","vcopy_lane_p64","vcopy_lane_p8","vcopy_lane_s16","vcopy_lane_s32","vcopy_lane_s64","vcopy_lane_s8","vcopy_lane_u16","vcopy_lane_u32","vcopy_lane_u64","vcopy_lane_u8","vcopy_laneq_f32","vcopy_laneq_f64","vcopy_laneq_p16","vcopy_laneq_p64","vcopy_laneq_p8","vcopy_laneq_s16","vcopy_laneq_s32","vcopy_laneq_s64","vcopy_laneq_s8","vcopy_laneq_u16","vcopy_laneq_u32","vcopy_laneq_u64","vcopy_laneq_u8","vcopyq_lane_f32","vcopyq_lane_f64","vcopyq_lane_p16","vcopyq_lane_p64","vcopyq_lane_p8","vcopyq_lane_s16","vcopyq_lane_s32","vcopyq_lane_s64","vcopyq_lane_s8","vcopyq_lane_u16","vcopyq_lane_u32","vcopyq_lane_u64","vcopyq_lane_u8","vcopyq_laneq_f32","vcopyq_laneq_f64","vcopyq_laneq_p16","vcopyq_laneq_p64","vcopyq_laneq_p8","vcopyq_laneq_s16","vcopyq_laneq_s32","vcopyq_laneq_s64","vcopyq_laneq_s8","vcopyq_laneq_u16","vcopyq_laneq_u32","vcopyq_laneq_u64","vcopyq_laneq_u8","vcreate_f32","vcreate_f64","vcreate_p16","vcreate_p64","vcreate_p8","vcreate_s16","vcreate_s32","vcreate_s64","vcreate_s8","vcreate_u16","vcreate_u32","vcreate_u64","vcreate_u8","vcvt_f32_f64","vcvt_f32_s32","vcvt_f32_u32","vcvt_f64_f32","vcvt_f64_s64","vcvt_f64_u64","vcvt_high_f32_f64","vcvt_high_f64_f32","vcvt_n_f32_s32","vcvt_n_f32_u32","vcvt_n_f64_s64","vcvt_n_f64_u64","vcvt_n_s32_f32","vcvt_n_s64_f64","vcvt_n_u32_f32","vcvt_n_u64_f64","vcvt_s32_f32","vcvt_s64_f64","vcvt_u32_f32","vcvt_u64_f64","vcvta_s32_f32","vcvta_s64_f64","vcvta_u32_f32","vcvta_u64_f64","vcvtad_s64_f64","vcvtad_u64_f64","vcvtaq_s32_f32","vcvtaq_s64_f64","vcvtaq_u32_f32","vcvtaq_u64_f64","vcvtas_s32_f32","vcvtas_u32_f32","vcvtd_f64_s64","vcvtd_f64_u64","vcvtd_n_f64_s64","vcvtd_n_f64_u64","vcvtd_n_s64_f64","vcvtd_n_u64_f64","vcvtd_s64_f64","vcvtd_u64_f64","vcvtm_s32_f32","vcvtm_s64_f64","vcvtm_u32_f32","vcvtm_u64_f64","vcvtmd_s64_f64","vcvtmd_u64_f64","vcvtmq_s32_f32","vcvtmq_s64_f64","vcvtmq_u32_f32","vcvtmq_u64_f64","vcvtms_s32_f32","vcvtms_u32_f32","vcvtn_s32_f32","vcvtn_s64_f64","vcvtn_u32_f32","vcvtn_u64_f64","vcvtnd_s64_f64","vcvtnd_u64_f64","vcvtnq_s32_f32","vcvtnq_s64_f64","vcvtnq_u32_f32","vcvtnq_u64_f64","vcvtns_s32_f32","vcvtns_u32_f32","vcvtp_s32_f32","vcvtp_s64_f64","vcvtp_u32_f32","vcvtp_u64_f64","vcvtpd_s64_f64","vcvtpd_u64_f64","vcvtpq_s32_f32","vcvtpq_s64_f64","vcvtpq_u32_f32","vcvtpq_u64_f64","vcvtps_s32_f32","vcvtps_u32_f32","vcvtq_f32_s32","vcvtq_f32_u32","vcvtq_f64_s64","vcvtq_f64_u64","vcvtq_n_f32_s32","vcvtq_n_f32_u32","vcvtq_n_f64_s64","vcvtq_n_f64_u64","vcvtq_n_s32_f32","vcvtq_n_s64_f64","vcvtq_n_u32_f32","vcvtq_n_u64_f64","vcvtq_s32_f32","vcvtq_s64_f64","vcvtq_u32_f32","vcvtq_u64_f64","vcvts_f32_s32","vcvts_f32_u32","vcvts_n_f32_s32","vcvts_n_f32_u32","vcvts_n_s32_f32","vcvts_n_u32_f32","vcvts_s32_f32","vcvts_u32_f32","vcvtx_f32_f64","vcvtx_high_f32_f64","vcvtxd_f32_f64","vdiv_f32","vdiv_f64","vdivq_f32","vdivq_f64","vdot_lane_s32","vdot_lane_u32","vdot_laneq_s32","vdot_laneq_u32","vdot_s32","vdot_u32","vdotq_lane_s32","vdotq_lane_u32","vdotq_laneq_s32","vdotq_laneq_u32","vdotq_s32","vdotq_u32","vdup_lane_f32","vdup_lane_f64","vdup_lane_p16","vdup_lane_p64","vdup_lane_p8","vdup_lane_s16","vdup_lane_s32","vdup_lane_s64","vdup_lane_s8","vdup_lane_u16","vdup_lane_u32","vdup_lane_u64","vdup_lane_u8","vdup_laneq_f32","vdup_laneq_f64","vdup_laneq_p16","vdup_laneq_p64","vdup_laneq_p8","vdup_laneq_s16","vdup_laneq_s32","vdup_laneq_s64","vdup_laneq_s8","vdup_laneq_u16","vdup_laneq_u32","vdup_laneq_u64","vdup_laneq_u8","vdup_n_f32","vdup_n_f64","vdup_n_p16","vdup_n_p64","vdup_n_p8","vdup_n_s16","vdup_n_s32","vdup_n_s64","vdup_n_s8","vdup_n_u16","vdup_n_u32","vdup_n_u64","vdup_n_u8","vdupb_lane_p8","vdupb_lane_s8","vdupb_lane_u8","vdupb_laneq_p8","vdupb_laneq_s8","vdupb_laneq_u8","vdupd_lane_f64","vdupd_lane_s64","vdupd_lane_u64","vdupd_laneq_f64","vdupd_laneq_s64","vdupd_laneq_u64","vduph_lane_p16","vduph_lane_s16","vduph_lane_u16","vduph_laneq_p16","vduph_laneq_s16","vduph_laneq_u16","vdupq_lane_f32","vdupq_lane_f64","vdupq_lane_p16","vdupq_lane_p64","vdupq_lane_p8","vdupq_lane_s16","vdupq_lane_s32","vdupq_lane_s64","vdupq_lane_s8","vdupq_lane_u16","vdupq_lane_u32","vdupq_lane_u64","vdupq_lane_u8","vdupq_laneq_f32","vdupq_laneq_f64","vdupq_laneq_p16","vdupq_laneq_p64","vdupq_laneq_p8","vdupq_laneq_s16","vdupq_laneq_s32","vdupq_laneq_s64","vdupq_laneq_s8","vdupq_laneq_u16","vdupq_laneq_u32","vdupq_laneq_u64","vdupq_laneq_u8","vdupq_n_f32","vdupq_n_f64","vdupq_n_p16","vdupq_n_p64","vdupq_n_p8","vdupq_n_s16","vdupq_n_s32","vdupq_n_s64","vdupq_n_s8","vdupq_n_u16","vdupq_n_u32","vdupq_n_u64","vdupq_n_u8","vdups_lane_f32","vdups_lane_s32","vdups_lane_u32","vdups_laneq_f32","vdups_laneq_s32","vdups_laneq_u32","veor3q_s16","veor3q_s32","veor3q_s64","veor3q_s8","veor3q_u16","veor3q_u32","veor3q_u64","veor3q_u8","veor_s16","veor_s32","veor_s64","veor_s8","veor_u16","veor_u32","veor_u64","veor_u8","veorq_s16","veorq_s32","veorq_s64","veorq_s8","veorq_u16","veorq_u32","veorq_u64","veorq_u8","vext_f32","vext_f64","vext_p16","vext_p64","vext_p8","vext_s16","vext_s32","vext_s64","vext_s8","vext_u16","vext_u32","vext_u64","vext_u8","vextq_f32","vextq_f64","vextq_p16","vextq_p64","vextq_p8","vextq_s16","vextq_s32","vextq_s64","vextq_s8","vextq_u16","vextq_u32","vextq_u64","vextq_u8","vfma_f32","vfma_f64","vfma_lane_f32","vfma_lane_f64","vfma_laneq_f32","vfma_laneq_f64","vfma_n_f32","vfma_n_f64","vfmad_lane_f64","vfmad_laneq_f64","vfmaq_f32","vfmaq_f64","vfmaq_lane_f32","vfmaq_lane_f64","vfmaq_laneq_f32","vfmaq_laneq_f64","vfmaq_n_f32","vfmaq_n_f64","vfmas_lane_f32","vfmas_laneq_f32","vfms_f32","vfms_f64","vfms_lane_f32","vfms_lane_f64","vfms_laneq_f32","vfms_laneq_f64","vfms_n_f32","vfms_n_f64","vfmsd_lane_f64","vfmsd_laneq_f64","vfmsq_f32","vfmsq_f64","vfmsq_lane_f32","vfmsq_lane_f64","vfmsq_laneq_f32","vfmsq_laneq_f64","vfmsq_n_f32","vfmsq_n_f64","vfmss_lane_f32","vfmss_laneq_f32","vget_high_f32","vget_high_f64","vget_high_p16","vget_high_p64","vget_high_p8","vget_high_s16","vget_high_s32","vget_high_s64","vget_high_s8","vget_high_u16","vget_high_u32","vget_high_u64","vget_high_u8","vget_lane_f32","vget_lane_f64","vget_lane_p16","vget_lane_p64","vget_lane_p8","vget_lane_s16","vget_lane_s32","vget_lane_s64","vget_lane_s8","vget_lane_u16","vget_lane_u32","vget_lane_u64","vget_lane_u8","vget_low_f32","vget_low_f64","vget_low_p16","vget_low_p64","vget_low_p8","vget_low_s16","vget_low_s32","vget_low_s64","vget_low_s8","vget_low_u16","vget_low_u32","vget_low_u64","vget_low_u8","vgetq_lane_f32","vgetq_lane_f64","vgetq_lane_p16","vgetq_lane_p64","vgetq_lane_p8","vgetq_lane_s16","vgetq_lane_s32","vgetq_lane_s64","vgetq_lane_s8","vgetq_lane_u16","vgetq_lane_u32","vgetq_lane_u64","vgetq_lane_u8","vhadd_s16","vhadd_s32","vhadd_s8","vhadd_u16","vhadd_u32","vhadd_u8","vhaddq_s16","vhaddq_s32","vhaddq_s8","vhaddq_u16","vhaddq_u32","vhaddq_u8","vhsub_s16","vhsub_s32","vhsub_s8","vhsub_u16","vhsub_u32","vhsub_u8","vhsubq_s16","vhsubq_s32","vhsubq_s8","vhsubq_u16","vhsubq_u32","vhsubq_u8","vld1_dup_f32","vld1_dup_f64","vld1_dup_p16","vld1_dup_p64","vld1_dup_p8","vld1_dup_s16","vld1_dup_s32","vld1_dup_s64","vld1_dup_s8","vld1_dup_u16","vld1_dup_u32","vld1_dup_u64","vld1_dup_u8","vld1_f32","vld1_f32_x2","vld1_f32_x3","vld1_f32_x4","vld1_f64","vld1_f64_x2","vld1_f64_x3","vld1_f64_x4","vld1_lane_f32","vld1_lane_f64","vld1_lane_p16","vld1_lane_p64","vld1_lane_p8","vld1_lane_s16","vld1_lane_s32","vld1_lane_s64","vld1_lane_s8","vld1_lane_u16","vld1_lane_u32","vld1_lane_u64","vld1_lane_u8","vld1_p16","vld1_p16_x2","vld1_p16_x3","vld1_p16_x4","vld1_p64","vld1_p64_x2","vld1_p64_x3","vld1_p64_x4","vld1_p8","vld1_p8_x2","vld1_p8_x3","vld1_p8_x4","vld1_s16","vld1_s16_x2","vld1_s16_x3","vld1_s16_x4","vld1_s32","vld1_s32_x2","vld1_s32_x3","vld1_s32_x4","vld1_s64","vld1_s64_x2","vld1_s64_x3","vld1_s64_x4","vld1_s8","vld1_s8_x2","vld1_s8_x3","vld1_s8_x4","vld1_u16","vld1_u16_x2","vld1_u16_x3","vld1_u16_x4","vld1_u32","vld1_u32_x2","vld1_u32_x3","vld1_u32_x4","vld1_u64","vld1_u64_x2","vld1_u64_x3","vld1_u64_x4","vld1_u8","vld1_u8_x2","vld1_u8_x3","vld1_u8_x4","vld1q_dup_f32","vld1q_dup_f64","vld1q_dup_p16","vld1q_dup_p64","vld1q_dup_p8","vld1q_dup_s16","vld1q_dup_s32","vld1q_dup_s64","vld1q_dup_s8","vld1q_dup_u16","vld1q_dup_u32","vld1q_dup_u64","vld1q_dup_u8","vld1q_f32","vld1q_f32_x2","vld1q_f32_x3","vld1q_f32_x4","vld1q_f64","vld1q_f64_x2","vld1q_f64_x3","vld1q_f64_x4","vld1q_lane_f32","vld1q_lane_f64","vld1q_lane_p16","vld1q_lane_p64","vld1q_lane_p8","vld1q_lane_s16","vld1q_lane_s32","vld1q_lane_s64","vld1q_lane_s8","vld1q_lane_u16","vld1q_lane_u32","vld1q_lane_u64","vld1q_lane_u8","vld1q_p16","vld1q_p16_x2","vld1q_p16_x3","vld1q_p16_x4","vld1q_p64","vld1q_p64_x2","vld1q_p64_x3","vld1q_p64_x4","vld1q_p8","vld1q_p8_x2","vld1q_p8_x3","vld1q_p8_x4","vld1q_s16","vld1q_s16_x2","vld1q_s16_x3","vld1q_s16_x4","vld1q_s32","vld1q_s32_x2","vld1q_s32_x3","vld1q_s32_x4","vld1q_s64","vld1q_s64_x2","vld1q_s64_x3","vld1q_s64_x4","vld1q_s8","vld1q_s8_x2","vld1q_s8_x3","vld1q_s8_x4","vld1q_u16","vld1q_u16_x2","vld1q_u16_x3","vld1q_u16_x4","vld1q_u32","vld1q_u32_x2","vld1q_u32_x3","vld1q_u32_x4","vld1q_u64","vld1q_u64_x2","vld1q_u64_x3","vld1q_u64_x4","vld1q_u8","vld1q_u8_x2","vld1q_u8_x3","vld1q_u8_x4","vld2_dup_f32","vld2_dup_f64","vld2_dup_p16","vld2_dup_p64","vld2_dup_p8","vld2_dup_s16","vld2_dup_s32","vld2_dup_s64","vld2_dup_s8","vld2_dup_u16","vld2_dup_u32","vld2_dup_u64","vld2_dup_u8","vld2_f32","vld2_f64","vld2_lane_f32","vld2_lane_f64","vld2_lane_p16","vld2_lane_p64","vld2_lane_p8","vld2_lane_s16","vld2_lane_s32","vld2_lane_s64","vld2_lane_s8","vld2_lane_u16","vld2_lane_u32","vld2_lane_u64","vld2_lane_u8","vld2_p16","vld2_p64","vld2_p8","vld2_s16","vld2_s32","vld2_s64","vld2_s8","vld2_u16","vld2_u32","vld2_u64","vld2_u8","vld2q_dup_f32","vld2q_dup_f64","vld2q_dup_p16","vld2q_dup_p64","vld2q_dup_p8","vld2q_dup_s16","vld2q_dup_s32","vld2q_dup_s64","vld2q_dup_s8","vld2q_dup_u16","vld2q_dup_u32","vld2q_dup_u64","vld2q_dup_u8","vld2q_f32","vld2q_f64","vld2q_lane_f32","vld2q_lane_f64","vld2q_lane_p16","vld2q_lane_p64","vld2q_lane_p8","vld2q_lane_s16","vld2q_lane_s32","vld2q_lane_s64","vld2q_lane_s8","vld2q_lane_u16","vld2q_lane_u32","vld2q_lane_u64","vld2q_lane_u8","vld2q_p16","vld2q_p64","vld2q_p8","vld2q_s16","vld2q_s32","vld2q_s64","vld2q_s8","vld2q_u16","vld2q_u32","vld2q_u64","vld2q_u8","vld3_dup_f32","vld3_dup_f64","vld3_dup_p16","vld3_dup_p64","vld3_dup_p8","vld3_dup_s16","vld3_dup_s32","vld3_dup_s64","vld3_dup_s8","vld3_dup_u16","vld3_dup_u32","vld3_dup_u64","vld3_dup_u8","vld3_f32","vld3_f64","vld3_lane_f32","vld3_lane_f64","vld3_lane_p16","vld3_lane_p64","vld3_lane_p8","vld3_lane_s16","vld3_lane_s32","vld3_lane_s64","vld3_lane_s8","vld3_lane_u16","vld3_lane_u32","vld3_lane_u64","vld3_lane_u8","vld3_p16","vld3_p64","vld3_p8","vld3_s16","vld3_s32","vld3_s64","vld3_s8","vld3_u16","vld3_u32","vld3_u64","vld3_u8","vld3q_dup_f32","vld3q_dup_f64","vld3q_dup_p16","vld3q_dup_p64","vld3q_dup_p8","vld3q_dup_s16","vld3q_dup_s32","vld3q_dup_s64","vld3q_dup_s8","vld3q_dup_u16","vld3q_dup_u32","vld3q_dup_u64","vld3q_dup_u8","vld3q_f32","vld3q_f64","vld3q_lane_f32","vld3q_lane_f64","vld3q_lane_p16","vld3q_lane_p64","vld3q_lane_p8","vld3q_lane_s16","vld3q_lane_s32","vld3q_lane_s64","vld3q_lane_s8","vld3q_lane_u16","vld3q_lane_u32","vld3q_lane_u64","vld3q_lane_u8","vld3q_p16","vld3q_p64","vld3q_p8","vld3q_s16","vld3q_s32","vld3q_s64","vld3q_s8","vld3q_u16","vld3q_u32","vld3q_u64","vld3q_u8","vld4_dup_f32","vld4_dup_f64","vld4_dup_p16","vld4_dup_p64","vld4_dup_p8","vld4_dup_s16","vld4_dup_s32","vld4_dup_s64","vld4_dup_s8","vld4_dup_u16","vld4_dup_u32","vld4_dup_u64","vld4_dup_u8","vld4_f32","vld4_f64","vld4_lane_f32","vld4_lane_f64","vld4_lane_p16","vld4_lane_p64","vld4_lane_p8","vld4_lane_s16","vld4_lane_s32","vld4_lane_s64","vld4_lane_s8","vld4_lane_u16","vld4_lane_u32","vld4_lane_u64","vld4_lane_u8","vld4_p16","vld4_p64","vld4_p8","vld4_s16","vld4_s32","vld4_s64","vld4_s8","vld4_u16","vld4_u32","vld4_u64","vld4_u8","vld4q_dup_f32","vld4q_dup_f64","vld4q_dup_p16","vld4q_dup_p64","vld4q_dup_p8","vld4q_dup_s16","vld4q_dup_s32","vld4q_dup_s64","vld4q_dup_s8","vld4q_dup_u16","vld4q_dup_u32","vld4q_dup_u64","vld4q_dup_u8","vld4q_f32","vld4q_f64","vld4q_lane_f32","vld4q_lane_f64","vld4q_lane_p16","vld4q_lane_p64","vld4q_lane_p8","vld4q_lane_s16","vld4q_lane_s32","vld4q_lane_s64","vld4q_lane_s8","vld4q_lane_u16","vld4q_lane_u32","vld4q_lane_u64","vld4q_lane_u8","vld4q_p16","vld4q_p64","vld4q_p8","vld4q_s16","vld4q_s32","vld4q_s64","vld4q_s8","vld4q_u16","vld4q_u32","vld4q_u64","vld4q_u8","vldrq_p128","vmax_f32","vmax_f64","vmax_s16","vmax_s32","vmax_s8","vmax_u16","vmax_u32","vmax_u8","vmaxnm_f32","vmaxnm_f64","vmaxnmq_f32","vmaxnmq_f64","vmaxnmv_f32","vmaxnmvq_f32","vmaxnmvq_f64","vmaxq_f32","vmaxq_f64","vmaxq_s16","vmaxq_s32","vmaxq_s8","vmaxq_u16","vmaxq_u32","vmaxq_u8","vmaxv_f32","vmaxv_s16","vmaxv_s32","vmaxv_s8","vmaxv_u16","vmaxv_u32","vmaxv_u8","vmaxvq_f32","vmaxvq_f64","vmaxvq_s16","vmaxvq_s32","vmaxvq_s8","vmaxvq_u16","vmaxvq_u32","vmaxvq_u8","vmin_f32","vmin_f64","vmin_s16","vmin_s32","vmin_s8","vmin_u16","vmin_u32","vmin_u8","vminnm_f32","vminnm_f64","vminnmq_f32","vminnmq_f64","vminnmv_f32","vminnmvq_f32","vminnmvq_f64","vminq_f32","vminq_f64","vminq_s16","vminq_s32","vminq_s8","vminq_u16","vminq_u32","vminq_u8","vminv_f32","vminv_s16","vminv_s32","vminv_s8","vminv_u16","vminv_u32","vminv_u8","vminvq_f32","vminvq_f64","vminvq_s16","vminvq_s32","vminvq_s8","vminvq_u16","vminvq_u32","vminvq_u8","vmla_f32","vmla_f64","vmla_lane_f32","vmla_lane_s16","vmla_lane_s32","vmla_lane_u16","vmla_lane_u32","vmla_laneq_f32","vmla_laneq_s16","vmla_laneq_s32","vmla_laneq_u16","vmla_laneq_u32","vmla_n_f32","vmla_n_s16","vmla_n_s32","vmla_n_u16","vmla_n_u32","vmla_s16","vmla_s32","vmla_s8","vmla_u16","vmla_u32","vmla_u8","vmlal_high_lane_s16","vmlal_high_lane_s32","vmlal_high_lane_u16","vmlal_high_lane_u32","vmlal_high_laneq_s16","vmlal_high_laneq_s32","vmlal_high_laneq_u16","vmlal_high_laneq_u32","vmlal_high_n_s16","vmlal_high_n_s32","vmlal_high_n_u16","vmlal_high_n_u32","vmlal_high_s16","vmlal_high_s32","vmlal_high_s8","vmlal_high_u16","vmlal_high_u32","vmlal_high_u8","vmlal_lane_s16","vmlal_lane_s32","vmlal_lane_u16","vmlal_lane_u32","vmlal_laneq_s16","vmlal_laneq_s32","vmlal_laneq_u16","vmlal_laneq_u32","vmlal_n_s16","vmlal_n_s32","vmlal_n_u16","vmlal_n_u32","vmlal_s16","vmlal_s32","vmlal_s8","vmlal_u16","vmlal_u32","vmlal_u8","vmlaq_f32","vmlaq_f64","vmlaq_lane_f32","vmlaq_lane_s16","vmlaq_lane_s32","vmlaq_lane_u16","vmlaq_lane_u32","vmlaq_laneq_f32","vmlaq_laneq_s16","vmlaq_laneq_s32","vmlaq_laneq_u16","vmlaq_laneq_u32","vmlaq_n_f32","vmlaq_n_s16","vmlaq_n_s32","vmlaq_n_u16","vmlaq_n_u32","vmlaq_s16","vmlaq_s32","vmlaq_s8","vmlaq_u16","vmlaq_u32","vmlaq_u8","vmls_f32","vmls_f64","vmls_lane_f32","vmls_lane_s16","vmls_lane_s32","vmls_lane_u16","vmls_lane_u32","vmls_laneq_f32","vmls_laneq_s16","vmls_laneq_s32","vmls_laneq_u16","vmls_laneq_u32","vmls_n_f32","vmls_n_s16","vmls_n_s32","vmls_n_u16","vmls_n_u32","vmls_s16","vmls_s32","vmls_s8","vmls_u16","vmls_u32","vmls_u8","vmlsl_high_lane_s16","vmlsl_high_lane_s32","vmlsl_high_lane_u16","vmlsl_high_lane_u32","vmlsl_high_laneq_s16","vmlsl_high_laneq_s32","vmlsl_high_laneq_u16","vmlsl_high_laneq_u32","vmlsl_high_n_s16","vmlsl_high_n_s32","vmlsl_high_n_u16","vmlsl_high_n_u32","vmlsl_high_s16","vmlsl_high_s32","vmlsl_high_s8","vmlsl_high_u16","vmlsl_high_u32","vmlsl_high_u8","vmlsl_lane_s16","vmlsl_lane_s32","vmlsl_lane_u16","vmlsl_lane_u32","vmlsl_laneq_s16","vmlsl_laneq_s32","vmlsl_laneq_u16","vmlsl_laneq_u32","vmlsl_n_s16","vmlsl_n_s32","vmlsl_n_u16","vmlsl_n_u32","vmlsl_s16","vmlsl_s32","vmlsl_s8","vmlsl_u16","vmlsl_u32","vmlsl_u8","vmlsq_f32","vmlsq_f64","vmlsq_lane_f32","vmlsq_lane_s16","vmlsq_lane_s32","vmlsq_lane_u16","vmlsq_lane_u32","vmlsq_laneq_f32","vmlsq_laneq_s16","vmlsq_laneq_s32","vmlsq_laneq_u16","vmlsq_laneq_u32","vmlsq_n_f32","vmlsq_n_s16","vmlsq_n_s32","vmlsq_n_u16","vmlsq_n_u32","vmlsq_s16","vmlsq_s32","vmlsq_s8","vmlsq_u16","vmlsq_u32","vmlsq_u8","vmmlaq_s32","vmmlaq_u32","vmov_n_f32","vmov_n_f64","vmov_n_p16","vmov_n_p64","vmov_n_p8","vmov_n_s16","vmov_n_s32","vmov_n_s64","vmov_n_s8","vmov_n_u16","vmov_n_u32","vmov_n_u64","vmov_n_u8","vmovl_high_s16","vmovl_high_s32","vmovl_high_s8","vmovl_high_u16","vmovl_high_u32","vmovl_high_u8","vmovl_s16","vmovl_s32","vmovl_s8","vmovl_u16","vmovl_u32","vmovl_u8","vmovn_high_s16","vmovn_high_s32","vmovn_high_s64","vmovn_high_u16","vmovn_high_u32","vmovn_high_u64","vmovn_s16","vmovn_s32","vmovn_s64","vmovn_u16","vmovn_u32","vmovn_u64","vmovq_n_f32","vmovq_n_f64","vmovq_n_p16","vmovq_n_p64","vmovq_n_p8","vmovq_n_s16","vmovq_n_s32","vmovq_n_s64","vmovq_n_s8","vmovq_n_u16","vmovq_n_u32","vmovq_n_u64","vmovq_n_u8","vmul_f32","vmul_f64","vmul_lane_f32","vmul_lane_f64","vmul_lane_s16","vmul_lane_s32","vmul_lane_u16","vmul_lane_u32","vmul_laneq_f32","vmul_laneq_f64","vmul_laneq_s16","vmul_laneq_s32","vmul_laneq_u16","vmul_laneq_u32","vmul_n_f32","vmul_n_f64","vmul_n_s16","vmul_n_s32","vmul_n_u16","vmul_n_u32","vmul_p8","vmul_s16","vmul_s32","vmul_s8","vmul_u16","vmul_u32","vmul_u8","vmuld_lane_f64","vmuld_laneq_f64","vmull_high_lane_s16","vmull_high_lane_s32","vmull_high_lane_u16","vmull_high_lane_u32","vmull_high_laneq_s16","vmull_high_laneq_s32","vmull_high_laneq_u16","vmull_high_laneq_u32","vmull_high_n_s16","vmull_high_n_s32","vmull_high_n_u16","vmull_high_n_u32","vmull_high_p64","vmull_high_p8","vmull_high_s16","vmull_high_s32","vmull_high_s8","vmull_high_u16","vmull_high_u32","vmull_high_u8","vmull_lane_s16","vmull_lane_s32","vmull_lane_u16","vmull_lane_u32","vmull_laneq_s16","vmull_laneq_s32","vmull_laneq_u16","vmull_laneq_u32","vmull_n_s16","vmull_n_s32","vmull_n_u16","vmull_n_u32","vmull_p64","vmull_p8","vmull_s16","vmull_s32","vmull_s8","vmull_u16","vmull_u32","vmull_u8","vmulq_f32","vmulq_f64","vmulq_lane_f32","vmulq_lane_f64","vmulq_lane_s16","vmulq_lane_s32","vmulq_lane_u16","vmulq_lane_u32","vmulq_laneq_f32","vmulq_laneq_f64","vmulq_laneq_s16","vmulq_laneq_s32","vmulq_laneq_u16","vmulq_laneq_u32","vmulq_n_f32","vmulq_n_f64","vmulq_n_s16","vmulq_n_s32","vmulq_n_u16","vmulq_n_u32","vmulq_p8","vmulq_s16","vmulq_s32","vmulq_s8","vmulq_u16","vmulq_u32","vmulq_u8","vmuls_lane_f32","vmuls_laneq_f32","vmulx_f32","vmulx_f64","vmulx_lane_f32","vmulx_lane_f64","vmulx_laneq_f32","vmulx_laneq_f64","vmulxd_f64","vmulxd_lane_f64","vmulxd_laneq_f64","vmulxq_f32","vmulxq_f64","vmulxq_lane_f32","vmulxq_lane_f64","vmulxq_laneq_f32","vmulxq_laneq_f64","vmulxs_f32","vmulxs_lane_f32","vmulxs_laneq_f32","vmvn_p8","vmvn_s16","vmvn_s32","vmvn_s8","vmvn_u16","vmvn_u32","vmvn_u8","vmvnq_p8","vmvnq_s16","vmvnq_s32","vmvnq_s8","vmvnq_u16","vmvnq_u32","vmvnq_u8","vneg_f32","vneg_f64","vneg_s16","vneg_s32","vneg_s64","vneg_s8","vnegd_s64","vnegq_f32","vnegq_f64","vnegq_s16","vnegq_s32","vnegq_s64","vnegq_s8","vorn_s16","vorn_s32","vorn_s64","vorn_s8","vorn_u16","vorn_u32","vorn_u64","vorn_u8","vornq_s16","vornq_s32","vornq_s64","vornq_s8","vornq_u16","vornq_u32","vornq_u64","vornq_u8","vorr_s16","vorr_s32","vorr_s64","vorr_s8","vorr_u16","vorr_u32","vorr_u64","vorr_u8","vorrq_s16","vorrq_s32","vorrq_s64","vorrq_s8","vorrq_u16","vorrq_u32","vorrq_u64","vorrq_u8","vpadal_s16","vpadal_s32","vpadal_s8","vpadal_u16","vpadal_u32","vpadal_u8","vpadalq_s16","vpadalq_s32","vpadalq_s8","vpadalq_u16","vpadalq_u32","vpadalq_u8","vpadd_f32","vpadd_s16","vpadd_s32","vpadd_s8","vpadd_u16","vpadd_u32","vpadd_u8","vpaddd_f64","vpaddd_s64","vpaddd_u64","vpaddl_s16","vpaddl_s32","vpaddl_s8","vpaddl_u16","vpaddl_u32","vpaddl_u8","vpaddlq_s16","vpaddlq_s32","vpaddlq_s8","vpaddlq_u16","vpaddlq_u32","vpaddlq_u8","vpaddq_f32","vpaddq_f64","vpaddq_s16","vpaddq_s32","vpaddq_s64","vpaddq_s8","vpaddq_u16","vpaddq_u32","vpaddq_u64","vpaddq_u8","vpadds_f32","vpmax_f32","vpmax_s16","vpmax_s32","vpmax_s8","vpmax_u16","vpmax_u32","vpmax_u8","vpmaxnm_f32","vpmaxnmq_f32","vpmaxnmq_f64","vpmaxnmqd_f64","vpmaxnms_f32","vpmaxq_f32","vpmaxq_f64","vpmaxq_s16","vpmaxq_s32","vpmaxq_s8","vpmaxq_u16","vpmaxq_u32","vpmaxq_u8","vpmaxqd_f64","vpmaxs_f32","vpmin_f32","vpmin_s16","vpmin_s32","vpmin_s8","vpmin_u16","vpmin_u32","vpmin_u8","vpminnm_f32","vpminnmq_f32","vpminnmq_f64","vpminnmqd_f64","vpminnms_f32","vpminq_f32","vpminq_f64","vpminq_s16","vpminq_s32","vpminq_s8","vpminq_u16","vpminq_u32","vpminq_u8","vpminqd_f64","vpmins_f32","vqabs_s16","vqabs_s32","vqabs_s64","vqabs_s8","vqabsb_s8","vqabsd_s64","vqabsh_s16","vqabsq_s16","vqabsq_s32","vqabsq_s64","vqabsq_s8","vqabss_s32","vqadd_s16","vqadd_s32","vqadd_s64","vqadd_s8","vqadd_u16","vqadd_u32","vqadd_u64","vqadd_u8","vqaddb_s8","vqaddb_u8","vqaddd_s64","vqaddd_u64","vqaddh_s16","vqaddh_u16","vqaddq_s16","vqaddq_s32","vqaddq_s64","vqaddq_s8","vqaddq_u16","vqaddq_u32","vqaddq_u64","vqaddq_u8","vqadds_s32","vqadds_u32","vqdmlal_high_lane_s16","vqdmlal_high_lane_s32","vqdmlal_high_laneq_s16","vqdmlal_high_laneq_s32","vqdmlal_high_n_s16","vqdmlal_high_n_s32","vqdmlal_high_s16","vqdmlal_high_s32","vqdmlal_lane_s16","vqdmlal_lane_s32","vqdmlal_laneq_s16","vqdmlal_laneq_s32","vqdmlal_n_s16","vqdmlal_n_s32","vqdmlal_s16","vqdmlal_s32","vqdmlalh_lane_s16","vqdmlalh_laneq_s16","vqdmlalh_s16","vqdmlals_lane_s32","vqdmlals_laneq_s32","vqdmlals_s32","vqdmlsl_high_lane_s16","vqdmlsl_high_lane_s32","vqdmlsl_high_laneq_s16","vqdmlsl_high_laneq_s32","vqdmlsl_high_n_s16","vqdmlsl_high_n_s32","vqdmlsl_high_s16","vqdmlsl_high_s32","vqdmlsl_lane_s16","vqdmlsl_lane_s32","vqdmlsl_laneq_s16","vqdmlsl_laneq_s32","vqdmlsl_n_s16","vqdmlsl_n_s32","vqdmlsl_s16","vqdmlsl_s32","vqdmlslh_lane_s16","vqdmlslh_laneq_s16","vqdmlslh_s16","vqdmlsls_lane_s32","vqdmlsls_laneq_s32","vqdmlsls_s32","vqdmulh_lane_s16","vqdmulh_lane_s32","vqdmulh_laneq_s16","vqdmulh_laneq_s32","vqdmulh_n_s16","vqdmulh_n_s32","vqdmulh_s16","vqdmulh_s32","vqdmulhh_lane_s16","vqdmulhh_laneq_s16","vqdmulhh_s16","vqdmulhq_lane_s16","vqdmulhq_lane_s32","vqdmulhq_laneq_s16","vqdmulhq_laneq_s32","vqdmulhq_n_s16","vqdmulhq_n_s32","vqdmulhq_s16","vqdmulhq_s32","vqdmulhs_lane_s32","vqdmulhs_laneq_s32","vqdmulhs_s32","vqdmull_high_lane_s16","vqdmull_high_lane_s32","vqdmull_high_laneq_s16","vqdmull_high_laneq_s32","vqdmull_high_n_s16","vqdmull_high_n_s32","vqdmull_high_s16","vqdmull_high_s32","vqdmull_lane_s16","vqdmull_lane_s32","vqdmull_laneq_s16","vqdmull_laneq_s32","vqdmull_n_s16","vqdmull_n_s32","vqdmull_s16","vqdmull_s32","vqdmullh_lane_s16","vqdmullh_laneq_s16","vqdmullh_s16","vqdmulls_lane_s32","vqdmulls_laneq_s32","vqdmulls_s32","vqmovn_high_s16","vqmovn_high_s32","vqmovn_high_s64","vqmovn_high_u16","vqmovn_high_u32","vqmovn_high_u64","vqmovn_s16","vqmovn_s32","vqmovn_s64","vqmovn_u16","vqmovn_u32","vqmovn_u64","vqmovnd_s64","vqmovnd_u64","vqmovnh_s16","vqmovnh_u16","vqmovns_s32","vqmovns_u32","vqmovun_high_s16","vqmovun_high_s32","vqmovun_high_s64","vqmovun_s16","vqmovun_s32","vqmovun_s64","vqmovund_s64","vqmovunh_s16","vqmovuns_s32","vqneg_s16","vqneg_s32","vqneg_s64","vqneg_s8","vqnegb_s8","vqnegd_s64","vqnegh_s16","vqnegq_s16","vqnegq_s32","vqnegq_s64","vqnegq_s8","vqnegs_s32","vqrdmlah_lane_s16","vqrdmlah_lane_s32","vqrdmlah_laneq_s16","vqrdmlah_laneq_s32","vqrdmlah_s16","vqrdmlah_s32","vqrdmlahh_lane_s16","vqrdmlahh_laneq_s16","vqrdmlahh_s16","vqrdmlahq_lane_s16","vqrdmlahq_lane_s32","vqrdmlahq_laneq_s16","vqrdmlahq_laneq_s32","vqrdmlahq_s16","vqrdmlahq_s32","vqrdmlahs_lane_s32","vqrdmlahs_laneq_s32","vqrdmlahs_s32","vqrdmlsh_lane_s16","vqrdmlsh_lane_s32","vqrdmlsh_laneq_s16","vqrdmlsh_laneq_s32","vqrdmlsh_s16","vqrdmlsh_s32","vqrdmlshh_lane_s16","vqrdmlshh_laneq_s16","vqrdmlshh_s16","vqrdmlshq_lane_s16","vqrdmlshq_lane_s32","vqrdmlshq_laneq_s16","vqrdmlshq_laneq_s32","vqrdmlshq_s16","vqrdmlshq_s32","vqrdmlshs_lane_s32","vqrdmlshs_laneq_s32","vqrdmlshs_s32","vqrdmulh_lane_s16","vqrdmulh_lane_s32","vqrdmulh_laneq_s16","vqrdmulh_laneq_s32","vqrdmulh_n_s16","vqrdmulh_n_s32","vqrdmulh_s16","vqrdmulh_s32","vqrdmulhh_lane_s16","vqrdmulhh_laneq_s16","vqrdmulhh_s16","vqrdmulhq_lane_s16","vqrdmulhq_lane_s32","vqrdmulhq_laneq_s16","vqrdmulhq_laneq_s32","vqrdmulhq_n_s16","vqrdmulhq_n_s32","vqrdmulhq_s16","vqrdmulhq_s32","vqrdmulhs_lane_s32","vqrdmulhs_laneq_s32","vqrdmulhs_s32","vqrshl_s16","vqrshl_s32","vqrshl_s64","vqrshl_s8","vqrshl_u16","vqrshl_u32","vqrshl_u64","vqrshl_u8","vqrshlb_s8","vqrshlb_u8","vqrshld_s64","vqrshld_u64","vqrshlh_s16","vqrshlh_u16","vqrshlq_s16","vqrshlq_s32","vqrshlq_s64","vqrshlq_s8","vqrshlq_u16","vqrshlq_u32","vqrshlq_u64","vqrshlq_u8","vqrshls_s32","vqrshls_u32","vqrshrn_high_n_s16","vqrshrn_high_n_s32","vqrshrn_high_n_s64","vqrshrn_high_n_u16","vqrshrn_high_n_u32","vqrshrn_high_n_u64","vqrshrn_n_s16","vqrshrn_n_s32","vqrshrn_n_s64","vqrshrn_n_u16","vqrshrn_n_u32","vqrshrn_n_u64","vqrshrnd_n_s64","vqrshrnd_n_u64","vqrshrnh_n_s16","vqrshrnh_n_u16","vqrshrns_n_s32","vqrshrns_n_u32","vqrshrun_high_n_s16","vqrshrun_high_n_s32","vqrshrun_high_n_s64","vqrshrun_n_s16","vqrshrun_n_s32","vqrshrun_n_s64","vqrshrund_n_s64","vqrshrunh_n_s16","vqrshruns_n_s32","vqshl_n_s16","vqshl_n_s32","vqshl_n_s64","vqshl_n_s8","vqshl_n_u16","vqshl_n_u32","vqshl_n_u64","vqshl_n_u8","vqshl_s16","vqshl_s32","vqshl_s64","vqshl_s8","vqshl_u16","vqshl_u32","vqshl_u64","vqshl_u8","vqshlb_n_s8","vqshlb_n_u8","vqshlb_s8","vqshlb_u8","vqshld_n_s64","vqshld_n_u64","vqshld_s64","vqshld_u64","vqshlh_n_s16","vqshlh_n_u16","vqshlh_s16","vqshlh_u16","vqshlq_n_s16","vqshlq_n_s32","vqshlq_n_s64","vqshlq_n_s8","vqshlq_n_u16","vqshlq_n_u32","vqshlq_n_u64","vqshlq_n_u8","vqshlq_s16","vqshlq_s32","vqshlq_s64","vqshlq_s8","vqshlq_u16","vqshlq_u32","vqshlq_u64","vqshlq_u8","vqshls_n_s32","vqshls_n_u32","vqshls_s32","vqshls_u32","vqshlu_n_s16","vqshlu_n_s32","vqshlu_n_s64","vqshlu_n_s8","vqshlub_n_s8","vqshlud_n_s64","vqshluh_n_s16","vqshluq_n_s16","vqshluq_n_s32","vqshluq_n_s64","vqshluq_n_s8","vqshlus_n_s32","vqshrn_high_n_s16","vqshrn_high_n_s32","vqshrn_high_n_s64","vqshrn_high_n_u16","vqshrn_high_n_u32","vqshrn_high_n_u64","vqshrn_n_s16","vqshrn_n_s32","vqshrn_n_s64","vqshrn_n_u16","vqshrn_n_u32","vqshrn_n_u64","vqshrnd_n_s64","vqshrnd_n_u64","vqshrnh_n_s16","vqshrnh_n_u16","vqshrns_n_s32","vqshrns_n_u32","vqshrun_high_n_s16","vqshrun_high_n_s32","vqshrun_high_n_s64","vqshrun_n_s16","vqshrun_n_s32","vqshrun_n_s64","vqshrund_n_s64","vqshrunh_n_s16","vqshruns_n_s32","vqsub_s16","vqsub_s32","vqsub_s64","vqsub_s8","vqsub_u16","vqsub_u32","vqsub_u64","vqsub_u8","vqsubb_s8","vqsubb_u8","vqsubd_s64","vqsubd_u64","vqsubh_s16","vqsubh_u16","vqsubq_s16","vqsubq_s32","vqsubq_s64","vqsubq_s8","vqsubq_u16","vqsubq_u32","vqsubq_u64","vqsubq_u8","vqsubs_s32","vqsubs_u32","vqtbl1_p8","vqtbl1_s8","vqtbl1_u8","vqtbl1q_p8","vqtbl1q_s8","vqtbl1q_u8","vqtbl2_p8","vqtbl2_s8","vqtbl2_u8","vqtbl2q_p8","vqtbl2q_s8","vqtbl2q_u8","vqtbl3_p8","vqtbl3_s8","vqtbl3_u8","vqtbl3q_p8","vqtbl3q_s8","vqtbl3q_u8","vqtbl4_p8","vqtbl4_s8","vqtbl4_u8","vqtbl4q_p8","vqtbl4q_s8","vqtbl4q_u8","vqtbx1_p8","vqtbx1_s8","vqtbx1_u8","vqtbx1q_p8","vqtbx1q_s8","vqtbx1q_u8","vqtbx2_p8","vqtbx2_s8","vqtbx2_u8","vqtbx2q_p8","vqtbx2q_s8","vqtbx2q_u8","vqtbx3_p8","vqtbx3_s8","vqtbx3_u8","vqtbx3q_p8","vqtbx3q_s8","vqtbx3q_u8","vqtbx4_p8","vqtbx4_s8","vqtbx4_u8","vqtbx4q_p8","vqtbx4q_s8","vqtbx4q_u8","vraddhn_high_s16","vraddhn_high_s32","vraddhn_high_s64","vraddhn_high_u16","vraddhn_high_u32","vraddhn_high_u64","vraddhn_s16","vraddhn_s32","vraddhn_s64","vraddhn_u16","vraddhn_u32","vraddhn_u64","vrax1q_u64","vrbit_p8","vrbit_s8","vrbit_u8","vrbitq_p8","vrbitq_s8","vrbitq_u8","vrecpe_f32","vrecpe_f64","vrecpe_u32","vrecped_f64","vrecpeq_f32","vrecpeq_f64","vrecpeq_u32","vrecpes_f32","vrecps_f32","vrecps_f64","vrecpsd_f64","vrecpsq_f32","vrecpsq_f64","vrecpss_f32","vrecpxd_f64","vrecpxs_f32","vreinterpret_f32_f64","vreinterpret_f32_p16","vreinterpret_f32_p64","vreinterpret_f32_p8","vreinterpret_f32_s16","vreinterpret_f32_s32","vreinterpret_f32_s64","vreinterpret_f32_s8","vreinterpret_f32_u16","vreinterpret_f32_u32","vreinterpret_f32_u64","vreinterpret_f32_u8","vreinterpret_f64_f32","vreinterpret_f64_p16","vreinterpret_f64_p64","vreinterpret_f64_p8","vreinterpret_f64_s16","vreinterpret_f64_s32","vreinterpret_f64_s64","vreinterpret_f64_s8","vreinterpret_f64_u16","vreinterpret_f64_u32","vreinterpret_f64_u64","vreinterpret_f64_u8","vreinterpret_p16_f32","vreinterpret_p16_f64","vreinterpret_p16_p64","vreinterpret_p16_p8","vreinterpret_p16_s16","vreinterpret_p16_s32","vreinterpret_p16_s64","vreinterpret_p16_s8","vreinterpret_p16_u16","vreinterpret_p16_u32","vreinterpret_p16_u64","vreinterpret_p16_u8","vreinterpret_p64_f32","vreinterpret_p64_f64","vreinterpret_p64_p16","vreinterpret_p64_p8","vreinterpret_p64_s16","vreinterpret_p64_s32","vreinterpret_p64_s64","vreinterpret_p64_s8","vreinterpret_p64_u16","vreinterpret_p64_u32","vreinterpret_p64_u64","vreinterpret_p64_u8","vreinterpret_p8_f32","vreinterpret_p8_f64","vreinterpret_p8_p16","vreinterpret_p8_p64","vreinterpret_p8_s16","vreinterpret_p8_s32","vreinterpret_p8_s64","vreinterpret_p8_s8","vreinterpret_p8_u16","vreinterpret_p8_u32","vreinterpret_p8_u64","vreinterpret_p8_u8","vreinterpret_s16_f32","vreinterpret_s16_f64","vreinterpret_s16_p16","vreinterpret_s16_p64","vreinterpret_s16_p8","vreinterpret_s16_s32","vreinterpret_s16_s64","vreinterpret_s16_s8","vreinterpret_s16_u16","vreinterpret_s16_u32","vreinterpret_s16_u64","vreinterpret_s16_u8","vreinterpret_s32_f32","vreinterpret_s32_f64","vreinterpret_s32_p16","vreinterpret_s32_p64","vreinterpret_s32_p8","vreinterpret_s32_s16","vreinterpret_s32_s64","vreinterpret_s32_s8","vreinterpret_s32_u16","vreinterpret_s32_u32","vreinterpret_s32_u64","vreinterpret_s32_u8","vreinterpret_s64_f32","vreinterpret_s64_f64","vreinterpret_s64_p16","vreinterpret_s64_p64","vreinterpret_s64_p8","vreinterpret_s64_s16","vreinterpret_s64_s32","vreinterpret_s64_s8","vreinterpret_s64_u16","vreinterpret_s64_u32","vreinterpret_s64_u64","vreinterpret_s64_u8","vreinterpret_s8_f32","vreinterpret_s8_f64","vreinterpret_s8_p16","vreinterpret_s8_p64","vreinterpret_s8_p8","vreinterpret_s8_s16","vreinterpret_s8_s32","vreinterpret_s8_s64","vreinterpret_s8_u16","vreinterpret_s8_u32","vreinterpret_s8_u64","vreinterpret_s8_u8","vreinterpret_u16_f32","vreinterpret_u16_f64","vreinterpret_u16_p16","vreinterpret_u16_p64","vreinterpret_u16_p8","vreinterpret_u16_s16","vreinterpret_u16_s32","vreinterpret_u16_s64","vreinterpret_u16_s8","vreinterpret_u16_u32","vreinterpret_u16_u64","vreinterpret_u16_u8","vreinterpret_u32_f32","vreinterpret_u32_f64","vreinterpret_u32_p16","vreinterpret_u32_p64","vreinterpret_u32_p8","vreinterpret_u32_s16","vreinterpret_u32_s32","vreinterpret_u32_s64","vreinterpret_u32_s8","vreinterpret_u32_u16","vreinterpret_u32_u64","vreinterpret_u32_u8","vreinterpret_u64_f32","vreinterpret_u64_f64","vreinterpret_u64_p16","vreinterpret_u64_p64","vreinterpret_u64_p8","vreinterpret_u64_s16","vreinterpret_u64_s32","vreinterpret_u64_s64","vreinterpret_u64_s8","vreinterpret_u64_u16","vreinterpret_u64_u32","vreinterpret_u64_u8","vreinterpret_u8_f32","vreinterpret_u8_f64","vreinterpret_u8_p16","vreinterpret_u8_p64","vreinterpret_u8_p8","vreinterpret_u8_s16","vreinterpret_u8_s32","vreinterpret_u8_s64","vreinterpret_u8_s8","vreinterpret_u8_u16","vreinterpret_u8_u32","vreinterpret_u8_u64","vreinterpretq_f32_f64","vreinterpretq_f32_p128","vreinterpretq_f32_p16","vreinterpretq_f32_p64","vreinterpretq_f32_p8","vreinterpretq_f32_s16","vreinterpretq_f32_s32","vreinterpretq_f32_s64","vreinterpretq_f32_s8","vreinterpretq_f32_u16","vreinterpretq_f32_u32","vreinterpretq_f32_u64","vreinterpretq_f32_u8","vreinterpretq_f64_f32","vreinterpretq_f64_p128","vreinterpretq_f64_p16","vreinterpretq_f64_p64","vreinterpretq_f64_p8","vreinterpretq_f64_s16","vreinterpretq_f64_s32","vreinterpretq_f64_s64","vreinterpretq_f64_s8","vreinterpretq_f64_u16","vreinterpretq_f64_u32","vreinterpretq_f64_u64","vreinterpretq_f64_u8","vreinterpretq_p128_f32","vreinterpretq_p128_f64","vreinterpretq_p128_p16","vreinterpretq_p128_p64","vreinterpretq_p128_p8","vreinterpretq_p128_s16","vreinterpretq_p128_s32","vreinterpretq_p128_s64","vreinterpretq_p128_s8","vreinterpretq_p128_u16","vreinterpretq_p128_u32","vreinterpretq_p128_u64","vreinterpretq_p128_u8","vreinterpretq_p16_f32","vreinterpretq_p16_f64","vreinterpretq_p16_p128","vreinterpretq_p16_p64","vreinterpretq_p16_p8","vreinterpretq_p16_s16","vreinterpretq_p16_s32","vreinterpretq_p16_s64","vreinterpretq_p16_s8","vreinterpretq_p16_u16","vreinterpretq_p16_u32","vreinterpretq_p16_u64","vreinterpretq_p16_u8","vreinterpretq_p64_f32","vreinterpretq_p64_f64","vreinterpretq_p64_p128","vreinterpretq_p64_p16","vreinterpretq_p64_p8","vreinterpretq_p64_s16","vreinterpretq_p64_s32","vreinterpretq_p64_s64","vreinterpretq_p64_s8","vreinterpretq_p64_u16","vreinterpretq_p64_u32","vreinterpretq_p64_u64","vreinterpretq_p64_u8","vreinterpretq_p8_f32","vreinterpretq_p8_f64","vreinterpretq_p8_p128","vreinterpretq_p8_p16","vreinterpretq_p8_p64","vreinterpretq_p8_s16","vreinterpretq_p8_s32","vreinterpretq_p8_s64","vreinterpretq_p8_s8","vreinterpretq_p8_u16","vreinterpretq_p8_u32","vreinterpretq_p8_u64","vreinterpretq_p8_u8","vreinterpretq_s16_f32","vreinterpretq_s16_f64","vreinterpretq_s16_p128","vreinterpretq_s16_p16","vreinterpretq_s16_p64","vreinterpretq_s16_p8","vreinterpretq_s16_s32","vreinterpretq_s16_s64","vreinterpretq_s16_s8","vreinterpretq_s16_u16","vreinterpretq_s16_u32","vreinterpretq_s16_u64","vreinterpretq_s16_u8","vreinterpretq_s32_f32","vreinterpretq_s32_f64","vreinterpretq_s32_p128","vreinterpretq_s32_p16","vreinterpretq_s32_p64","vreinterpretq_s32_p8","vreinterpretq_s32_s16","vreinterpretq_s32_s64","vreinterpretq_s32_s8","vreinterpretq_s32_u16","vreinterpretq_s32_u32","vreinterpretq_s32_u64","vreinterpretq_s32_u8","vreinterpretq_s64_f32","vreinterpretq_s64_f64","vreinterpretq_s64_p128","vreinterpretq_s64_p16","vreinterpretq_s64_p64","vreinterpretq_s64_p8","vreinterpretq_s64_s16","vreinterpretq_s64_s32","vreinterpretq_s64_s8","vreinterpretq_s64_u16","vreinterpretq_s64_u32","vreinterpretq_s64_u64","vreinterpretq_s64_u8","vreinterpretq_s8_f32","vreinterpretq_s8_f64","vreinterpretq_s8_p128","vreinterpretq_s8_p16","vreinterpretq_s8_p64","vreinterpretq_s8_p8","vreinterpretq_s8_s16","vreinterpretq_s8_s32","vreinterpretq_s8_s64","vreinterpretq_s8_u16","vreinterpretq_s8_u32","vreinterpretq_s8_u64","vreinterpretq_s8_u8","vreinterpretq_u16_f32","vreinterpretq_u16_f64","vreinterpretq_u16_p128","vreinterpretq_u16_p16","vreinterpretq_u16_p64","vreinterpretq_u16_p8","vreinterpretq_u16_s16","vreinterpretq_u16_s32","vreinterpretq_u16_s64","vreinterpretq_u16_s8","vreinterpretq_u16_u32","vreinterpretq_u16_u64","vreinterpretq_u16_u8","vreinterpretq_u32_f32","vreinterpretq_u32_f64","vreinterpretq_u32_p128","vreinterpretq_u32_p16","vreinterpretq_u32_p64","vreinterpretq_u32_p8","vreinterpretq_u32_s16","vreinterpretq_u32_s32","vreinterpretq_u32_s64","vreinterpretq_u32_s8","vreinterpretq_u32_u16","vreinterpretq_u32_u64","vreinterpretq_u32_u8","vreinterpretq_u64_f32","vreinterpretq_u64_f64","vreinterpretq_u64_p128","vreinterpretq_u64_p16","vreinterpretq_u64_p64","vreinterpretq_u64_p8","vreinterpretq_u64_s16","vreinterpretq_u64_s32","vreinterpretq_u64_s64","vreinterpretq_u64_s8","vreinterpretq_u64_u16","vreinterpretq_u64_u32","vreinterpretq_u64_u8","vreinterpretq_u8_f32","vreinterpretq_u8_f64","vreinterpretq_u8_p128","vreinterpretq_u8_p16","vreinterpretq_u8_p64","vreinterpretq_u8_p8","vreinterpretq_u8_s16","vreinterpretq_u8_s32","vreinterpretq_u8_s64","vreinterpretq_u8_s8","vreinterpretq_u8_u16","vreinterpretq_u8_u32","vreinterpretq_u8_u64","vrev16_p8","vrev16_s8","vrev16_u8","vrev16q_p8","vrev16q_s8","vrev16q_u8","vrev32_p16","vrev32_p8","vrev32_s16","vrev32_s8","vrev32_u16","vrev32_u8","vrev32q_p16","vrev32q_p8","vrev32q_s16","vrev32q_s8","vrev32q_u16","vrev32q_u8","vrev64_f32","vrev64_p16","vrev64_p8","vrev64_s16","vrev64_s32","vrev64_s8","vrev64_u16","vrev64_u32","vrev64_u8","vrev64q_f32","vrev64q_p16","vrev64q_p8","vrev64q_s16","vrev64q_s32","vrev64q_s8","vrev64q_u16","vrev64q_u32","vrev64q_u8","vrhadd_s16","vrhadd_s32","vrhadd_s8","vrhadd_u16","vrhadd_u32","vrhadd_u8","vrhaddq_s16","vrhaddq_s32","vrhaddq_s8","vrhaddq_u16","vrhaddq_u32","vrhaddq_u8","vrnd32x_f32","vrnd32x_f64","vrnd32xq_f32","vrnd32xq_f64","vrnd32z_f32","vrnd32z_f64","vrnd32zq_f32","vrnd32zq_f64","vrnd64x_f32","vrnd64x_f64","vrnd64xq_f32","vrnd64xq_f64","vrnd64z_f32","vrnd64z_f64","vrnd64zq_f32","vrnd64zq_f64","vrnd_f32","vrnd_f64","vrnda_f32","vrnda_f64","vrndaq_f32","vrndaq_f64","vrndi_f32","vrndi_f64","vrndiq_f32","vrndiq_f64","vrndm_f32","vrndm_f64","vrndmq_f32","vrndmq_f64","vrndn_f32","vrndn_f64","vrndnq_f32","vrndnq_f64","vrndns_f32","vrndp_f32","vrndp_f64","vrndpq_f32","vrndpq_f64","vrndq_f32","vrndq_f64","vrndx_f32","vrndx_f64","vrndxq_f32","vrndxq_f64","vrshl_s16","vrshl_s32","vrshl_s64","vrshl_s8","vrshl_u16","vrshl_u32","vrshl_u64","vrshl_u8","vrshld_s64","vrshld_u64","vrshlq_s16","vrshlq_s32","vrshlq_s64","vrshlq_s8","vrshlq_u16","vrshlq_u32","vrshlq_u64","vrshlq_u8","vrshr_n_s16","vrshr_n_s32","vrshr_n_s64","vrshr_n_s8","vrshr_n_u16","vrshr_n_u32","vrshr_n_u64","vrshr_n_u8","vrshrd_n_s64","vrshrd_n_u64","vrshrn_high_n_s16","vrshrn_high_n_s32","vrshrn_high_n_s64","vrshrn_high_n_u16","vrshrn_high_n_u32","vrshrn_high_n_u64","vrshrn_n_s16","vrshrn_n_s32","vrshrn_n_s64","vrshrn_n_u16","vrshrn_n_u32","vrshrn_n_u64","vrshrq_n_s16","vrshrq_n_s32","vrshrq_n_s64","vrshrq_n_s8","vrshrq_n_u16","vrshrq_n_u32","vrshrq_n_u64","vrshrq_n_u8","vrsqrte_f32","vrsqrte_f64","vrsqrte_u32","vrsqrted_f64","vrsqrteq_f32","vrsqrteq_f64","vrsqrteq_u32","vrsqrtes_f32","vrsqrts_f32","vrsqrts_f64","vrsqrtsd_f64","vrsqrtsq_f32","vrsqrtsq_f64","vrsqrtss_f32","vrsra_n_s16","vrsra_n_s32","vrsra_n_s64","vrsra_n_s8","vrsra_n_u16","vrsra_n_u32","vrsra_n_u64","vrsra_n_u8","vrsrad_n_s64","vrsrad_n_u64","vrsraq_n_s16","vrsraq_n_s32","vrsraq_n_s64","vrsraq_n_s8","vrsraq_n_u16","vrsraq_n_u32","vrsraq_n_u64","vrsraq_n_u8","vrsubhn_high_s16","vrsubhn_high_s32","vrsubhn_high_s64","vrsubhn_high_u16","vrsubhn_high_u32","vrsubhn_high_u64","vrsubhn_s16","vrsubhn_s32","vrsubhn_s64","vrsubhn_u16","vrsubhn_u32","vrsubhn_u64","vset_lane_f32","vset_lane_f64","vset_lane_p16","vset_lane_p64","vset_lane_p8","vset_lane_s16","vset_lane_s32","vset_lane_s64","vset_lane_s8","vset_lane_u16","vset_lane_u32","vset_lane_u64","vset_lane_u8","vsetq_lane_f32","vsetq_lane_f64","vsetq_lane_p16","vsetq_lane_p64","vsetq_lane_p8","vsetq_lane_s16","vsetq_lane_s32","vsetq_lane_s64","vsetq_lane_s8","vsetq_lane_u16","vsetq_lane_u32","vsetq_lane_u64","vsetq_lane_u8","vsha1cq_u32","vsha1h_u32","vsha1mq_u32","vsha1pq_u32","vsha1su0q_u32","vsha1su1q_u32","vsha256h2q_u32","vsha256hq_u32","vsha256su0q_u32","vsha256su1q_u32","vsha512h2q_u64","vsha512hq_u64","vsha512su0q_u64","vsha512su1q_u64","vshl_n_s16","vshl_n_s32","vshl_n_s64","vshl_n_s8","vshl_n_u16","vshl_n_u32","vshl_n_u64","vshl_n_u8","vshl_s16","vshl_s32","vshl_s64","vshl_s8","vshl_u16","vshl_u32","vshl_u64","vshl_u8","vshld_n_s64","vshld_n_u64","vshld_s64","vshld_u64","vshll_high_n_s16","vshll_high_n_s32","vshll_high_n_s8","vshll_high_n_u16","vshll_high_n_u32","vshll_high_n_u8","vshll_n_s16","vshll_n_s32","vshll_n_s8","vshll_n_u16","vshll_n_u32","vshll_n_u8","vshlq_n_s16","vshlq_n_s32","vshlq_n_s64","vshlq_n_s8","vshlq_n_u16","vshlq_n_u32","vshlq_n_u64","vshlq_n_u8","vshlq_s16","vshlq_s32","vshlq_s64","vshlq_s8","vshlq_u16","vshlq_u32","vshlq_u64","vshlq_u8","vshr_n_s16","vshr_n_s32","vshr_n_s64","vshr_n_s8","vshr_n_u16","vshr_n_u32","vshr_n_u64","vshr_n_u8","vshrd_n_s64","vshrd_n_u64","vshrn_high_n_s16","vshrn_high_n_s32","vshrn_high_n_s64","vshrn_high_n_u16","vshrn_high_n_u32","vshrn_high_n_u64","vshrn_n_s16","vshrn_n_s32","vshrn_n_s64","vshrn_n_u16","vshrn_n_u32","vshrn_n_u64","vshrq_n_s16","vshrq_n_s32","vshrq_n_s64","vshrq_n_s8","vshrq_n_u16","vshrq_n_u32","vshrq_n_u64","vshrq_n_u8","vsli_n_p16","vsli_n_p64","vsli_n_p8","vsli_n_s16","vsli_n_s32","vsli_n_s64","vsli_n_s8","vsli_n_u16","vsli_n_u32","vsli_n_u64","vsli_n_u8","vslid_n_s64","vslid_n_u64","vsliq_n_p16","vsliq_n_p64","vsliq_n_p8","vsliq_n_s16","vsliq_n_s32","vsliq_n_s64","vsliq_n_s8","vsliq_n_u16","vsliq_n_u32","vsliq_n_u64","vsliq_n_u8","vsm3partw1q_u32","vsm3partw2q_u32","vsm3ss1q_u32","vsm3tt1aq_u32","vsm3tt1bq_u32","vsm3tt2aq_u32","vsm3tt2bq_u32","vsm4ekeyq_u32","vsm4eq_u32","vsqadd_u16","vsqadd_u32","vsqadd_u64","vsqadd_u8","vsqaddb_u8","vsqaddd_u64","vsqaddh_u16","vsqaddq_u16","vsqaddq_u32","vsqaddq_u64","vsqaddq_u8","vsqadds_u32","vsqrt_f32","vsqrt_f64","vsqrtq_f32","vsqrtq_f64","vsra_n_s16","vsra_n_s32","vsra_n_s64","vsra_n_s8","vsra_n_u16","vsra_n_u32","vsra_n_u64","vsra_n_u8","vsrad_n_s64","vsrad_n_u64","vsraq_n_s16","vsraq_n_s32","vsraq_n_s64","vsraq_n_s8","vsraq_n_u16","vsraq_n_u32","vsraq_n_u64","vsraq_n_u8","vsri_n_p16","vsri_n_p64","vsri_n_p8","vsri_n_s16","vsri_n_s32","vsri_n_s64","vsri_n_s8","vsri_n_u16","vsri_n_u32","vsri_n_u64","vsri_n_u8","vsrid_n_s64","vsrid_n_u64","vsriq_n_p16","vsriq_n_p64","vsriq_n_p8","vsriq_n_s16","vsriq_n_s32","vsriq_n_s64","vsriq_n_s8","vsriq_n_u16","vsriq_n_u32","vsriq_n_u64","vsriq_n_u8","vst1_f32","vst1_f32_x2","vst1_f32_x3","vst1_f32_x4","vst1_f64","vst1_f64_x2","vst1_f64_x3","vst1_f64_x4","vst1_lane_f32","vst1_lane_f64","vst1_lane_p16","vst1_lane_p64","vst1_lane_p8","vst1_lane_s16","vst1_lane_s32","vst1_lane_s64","vst1_lane_s8","vst1_lane_u16","vst1_lane_u32","vst1_lane_u64","vst1_lane_u8","vst1_p16","vst1_p16_x2","vst1_p16_x3","vst1_p16_x4","vst1_p64","vst1_p64_x2","vst1_p64_x3","vst1_p64_x4","vst1_p8","vst1_p8_x2","vst1_p8_x3","vst1_p8_x4","vst1_s16","vst1_s16_x2","vst1_s16_x3","vst1_s16_x4","vst1_s32","vst1_s32_x2","vst1_s32_x3","vst1_s32_x4","vst1_s64","vst1_s64_x2","vst1_s64_x3","vst1_s64_x4","vst1_s8","vst1_s8_x2","vst1_s8_x3","vst1_s8_x4","vst1_u16","vst1_u16_x2","vst1_u16_x3","vst1_u16_x4","vst1_u32","vst1_u32_x2","vst1_u32_x3","vst1_u32_x4","vst1_u64","vst1_u64_x2","vst1_u64_x3","vst1_u64_x4","vst1_u8","vst1_u8_x2","vst1_u8_x3","vst1_u8_x4","vst1q_f32","vst1q_f32_x2","vst1q_f32_x3","vst1q_f32_x4","vst1q_f64","vst1q_f64_x2","vst1q_f64_x3","vst1q_f64_x4","vst1q_lane_f32","vst1q_lane_f64","vst1q_lane_p16","vst1q_lane_p64","vst1q_lane_p8","vst1q_lane_s16","vst1q_lane_s32","vst1q_lane_s64","vst1q_lane_s8","vst1q_lane_u16","vst1q_lane_u32","vst1q_lane_u64","vst1q_lane_u8","vst1q_p16","vst1q_p16_x2","vst1q_p16_x3","vst1q_p16_x4","vst1q_p64","vst1q_p64_x2","vst1q_p64_x3","vst1q_p64_x4","vst1q_p8","vst1q_p8_x2","vst1q_p8_x3","vst1q_p8_x4","vst1q_s16","vst1q_s16_x2","vst1q_s16_x3","vst1q_s16_x4","vst1q_s32","vst1q_s32_x2","vst1q_s32_x3","vst1q_s32_x4","vst1q_s64","vst1q_s64_x2","vst1q_s64_x3","vst1q_s64_x4","vst1q_s8","vst1q_s8_x2","vst1q_s8_x3","vst1q_s8_x4","vst1q_u16","vst1q_u16_x2","vst1q_u16_x3","vst1q_u16_x4","vst1q_u32","vst1q_u32_x2","vst1q_u32_x3","vst1q_u32_x4","vst1q_u64","vst1q_u64_x2","vst1q_u64_x3","vst1q_u64_x4","vst1q_u8","vst1q_u8_x2","vst1q_u8_x3","vst1q_u8_x4","vst2_f32","vst2_f64","vst2_lane_f32","vst2_lane_f64","vst2_lane_p16","vst2_lane_p64","vst2_lane_p8","vst2_lane_s16","vst2_lane_s32","vst2_lane_s64","vst2_lane_s8","vst2_lane_u16","vst2_lane_u32","vst2_lane_u64","vst2_lane_u8","vst2_p16","vst2_p64","vst2_p8","vst2_s16","vst2_s32","vst2_s64","vst2_s8","vst2_u16","vst2_u32","vst2_u64","vst2_u8","vst2q_f32","vst2q_f64","vst2q_lane_f32","vst2q_lane_f64","vst2q_lane_p16","vst2q_lane_p64","vst2q_lane_p8","vst2q_lane_s16","vst2q_lane_s32","vst2q_lane_s64","vst2q_lane_s8","vst2q_lane_u16","vst2q_lane_u32","vst2q_lane_u64","vst2q_lane_u8","vst2q_p16","vst2q_p64","vst2q_p8","vst2q_s16","vst2q_s32","vst2q_s64","vst2q_s8","vst2q_u16","vst2q_u32","vst2q_u64","vst2q_u8","vst3_f32","vst3_f64","vst3_lane_f32","vst3_lane_f64","vst3_lane_p16","vst3_lane_p64","vst3_lane_p8","vst3_lane_s16","vst3_lane_s32","vst3_lane_s64","vst3_lane_s8","vst3_lane_u16","vst3_lane_u32","vst3_lane_u64","vst3_lane_u8","vst3_p16","vst3_p64","vst3_p8","vst3_s16","vst3_s32","vst3_s64","vst3_s8","vst3_u16","vst3_u32","vst3_u64","vst3_u8","vst3q_f32","vst3q_f64","vst3q_lane_f32","vst3q_lane_f64","vst3q_lane_p16","vst3q_lane_p64","vst3q_lane_p8","vst3q_lane_s16","vst3q_lane_s32","vst3q_lane_s64","vst3q_lane_s8","vst3q_lane_u16","vst3q_lane_u32","vst3q_lane_u64","vst3q_lane_u8","vst3q_p16","vst3q_p64","vst3q_p8","vst3q_s16","vst3q_s32","vst3q_s64","vst3q_s8","vst3q_u16","vst3q_u32","vst3q_u64","vst3q_u8","vst4_f32","vst4_f64","vst4_lane_f32","vst4_lane_f64","vst4_lane_p16","vst4_lane_p64","vst4_lane_p8","vst4_lane_s16","vst4_lane_s32","vst4_lane_s64","vst4_lane_s8","vst4_lane_u16","vst4_lane_u32","vst4_lane_u64","vst4_lane_u8","vst4_p16","vst4_p64","vst4_p8","vst4_s16","vst4_s32","vst4_s64","vst4_s8","vst4_u16","vst4_u32","vst4_u64","vst4_u8","vst4q_f32","vst4q_f64","vst4q_lane_f32","vst4q_lane_f64","vst4q_lane_p16","vst4q_lane_p64","vst4q_lane_p8","vst4q_lane_s16","vst4q_lane_s32","vst4q_lane_s64","vst4q_lane_s8","vst4q_lane_u16","vst4q_lane_u32","vst4q_lane_u64","vst4q_lane_u8","vst4q_p16","vst4q_p64","vst4q_p8","vst4q_s16","vst4q_s32","vst4q_s64","vst4q_s8","vst4q_u16","vst4q_u32","vst4q_u64","vst4q_u8","vstrq_p128","vsub_f32","vsub_f64","vsub_s16","vsub_s32","vsub_s64","vsub_s8","vsub_u16","vsub_u32","vsub_u64","vsub_u8","vsubd_s64","vsubd_u64","vsubhn_high_s16","vsubhn_high_s32","vsubhn_high_s64","vsubhn_high_u16","vsubhn_high_u32","vsubhn_high_u64","vsubhn_s16","vsubhn_s32","vsubhn_s64","vsubhn_u16","vsubhn_u32","vsubhn_u64","vsubl_high_s16","vsubl_high_s32","vsubl_high_s8","vsubl_high_u16","vsubl_high_u32","vsubl_high_u8","vsubl_s16","vsubl_s32","vsubl_s8","vsubl_u16","vsubl_u32","vsubl_u8","vsubq_f32","vsubq_f64","vsubq_s16","vsubq_s32","vsubq_s64","vsubq_s8","vsubq_u16","vsubq_u32","vsubq_u64","vsubq_u8","vsubw_high_s16","vsubw_high_s32","vsubw_high_s8","vsubw_high_u16","vsubw_high_u32","vsubw_high_u8","vsubw_s16","vsubw_s32","vsubw_s8","vsubw_u16","vsubw_u32","vsubw_u8","vsudot_lane_s32","vsudot_laneq_s32","vsudotq_lane_s32","vsudotq_laneq_s32","vtbl1_p8","vtbl1_s8","vtbl1_u8","vtbl2_p8","vtbl2_s8","vtbl2_u8","vtbl3_p8","vtbl3_s8","vtbl3_u8","vtbl4_p8","vtbl4_s8","vtbl4_u8","vtbx1_p8","vtbx1_s8","vtbx1_u8","vtbx2_p8","vtbx2_s8","vtbx2_u8","vtbx3_p8","vtbx3_s8","vtbx3_u8","vtbx4_p8","vtbx4_s8","vtbx4_u8","vtrn1_f32","vtrn1_p16","vtrn1_p8","vtrn1_s16","vtrn1_s32","vtrn1_s8","vtrn1_u16","vtrn1_u32","vtrn1_u8","vtrn1q_f32","vtrn1q_f64","vtrn1q_p16","vtrn1q_p64","vtrn1q_p8","vtrn1q_s16","vtrn1q_s32","vtrn1q_s64","vtrn1q_s8","vtrn1q_u16","vtrn1q_u32","vtrn1q_u64","vtrn1q_u8","vtrn2_f32","vtrn2_p16","vtrn2_p8","vtrn2_s16","vtrn2_s32","vtrn2_s8","vtrn2_u16","vtrn2_u32","vtrn2_u8","vtrn2q_f32","vtrn2q_f64","vtrn2q_p16","vtrn2q_p64","vtrn2q_p8","vtrn2q_s16","vtrn2q_s32","vtrn2q_s64","vtrn2q_s8","vtrn2q_u16","vtrn2q_u32","vtrn2q_u64","vtrn2q_u8","vtrn_f32","vtrn_p16","vtrn_p8","vtrn_s16","vtrn_s32","vtrn_s8","vtrn_u16","vtrn_u32","vtrn_u8","vtrnq_f32","vtrnq_p16","vtrnq_p8","vtrnq_s16","vtrnq_s32","vtrnq_s8","vtrnq_u16","vtrnq_u32","vtrnq_u8","vtst_p16","vtst_p64","vtst_p8","vtst_s16","vtst_s32","vtst_s64","vtst_s8","vtst_u16","vtst_u32","vtst_u64","vtst_u8","vtstd_s64","vtstd_u64","vtstq_p16","vtstq_p64","vtstq_p8","vtstq_s16","vtstq_s32","vtstq_s64","vtstq_s8","vtstq_u16","vtstq_u32","vtstq_u64","vtstq_u8","vuqadd_s16","vuqadd_s32","vuqadd_s64","vuqadd_s8","vuqaddb_s8","vuqaddd_s64","vuqaddh_s16","vuqaddq_s16","vuqaddq_s32","vuqaddq_s64","vuqaddq_s8","vuqadds_s32","vusdot_lane_s32","vusdot_laneq_s32","vusdot_s32","vusdotq_lane_s32","vusdotq_laneq_s32","vusdotq_s32","vusmmlaq_s32","vuzp1_f32","vuzp1_p16","vuzp1_p8","vuzp1_s16","vuzp1_s32","vuzp1_s8","vuzp1_u16","vuzp1_u32","vuzp1_u8","vuzp1q_f32","vuzp1q_f64","vuzp1q_p16","vuzp1q_p64","vuzp1q_p8","vuzp1q_s16","vuzp1q_s32","vuzp1q_s64","vuzp1q_s8","vuzp1q_u16","vuzp1q_u32","vuzp1q_u64","vuzp1q_u8","vuzp2_f32","vuzp2_p16","vuzp2_p8","vuzp2_s16","vuzp2_s32","vuzp2_s8","vuzp2_u16","vuzp2_u32","vuzp2_u8","vuzp2q_f32","vuzp2q_f64","vuzp2q_p16","vuzp2q_p64","vuzp2q_p8","vuzp2q_s16","vuzp2q_s32","vuzp2q_s64","vuzp2q_s8","vuzp2q_u16","vuzp2q_u32","vuzp2q_u64","vuzp2q_u8","vuzp_f32","vuzp_p16","vuzp_p8","vuzp_s16","vuzp_s32","vuzp_s8","vuzp_u16","vuzp_u32","vuzp_u8","vuzpq_f32","vuzpq_p16","vuzpq_p8","vuzpq_s16","vuzpq_s32","vuzpq_s8","vuzpq_u16","vuzpq_u32","vuzpq_u8","vxarq_u64","vzip1_f32","vzip1_p16","vzip1_p8","vzip1_s16","vzip1_s32","vzip1_s8","vzip1_u16","vzip1_u32","vzip1_u8","vzip1q_f32","vzip1q_f64","vzip1q_p16","vzip1q_p64","vzip1q_p8","vzip1q_s16","vzip1q_s32","vzip1q_s64","vzip1q_s8","vzip1q_u16","vzip1q_u32","vzip1q_u64","vzip1q_u8","vzip2_f32","vzip2_p16","vzip2_p8","vzip2_s16","vzip2_s32","vzip2_s8","vzip2_u16","vzip2_u32","vzip2_u8","vzip2q_f32","vzip2q_f64","vzip2q_p16","vzip2q_p64","vzip2q_p8","vzip2q_s16","vzip2q_s32","vzip2q_s64","vzip2q_s8","vzip2q_u16","vzip2q_u32","vzip2q_u64","vzip2q_u8","vzip_f32","vzip_p16","vzip_p8","vzip_s16","vzip_s32","vzip_s8","vzip_u16","vzip_u32","vzip_u8","vzipq_f32","vzipq_p16","vzipq_p8","vzipq_s16","vzipq_s32","vzipq_s8","vzipq_u16","vzipq_u32","vzipq_u8","SY","__crc32b","__crc32cb","__crc32ch","__crc32cw","__crc32h","__crc32w","__dbg","__dmb","__dsb","__isb","__nop","__qadd","__qadd16","__qadd8","__qasx","__qdbl","__qsax","__qsub","__qsub16","__qsub8","__sadd16","__sadd8","__sasx","__sel","__sev","__sevl","__shadd16","__shadd8","__shsub16","__shsub8","__smlabb","__smlabt","__smlad","__smlatb","__smlatt","__smlawb","__smlawt","__smlsd","__smuad","__smuadx","__smulbb","__smulbt","__smultb","__smultt","__smulwb","__smulwt","__smusd","__smusdx","__ssub8","__usad8","__usada8","__usub8","__wfe","__wfi","__yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","dsp","float32x2_t","float32x2x2_t","float32x2x3_t","float32x2x4_t","float32x4_t","float32x4x2_t","float32x4x3_t","float32x4x4_t","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","int16x2_t","int16x4_t","int16x4x2_t","int16x4x3_t","int16x4x4_t","int16x8_t","int16x8x2_t","int16x8x3_t","int16x8x4_t","int32x2_t","int32x2x2_t","int32x2x3_t","int32x2x4_t","int32x4_t","int32x4x2_t","int32x4x3_t","int32x4x4_t","int64x1_t","int64x1x2_t","int64x1x3_t","int64x1x4_t","int64x2_t","int64x2x2_t","int64x2x3_t","int64x2x4_t","int8x16_t","int8x16x2_t","int8x16x3_t","int8x16x4_t","int8x4_t","int8x8_t","int8x8x2_t","int8x8x3_t","int8x8x4_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","poly16x4_t","poly16x4x2_t","poly16x4x3_t","poly16x4x4_t","poly16x8_t","poly16x8x2_t","poly16x8x3_t","poly16x8x4_t","poly64x1_t","poly64x1x2_t","poly64x1x3_t","poly64x1x4_t","poly64x2_t","poly64x2x2_t","poly64x2x3_t","poly64x2x4_t","poly8x16_t","poly8x16x2_t","poly8x16x3_t","poly8x16x4_t","poly8x8_t","poly8x8x2_t","poly8x8x3_t","poly8x8x4_t","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint16x2_t","uint16x4_t","uint16x4x2_t","uint16x4x3_t","uint16x4x4_t","uint16x8_t","uint16x8x2_t","uint16x8x3_t","uint16x8x4_t","uint32x2_t","uint32x2x2_t","uint32x2x3_t","uint32x2x4_t","uint32x4_t","uint32x4x2_t","uint32x4x3_t","uint32x4x4_t","uint64x1_t","uint64x1x2_t","uint64x1x3_t","uint64x1x4_t","uint64x2_t","uint64x2x2_t","uint64x2x3_t","uint64x2x4_t","uint8x16_t","uint8x16x2_t","uint8x16x3_t","uint8x16x4_t","uint8x4_t","uint8x8_t","uint8x8x2_t","uint8x8x3_t","uint8x8x4_t","vaba_s16","vaba_s32","vaba_s8","vaba_u16","vaba_u32","vaba_u8","vabal_s16","vabal_s32","vabal_s8","vabal_u16","vabal_u32","vabal_u8","vabaq_s16","vabaq_s32","vabaq_s8","vabaq_u16","vabaq_u32","vabaq_u8","vabd_f32","vabd_s16","vabd_s32","vabd_s8","vabd_u16","vabd_u32","vabd_u8","vabdl_s16","vabdl_s32","vabdl_s8","vabdl_u16","vabdl_u32","vabdl_u8","vabdq_f32","vabdq_s16","vabdq_s32","vabdq_s8","vabdq_u16","vabdq_u32","vabdq_u8","vabs_f32","vabs_s16","vabs_s32","vabs_s8","vabsq_f32","vabsq_s16","vabsq_s32","vabsq_s8","vadd_f32","vadd_p16","vadd_p64","vadd_p8","vadd_s16","vadd_s32","vadd_s8","vadd_u16","vadd_u32","vadd_u8","vaddhn_high_s16","vaddhn_high_s32","vaddhn_high_s64","vaddhn_high_u16","vaddhn_high_u32","vaddhn_high_u64","vaddhn_s16","vaddhn_s32","vaddhn_s64","vaddhn_u16","vaddhn_u32","vaddhn_u64","vaddl_high_s16","vaddl_high_s32","vaddl_high_s8","vaddl_high_u16","vaddl_high_u32","vaddl_high_u8","vaddl_s16","vaddl_s32","vaddl_s8","vaddl_u16","vaddl_u32","vaddl_u8","vaddq_f32","vaddq_p128","vaddq_p16","vaddq_p64","vaddq_p8","vaddq_s16","vaddq_s32","vaddq_s64","vaddq_s8","vaddq_u16","vaddq_u32","vaddq_u64","vaddq_u8","vaddw_high_s16","vaddw_high_s32","vaddw_high_s8","vaddw_high_u16","vaddw_high_u32","vaddw_high_u8","vaddw_s16","vaddw_s32","vaddw_s8","vaddw_u16","vaddw_u32","vaddw_u8","vaesdq_u8","vaeseq_u8","vaesimcq_u8","vaesmcq_u8","vand_s16","vand_s32","vand_s64","vand_s8","vand_u16","vand_u32","vand_u64","vand_u8","vandq_s16","vandq_s32","vandq_s64","vandq_s8","vandq_u16","vandq_u32","vandq_u64","vandq_u8","vbic_s16","vbic_s32","vbic_s64","vbic_s8","vbic_u16","vbic_u32","vbic_u64","vbic_u8","vbicq_s16","vbicq_s32","vbicq_s64","vbicq_s8","vbicq_u16","vbicq_u32","vbicq_u64","vbicq_u8","vbsl_f32","vbsl_p16","vbsl_p8","vbsl_s16","vbsl_s32","vbsl_s64","vbsl_s8","vbsl_u16","vbsl_u32","vbsl_u64","vbsl_u8","vbslq_f32","vbslq_p16","vbslq_p8","vbslq_s16","vbslq_s32","vbslq_s64","vbslq_s8","vbslq_u16","vbslq_u32","vbslq_u64","vbslq_u8","vcage_f32","vcageq_f32","vcagt_f32","vcagtq_f32","vcale_f32","vcaleq_f32","vcalt_f32","vcaltq_f32","vceq_f32","vceq_p8","vceq_s16","vceq_s32","vceq_s8","vceq_u16","vceq_u32","vceq_u8","vceqq_f32","vceqq_p8","vceqq_s16","vceqq_s32","vceqq_s8","vceqq_u16","vceqq_u32","vceqq_u8","vcge_f32","vcge_s16","vcge_s32","vcge_s8","vcge_u16","vcge_u32","vcge_u8","vcgeq_f32","vcgeq_s16","vcgeq_s32","vcgeq_s8","vcgeq_u16","vcgeq_u32","vcgeq_u8","vcgt_f32","vcgt_s16","vcgt_s32","vcgt_s8","vcgt_u16","vcgt_u32","vcgt_u8","vcgtq_f32","vcgtq_s16","vcgtq_s32","vcgtq_s8","vcgtq_u16","vcgtq_u32","vcgtq_u8","vcle_f32","vcle_s16","vcle_s32","vcle_s8","vcle_u16","vcle_u32","vcle_u8","vcleq_f32","vcleq_s16","vcleq_s32","vcleq_s8","vcleq_u16","vcleq_u32","vcleq_u8","vcls_s16","vcls_s32","vcls_s8","vcls_u16","vcls_u32","vcls_u8","vclsq_s16","vclsq_s32","vclsq_s8","vclsq_u16","vclsq_u32","vclsq_u8","vclt_f32","vclt_s16","vclt_s32","vclt_s8","vclt_u16","vclt_u32","vclt_u8","vcltq_f32","vcltq_s16","vcltq_s32","vcltq_s8","vcltq_u16","vcltq_u32","vcltq_u8","vclz_s16","vclz_s32","vclz_s8","vclz_u16","vclz_u32","vclz_u8","vclzq_s16","vclzq_s32","vclzq_s8","vclzq_u16","vclzq_u32","vclzq_u8","vcnt_p8","vcnt_s8","vcnt_u8","vcntq_p8","vcntq_s8","vcntq_u8","vcombine_f32","vcombine_p16","vcombine_p64","vcombine_p8","vcombine_s16","vcombine_s32","vcombine_s64","vcombine_s8","vcombine_u16","vcombine_u32","vcombine_u64","vcombine_u8","vcreate_f32","vcreate_p16","vcreate_p64","vcreate_p8","vcreate_s16","vcreate_s32","vcreate_s64","vcreate_s8","vcreate_u16","vcreate_u32","vcreate_u64","vcreate_u8","vcvt_f32_s32","vcvt_f32_u32","vcvt_n_f32_s32","vcvt_n_f32_u32","vcvt_n_s32_f32","vcvt_n_u32_f32","vcvt_s32_f32","vcvt_u32_f32","vcvtq_f32_s32","vcvtq_f32_u32","vcvtq_n_f32_s32","vcvtq_n_f32_u32","vcvtq_n_s32_f32","vcvtq_n_u32_f32","vcvtq_s32_f32","vcvtq_u32_f32","vdot_lane_s32","vdot_lane_u32","vdot_s32","vdot_u32","vdotq_lane_s32","vdotq_lane_u32","vdotq_s32","vdotq_u32","vdup_lane_f32","vdup_lane_p16","vdup_lane_p8","vdup_lane_s16","vdup_lane_s32","vdup_lane_s64","vdup_lane_s8","vdup_lane_u16","vdup_lane_u32","vdup_lane_u64","vdup_lane_u8","vdup_laneq_f32","vdup_laneq_p16","vdup_laneq_p8","vdup_laneq_s16","vdup_laneq_s32","vdup_laneq_s64","vdup_laneq_s8","vdup_laneq_u16","vdup_laneq_u32","vdup_laneq_u64","vdup_laneq_u8","vdup_n_f32","vdup_n_p16","vdup_n_p8","vdup_n_s16","vdup_n_s32","vdup_n_s64","vdup_n_s8","vdup_n_u16","vdup_n_u32","vdup_n_u64","vdup_n_u8","vdupq_lane_f32","vdupq_lane_p16","vdupq_lane_p8","vdupq_lane_s16","vdupq_lane_s32","vdupq_lane_s64","vdupq_lane_s8","vdupq_lane_u16","vdupq_lane_u32","vdupq_lane_u64","vdupq_lane_u8","vdupq_laneq_f32","vdupq_laneq_p16","vdupq_laneq_p8","vdupq_laneq_s16","vdupq_laneq_s32","vdupq_laneq_s64","vdupq_laneq_s8","vdupq_laneq_u16","vdupq_laneq_u32","vdupq_laneq_u64","vdupq_laneq_u8","vdupq_n_f32","vdupq_n_p16","vdupq_n_p8","vdupq_n_s16","vdupq_n_s32","vdupq_n_s64","vdupq_n_s8","vdupq_n_u16","vdupq_n_u32","vdupq_n_u64","vdupq_n_u8","veor_s16","veor_s32","veor_s64","veor_s8","veor_u16","veor_u32","veor_u64","veor_u8","veorq_s16","veorq_s32","veorq_s64","veorq_s8","veorq_u16","veorq_u32","veorq_u64","veorq_u8","vext_f32","vext_p16","vext_p8","vext_s16","vext_s32","vext_s64","vext_s8","vext_u16","vext_u32","vext_u64","vext_u8","vextq_f32","vextq_p16","vextq_p8","vextq_s16","vextq_s32","vextq_s64","vextq_s8","vextq_u16","vextq_u32","vextq_u64","vextq_u8","vfma_f32","vfma_n_f32","vfmaq_f32","vfmaq_n_f32","vfms_f32","vfms_n_f32","vfmsq_f32","vfmsq_n_f32","vget_high_f32","vget_high_p16","vget_high_p8","vget_high_s16","vget_high_s32","vget_high_s64","vget_high_s8","vget_high_u16","vget_high_u32","vget_high_u64","vget_high_u8","vget_lane_f32","vget_lane_p16","vget_lane_p64","vget_lane_p8","vget_lane_s16","vget_lane_s32","vget_lane_s64","vget_lane_s8","vget_lane_u16","vget_lane_u32","vget_lane_u64","vget_lane_u8","vget_low_f32","vget_low_p16","vget_low_p8","vget_low_s16","vget_low_s32","vget_low_s64","vget_low_s8","vget_low_u16","vget_low_u32","vget_low_u64","vget_low_u8","vgetq_lane_f32","vgetq_lane_p16","vgetq_lane_p64","vgetq_lane_p8","vgetq_lane_s16","vgetq_lane_s32","vgetq_lane_s64","vgetq_lane_s8","vgetq_lane_u16","vgetq_lane_u32","vgetq_lane_u64","vgetq_lane_u8","vhadd_s16","vhadd_s32","vhadd_s8","vhadd_u16","vhadd_u32","vhadd_u8","vhaddq_s16","vhaddq_s32","vhaddq_s8","vhaddq_u16","vhaddq_u32","vhaddq_u8","vhsub_s16","vhsub_s32","vhsub_s8","vhsub_u16","vhsub_u32","vhsub_u8","vhsubq_s16","vhsubq_s32","vhsubq_s8","vhsubq_u16","vhsubq_u32","vhsubq_u8","vld1_dup_f32","vld1_dup_p16","vld1_dup_p64","vld1_dup_p8","vld1_dup_s16","vld1_dup_s32","vld1_dup_s64","vld1_dup_s8","vld1_dup_u16","vld1_dup_u32","vld1_dup_u64","vld1_dup_u8","vld1_f32","vld1_f32_x2","vld1_f32_x3","vld1_f32_x4","vld1_lane_f32","vld1_lane_p16","vld1_lane_p64","vld1_lane_p8","vld1_lane_s16","vld1_lane_s32","vld1_lane_s64","vld1_lane_s8","vld1_lane_u16","vld1_lane_u32","vld1_lane_u64","vld1_lane_u8","vld1_p16","vld1_p16_x2","vld1_p16_x3","vld1_p16_x4","vld1_p64","vld1_p64_x2","vld1_p64_x3","vld1_p64_x4","vld1_p8","vld1_p8_x2","vld1_p8_x3","vld1_p8_x4","vld1_s16","vld1_s16_x2","vld1_s16_x3","vld1_s16_x4","vld1_s32","vld1_s32_x2","vld1_s32_x3","vld1_s32_x4","vld1_s64","vld1_s64_x2","vld1_s64_x3","vld1_s64_x4","vld1_s8","vld1_s8_x2","vld1_s8_x3","vld1_s8_x4","vld1_u16","vld1_u16_x2","vld1_u16_x3","vld1_u16_x4","vld1_u32","vld1_u32_x2","vld1_u32_x3","vld1_u32_x4","vld1_u64","vld1_u64_x2","vld1_u64_x3","vld1_u64_x4","vld1_u8","vld1_u8_x2","vld1_u8_x3","vld1_u8_x4","vld1q_dup_f32","vld1q_dup_p16","vld1q_dup_p64","vld1q_dup_p8","vld1q_dup_s16","vld1q_dup_s32","vld1q_dup_s64","vld1q_dup_s8","vld1q_dup_u16","vld1q_dup_u32","vld1q_dup_u64","vld1q_dup_u8","vld1q_f32","vld1q_f32_x2","vld1q_f32_x3","vld1q_f32_x4","vld1q_lane_f32","vld1q_lane_p16","vld1q_lane_p64","vld1q_lane_p8","vld1q_lane_s16","vld1q_lane_s32","vld1q_lane_s64","vld1q_lane_s8","vld1q_lane_u16","vld1q_lane_u32","vld1q_lane_u64","vld1q_lane_u8","vld1q_p16","vld1q_p16_x2","vld1q_p16_x3","vld1q_p16_x4","vld1q_p64","vld1q_p64_x2","vld1q_p64_x3","vld1q_p64_x4","vld1q_p8","vld1q_p8_x2","vld1q_p8_x3","vld1q_p8_x4","vld1q_s16","vld1q_s16_x2","vld1q_s16_x3","vld1q_s16_x4","vld1q_s32","vld1q_s32_x2","vld1q_s32_x3","vld1q_s32_x4","vld1q_s64","vld1q_s64_x2","vld1q_s64_x3","vld1q_s64_x4","vld1q_s8","vld1q_s8_x2","vld1q_s8_x3","vld1q_s8_x4","vld1q_u16","vld1q_u16_x2","vld1q_u16_x3","vld1q_u16_x4","vld1q_u32","vld1q_u32_x2","vld1q_u32_x3","vld1q_u32_x4","vld1q_u64","vld1q_u64_x2","vld1q_u64_x3","vld1q_u64_x4","vld1q_u8","vld1q_u8_x2","vld1q_u8_x3","vld1q_u8_x4","vld2_dup_f32","vld2_dup_p16","vld2_dup_p64","vld2_dup_p8","vld2_dup_s16","vld2_dup_s32","vld2_dup_s64","vld2_dup_s8","vld2_dup_u16","vld2_dup_u32","vld2_dup_u64","vld2_dup_u8","vld2_f32","vld2_lane_f32","vld2_lane_p16","vld2_lane_p8","vld2_lane_s16","vld2_lane_s32","vld2_lane_s8","vld2_lane_u16","vld2_lane_u32","vld2_lane_u8","vld2_p16","vld2_p64","vld2_p8","vld2_s16","vld2_s32","vld2_s64","vld2_s8","vld2_u16","vld2_u32","vld2_u64","vld2_u8","vld2q_dup_f32","vld2q_dup_p16","vld2q_dup_p8","vld2q_dup_s16","vld2q_dup_s32","vld2q_dup_s8","vld2q_dup_u16","vld2q_dup_u32","vld2q_dup_u8","vld2q_f32","vld2q_lane_f32","vld2q_lane_p16","vld2q_lane_s16","vld2q_lane_s32","vld2q_lane_u16","vld2q_lane_u32","vld2q_p16","vld2q_p8","vld2q_s16","vld2q_s32","vld2q_s8","vld2q_u16","vld2q_u32","vld2q_u8","vld3_dup_f32","vld3_dup_p16","vld3_dup_p64","vld3_dup_p8","vld3_dup_s16","vld3_dup_s32","vld3_dup_s64","vld3_dup_s8","vld3_dup_u16","vld3_dup_u32","vld3_dup_u64","vld3_dup_u8","vld3_f32","vld3_lane_f32","vld3_lane_p16","vld3_lane_p8","vld3_lane_s16","vld3_lane_s32","vld3_lane_s8","vld3_lane_u16","vld3_lane_u32","vld3_lane_u8","vld3_p16","vld3_p64","vld3_p8","vld3_s16","vld3_s32","vld3_s64","vld3_s8","vld3_u16","vld3_u32","vld3_u64","vld3_u8","vld3q_dup_f32","vld3q_dup_p16","vld3q_dup_p8","vld3q_dup_s16","vld3q_dup_s32","vld3q_dup_s8","vld3q_dup_u16","vld3q_dup_u32","vld3q_dup_u8","vld3q_f32","vld3q_lane_f32","vld3q_lane_p16","vld3q_lane_s16","vld3q_lane_s32","vld3q_lane_u16","vld3q_lane_u32","vld3q_p16","vld3q_p8","vld3q_s16","vld3q_s32","vld3q_s8","vld3q_u16","vld3q_u32","vld3q_u8","vld4_dup_f32","vld4_dup_p16","vld4_dup_p64","vld4_dup_p8","vld4_dup_s16","vld4_dup_s32","vld4_dup_s64","vld4_dup_s8","vld4_dup_u16","vld4_dup_u32","vld4_dup_u64","vld4_dup_u8","vld4_f32","vld4_lane_f32","vld4_lane_p16","vld4_lane_p8","vld4_lane_s16","vld4_lane_s32","vld4_lane_s8","vld4_lane_u16","vld4_lane_u32","vld4_lane_u8","vld4_p16","vld4_p64","vld4_p8","vld4_s16","vld4_s32","vld4_s64","vld4_s8","vld4_u16","vld4_u32","vld4_u64","vld4_u8","vld4q_dup_f32","vld4q_dup_p16","vld4q_dup_p8","vld4q_dup_s16","vld4q_dup_s32","vld4q_dup_s8","vld4q_dup_u16","vld4q_dup_u32","vld4q_dup_u8","vld4q_f32","vld4q_lane_f32","vld4q_lane_p16","vld4q_lane_s16","vld4q_lane_s32","vld4q_lane_u16","vld4q_lane_u32","vld4q_p16","vld4q_p8","vld4q_s16","vld4q_s32","vld4q_s8","vld4q_u16","vld4q_u32","vld4q_u8","vldrq_p128","vmax_f32","vmax_s16","vmax_s32","vmax_s8","vmax_u16","vmax_u32","vmax_u8","vmaxnm_f32","vmaxnmq_f32","vmaxq_f32","vmaxq_s16","vmaxq_s32","vmaxq_s8","vmaxq_u16","vmaxq_u32","vmaxq_u8","vmin_f32","vmin_s16","vmin_s32","vmin_s8","vmin_u16","vmin_u32","vmin_u8","vminnm_f32","vminnmq_f32","vminq_f32","vminq_s16","vminq_s32","vminq_s8","vminq_u16","vminq_u32","vminq_u8","vmla_f32","vmla_lane_f32","vmla_lane_s16","vmla_lane_s32","vmla_lane_u16","vmla_lane_u32","vmla_laneq_f32","vmla_laneq_s16","vmla_laneq_s32","vmla_laneq_u16","vmla_laneq_u32","vmla_n_f32","vmla_n_s16","vmla_n_s32","vmla_n_u16","vmla_n_u32","vmla_s16","vmla_s32","vmla_s8","vmla_u16","vmla_u32","vmla_u8","vmlal_lane_s16","vmlal_lane_s32","vmlal_lane_u16","vmlal_lane_u32","vmlal_laneq_s16","vmlal_laneq_s32","vmlal_laneq_u16","vmlal_laneq_u32","vmlal_n_s16","vmlal_n_s32","vmlal_n_u16","vmlal_n_u32","vmlal_s16","vmlal_s32","vmlal_s8","vmlal_u16","vmlal_u32","vmlal_u8","vmlaq_f32","vmlaq_lane_f32","vmlaq_lane_s16","vmlaq_lane_s32","vmlaq_lane_u16","vmlaq_lane_u32","vmlaq_laneq_f32","vmlaq_laneq_s16","vmlaq_laneq_s32","vmlaq_laneq_u16","vmlaq_laneq_u32","vmlaq_n_f32","vmlaq_n_s16","vmlaq_n_s32","vmlaq_n_u16","vmlaq_n_u32","vmlaq_s16","vmlaq_s32","vmlaq_s8","vmlaq_u16","vmlaq_u32","vmlaq_u8","vmls_f32","vmls_lane_f32","vmls_lane_s16","vmls_lane_s32","vmls_lane_u16","vmls_lane_u32","vmls_laneq_f32","vmls_laneq_s16","vmls_laneq_s32","vmls_laneq_u16","vmls_laneq_u32","vmls_n_f32","vmls_n_s16","vmls_n_s32","vmls_n_u16","vmls_n_u32","vmls_s16","vmls_s32","vmls_s8","vmls_u16","vmls_u32","vmls_u8","vmlsl_lane_s16","vmlsl_lane_s32","vmlsl_lane_u16","vmlsl_lane_u32","vmlsl_laneq_s16","vmlsl_laneq_s32","vmlsl_laneq_u16","vmlsl_laneq_u32","vmlsl_n_s16","vmlsl_n_s32","vmlsl_n_u16","vmlsl_n_u32","vmlsl_s16","vmlsl_s32","vmlsl_s8","vmlsl_u16","vmlsl_u32","vmlsl_u8","vmlsq_f32","vmlsq_lane_f32","vmlsq_lane_s16","vmlsq_lane_s32","vmlsq_lane_u16","vmlsq_lane_u32","vmlsq_laneq_f32","vmlsq_laneq_s16","vmlsq_laneq_s32","vmlsq_laneq_u16","vmlsq_laneq_u32","vmlsq_n_f32","vmlsq_n_s16","vmlsq_n_s32","vmlsq_n_u16","vmlsq_n_u32","vmlsq_s16","vmlsq_s32","vmlsq_s8","vmlsq_u16","vmlsq_u32","vmlsq_u8","vmmlaq_s32","vmmlaq_u32","vmov_n_f32","vmov_n_p16","vmov_n_p8","vmov_n_s16","vmov_n_s32","vmov_n_s64","vmov_n_s8","vmov_n_u16","vmov_n_u32","vmov_n_u64","vmov_n_u8","vmovl_s16","vmovl_s32","vmovl_s8","vmovl_u16","vmovl_u32","vmovl_u8","vmovn_s16","vmovn_s32","vmovn_s64","vmovn_u16","vmovn_u32","vmovn_u64","vmovq_n_f32","vmovq_n_p16","vmovq_n_p8","vmovq_n_s16","vmovq_n_s32","vmovq_n_s64","vmovq_n_s8","vmovq_n_u16","vmovq_n_u32","vmovq_n_u64","vmovq_n_u8","vmul_f32","vmul_lane_f32","vmul_lane_s16","vmul_lane_s32","vmul_lane_u16","vmul_lane_u32","vmul_laneq_f32","vmul_laneq_s16","vmul_laneq_s32","vmul_laneq_u16","vmul_laneq_u32","vmul_n_f32","vmul_n_s16","vmul_n_s32","vmul_n_u16","vmul_n_u32","vmul_p8","vmul_s16","vmul_s32","vmul_s8","vmul_u16","vmul_u32","vmul_u8","vmull_lane_s16","vmull_lane_s32","vmull_lane_u16","vmull_lane_u32","vmull_laneq_s16","vmull_laneq_s32","vmull_laneq_u16","vmull_laneq_u32","vmull_n_s16","vmull_n_s32","vmull_n_u16","vmull_n_u32","vmull_p8","vmull_s16","vmull_s32","vmull_s8","vmull_u16","vmull_u32","vmull_u8","vmulq_f32","vmulq_lane_f32","vmulq_lane_s16","vmulq_lane_s32","vmulq_lane_u16","vmulq_lane_u32","vmulq_laneq_f32","vmulq_laneq_s16","vmulq_laneq_s32","vmulq_laneq_u16","vmulq_laneq_u32","vmulq_n_f32","vmulq_n_s16","vmulq_n_s32","vmulq_n_u16","vmulq_n_u32","vmulq_p8","vmulq_s16","vmulq_s32","vmulq_s8","vmulq_u16","vmulq_u32","vmulq_u8","vmvn_p8","vmvn_s16","vmvn_s32","vmvn_s8","vmvn_u16","vmvn_u32","vmvn_u8","vmvnq_p8","vmvnq_s16","vmvnq_s32","vmvnq_s8","vmvnq_u16","vmvnq_u32","vmvnq_u8","vneg_f32","vneg_s16","vneg_s32","vneg_s8","vnegq_f32","vnegq_s16","vnegq_s32","vnegq_s8","vorn_s16","vorn_s32","vorn_s64","vorn_s8","vorn_u16","vorn_u32","vorn_u64","vorn_u8","vornq_s16","vornq_s32","vornq_s64","vornq_s8","vornq_u16","vornq_u32","vornq_u64","vornq_u8","vorr_s16","vorr_s32","vorr_s64","vorr_s8","vorr_u16","vorr_u32","vorr_u64","vorr_u8","vorrq_s16","vorrq_s32","vorrq_s64","vorrq_s8","vorrq_u16","vorrq_u32","vorrq_u64","vorrq_u8","vpadal_s16","vpadal_s32","vpadal_s8","vpadal_u16","vpadal_u32","vpadal_u8","vpadalq_s16","vpadalq_s32","vpadalq_s8","vpadalq_u16","vpadalq_u32","vpadalq_u8","vpadd_f32","vpadd_s16","vpadd_s32","vpadd_s8","vpadd_u16","vpadd_u32","vpadd_u8","vpaddl_s16","vpaddl_s32","vpaddl_s8","vpaddl_u16","vpaddl_u32","vpaddl_u8","vpaddlq_s16","vpaddlq_s32","vpaddlq_s8","vpaddlq_u16","vpaddlq_u32","vpaddlq_u8","vpmax_f32","vpmax_s16","vpmax_s32","vpmax_s8","vpmax_u16","vpmax_u32","vpmax_u8","vpmin_f32","vpmin_s16","vpmin_s32","vpmin_s8","vpmin_u16","vpmin_u32","vpmin_u8","vqabs_s16","vqabs_s32","vqabs_s8","vqabsq_s16","vqabsq_s32","vqabsq_s8","vqadd_s16","vqadd_s32","vqadd_s64","vqadd_s8","vqadd_u16","vqadd_u32","vqadd_u64","vqadd_u8","vqaddq_s16","vqaddq_s32","vqaddq_s64","vqaddq_s8","vqaddq_u16","vqaddq_u32","vqaddq_u64","vqaddq_u8","vqdmlal_lane_s16","vqdmlal_lane_s32","vqdmlal_n_s16","vqdmlal_n_s32","vqdmlal_s16","vqdmlal_s32","vqdmlsl_lane_s16","vqdmlsl_lane_s32","vqdmlsl_n_s16","vqdmlsl_n_s32","vqdmlsl_s16","vqdmlsl_s32","vqdmulh_laneq_s16","vqdmulh_laneq_s32","vqdmulh_n_s16","vqdmulh_n_s32","vqdmulh_s16","vqdmulh_s32","vqdmulhq_laneq_s16","vqdmulhq_laneq_s32","vqdmulhq_n_s16","vqdmulhq_n_s32","vqdmulhq_s16","vqdmulhq_s32","vqdmull_lane_s16","vqdmull_lane_s32","vqdmull_n_s16","vqdmull_n_s32","vqdmull_s16","vqdmull_s32","vqmovn_s16","vqmovn_s32","vqmovn_s64","vqmovn_u16","vqmovn_u32","vqmovn_u64","vqmovun_s16","vqmovun_s32","vqmovun_s64","vqneg_s16","vqneg_s32","vqneg_s8","vqnegq_s16","vqnegq_s32","vqnegq_s8","vqrdmulh_lane_s16","vqrdmulh_lane_s32","vqrdmulh_laneq_s16","vqrdmulh_laneq_s32","vqrdmulh_n_s16","vqrdmulh_n_s32","vqrdmulh_s16","vqrdmulh_s32","vqrdmulhq_lane_s16","vqrdmulhq_lane_s32","vqrdmulhq_laneq_s16","vqrdmulhq_laneq_s32","vqrdmulhq_n_s16","vqrdmulhq_n_s32","vqrdmulhq_s16","vqrdmulhq_s32","vqrshl_s16","vqrshl_s32","vqrshl_s64","vqrshl_s8","vqrshl_u16","vqrshl_u32","vqrshl_u64","vqrshl_u8","vqrshlq_s16","vqrshlq_s32","vqrshlq_s64","vqrshlq_s8","vqrshlq_u16","vqrshlq_u32","vqrshlq_u64","vqrshlq_u8","vqrshrn_n_s16","vqrshrn_n_s32","vqrshrn_n_s64","vqrshrn_n_u16","vqrshrn_n_u32","vqrshrn_n_u64","vqrshrun_n_s16","vqrshrun_n_s32","vqrshrun_n_s64","vqshl_n_s16","vqshl_n_s32","vqshl_n_s64","vqshl_n_s8","vqshl_n_u16","vqshl_n_u32","vqshl_n_u64","vqshl_n_u8","vqshl_s16","vqshl_s32","vqshl_s64","vqshl_s8","vqshl_u16","vqshl_u32","vqshl_u64","vqshl_u8","vqshlq_n_s16","vqshlq_n_s32","vqshlq_n_s64","vqshlq_n_s8","vqshlq_n_u16","vqshlq_n_u32","vqshlq_n_u64","vqshlq_n_u8","vqshlq_s16","vqshlq_s32","vqshlq_s64","vqshlq_s8","vqshlq_u16","vqshlq_u32","vqshlq_u64","vqshlq_u8","vqshlu_n_s16","vqshlu_n_s32","vqshlu_n_s64","vqshlu_n_s8","vqshluq_n_s16","vqshluq_n_s32","vqshluq_n_s64","vqshluq_n_s8","vqshrn_n_s16","vqshrn_n_s32","vqshrn_n_s64","vqshrn_n_u16","vqshrn_n_u32","vqshrn_n_u64","vqshrun_n_s16","vqshrun_n_s32","vqshrun_n_s64","vqsub_s16","vqsub_s32","vqsub_s64","vqsub_s8","vqsub_u16","vqsub_u32","vqsub_u64","vqsub_u8","vqsubq_s16","vqsubq_s32","vqsubq_s64","vqsubq_s8","vqsubq_u16","vqsubq_u32","vqsubq_u64","vqsubq_u8","vraddhn_high_s16","vraddhn_high_s32","vraddhn_high_s64","vraddhn_high_u16","vraddhn_high_u32","vraddhn_high_u64","vraddhn_s16","vraddhn_s32","vraddhn_s64","vraddhn_u16","vraddhn_u32","vraddhn_u64","vrecpe_f32","vrecpe_u32","vrecpeq_f32","vrecpeq_u32","vrecps_f32","vrecpsq_f32","vreinterpret_f32_p16","vreinterpret_f32_p8","vreinterpret_f32_s16","vreinterpret_f32_s32","vreinterpret_f32_s64","vreinterpret_f32_s8","vreinterpret_f32_u16","vreinterpret_f32_u32","vreinterpret_f32_u64","vreinterpret_f32_u8","vreinterpret_p16_f32","vreinterpret_p16_p64","vreinterpret_p16_p8","vreinterpret_p16_s16","vreinterpret_p16_s32","vreinterpret_p16_s64","vreinterpret_p16_s8","vreinterpret_p16_u16","vreinterpret_p16_u32","vreinterpret_p16_u64","vreinterpret_p16_u8","vreinterpret_p64_p16","vreinterpret_p64_p8","vreinterpret_p64_s16","vreinterpret_p64_s32","vreinterpret_p64_s8","vreinterpret_p64_u16","vreinterpret_p64_u32","vreinterpret_p64_u8","vreinterpret_p8_f32","vreinterpret_p8_p16","vreinterpret_p8_p64","vreinterpret_p8_s16","vreinterpret_p8_s32","vreinterpret_p8_s64","vreinterpret_p8_s8","vreinterpret_p8_u16","vreinterpret_p8_u32","vreinterpret_p8_u64","vreinterpret_p8_u8","vreinterpret_s16_f32","vreinterpret_s16_p16","vreinterpret_s16_p64","vreinterpret_s16_p8","vreinterpret_s16_s32","vreinterpret_s16_s64","vreinterpret_s16_s8","vreinterpret_s16_u16","vreinterpret_s16_u32","vreinterpret_s16_u64","vreinterpret_s16_u8","vreinterpret_s32_f32","vreinterpret_s32_p16","vreinterpret_s32_p64","vreinterpret_s32_p8","vreinterpret_s32_s16","vreinterpret_s32_s64","vreinterpret_s32_s8","vreinterpret_s32_u16","vreinterpret_s32_u32","vreinterpret_s32_u64","vreinterpret_s32_u8","vreinterpret_s64_f32","vreinterpret_s64_p16","vreinterpret_s64_p8","vreinterpret_s64_s16","vreinterpret_s64_s32","vreinterpret_s64_s8","vreinterpret_s64_u16","vreinterpret_s64_u32","vreinterpret_s64_u64","vreinterpret_s64_u8","vreinterpret_s8_f32","vreinterpret_s8_p16","vreinterpret_s8_p64","vreinterpret_s8_p8","vreinterpret_s8_s16","vreinterpret_s8_s32","vreinterpret_s8_s64","vreinterpret_s8_u16","vreinterpret_s8_u32","vreinterpret_s8_u64","vreinterpret_s8_u8","vreinterpret_u16_f32","vreinterpret_u16_p16","vreinterpret_u16_p64","vreinterpret_u16_p8","vreinterpret_u16_s16","vreinterpret_u16_s32","vreinterpret_u16_s64","vreinterpret_u16_s8","vreinterpret_u16_u32","vreinterpret_u16_u64","vreinterpret_u16_u8","vreinterpret_u32_f32","vreinterpret_u32_p16","vreinterpret_u32_p64","vreinterpret_u32_p8","vreinterpret_u32_s16","vreinterpret_u32_s32","vreinterpret_u32_s64","vreinterpret_u32_s8","vreinterpret_u32_u16","vreinterpret_u32_u64","vreinterpret_u32_u8","vreinterpret_u64_f32","vreinterpret_u64_p16","vreinterpret_u64_p8","vreinterpret_u64_s16","vreinterpret_u64_s32","vreinterpret_u64_s64","vreinterpret_u64_s8","vreinterpret_u64_u16","vreinterpret_u64_u32","vreinterpret_u64_u8","vreinterpret_u8_f32","vreinterpret_u8_p16","vreinterpret_u8_p64","vreinterpret_u8_p8","vreinterpret_u8_s16","vreinterpret_u8_s32","vreinterpret_u8_s64","vreinterpret_u8_s8","vreinterpret_u8_u16","vreinterpret_u8_u32","vreinterpret_u8_u64","vreinterpretq_f32_p128","vreinterpretq_f32_p16","vreinterpretq_f32_p8","vreinterpretq_f32_s16","vreinterpretq_f32_s32","vreinterpretq_f32_s64","vreinterpretq_f32_s8","vreinterpretq_f32_u16","vreinterpretq_f32_u32","vreinterpretq_f32_u64","vreinterpretq_f32_u8","vreinterpretq_p128_f32","vreinterpretq_p128_p16","vreinterpretq_p128_p64","vreinterpretq_p128_p8","vreinterpretq_p128_s16","vreinterpretq_p128_s32","vreinterpretq_p128_s64","vreinterpretq_p128_s8","vreinterpretq_p128_u16","vreinterpretq_p128_u32","vreinterpretq_p128_u64","vreinterpretq_p128_u8","vreinterpretq_p16_f32","vreinterpretq_p16_p128","vreinterpretq_p16_p64","vreinterpretq_p16_p8","vreinterpretq_p16_s16","vreinterpretq_p16_s32","vreinterpretq_p16_s64","vreinterpretq_p16_s8","vreinterpretq_p16_u16","vreinterpretq_p16_u32","vreinterpretq_p16_u64","vreinterpretq_p16_u8","vreinterpretq_p64_p128","vreinterpretq_p64_p16","vreinterpretq_p64_p8","vreinterpretq_p64_s16","vreinterpretq_p64_s32","vreinterpretq_p64_s8","vreinterpretq_p64_u16","vreinterpretq_p64_u32","vreinterpretq_p64_u8","vreinterpretq_p8_f32","vreinterpretq_p8_p128","vreinterpretq_p8_p16","vreinterpretq_p8_p64","vreinterpretq_p8_s16","vreinterpretq_p8_s32","vreinterpretq_p8_s64","vreinterpretq_p8_s8","vreinterpretq_p8_u16","vreinterpretq_p8_u32","vreinterpretq_p8_u64","vreinterpretq_p8_u8","vreinterpretq_s16_f32","vreinterpretq_s16_p128","vreinterpretq_s16_p16","vreinterpretq_s16_p64","vreinterpretq_s16_p8","vreinterpretq_s16_s32","vreinterpretq_s16_s64","vreinterpretq_s16_s8","vreinterpretq_s16_u16","vreinterpretq_s16_u32","vreinterpretq_s16_u64","vreinterpretq_s16_u8","vreinterpretq_s32_f32","vreinterpretq_s32_p128","vreinterpretq_s32_p16","vreinterpretq_s32_p64","vreinterpretq_s32_p8","vreinterpretq_s32_s16","vreinterpretq_s32_s64","vreinterpretq_s32_s8","vreinterpretq_s32_u16","vreinterpretq_s32_u32","vreinterpretq_s32_u64","vreinterpretq_s32_u8","vreinterpretq_s64_f32","vreinterpretq_s64_p128","vreinterpretq_s64_p16","vreinterpretq_s64_p8","vreinterpretq_s64_s16","vreinterpretq_s64_s32","vreinterpretq_s64_s8","vreinterpretq_s64_u16","vreinterpretq_s64_u32","vreinterpretq_s64_u64","vreinterpretq_s64_u8","vreinterpretq_s8_f32","vreinterpretq_s8_p128","vreinterpretq_s8_p16","vreinterpretq_s8_p64","vreinterpretq_s8_p8","vreinterpretq_s8_s16","vreinterpretq_s8_s32","vreinterpretq_s8_s64","vreinterpretq_s8_u16","vreinterpretq_s8_u32","vreinterpretq_s8_u64","vreinterpretq_s8_u8","vreinterpretq_u16_f32","vreinterpretq_u16_p128","vreinterpretq_u16_p16","vreinterpretq_u16_p64","vreinterpretq_u16_p8","vreinterpretq_u16_s16","vreinterpretq_u16_s32","vreinterpretq_u16_s64","vreinterpretq_u16_s8","vreinterpretq_u16_u32","vreinterpretq_u16_u64","vreinterpretq_u16_u8","vreinterpretq_u32_f32","vreinterpretq_u32_p128","vreinterpretq_u32_p16","vreinterpretq_u32_p64","vreinterpretq_u32_p8","vreinterpretq_u32_s16","vreinterpretq_u32_s32","vreinterpretq_u32_s64","vreinterpretq_u32_s8","vreinterpretq_u32_u16","vreinterpretq_u32_u64","vreinterpretq_u32_u8","vreinterpretq_u64_f32","vreinterpretq_u64_p128","vreinterpretq_u64_p16","vreinterpretq_u64_p8","vreinterpretq_u64_s16","vreinterpretq_u64_s32","vreinterpretq_u64_s64","vreinterpretq_u64_s8","vreinterpretq_u64_u16","vreinterpretq_u64_u32","vreinterpretq_u64_u8","vreinterpretq_u8_f32","vreinterpretq_u8_p128","vreinterpretq_u8_p16","vreinterpretq_u8_p64","vreinterpretq_u8_p8","vreinterpretq_u8_s16","vreinterpretq_u8_s32","vreinterpretq_u8_s64","vreinterpretq_u8_s8","vreinterpretq_u8_u16","vreinterpretq_u8_u32","vreinterpretq_u8_u64","vrev16_p8","vrev16_s8","vrev16_u8","vrev16q_p8","vrev16q_s8","vrev16q_u8","vrev32_p16","vrev32_p8","vrev32_s16","vrev32_s8","vrev32_u16","vrev32_u8","vrev32q_p16","vrev32q_p8","vrev32q_s16","vrev32q_s8","vrev32q_u16","vrev32q_u8","vrev64_f32","vrev64_p16","vrev64_p8","vrev64_s16","vrev64_s32","vrev64_s8","vrev64_u16","vrev64_u32","vrev64_u8","vrev64q_f32","vrev64q_p16","vrev64q_p8","vrev64q_s16","vrev64q_s32","vrev64q_s8","vrev64q_u16","vrev64q_u32","vrev64q_u8","vrhadd_s16","vrhadd_s32","vrhadd_s8","vrhadd_u16","vrhadd_u32","vrhadd_u8","vrhaddq_s16","vrhaddq_s32","vrhaddq_s8","vrhaddq_u16","vrhaddq_u32","vrhaddq_u8","vrndn_f32","vrndnq_f32","vrshl_s16","vrshl_s32","vrshl_s64","vrshl_s8","vrshl_u16","vrshl_u32","vrshl_u64","vrshl_u8","vrshlq_s16","vrshlq_s32","vrshlq_s64","vrshlq_s8","vrshlq_u16","vrshlq_u32","vrshlq_u64","vrshlq_u8","vrshr_n_s16","vrshr_n_s32","vrshr_n_s64","vrshr_n_s8","vrshr_n_u16","vrshr_n_u32","vrshr_n_u64","vrshr_n_u8","vrshrn_n_s16","vrshrn_n_s32","vrshrn_n_s64","vrshrn_n_u16","vrshrn_n_u32","vrshrn_n_u64","vrshrq_n_s16","vrshrq_n_s32","vrshrq_n_s64","vrshrq_n_s8","vrshrq_n_u16","vrshrq_n_u32","vrshrq_n_u64","vrshrq_n_u8","vrsqrte_f32","vrsqrte_u32","vrsqrteq_f32","vrsqrteq_u32","vrsqrts_f32","vrsqrtsq_f32","vrsra_n_s16","vrsra_n_s32","vrsra_n_s64","vrsra_n_s8","vrsra_n_u16","vrsra_n_u32","vrsra_n_u64","vrsra_n_u8","vrsraq_n_s16","vrsraq_n_s32","vrsraq_n_s64","vrsraq_n_s8","vrsraq_n_u16","vrsraq_n_u32","vrsraq_n_u64","vrsraq_n_u8","vrsubhn_s16","vrsubhn_s32","vrsubhn_s64","vrsubhn_u16","vrsubhn_u32","vrsubhn_u64","vset_lane_f32","vset_lane_p16","vset_lane_p64","vset_lane_p8","vset_lane_s16","vset_lane_s32","vset_lane_s64","vset_lane_s8","vset_lane_u16","vset_lane_u32","vset_lane_u64","vset_lane_u8","vsetq_lane_f32","vsetq_lane_p16","vsetq_lane_p64","vsetq_lane_p8","vsetq_lane_s16","vsetq_lane_s32","vsetq_lane_s64","vsetq_lane_s8","vsetq_lane_u16","vsetq_lane_u32","vsetq_lane_u64","vsetq_lane_u8","vsha1cq_u32","vsha1h_u32","vsha1mq_u32","vsha1pq_u32","vsha1su0q_u32","vsha1su1q_u32","vsha256h2q_u32","vsha256hq_u32","vsha256su0q_u32","vsha256su1q_u32","vshl_n_s16","vshl_n_s32","vshl_n_s64","vshl_n_s8","vshl_n_u16","vshl_n_u32","vshl_n_u64","vshl_n_u8","vshl_s16","vshl_s32","vshl_s64","vshl_s8","vshl_u16","vshl_u32","vshl_u64","vshl_u8","vshll_n_s16","vshll_n_s32","vshll_n_s8","vshll_n_u16","vshll_n_u32","vshll_n_u8","vshlq_n_s16","vshlq_n_s32","vshlq_n_s64","vshlq_n_s8","vshlq_n_u16","vshlq_n_u32","vshlq_n_u64","vshlq_n_u8","vshlq_s16","vshlq_s32","vshlq_s64","vshlq_s8","vshlq_u16","vshlq_u32","vshlq_u64","vshlq_u8","vshr_n_s16","vshr_n_s32","vshr_n_s64","vshr_n_s8","vshr_n_u16","vshr_n_u32","vshr_n_u64","vshr_n_u8","vshrn_n_s16","vshrn_n_s32","vshrn_n_s64","vshrn_n_u16","vshrn_n_u32","vshrn_n_u64","vshrq_n_s16","vshrq_n_s32","vshrq_n_s64","vshrq_n_s8","vshrq_n_u16","vshrq_n_u32","vshrq_n_u64","vshrq_n_u8","vsli_n_p16","vsli_n_p64","vsli_n_p8","vsli_n_s16","vsli_n_s32","vsli_n_s64","vsli_n_s8","vsli_n_u16","vsli_n_u32","vsli_n_u64","vsli_n_u8","vsliq_n_p16","vsliq_n_p64","vsliq_n_p8","vsliq_n_s16","vsliq_n_s32","vsliq_n_s64","vsliq_n_s8","vsliq_n_u16","vsliq_n_u32","vsliq_n_u64","vsliq_n_u8","vsra_n_s16","vsra_n_s32","vsra_n_s64","vsra_n_s8","vsra_n_u16","vsra_n_u32","vsra_n_u64","vsra_n_u8","vsraq_n_s16","vsraq_n_s32","vsraq_n_s64","vsraq_n_s8","vsraq_n_u16","vsraq_n_u32","vsraq_n_u64","vsraq_n_u8","vsri_n_p16","vsri_n_p64","vsri_n_p8","vsri_n_s16","vsri_n_s32","vsri_n_s64","vsri_n_s8","vsri_n_u16","vsri_n_u32","vsri_n_u64","vsri_n_u8","vsriq_n_p16","vsriq_n_p64","vsriq_n_p8","vsriq_n_s16","vsriq_n_s32","vsriq_n_s64","vsriq_n_s8","vsriq_n_u16","vsriq_n_u32","vsriq_n_u64","vsriq_n_u8","vst1_f32","vst1_f32_x2","vst1_f32_x3","vst1_f32_x4","vst1_lane_f32","vst1_lane_p16","vst1_lane_p64","vst1_lane_p8","vst1_lane_s16","vst1_lane_s32","vst1_lane_s64","vst1_lane_s8","vst1_lane_u16","vst1_lane_u32","vst1_lane_u64","vst1_lane_u8","vst1_p16","vst1_p16_x2","vst1_p16_x3","vst1_p16_x4","vst1_p64","vst1_p64_x2","vst1_p64_x3","vst1_p64_x4","vst1_p8","vst1_p8_x2","vst1_p8_x3","vst1_p8_x4","vst1_s16","vst1_s16_x2","vst1_s16_x3","vst1_s16_x4","vst1_s32","vst1_s32_x2","vst1_s32_x3","vst1_s32_x4","vst1_s64","vst1_s64_x2","vst1_s64_x3","vst1_s64_x4","vst1_s8","vst1_s8_x2","vst1_s8_x3","vst1_s8_x4","vst1_u16","vst1_u16_x2","vst1_u16_x3","vst1_u16_x4","vst1_u32","vst1_u32_x2","vst1_u32_x3","vst1_u32_x4","vst1_u64","vst1_u64_x2","vst1_u64_x3","vst1_u64_x4","vst1_u8","vst1_u8_x2","vst1_u8_x3","vst1_u8_x4","vst1q_f32","vst1q_f32_x2","vst1q_f32_x3","vst1q_f32_x4","vst1q_lane_f32","vst1q_lane_p16","vst1q_lane_p64","vst1q_lane_p8","vst1q_lane_s16","vst1q_lane_s32","vst1q_lane_s64","vst1q_lane_s8","vst1q_lane_u16","vst1q_lane_u32","vst1q_lane_u64","vst1q_lane_u8","vst1q_p16","vst1q_p16_x2","vst1q_p16_x3","vst1q_p16_x4","vst1q_p64","vst1q_p64_x2","vst1q_p64_x3","vst1q_p64_x4","vst1q_p8","vst1q_p8_x2","vst1q_p8_x3","vst1q_p8_x4","vst1q_s16","vst1q_s16_x2","vst1q_s16_x3","vst1q_s16_x4","vst1q_s32","vst1q_s32_x2","vst1q_s32_x3","vst1q_s32_x4","vst1q_s64","vst1q_s64_x2","vst1q_s64_x3","vst1q_s64_x4","vst1q_s8","vst1q_s8_x2","vst1q_s8_x3","vst1q_s8_x4","vst1q_u16","vst1q_u16_x2","vst1q_u16_x3","vst1q_u16_x4","vst1q_u32","vst1q_u32_x2","vst1q_u32_x3","vst1q_u32_x4","vst1q_u64","vst1q_u64_x2","vst1q_u64_x3","vst1q_u64_x4","vst1q_u8","vst1q_u8_x2","vst1q_u8_x3","vst1q_u8_x4","vst2_f32","vst2_lane_f32","vst2_lane_p16","vst2_lane_p8","vst2_lane_s16","vst2_lane_s32","vst2_lane_s8","vst2_lane_u16","vst2_lane_u32","vst2_lane_u8","vst2_p16","vst2_p64","vst2_p8","vst2_s16","vst2_s32","vst2_s64","vst2_s8","vst2_u16","vst2_u32","vst2_u64","vst2_u8","vst2q_f32","vst2q_lane_f32","vst2q_lane_p16","vst2q_lane_s16","vst2q_lane_s32","vst2q_lane_u16","vst2q_lane_u32","vst2q_p16","vst2q_p8","vst2q_s16","vst2q_s32","vst2q_s8","vst2q_u16","vst2q_u32","vst2q_u8","vst3_f32","vst3_lane_f32","vst3_lane_p16","vst3_lane_p8","vst3_lane_s16","vst3_lane_s32","vst3_lane_s8","vst3_lane_u16","vst3_lane_u32","vst3_lane_u8","vst3_p16","vst3_p64","vst3_p8","vst3_s16","vst3_s32","vst3_s64","vst3_s8","vst3_u16","vst3_u32","vst3_u64","vst3_u8","vst3q_f32","vst3q_lane_f32","vst3q_lane_p16","vst3q_lane_s16","vst3q_lane_s32","vst3q_lane_u16","vst3q_lane_u32","vst3q_p16","vst3q_p8","vst3q_s16","vst3q_s32","vst3q_s8","vst3q_u16","vst3q_u32","vst3q_u8","vst4_f32","vst4_lane_f32","vst4_lane_p16","vst4_lane_p8","vst4_lane_s16","vst4_lane_s32","vst4_lane_s8","vst4_lane_u16","vst4_lane_u32","vst4_lane_u8","vst4_p16","vst4_p64","vst4_p8","vst4_s16","vst4_s32","vst4_s64","vst4_s8","vst4_u16","vst4_u32","vst4_u64","vst4_u8","vst4q_f32","vst4q_lane_f32","vst4q_lane_p16","vst4q_lane_s16","vst4q_lane_s32","vst4q_lane_u16","vst4q_lane_u32","vst4q_p16","vst4q_p8","vst4q_s16","vst4q_s32","vst4q_s8","vst4q_u16","vst4q_u32","vst4q_u8","vstrq_p128","vsub_f32","vsub_s16","vsub_s32","vsub_s64","vsub_s8","vsub_u16","vsub_u32","vsub_u64","vsub_u8","vsubhn_high_s16","vsubhn_high_s32","vsubhn_high_s64","vsubhn_high_u16","vsubhn_high_u32","vsubhn_high_u64","vsubhn_s16","vsubhn_s32","vsubhn_s64","vsubhn_u16","vsubhn_u32","vsubhn_u64","vsubl_s16","vsubl_s32","vsubl_s8","vsubl_u16","vsubl_u32","vsubl_u8","vsubq_f32","vsubq_s16","vsubq_s32","vsubq_s64","vsubq_s8","vsubq_u16","vsubq_u32","vsubq_u64","vsubq_u8","vsubw_s16","vsubw_s32","vsubw_s8","vsubw_u16","vsubw_u32","vsubw_u8","vsudot_lane_s32","vsudotq_lane_s32","vtbl1_p8","vtbl1_s8","vtbl1_u8","vtbl2_p8","vtbl2_s8","vtbl2_u8","vtbl3_p8","vtbl3_s8","vtbl3_u8","vtbl4_p8","vtbl4_s8","vtbl4_u8","vtbx1_p8","vtbx1_s8","vtbx1_u8","vtbx2_p8","vtbx2_s8","vtbx2_u8","vtbx3_p8","vtbx3_s8","vtbx3_u8","vtbx4_p8","vtbx4_s8","vtbx4_u8","vtrn_f32","vtrn_p16","vtrn_p8","vtrn_s16","vtrn_s32","vtrn_s8","vtrn_u16","vtrn_u32","vtrn_u8","vtrnq_f32","vtrnq_p16","vtrnq_p8","vtrnq_s16","vtrnq_s32","vtrnq_s8","vtrnq_u16","vtrnq_u32","vtrnq_u8","vtst_p16","vtst_p8","vtst_s16","vtst_s32","vtst_s8","vtst_u16","vtst_u32","vtst_u8","vtstq_p16","vtstq_p8","vtstq_s16","vtstq_s32","vtstq_s8","vtstq_u16","vtstq_u32","vtstq_u8","vusdot_lane_s32","vusdot_s32","vusdotq_lane_s32","vusdotq_s32","vusmmlaq_s32","vuzp_f32","vuzp_p16","vuzp_p8","vuzp_s16","vuzp_s32","vuzp_s8","vuzp_u16","vuzp_u32","vuzp_u8","vuzpq_f32","vuzpq_p16","vuzpq_p8","vuzpq_s16","vuzpq_s32","vuzpq_s8","vuzpq_u16","vuzpq_u32","vuzpq_u8","vzip_f32","vzip_p16","vzip_p8","vzip_s16","vzip_s32","vzip_s8","vzip_u16","vzip_u32","vzip_u8","vzipq_f32","vzipq_p16","vzipq_p8","vzipq_s16","vzipq_s32","vzipq_s8","vzipq_u16","vzipq_u32","vzipq_u8","__qadd","__qdbl","__qsub","__smlabb","__smlabt","__smlatb","__smlatt","__smlawb","__smlawt","__smulbb","__smulbt","__smultb","__smultt","__smulwb","__smulwt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","fmt","fmt","from","from","int16x2_t","into","into","try_from","try_from","try_into","try_into","type_id","type_id","uint16x2_t","break_","break_","__assert_fail","_block_dim_x","_block_dim_y","_block_dim_z","_block_idx_x","_block_idx_y","_block_idx_z","_grid_dim_x","_grid_dim_y","_grid_dim_z","_syncthreads","_thread_idx_x","_thread_idx_y","_thread_idx_z","free","malloc","trap","vprintf","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","neg","neg","neg","neg","trap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec_abs","vec_abss","vec_add","vec_addc","vec_adds","vec_all_eq","vec_all_ge","vec_all_gt","vec_all_in","vec_all_le","vec_all_lt","vec_all_nan","vec_all_ne","vec_all_nge","vec_all_ngt","vec_all_nle","vec_all_nlt","vec_all_numeric","vec_and","vec_andc","vec_any_eq","vec_any_ge","vec_any_gt","vec_any_le","vec_any_lt","vec_any_nan","vec_any_ne","vec_any_nge","vec_any_ngt","vec_any_nle","vec_any_nlt","vec_any_numeric","vec_any_out","vec_avg","vec_ceil","vec_cmpb","vec_cmpeq","vec_cmpge","vec_cmpgt","vec_cmple","vec_cmplt","vec_ctf","vec_cts","vec_ctu","vec_expte","vec_floor","vec_ld","vec_lde","vec_ldl","vec_loge","vec_madd","vec_madds","vec_max","vec_mergeh","vec_mergel","vec_mfvscr","vec_min","vec_mladd","vec_mradds","vec_msum","vec_msums","vec_mule","vec_mulo","vec_nmsub","vec_nor","vec_or","vec_pack","vec_packs","vec_packsu","vec_perm","vec_splat","vec_splat_i16","vec_splat_i32","vec_splat_i8","vec_splat_u16","vec_splat_u32","vec_splat_u8","vec_splats","vec_sub","vec_subs","vec_sum2s","vec_sum4s","vec_unpackh","vec_unpackl","vec_xl","vec_xor","vec_xxpermdi","vector_bool_char","vector_bool_int","vector_bool_long","vector_bool_short","vector_double","vector_float","vector_signed_char","vector_signed_int","vector_signed_long","vector_signed_short","vector_unsigned_char","vector_unsigned_int","vector_unsigned_long","vector_unsigned_short","trap","vec_abs","vec_abss","vec_add","vec_addc","vec_adds","vec_all_eq","vec_all_ge","vec_all_gt","vec_all_in","vec_all_le","vec_all_lt","vec_all_nan","vec_all_ne","vec_all_nge","vec_all_ngt","vec_all_nle","vec_all_nlt","vec_all_numeric","vec_and","vec_andc","vec_any_eq","vec_any_ge","vec_any_gt","vec_any_le","vec_any_lt","vec_any_nan","vec_any_ne","vec_any_nge","vec_any_ngt","vec_any_nle","vec_any_nlt","vec_any_numeric","vec_any_out","vec_avg","vec_ceil","vec_cmpb","vec_cmpeq","vec_cmpge","vec_cmpgt","vec_cmple","vec_cmplt","vec_ctf","vec_cts","vec_ctu","vec_expte","vec_floor","vec_ld","vec_lde","vec_ldl","vec_loge","vec_madd","vec_madds","vec_max","vec_mergeh","vec_mergel","vec_mfvscr","vec_min","vec_mladd","vec_mradds","vec_msum","vec_msums","vec_mule","vec_mulo","vec_nmsub","vec_nor","vec_or","vec_pack","vec_packs","vec_packsu","vec_perm","vec_splat","vec_splat_i16","vec_splat_i32","vec_splat_i8","vec_splat_u16","vec_splat_u32","vec_splat_u8","vec_splats","vec_sub","vec_subs","vec_sum2s","vec_sum4s","vec_unpackh","vec_unpackl","vec_xl","vec_xor","vec_xxpermdi","vector_bool_char","vector_bool_int","vector_bool_long","vector_bool_short","vector_double","vector_float","vector_signed_char","vector_signed_int","vector_signed_long","vector_signed_short","vector_unsigned_char","vector_unsigned_int","vector_unsigned_long","vector_unsigned_short","add16","add8","aes32dsi","aes32dsmi","aes32esi","aes32esmi","clmul","clmulh","clmulr","clrs16","clrs32","clrs8","clz16","clz32","clz8","cmpeq16","cmpeq8","cras16","crsa16","fence_i","frcsr","frflags","frrm","fscsr","fsflags","fsrm","hfence_gvma","hfence_gvma_all","hfence_gvma_gaddr","hfence_gvma_vmid","hfence_vvma","hfence_vvma_all","hfence_vvma_asid","hfence_vvma_vaddr","hinval_gvma","hinval_gvma_all","hinval_gvma_gaddr","hinval_gvma_vmid","hinval_vvma","hinval_vvma_all","hinval_vvma_asid","hinval_vvma_vaddr","hlv_b","hlv_bu","hlv_h","hlv_hu","hlv_w","hlvx_hu","hlvx_wu","hsv_b","hsv_h","hsv_w","kabs16","kabs8","kadd16","kadd8","kaddh","kcras16","kcrsa16","ksll16","ksll8","kslra16","kslra16u","kslra8","kslra8u","kstas16","kstsa16","ksub16","ksub8","ksubh","nop","orc_b","pause","pbsad","pbsada","pkbt16","pktb16","radd16","radd8","rcras16","rcrsa16","rstas16","rstsa16","rsub16","rsub8","scmple16","scmple8","scmplt16","scmplt8","sfence_inval_ir","sfence_vma","sfence_vma_all","sfence_vma_asid","sfence_vma_vaddr","sfence_w_inval","sha256sig0","sha256sig1","sha256sum0","sha256sum1","sha512sig0h","sha512sig0l","sha512sig1h","sha512sig1l","sha512sum0r","sha512sum1r","sinval_vma","sinval_vma_all","sinval_vma_asid","sinval_vma_vaddr","sll16","sll8","sm3p0","sm3p1","sm4ed","sm4ks","smaqa","smaqasu","smax16","smax8","smin16","smin8","sra16","sra16u","sra8","sra8u","srl16","srl16u","srl8","srl8u","stas16","stsa16","sub16","sub8","sunpkd810","sunpkd820","sunpkd830","sunpkd831","sunpkd832","swap16","swap8","ucmple16","ucmple8","ucmplt16","ucmplt8","ukadd16","ukadd8","ukaddh","ukcras16","ukcrsa16","ukstas16","ukstsa16","uksub16","uksub8","uksubh","umaqa","umax16","umax8","umin16","umin8","unzip","uradd16","uradd8","urcras16","urcrsa16","urstas16","urstsa16","ursub16","ursub8","wfi","xperm4","xperm8","zip","zunpkd810","zunpkd820","zunpkd830","zunpkd831","zunpkd832","add16","add8","aes64ds","aes64dsm","aes64es","aes64esm","aes64ks1i","aes64ks2","clmul","clmulh","clmulr","clrs16","clrs32","clrs8","clz16","clz32","clz8","cmpeq16","cmpeq8","cras16","crsa16","fence_i","frcsr","frflags","frrm","fscsr","fsflags","fsrm","hfence_gvma","hfence_gvma_all","hfence_gvma_gaddr","hfence_gvma_vmid","hfence_vvma","hfence_vvma_all","hfence_vvma_asid","hfence_vvma_vaddr","hinval_gvma","hinval_gvma_all","hinval_gvma_gaddr","hinval_gvma_vmid","hinval_vvma","hinval_vvma_all","hinval_vvma_asid","hinval_vvma_vaddr","hlv_b","hlv_bu","hlv_d","hlv_h","hlv_hu","hlv_w","hlv_wu","hlvx_hu","hlvx_wu","hsv_b","hsv_d","hsv_h","hsv_w","kabs16","kabs8","kadd16","kadd8","kaddh","kcras16","kcrsa16","ksll16","ksll8","kslra16","kslra16u","kslra8","kslra8u","kstas16","kstsa16","ksub16","ksub8","ksubh","nop","orc_b","pause","pbsad","pbsada","pkbt16","pktb16","radd16","radd8","rcras16","rcrsa16","rstas16","rstsa16","rsub16","rsub8","scmple16","scmple8","scmplt16","scmplt8","sfence_inval_ir","sfence_vma","sfence_vma_all","sfence_vma_asid","sfence_vma_vaddr","sfence_w_inval","sha256sig0","sha256sig1","sha256sum0","sha256sum1","sha512sig0","sha512sig1","sha512sum0","sha512sum1","sinval_vma","sinval_vma_all","sinval_vma_asid","sinval_vma_vaddr","sll16","sll8","sm3p0","sm3p1","sm4ed","sm4ks","smaqa","smaqasu","smax16","smax8","smin16","smin8","sra16","sra16u","sra8","sra8u","srl16","srl16u","srl8","srl8u","stas16","stsa16","sub16","sub8","sunpkd810","sunpkd820","sunpkd830","sunpkd831","sunpkd832","swap16","swap8","ucmple16","ucmple8","ucmplt16","ucmplt8","ukadd16","ukadd8","ukaddh","ukcras16","ukcrsa16","ukstas16","ukstsa16","uksub16","uksub8","uksubh","umaqa","umax16","umax8","umin16","umin8","uradd16","uradd8","urcras16","urcrsa16","urstas16","urstsa16","ursub16","ursub8","wfi","xperm4","xperm8","zunpkd810","zunpkd820","zunpkd830","zunpkd831","zunpkd832","f32x4","f32x4_abs","f32x4_add","f32x4_ceil","f32x4_convert_i32x4","f32x4_convert_u32x4","f32x4_demote_f64x2_zero","f32x4_div","f32x4_eq","f32x4_extract_lane","f32x4_floor","f32x4_ge","f32x4_gt","f32x4_le","f32x4_lt","f32x4_max","f32x4_min","f32x4_mul","f32x4_ne","f32x4_nearest","f32x4_neg","f32x4_pmax","f32x4_pmin","f32x4_relaxed_madd","f32x4_relaxed_max","f32x4_relaxed_min","f32x4_relaxed_nmadd","f32x4_replace_lane","f32x4_splat","f32x4_sqrt","f32x4_sub","f32x4_trunc","f64x2","f64x2_abs","f64x2_add","f64x2_ceil","f64x2_convert_low_i32x4","f64x2_convert_low_u32x4","f64x2_div","f64x2_eq","f64x2_extract_lane","f64x2_floor","f64x2_ge","f64x2_gt","f64x2_le","f64x2_lt","f64x2_max","f64x2_min","f64x2_mul","f64x2_ne","f64x2_nearest","f64x2_neg","f64x2_pmax","f64x2_pmin","f64x2_promote_low_f32x4","f64x2_relaxed_madd","f64x2_relaxed_max","f64x2_relaxed_min","f64x2_relaxed_nmadd","f64x2_replace_lane","f64x2_splat","f64x2_sqrt","f64x2_sub","f64x2_trunc","i16x8","i16x8_abs","i16x8_add","i16x8_add_sat","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_extadd_pairwise_i8x16","i16x8_extadd_pairwise_u8x16","i16x8_extend_high_i8x16","i16x8_extend_high_u8x16","i16x8_extend_low_i8x16","i16x8_extend_low_u8x16","i16x8_extmul_high_i8x16","i16x8_extmul_high_u8x16","i16x8_extmul_low_i8x16","i16x8_extmul_low_u8x16","i16x8_extract_lane","i16x8_ge","i16x8_gt","i16x8_le","i16x8_load_extend_i8x8","i16x8_load_extend_u8x8","i16x8_lt","i16x8_max","i16x8_min","i16x8_mul","i16x8_narrow_i32x4","i16x8_ne","i16x8_neg","i16x8_q15mulr_sat","i16x8_relaxed_dot_i8x16_i7x16","i16x8_relaxed_laneselect","i16x8_relaxed_q15mulr","i16x8_replace_lane","i16x8_shl","i16x8_shr","i16x8_shuffle","i16x8_splat","i16x8_sub","i16x8_sub_sat","i32x4","i32x4_abs","i32x4_add","i32x4_all_true","i32x4_bitmask","i32x4_dot_i16x8","i32x4_eq","i32x4_extadd_pairwise_i16x8","i32x4_extadd_pairwise_u16x8","i32x4_extend_high_i16x8","i32x4_extend_high_u16x8","i32x4_extend_low_i16x8","i32x4_extend_low_u16x8","i32x4_extmul_high_i16x8","i32x4_extmul_high_u16x8","i32x4_extmul_low_i16x8","i32x4_extmul_low_u16x8","i32x4_extract_lane","i32x4_ge","i32x4_gt","i32x4_le","i32x4_load_extend_i16x4","i32x4_load_extend_u16x4","i32x4_lt","i32x4_max","i32x4_min","i32x4_mul","i32x4_ne","i32x4_neg","i32x4_relaxed_dot_i8x16_i7x16_add","i32x4_relaxed_laneselect","i32x4_relaxed_trunc_f32x4","i32x4_relaxed_trunc_f64x2_zero","i32x4_replace_lane","i32x4_shl","i32x4_shr","i32x4_shuffle","i32x4_splat","i32x4_sub","i32x4_trunc_sat_f32x4","i32x4_trunc_sat_f64x2_zero","i64x2","i64x2_abs","i64x2_add","i64x2_all_true","i64x2_bitmask","i64x2_eq","i64x2_extend_high_i32x4","i64x2_extend_high_u32x4","i64x2_extend_low_i32x4","i64x2_extend_low_u32x4","i64x2_extmul_high_i32x4","i64x2_extmul_high_u32x4","i64x2_extmul_low_i32x4","i64x2_extmul_low_u32x4","i64x2_extract_lane","i64x2_ge","i64x2_gt","i64x2_le","i64x2_load_extend_i32x2","i64x2_load_extend_u32x2","i64x2_lt","i64x2_mul","i64x2_ne","i64x2_neg","i64x2_relaxed_laneselect","i64x2_replace_lane","i64x2_shl","i64x2_shr","i64x2_shuffle","i64x2_splat","i64x2_sub","i8x16","i8x16_abs","i8x16_add","i8x16_add_sat","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_extract_lane","i8x16_ge","i8x16_gt","i8x16_le","i8x16_lt","i8x16_max","i8x16_min","i8x16_narrow_i16x8","i8x16_ne","i8x16_neg","i8x16_popcnt","i8x16_relaxed_laneselect","i8x16_relaxed_swizzle","i8x16_replace_lane","i8x16_shl","i8x16_shr","i8x16_shuffle","i8x16_splat","i8x16_sub","i8x16_sub_sat","i8x16_swizzle","memory_atomic_notify","memory_atomic_wait32","memory_atomic_wait64","memory_grow","memory_size","u16x8","u16x8_add","u16x8_add_sat","u16x8_all_true","u16x8_avgr","u16x8_bitmask","u16x8_eq","u16x8_extadd_pairwise_u8x16","u16x8_extend_high_u8x16","u16x8_extend_low_u8x16","u16x8_extmul_high_u8x16","u16x8_extmul_low_u8x16","u16x8_extract_lane","u16x8_ge","u16x8_gt","u16x8_le","u16x8_load_extend_u8x8","u16x8_lt","u16x8_max","u16x8_min","u16x8_mul","u16x8_narrow_i32x4","u16x8_ne","u16x8_replace_lane","u16x8_shl","u16x8_shr","u16x8_shuffle","u16x8_splat","u16x8_sub","u16x8_sub_sat","u32x4","u32x4_add","u32x4_all_true","u32x4_bitmask","u32x4_eq","u32x4_extadd_pairwise_u16x8","u32x4_extend_high_u16x8","u32x4_extend_low_u16x8","u32x4_extmul_high_u16x8","u32x4_extmul_low_u16x8","u32x4_extract_lane","u32x4_ge","u32x4_gt","u32x4_le","u32x4_load_extend_u16x4","u32x4_lt","u32x4_max","u32x4_min","u32x4_mul","u32x4_ne","u32x4_relaxed_trunc_f32x4","u32x4_relaxed_trunc_f64x2_zero","u32x4_replace_lane","u32x4_shl","u32x4_shr","u32x4_shuffle","u32x4_splat","u32x4_sub","u32x4_trunc_sat_f32x4","u32x4_trunc_sat_f64x2_zero","u64x2","u64x2_add","u64x2_all_true","u64x2_bitmask","u64x2_eq","u64x2_extend_high_u32x4","u64x2_extend_low_u32x4","u64x2_extmul_high_u32x4","u64x2_extmul_low_u32x4","u64x2_extract_lane","u64x2_load_extend_u32x2","u64x2_mul","u64x2_ne","u64x2_replace_lane","u64x2_shl","u64x2_shr","u64x2_shuffle","u64x2_splat","u64x2_sub","u8x16","u8x16_add","u8x16_add_sat","u8x16_all_true","u8x16_avgr","u8x16_bitmask","u8x16_eq","u8x16_extract_lane","u8x16_ge","u8x16_gt","u8x16_le","u8x16_lt","u8x16_max","u8x16_min","u8x16_narrow_i16x8","u8x16_ne","u8x16_popcnt","u8x16_replace_lane","u8x16_shl","u8x16_shr","u8x16_shuffle","u8x16_splat","u8x16_sub","u8x16_sub_sat","u8x16_swizzle","unreachable","v128","v128_and","v128_andnot","v128_any_true","v128_bitselect","v128_load","v128_load16_lane","v128_load16_splat","v128_load32_lane","v128_load32_splat","v128_load32_zero","v128_load64_lane","v128_load64_splat","v128_load64_zero","v128_load8_lane","v128_load8_splat","v128_not","v128_or","v128_store","v128_store16_lane","v128_store32_lane","v128_store64_lane","v128_store8_lane","v128_xor","borrow","borrow_mut","clone","f32x4","f32x4_abs","f32x4_add","f32x4_ceil","f32x4_convert_i32x4","f32x4_convert_u32x4","f32x4_demote_f64x2_zero","f32x4_div","f32x4_eq","f32x4_extract_lane","f32x4_floor","f32x4_ge","f32x4_gt","f32x4_le","f32x4_lt","f32x4_max","f32x4_min","f32x4_mul","f32x4_ne","f32x4_nearest","f32x4_neg","f32x4_pmax","f32x4_pmin","f32x4_relaxed_madd","f32x4_relaxed_max","f32x4_relaxed_min","f32x4_relaxed_nmadd","f32x4_replace_lane","f32x4_splat","f32x4_sqrt","f32x4_sub","f32x4_trunc","f64x2","f64x2_abs","f64x2_add","f64x2_ceil","f64x2_convert_low_i32x4","f64x2_convert_low_u32x4","f64x2_div","f64x2_eq","f64x2_extract_lane","f64x2_floor","f64x2_ge","f64x2_gt","f64x2_le","f64x2_lt","f64x2_max","f64x2_min","f64x2_mul","f64x2_ne","f64x2_nearest","f64x2_neg","f64x2_pmax","f64x2_pmin","f64x2_promote_low_f32x4","f64x2_relaxed_madd","f64x2_relaxed_max","f64x2_relaxed_min","f64x2_relaxed_nmadd","f64x2_replace_lane","f64x2_splat","f64x2_sqrt","f64x2_sub","f64x2_trunc","fmt","from","i16x8","i16x8_abs","i16x8_add","i16x8_add_sat","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_extadd_pairwise_i8x16","i16x8_extadd_pairwise_u8x16","i16x8_extend_high_i8x16","i16x8_extend_high_u8x16","i16x8_extend_low_i8x16","i16x8_extend_low_u8x16","i16x8_extmul_high_i8x16","i16x8_extmul_high_u8x16","i16x8_extmul_low_i8x16","i16x8_extmul_low_u8x16","i16x8_extract_lane","i16x8_ge","i16x8_gt","i16x8_le","i16x8_load_extend_i8x8","i16x8_load_extend_u8x8","i16x8_lt","i16x8_max","i16x8_min","i16x8_mul","i16x8_narrow_i32x4","i16x8_ne","i16x8_neg","i16x8_q15mulr_sat","i16x8_relaxed_dot_i8x16_i7x16","i16x8_relaxed_laneselect","i16x8_relaxed_q15mulr","i16x8_replace_lane","i16x8_shl","i16x8_shr","i16x8_shuffle","i16x8_splat","i16x8_sub","i16x8_sub_sat","i32x4","i32x4_abs","i32x4_add","i32x4_all_true","i32x4_bitmask","i32x4_dot_i16x8","i32x4_eq","i32x4_extadd_pairwise_i16x8","i32x4_extadd_pairwise_u16x8","i32x4_extend_high_i16x8","i32x4_extend_high_u16x8","i32x4_extend_low_i16x8","i32x4_extend_low_u16x8","i32x4_extmul_high_i16x8","i32x4_extmul_high_u16x8","i32x4_extmul_low_i16x8","i32x4_extmul_low_u16x8","i32x4_extract_lane","i32x4_ge","i32x4_gt","i32x4_le","i32x4_load_extend_i16x4","i32x4_load_extend_u16x4","i32x4_lt","i32x4_max","i32x4_min","i32x4_mul","i32x4_ne","i32x4_neg","i32x4_relaxed_dot_i8x16_i7x16_add","i32x4_relaxed_laneselect","i32x4_relaxed_trunc_f32x4","i32x4_relaxed_trunc_f64x2_zero","i32x4_replace_lane","i32x4_shl","i32x4_shr","i32x4_shuffle","i32x4_splat","i32x4_sub","i32x4_trunc_sat_f32x4","i32x4_trunc_sat_f64x2_zero","i64x2","i64x2_abs","i64x2_add","i64x2_all_true","i64x2_bitmask","i64x2_eq","i64x2_extend_high_i32x4","i64x2_extend_high_u32x4","i64x2_extend_low_i32x4","i64x2_extend_low_u32x4","i64x2_extmul_high_i32x4","i64x2_extmul_high_u32x4","i64x2_extmul_low_i32x4","i64x2_extmul_low_u32x4","i64x2_extract_lane","i64x2_ge","i64x2_gt","i64x2_le","i64x2_load_extend_i32x2","i64x2_load_extend_u32x2","i64x2_lt","i64x2_mul","i64x2_ne","i64x2_neg","i64x2_relaxed_laneselect","i64x2_replace_lane","i64x2_shl","i64x2_shr","i64x2_shuffle","i64x2_splat","i64x2_sub","i8x16","i8x16_abs","i8x16_add","i8x16_add_sat","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_extract_lane","i8x16_ge","i8x16_gt","i8x16_le","i8x16_lt","i8x16_max","i8x16_min","i8x16_narrow_i16x8","i8x16_ne","i8x16_neg","i8x16_popcnt","i8x16_relaxed_laneselect","i8x16_relaxed_swizzle","i8x16_replace_lane","i8x16_shl","i8x16_shr","i8x16_shuffle","i8x16_splat","i8x16_sub","i8x16_sub_sat","i8x16_swizzle","into","memory_atomic_notify","memory_atomic_wait32","memory_atomic_wait64","memory_grow","memory_size","try_from","try_into","type_id","u16x8","u16x8_add","u16x8_add_sat","u16x8_all_true","u16x8_avgr","u16x8_bitmask","u16x8_eq","u16x8_extadd_pairwise_u8x16","u16x8_extend_high_u8x16","u16x8_extend_low_u8x16","u16x8_extmul_high_u8x16","u16x8_extmul_low_u8x16","u16x8_extract_lane","u16x8_ge","u16x8_gt","u16x8_le","u16x8_load_extend_u8x8","u16x8_lt","u16x8_max","u16x8_min","u16x8_mul","u16x8_narrow_i32x4","u16x8_ne","u16x8_replace_lane","u16x8_shl","u16x8_shr","u16x8_shuffle","u16x8_splat","u16x8_sub","u16x8_sub_sat","u32x4","u32x4_add","u32x4_all_true","u32x4_bitmask","u32x4_eq","u32x4_extadd_pairwise_u16x8","u32x4_extend_high_u16x8","u32x4_extend_low_u16x8","u32x4_extmul_high_u16x8","u32x4_extmul_low_u16x8","u32x4_extract_lane","u32x4_ge","u32x4_gt","u32x4_le","u32x4_load_extend_u16x4","u32x4_lt","u32x4_max","u32x4_min","u32x4_mul","u32x4_ne","u32x4_relaxed_trunc_f32x4","u32x4_relaxed_trunc_f64x2_zero","u32x4_replace_lane","u32x4_shl","u32x4_shr","u32x4_shuffle","u32x4_splat","u32x4_sub","u32x4_trunc_sat_f32x4","u32x4_trunc_sat_f64x2_zero","u64x2","u64x2_add","u64x2_all_true","u64x2_bitmask","u64x2_eq","u64x2_extend_high_u32x4","u64x2_extend_low_u32x4","u64x2_extmul_high_u32x4","u64x2_extmul_low_u32x4","u64x2_extract_lane","u64x2_load_extend_u32x2","u64x2_mul","u64x2_ne","u64x2_replace_lane","u64x2_shl","u64x2_shr","u64x2_shuffle","u64x2_splat","u64x2_sub","u8x16","u8x16_add","u8x16_add_sat","u8x16_all_true","u8x16_avgr","u8x16_bitmask","u8x16_eq","u8x16_extract_lane","u8x16_ge","u8x16_gt","u8x16_le","u8x16_lt","u8x16_max","u8x16_min","u8x16_narrow_i16x8","u8x16_ne","u8x16_popcnt","u8x16_replace_lane","u8x16_shl","u8x16_shr","u8x16_shuffle","u8x16_splat","u8x16_sub","u8x16_sub_sat","u8x16_swizzle","unreachable","v128","v128_and","v128_andnot","v128_any_true","v128_bitselect","v128_load","v128_load16_lane","v128_load16_splat","v128_load32_lane","v128_load32_splat","v128_load32_zero","v128_load64_lane","v128_load64_splat","v128_load64_zero","v128_load8_lane","v128_load8_splat","v128_not","v128_or","v128_store","v128_store16_lane","v128_store32_lane","v128_store64_lane","v128_store8_lane","v128_xor","f32x4","f32x4_abs","f32x4_add","f32x4_ceil","f32x4_convert_i32x4","f32x4_convert_u32x4","f32x4_demote_f64x2_zero","f32x4_div","f32x4_eq","f32x4_extract_lane","f32x4_floor","f32x4_ge","f32x4_gt","f32x4_le","f32x4_lt","f32x4_max","f32x4_min","f32x4_mul","f32x4_ne","f32x4_nearest","f32x4_neg","f32x4_pmax","f32x4_pmin","f32x4_relaxed_madd","f32x4_relaxed_max","f32x4_relaxed_min","f32x4_relaxed_nmadd","f32x4_replace_lane","f32x4_splat","f32x4_sqrt","f32x4_sub","f32x4_trunc","f64x2","f64x2_abs","f64x2_add","f64x2_ceil","f64x2_convert_low_i32x4","f64x2_convert_low_u32x4","f64x2_div","f64x2_eq","f64x2_extract_lane","f64x2_floor","f64x2_ge","f64x2_gt","f64x2_le","f64x2_lt","f64x2_max","f64x2_min","f64x2_mul","f64x2_ne","f64x2_nearest","f64x2_neg","f64x2_pmax","f64x2_pmin","f64x2_promote_low_f32x4","f64x2_relaxed_madd","f64x2_relaxed_max","f64x2_relaxed_min","f64x2_relaxed_nmadd","f64x2_replace_lane","f64x2_splat","f64x2_sqrt","f64x2_sub","f64x2_trunc","i16x8","i16x8_abs","i16x8_add","i16x8_add_sat","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_extadd_pairwise_i8x16","i16x8_extadd_pairwise_u8x16","i16x8_extend_high_i8x16","i16x8_extend_high_u8x16","i16x8_extend_low_i8x16","i16x8_extend_low_u8x16","i16x8_extmul_high_i8x16","i16x8_extmul_high_u8x16","i16x8_extmul_low_i8x16","i16x8_extmul_low_u8x16","i16x8_extract_lane","i16x8_ge","i16x8_gt","i16x8_le","i16x8_load_extend_i8x8","i16x8_load_extend_u8x8","i16x8_lt","i16x8_max","i16x8_min","i16x8_mul","i16x8_narrow_i32x4","i16x8_ne","i16x8_neg","i16x8_q15mulr_sat","i16x8_relaxed_dot_i8x16_i7x16","i16x8_relaxed_laneselect","i16x8_relaxed_q15mulr","i16x8_replace_lane","i16x8_shl","i16x8_shr","i16x8_shuffle","i16x8_splat","i16x8_sub","i16x8_sub_sat","i32x4","i32x4_abs","i32x4_add","i32x4_all_true","i32x4_bitmask","i32x4_dot_i16x8","i32x4_eq","i32x4_extadd_pairwise_i16x8","i32x4_extadd_pairwise_u16x8","i32x4_extend_high_i16x8","i32x4_extend_high_u16x8","i32x4_extend_low_i16x8","i32x4_extend_low_u16x8","i32x4_extmul_high_i16x8","i32x4_extmul_high_u16x8","i32x4_extmul_low_i16x8","i32x4_extmul_low_u16x8","i32x4_extract_lane","i32x4_ge","i32x4_gt","i32x4_le","i32x4_load_extend_i16x4","i32x4_load_extend_u16x4","i32x4_lt","i32x4_max","i32x4_min","i32x4_mul","i32x4_ne","i32x4_neg","i32x4_relaxed_dot_i8x16_i7x16_add","i32x4_relaxed_laneselect","i32x4_relaxed_trunc_f32x4","i32x4_relaxed_trunc_f64x2_zero","i32x4_replace_lane","i32x4_shl","i32x4_shr","i32x4_shuffle","i32x4_splat","i32x4_sub","i32x4_trunc_sat_f32x4","i32x4_trunc_sat_f64x2_zero","i64x2","i64x2_abs","i64x2_add","i64x2_all_true","i64x2_bitmask","i64x2_eq","i64x2_extend_high_i32x4","i64x2_extend_high_u32x4","i64x2_extend_low_i32x4","i64x2_extend_low_u32x4","i64x2_extmul_high_i32x4","i64x2_extmul_high_u32x4","i64x2_extmul_low_i32x4","i64x2_extmul_low_u32x4","i64x2_extract_lane","i64x2_ge","i64x2_gt","i64x2_le","i64x2_load_extend_i32x2","i64x2_load_extend_u32x2","i64x2_lt","i64x2_mul","i64x2_ne","i64x2_neg","i64x2_relaxed_laneselect","i64x2_replace_lane","i64x2_shl","i64x2_shr","i64x2_shuffle","i64x2_splat","i64x2_sub","i8x16","i8x16_abs","i8x16_add","i8x16_add_sat","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_extract_lane","i8x16_ge","i8x16_gt","i8x16_le","i8x16_lt","i8x16_max","i8x16_min","i8x16_narrow_i16x8","i8x16_ne","i8x16_neg","i8x16_popcnt","i8x16_relaxed_laneselect","i8x16_relaxed_swizzle","i8x16_replace_lane","i8x16_shl","i8x16_shr","i8x16_shuffle","i8x16_splat","i8x16_sub","i8x16_sub_sat","i8x16_swizzle","memory_atomic_notify","memory_atomic_wait32","memory_atomic_wait64","memory_grow","memory_size","u16x8","u16x8_add","u16x8_add_sat","u16x8_all_true","u16x8_avgr","u16x8_bitmask","u16x8_eq","u16x8_extadd_pairwise_u8x16","u16x8_extend_high_u8x16","u16x8_extend_low_u8x16","u16x8_extmul_high_u8x16","u16x8_extmul_low_u8x16","u16x8_extract_lane","u16x8_ge","u16x8_gt","u16x8_le","u16x8_load_extend_u8x8","u16x8_lt","u16x8_max","u16x8_min","u16x8_mul","u16x8_narrow_i32x4","u16x8_ne","u16x8_replace_lane","u16x8_shl","u16x8_shr","u16x8_shuffle","u16x8_splat","u16x8_sub","u16x8_sub_sat","u32x4","u32x4_add","u32x4_all_true","u32x4_bitmask","u32x4_eq","u32x4_extadd_pairwise_u16x8","u32x4_extend_high_u16x8","u32x4_extend_low_u16x8","u32x4_extmul_high_u16x8","u32x4_extmul_low_u16x8","u32x4_extract_lane","u32x4_ge","u32x4_gt","u32x4_le","u32x4_load_extend_u16x4","u32x4_lt","u32x4_max","u32x4_min","u32x4_mul","u32x4_ne","u32x4_relaxed_trunc_f32x4","u32x4_relaxed_trunc_f64x2_zero","u32x4_replace_lane","u32x4_shl","u32x4_shr","u32x4_shuffle","u32x4_splat","u32x4_sub","u32x4_trunc_sat_f32x4","u32x4_trunc_sat_f64x2_zero","u64x2","u64x2_add","u64x2_all_true","u64x2_bitmask","u64x2_eq","u64x2_extend_high_u32x4","u64x2_extend_low_u32x4","u64x2_extmul_high_u32x4","u64x2_extmul_low_u32x4","u64x2_extract_lane","u64x2_load_extend_u32x2","u64x2_mul","u64x2_ne","u64x2_replace_lane","u64x2_shl","u64x2_shr","u64x2_shuffle","u64x2_splat","u64x2_sub","u8x16","u8x16_add","u8x16_add_sat","u8x16_all_true","u8x16_avgr","u8x16_bitmask","u8x16_eq","u8x16_extract_lane","u8x16_ge","u8x16_gt","u8x16_le","u8x16_lt","u8x16_max","u8x16_min","u8x16_narrow_i16x8","u8x16_ne","u8x16_popcnt","u8x16_replace_lane","u8x16_shl","u8x16_shr","u8x16_shuffle","u8x16_splat","u8x16_sub","u8x16_sub_sat","u8x16_swizzle","unreachable","v128","v128_and","v128_andnot","v128_any_true","v128_bitselect","v128_load","v128_load16_lane","v128_load16_splat","v128_load32_lane","v128_load32_splat","v128_load32_zero","v128_load64_lane","v128_load64_splat","v128_load64_zero","v128_load8_lane","v128_load8_splat","v128_not","v128_or","v128_store","v128_store16_lane","v128_store32_lane","v128_store64_lane","v128_store8_lane","v128_xor","CpuidResult","_CMP_EQ_OQ","_CMP_EQ_OS","_CMP_EQ_UQ","_CMP_EQ_US","_CMP_FALSE_OQ","_CMP_FALSE_OS","_CMP_GE_OQ","_CMP_GE_OS","_CMP_GT_OQ","_CMP_GT_OS","_CMP_LE_OQ","_CMP_LE_OS","_CMP_LT_OQ","_CMP_LT_OS","_CMP_NEQ_OQ","_CMP_NEQ_OS","_CMP_NEQ_UQ","_CMP_NEQ_US","_CMP_NGE_UQ","_CMP_NGE_US","_CMP_NGT_UQ","_CMP_NGT_US","_CMP_NLE_UQ","_CMP_NLE_US","_CMP_NLT_UQ","_CMP_NLT_US","_CMP_ORD_Q","_CMP_ORD_S","_CMP_TRUE_UQ","_CMP_TRUE_US","_CMP_UNORD_Q","_CMP_UNORD_S","_MM_CMPINT_ENUM","_MM_CMPINT_EQ","_MM_CMPINT_FALSE","_MM_CMPINT_LE","_MM_CMPINT_LT","_MM_CMPINT_NE","_MM_CMPINT_NLE","_MM_CMPINT_NLT","_MM_CMPINT_TRUE","_MM_EXCEPT_DENORM","_MM_EXCEPT_DIV_ZERO","_MM_EXCEPT_INEXACT","_MM_EXCEPT_INVALID","_MM_EXCEPT_MASK","_MM_EXCEPT_OVERFLOW","_MM_EXCEPT_UNDERFLOW","_MM_FLUSH_ZERO_MASK","_MM_FLUSH_ZERO_OFF","_MM_FLUSH_ZERO_ON","_MM_FROUND_CEIL","_MM_FROUND_CUR_DIRECTION","_MM_FROUND_FLOOR","_MM_FROUND_NEARBYINT","_MM_FROUND_NINT","_MM_FROUND_NO_EXC","_MM_FROUND_RAISE_EXC","_MM_FROUND_RINT","_MM_FROUND_TO_NEAREST_INT","_MM_FROUND_TO_NEG_INF","_MM_FROUND_TO_POS_INF","_MM_FROUND_TO_ZERO","_MM_FROUND_TRUNC","_MM_GET_EXCEPTION_MASK","_MM_GET_EXCEPTION_STATE","_MM_GET_FLUSH_ZERO_MODE","_MM_GET_ROUNDING_MODE","_MM_HINT_ET0","_MM_HINT_ET1","_MM_HINT_NTA","_MM_HINT_T0","_MM_HINT_T1","_MM_HINT_T2","_MM_MANTISSA_NORM_ENUM","_MM_MANTISSA_SIGN_ENUM","_MM_MANT_NORM_1_2","_MM_MANT_NORM_P5_1","_MM_MANT_NORM_P5_2","_MM_MANT_NORM_P75_1P5","_MM_MANT_SIGN_NAN","_MM_MANT_SIGN_SRC","_MM_MANT_SIGN_ZERO","_MM_MASK_DENORM","_MM_MASK_DIV_ZERO","_MM_MASK_INEXACT","_MM_MASK_INVALID","_MM_MASK_MASK","_MM_MASK_OVERFLOW","_MM_MASK_UNDERFLOW","_MM_PERM_AAAA","_MM_PERM_AAAB","_MM_PERM_AAAC","_MM_PERM_AAAD","_MM_PERM_AABA","_MM_PERM_AABB","_MM_PERM_AABC","_MM_PERM_AABD","_MM_PERM_AACA","_MM_PERM_AACB","_MM_PERM_AACC","_MM_PERM_AACD","_MM_PERM_AADA","_MM_PERM_AADB","_MM_PERM_AADC","_MM_PERM_AADD","_MM_PERM_ABAA","_MM_PERM_ABAB","_MM_PERM_ABAC","_MM_PERM_ABAD","_MM_PERM_ABBA","_MM_PERM_ABBB","_MM_PERM_ABBC","_MM_PERM_ABBD","_MM_PERM_ABCA","_MM_PERM_ABCB","_MM_PERM_ABCC","_MM_PERM_ABCD","_MM_PERM_ABDA","_MM_PERM_ABDB","_MM_PERM_ABDC","_MM_PERM_ABDD","_MM_PERM_ACAA","_MM_PERM_ACAB","_MM_PERM_ACAC","_MM_PERM_ACAD","_MM_PERM_ACBA","_MM_PERM_ACBB","_MM_PERM_ACBC","_MM_PERM_ACBD","_MM_PERM_ACCA","_MM_PERM_ACCB","_MM_PERM_ACCC","_MM_PERM_ACCD","_MM_PERM_ACDA","_MM_PERM_ACDB","_MM_PERM_ACDC","_MM_PERM_ACDD","_MM_PERM_ADAA","_MM_PERM_ADAB","_MM_PERM_ADAC","_MM_PERM_ADAD","_MM_PERM_ADBA","_MM_PERM_ADBB","_MM_PERM_ADBC","_MM_PERM_ADBD","_MM_PERM_ADCA","_MM_PERM_ADCB","_MM_PERM_ADCC","_MM_PERM_ADCD","_MM_PERM_ADDA","_MM_PERM_ADDB","_MM_PERM_ADDC","_MM_PERM_ADDD","_MM_PERM_BAAA","_MM_PERM_BAAB","_MM_PERM_BAAC","_MM_PERM_BAAD","_MM_PERM_BABA","_MM_PERM_BABB","_MM_PERM_BABC","_MM_PERM_BABD","_MM_PERM_BACA","_MM_PERM_BACB","_MM_PERM_BACC","_MM_PERM_BACD","_MM_PERM_BADA","_MM_PERM_BADB","_MM_PERM_BADC","_MM_PERM_BADD","_MM_PERM_BBAA","_MM_PERM_BBAB","_MM_PERM_BBAC","_MM_PERM_BBAD","_MM_PERM_BBBA","_MM_PERM_BBBB","_MM_PERM_BBBC","_MM_PERM_BBBD","_MM_PERM_BBCA","_MM_PERM_BBCB","_MM_PERM_BBCC","_MM_PERM_BBCD","_MM_PERM_BBDA","_MM_PERM_BBDB","_MM_PERM_BBDC","_MM_PERM_BBDD","_MM_PERM_BCAA","_MM_PERM_BCAB","_MM_PERM_BCAC","_MM_PERM_BCAD","_MM_PERM_BCBA","_MM_PERM_BCBB","_MM_PERM_BCBC","_MM_PERM_BCBD","_MM_PERM_BCCA","_MM_PERM_BCCB","_MM_PERM_BCCC","_MM_PERM_BCCD","_MM_PERM_BCDA","_MM_PERM_BCDB","_MM_PERM_BCDC","_MM_PERM_BCDD","_MM_PERM_BDAA","_MM_PERM_BDAB","_MM_PERM_BDAC","_MM_PERM_BDAD","_MM_PERM_BDBA","_MM_PERM_BDBB","_MM_PERM_BDBC","_MM_PERM_BDBD","_MM_PERM_BDCA","_MM_PERM_BDCB","_MM_PERM_BDCC","_MM_PERM_BDCD","_MM_PERM_BDDA","_MM_PERM_BDDB","_MM_PERM_BDDC","_MM_PERM_BDDD","_MM_PERM_CAAA","_MM_PERM_CAAB","_MM_PERM_CAAC","_MM_PERM_CAAD","_MM_PERM_CABA","_MM_PERM_CABB","_MM_PERM_CABC","_MM_PERM_CABD","_MM_PERM_CACA","_MM_PERM_CACB","_MM_PERM_CACC","_MM_PERM_CACD","_MM_PERM_CADA","_MM_PERM_CADB","_MM_PERM_CADC","_MM_PERM_CADD","_MM_PERM_CBAA","_MM_PERM_CBAB","_MM_PERM_CBAC","_MM_PERM_CBAD","_MM_PERM_CBBA","_MM_PERM_CBBB","_MM_PERM_CBBC","_MM_PERM_CBBD","_MM_PERM_CBCA","_MM_PERM_CBCB","_MM_PERM_CBCC","_MM_PERM_CBCD","_MM_PERM_CBDA","_MM_PERM_CBDB","_MM_PERM_CBDC","_MM_PERM_CBDD","_MM_PERM_CCAA","_MM_PERM_CCAB","_MM_PERM_CCAC","_MM_PERM_CCAD","_MM_PERM_CCBA","_MM_PERM_CCBB","_MM_PERM_CCBC","_MM_PERM_CCBD","_MM_PERM_CCCA","_MM_PERM_CCCB","_MM_PERM_CCCC","_MM_PERM_CCCD","_MM_PERM_CCDA","_MM_PERM_CCDB","_MM_PERM_CCDC","_MM_PERM_CCDD","_MM_PERM_CDAA","_MM_PERM_CDAB","_MM_PERM_CDAC","_MM_PERM_CDAD","_MM_PERM_CDBA","_MM_PERM_CDBB","_MM_PERM_CDBC","_MM_PERM_CDBD","_MM_PERM_CDCA","_MM_PERM_CDCB","_MM_PERM_CDCC","_MM_PERM_CDCD","_MM_PERM_CDDA","_MM_PERM_CDDB","_MM_PERM_CDDC","_MM_PERM_CDDD","_MM_PERM_DAAA","_MM_PERM_DAAB","_MM_PERM_DAAC","_MM_PERM_DAAD","_MM_PERM_DABA","_MM_PERM_DABB","_MM_PERM_DABC","_MM_PERM_DABD","_MM_PERM_DACA","_MM_PERM_DACB","_MM_PERM_DACC","_MM_PERM_DACD","_MM_PERM_DADA","_MM_PERM_DADB","_MM_PERM_DADC","_MM_PERM_DADD","_MM_PERM_DBAA","_MM_PERM_DBAB","_MM_PERM_DBAC","_MM_PERM_DBAD","_MM_PERM_DBBA","_MM_PERM_DBBB","_MM_PERM_DBBC","_MM_PERM_DBBD","_MM_PERM_DBCA","_MM_PERM_DBCB","_MM_PERM_DBCC","_MM_PERM_DBCD","_MM_PERM_DBDA","_MM_PERM_DBDB","_MM_PERM_DBDC","_MM_PERM_DBDD","_MM_PERM_DCAA","_MM_PERM_DCAB","_MM_PERM_DCAC","_MM_PERM_DCAD","_MM_PERM_DCBA","_MM_PERM_DCBB","_MM_PERM_DCBC","_MM_PERM_DCBD","_MM_PERM_DCCA","_MM_PERM_DCCB","_MM_PERM_DCCC","_MM_PERM_DCCD","_MM_PERM_DCDA","_MM_PERM_DCDB","_MM_PERM_DCDC","_MM_PERM_DCDD","_MM_PERM_DDAA","_MM_PERM_DDAB","_MM_PERM_DDAC","_MM_PERM_DDAD","_MM_PERM_DDBA","_MM_PERM_DDBB","_MM_PERM_DDBC","_MM_PERM_DDBD","_MM_PERM_DDCA","_MM_PERM_DDCB","_MM_PERM_DDCC","_MM_PERM_DDCD","_MM_PERM_DDDA","_MM_PERM_DDDB","_MM_PERM_DDDC","_MM_PERM_DDDD","_MM_PERM_ENUM","_MM_ROUND_DOWN","_MM_ROUND_MASK","_MM_ROUND_NEAREST","_MM_ROUND_TOWARD_ZERO","_MM_ROUND_UP","_MM_SET_EXCEPTION_MASK","_MM_SET_EXCEPTION_STATE","_MM_SET_FLUSH_ZERO_MODE","_MM_SET_ROUNDING_MODE","_MM_SHUFFLE","_MM_TRANSPOSE4_PS","_SIDD_BIT_MASK","_SIDD_CMP_EQUAL_ANY","_SIDD_CMP_EQUAL_EACH","_SIDD_CMP_EQUAL_ORDERED","_SIDD_CMP_RANGES","_SIDD_LEAST_SIGNIFICANT","_SIDD_MASKED_NEGATIVE_POLARITY","_SIDD_MASKED_POSITIVE_POLARITY","_SIDD_MOST_SIGNIFICANT","_SIDD_NEGATIVE_POLARITY","_SIDD_POSITIVE_POLARITY","_SIDD_SBYTE_OPS","_SIDD_SWORD_OPS","_SIDD_UBYTE_OPS","_SIDD_UNIT_MASK","_SIDD_UWORD_OPS","_XABORT_CAPACITY","_XABORT_CONFLICT","_XABORT_DEBUG","_XABORT_EXPLICIT","_XABORT_NESTED","_XABORT_RETRY","_XBEGIN_STARTED","_XCR_XFEATURE_ENABLED_MASK","__cpuid","__cpuid_count","__get_cpuid_max","__m128","__m128bh","__m128d","__m128i","__m256","__m256bh","__m256d","__m256i","__m512","__m512bh","__m512d","__m512i","__mmask16","__mmask32","__mmask64","__mmask8","__rdtscp","_addcarry_u32","_addcarryx_u32","_andn_u32","_bextr2_u32","_bextr_u32","_bittest","_bittestandcomplement","_bittestandreset","_bittestandset","_blcfill_u32","_blcfill_u64","_blci_u32","_blci_u64","_blcic_u32","_blcic_u64","_blcmsk_u32","_blcmsk_u64","_blcs_u32","_blcs_u64","_blsfill_u32","_blsfill_u64","_blsi_u32","_blsic_u32","_blsic_u64","_blsmsk_u32","_blsr_u32","_bswap","_bzhi_u32","_fxrstor","_fxsave","_kadd_mask32","_kadd_mask64","_kand_mask16","_kand_mask32","_kand_mask64","_kandn_mask16","_kandn_mask32","_kandn_mask64","_knot_mask16","_knot_mask32","_knot_mask64","_kor_mask16","_kor_mask32","_kor_mask64","_kxnor_mask16","_kxnor_mask32","_kxnor_mask64","_kxor_mask16","_kxor_mask32","_kxor_mask64","_load_mask32","_load_mask64","_lzcnt_u32","_mm256_abs_epi16","_mm256_abs_epi32","_mm256_abs_epi64","_mm256_abs_epi8","_mm256_add_epi16","_mm256_add_epi32","_mm256_add_epi64","_mm256_add_epi8","_mm256_add_pd","_mm256_add_ps","_mm256_adds_epi16","_mm256_adds_epi8","_mm256_adds_epu16","_mm256_adds_epu8","_mm256_addsub_pd","_mm256_addsub_ps","_mm256_aesdec_epi128","_mm256_aesdeclast_epi128","_mm256_aesenc_epi128","_mm256_aesenclast_epi128","_mm256_alignr_epi32","_mm256_alignr_epi64","_mm256_alignr_epi8","_mm256_and_pd","_mm256_and_ps","_mm256_and_si256","_mm256_andnot_pd","_mm256_andnot_ps","_mm256_andnot_si256","_mm256_avg_epu16","_mm256_avg_epu8","_mm256_bitshuffle_epi64_mask","_mm256_blend_epi16","_mm256_blend_epi32","_mm256_blend_pd","_mm256_blend_ps","_mm256_blendv_epi8","_mm256_blendv_pd","_mm256_blendv_ps","_mm256_broadcast_f32x4","_mm256_broadcast_i32x4","_mm256_broadcast_pd","_mm256_broadcast_ps","_mm256_broadcast_sd","_mm256_broadcast_ss","_mm256_broadcastb_epi8","_mm256_broadcastd_epi32","_mm256_broadcastmb_epi64","_mm256_broadcastmw_epi32","_mm256_broadcastq_epi64","_mm256_broadcastsd_pd","_mm256_broadcastsi128_si256","_mm256_broadcastss_ps","_mm256_broadcastw_epi16","_mm256_bslli_epi128","_mm256_bsrli_epi128","_mm256_castpd128_pd256","_mm256_castpd256_pd128","_mm256_castpd_ps","_mm256_castpd_si256","_mm256_castps128_ps256","_mm256_castps256_ps128","_mm256_castps_pd","_mm256_castps_si256","_mm256_castsi128_si256","_mm256_castsi256_pd","_mm256_castsi256_ps","_mm256_castsi256_si128","_mm256_ceil_pd","_mm256_ceil_ps","_mm256_clmulepi64_epi128","_mm256_cmp_epi16_mask","_mm256_cmp_epi32_mask","_mm256_cmp_epi64_mask","_mm256_cmp_epi8_mask","_mm256_cmp_epu16_mask","_mm256_cmp_epu32_mask","_mm256_cmp_epu64_mask","_mm256_cmp_epu8_mask","_mm256_cmp_pd","_mm256_cmp_pd_mask","_mm256_cmp_ps","_mm256_cmp_ps_mask","_mm256_cmpeq_epi16","_mm256_cmpeq_epi16_mask","_mm256_cmpeq_epi32","_mm256_cmpeq_epi32_mask","_mm256_cmpeq_epi64","_mm256_cmpeq_epi64_mask","_mm256_cmpeq_epi8","_mm256_cmpeq_epi8_mask","_mm256_cmpeq_epu16_mask","_mm256_cmpeq_epu32_mask","_mm256_cmpeq_epu64_mask","_mm256_cmpeq_epu8_mask","_mm256_cmpge_epi16_mask","_mm256_cmpge_epi32_mask","_mm256_cmpge_epi64_mask","_mm256_cmpge_epi8_mask","_mm256_cmpge_epu16_mask","_mm256_cmpge_epu32_mask","_mm256_cmpge_epu64_mask","_mm256_cmpge_epu8_mask","_mm256_cmpgt_epi16","_mm256_cmpgt_epi16_mask","_mm256_cmpgt_epi32","_mm256_cmpgt_epi32_mask","_mm256_cmpgt_epi64","_mm256_cmpgt_epi64_mask","_mm256_cmpgt_epi8","_mm256_cmpgt_epi8_mask","_mm256_cmpgt_epu16_mask","_mm256_cmpgt_epu32_mask","_mm256_cmpgt_epu64_mask","_mm256_cmpgt_epu8_mask","_mm256_cmple_epi16_mask","_mm256_cmple_epi32_mask","_mm256_cmple_epi64_mask","_mm256_cmple_epi8_mask","_mm256_cmple_epu16_mask","_mm256_cmple_epu32_mask","_mm256_cmple_epu64_mask","_mm256_cmple_epu8_mask","_mm256_cmplt_epi16_mask","_mm256_cmplt_epi32_mask","_mm256_cmplt_epi64_mask","_mm256_cmplt_epi8_mask","_mm256_cmplt_epu16_mask","_mm256_cmplt_epu32_mask","_mm256_cmplt_epu64_mask","_mm256_cmplt_epu8_mask","_mm256_cmpneq_epi16_mask","_mm256_cmpneq_epi32_mask","_mm256_cmpneq_epi64_mask","_mm256_cmpneq_epi8_mask","_mm256_cmpneq_epu16_mask","_mm256_cmpneq_epu32_mask","_mm256_cmpneq_epu64_mask","_mm256_cmpneq_epu8_mask","_mm256_conflict_epi32","_mm256_conflict_epi64","_mm256_cvtepi16_epi32","_mm256_cvtepi16_epi64","_mm256_cvtepi16_epi8","_mm256_cvtepi32_epi16","_mm256_cvtepi32_epi64","_mm256_cvtepi32_epi8","_mm256_cvtepi32_pd","_mm256_cvtepi32_ps","_mm256_cvtepi64_epi16","_mm256_cvtepi64_epi32","_mm256_cvtepi64_epi8","_mm256_cvtepi8_epi16","_mm256_cvtepi8_epi32","_mm256_cvtepi8_epi64","_mm256_cvtepu16_epi32","_mm256_cvtepu16_epi64","_mm256_cvtepu32_epi64","_mm256_cvtepu32_pd","_mm256_cvtepu8_epi16","_mm256_cvtepu8_epi32","_mm256_cvtepu8_epi64","_mm256_cvtne2ps_pbh","_mm256_cvtneps_pbh","_mm256_cvtpd_epi32","_mm256_cvtpd_epu32","_mm256_cvtpd_ps","_mm256_cvtph_ps","_mm256_cvtps_epi32","_mm256_cvtps_epu32","_mm256_cvtps_pd","_mm256_cvtps_ph","_mm256_cvtsd_f64","_mm256_cvtsepi16_epi8","_mm256_cvtsepi32_epi16","_mm256_cvtsepi32_epi8","_mm256_cvtsepi64_epi16","_mm256_cvtsepi64_epi32","_mm256_cvtsepi64_epi8","_mm256_cvtsi256_si32","_mm256_cvtss_f32","_mm256_cvttpd_epi32","_mm256_cvttpd_epu32","_mm256_cvttps_epi32","_mm256_cvttps_epu32","_mm256_cvtusepi16_epi8","_mm256_cvtusepi32_epi16","_mm256_cvtusepi32_epi8","_mm256_cvtusepi64_epi16","_mm256_cvtusepi64_epi32","_mm256_cvtusepi64_epi8","_mm256_dbsad_epu8","_mm256_div_pd","_mm256_div_ps","_mm256_dp_ps","_mm256_dpbf16_ps","_mm256_dpbusd_epi32","_mm256_dpbusds_epi32","_mm256_dpwssd_epi32","_mm256_dpwssds_epi32","_mm256_extract_epi16","_mm256_extract_epi32","_mm256_extract_epi8","_mm256_extractf128_pd","_mm256_extractf128_ps","_mm256_extractf128_si256","_mm256_extractf32x4_ps","_mm256_extracti128_si256","_mm256_extracti32x4_epi32","_mm256_fixupimm_pd","_mm256_fixupimm_ps","_mm256_floor_pd","_mm256_floor_ps","_mm256_fmadd_pd","_mm256_fmadd_ps","_mm256_fmaddsub_pd","_mm256_fmaddsub_ps","_mm256_fmsub_pd","_mm256_fmsub_ps","_mm256_fmsubadd_pd","_mm256_fmsubadd_ps","_mm256_fnmadd_pd","_mm256_fnmadd_ps","_mm256_fnmsub_pd","_mm256_fnmsub_ps","_mm256_getexp_pd","_mm256_getexp_ps","_mm256_getmant_pd","_mm256_getmant_ps","_mm256_gf2p8affine_epi64_epi8","_mm256_gf2p8affineinv_epi64_epi8","_mm256_gf2p8mul_epi8","_mm256_hadd_epi16","_mm256_hadd_epi32","_mm256_hadd_pd","_mm256_hadd_ps","_mm256_hadds_epi16","_mm256_hsub_epi16","_mm256_hsub_epi32","_mm256_hsub_pd","_mm256_hsub_ps","_mm256_hsubs_epi16","_mm256_i32gather_epi32","_mm256_i32gather_epi64","_mm256_i32gather_pd","_mm256_i32gather_ps","_mm256_i32scatter_epi64","_mm256_i64gather_epi32","_mm256_i64gather_epi64","_mm256_i64gather_pd","_mm256_i64gather_ps","_mm256_insert_epi16","_mm256_insert_epi32","_mm256_insert_epi8","_mm256_insertf128_pd","_mm256_insertf128_ps","_mm256_insertf128_si256","_mm256_insertf32x4","_mm256_inserti128_si256","_mm256_inserti32x4","_mm256_lddqu_si256","_mm256_load_epi32","_mm256_load_epi64","_mm256_load_pd","_mm256_load_ps","_mm256_load_si256","_mm256_loadu2_m128","_mm256_loadu2_m128d","_mm256_loadu2_m128i","_mm256_loadu_epi16","_mm256_loadu_epi32","_mm256_loadu_epi64","_mm256_loadu_epi8","_mm256_loadu_pd","_mm256_loadu_ps","_mm256_loadu_si256","_mm256_lzcnt_epi32","_mm256_lzcnt_epi64","_mm256_madd52hi_epu64","_mm256_madd52lo_epu64","_mm256_madd_epi16","_mm256_maddubs_epi16","_mm256_mask2_permutex2var_epi16","_mm256_mask2_permutex2var_epi32","_mm256_mask2_permutex2var_epi64","_mm256_mask2_permutex2var_epi8","_mm256_mask2_permutex2var_pd","_mm256_mask2_permutex2var_ps","_mm256_mask3_fmadd_pd","_mm256_mask3_fmadd_ps","_mm256_mask3_fmaddsub_pd","_mm256_mask3_fmaddsub_ps","_mm256_mask3_fmsub_pd","_mm256_mask3_fmsub_ps","_mm256_mask3_fmsubadd_pd","_mm256_mask3_fmsubadd_ps","_mm256_mask3_fnmadd_pd","_mm256_mask3_fnmadd_ps","_mm256_mask3_fnmsub_pd","_mm256_mask3_fnmsub_ps","_mm256_mask_abs_epi16","_mm256_mask_abs_epi32","_mm256_mask_abs_epi64","_mm256_mask_abs_epi8","_mm256_mask_add_epi16","_mm256_mask_add_epi32","_mm256_mask_add_epi64","_mm256_mask_add_epi8","_mm256_mask_add_pd","_mm256_mask_add_ps","_mm256_mask_adds_epi16","_mm256_mask_adds_epi8","_mm256_mask_adds_epu16","_mm256_mask_adds_epu8","_mm256_mask_alignr_epi32","_mm256_mask_alignr_epi64","_mm256_mask_alignr_epi8","_mm256_mask_and_epi32","_mm256_mask_and_epi64","_mm256_mask_andnot_epi32","_mm256_mask_andnot_epi64","_mm256_mask_avg_epu16","_mm256_mask_avg_epu8","_mm256_mask_bitshuffle_epi64_mask","_mm256_mask_blend_epi16","_mm256_mask_blend_epi32","_mm256_mask_blend_epi64","_mm256_mask_blend_epi8","_mm256_mask_blend_pd","_mm256_mask_blend_ps","_mm256_mask_broadcast_f32x4","_mm256_mask_broadcast_i32x4","_mm256_mask_broadcastb_epi8","_mm256_mask_broadcastd_epi32","_mm256_mask_broadcastq_epi64","_mm256_mask_broadcastsd_pd","_mm256_mask_broadcastss_ps","_mm256_mask_broadcastw_epi16","_mm256_mask_cmp_epi16_mask","_mm256_mask_cmp_epi32_mask","_mm256_mask_cmp_epi64_mask","_mm256_mask_cmp_epi8_mask","_mm256_mask_cmp_epu16_mask","_mm256_mask_cmp_epu32_mask","_mm256_mask_cmp_epu64_mask","_mm256_mask_cmp_epu8_mask","_mm256_mask_cmp_pd_mask","_mm256_mask_cmp_ps_mask","_mm256_mask_cmpeq_epi16_mask","_mm256_mask_cmpeq_epi32_mask","_mm256_mask_cmpeq_epi64_mask","_mm256_mask_cmpeq_epi8_mask","_mm256_mask_cmpeq_epu16_mask","_mm256_mask_cmpeq_epu32_mask","_mm256_mask_cmpeq_epu64_mask","_mm256_mask_cmpeq_epu8_mask","_mm256_mask_cmpge_epi16_mask","_mm256_mask_cmpge_epi32_mask","_mm256_mask_cmpge_epi64_mask","_mm256_mask_cmpge_epi8_mask","_mm256_mask_cmpge_epu16_mask","_mm256_mask_cmpge_epu32_mask","_mm256_mask_cmpge_epu64_mask","_mm256_mask_cmpge_epu8_mask","_mm256_mask_cmpgt_epi16_mask","_mm256_mask_cmpgt_epi32_mask","_mm256_mask_cmpgt_epi64_mask","_mm256_mask_cmpgt_epi8_mask","_mm256_mask_cmpgt_epu16_mask","_mm256_mask_cmpgt_epu32_mask","_mm256_mask_cmpgt_epu64_mask","_mm256_mask_cmpgt_epu8_mask","_mm256_mask_cmple_epi16_mask","_mm256_mask_cmple_epi32_mask","_mm256_mask_cmple_epi64_mask","_mm256_mask_cmple_epi8_mask","_mm256_mask_cmple_epu16_mask","_mm256_mask_cmple_epu32_mask","_mm256_mask_cmple_epu64_mask","_mm256_mask_cmple_epu8_mask","_mm256_mask_cmplt_epi16_mask","_mm256_mask_cmplt_epi32_mask","_mm256_mask_cmplt_epi64_mask","_mm256_mask_cmplt_epi8_mask","_mm256_mask_cmplt_epu16_mask","_mm256_mask_cmplt_epu32_mask","_mm256_mask_cmplt_epu64_mask","_mm256_mask_cmplt_epu8_mask","_mm256_mask_cmpneq_epi16_mask","_mm256_mask_cmpneq_epi32_mask","_mm256_mask_cmpneq_epi64_mask","_mm256_mask_cmpneq_epi8_mask","_mm256_mask_cmpneq_epu16_mask","_mm256_mask_cmpneq_epu32_mask","_mm256_mask_cmpneq_epu64_mask","_mm256_mask_cmpneq_epu8_mask","_mm256_mask_compress_epi16","_mm256_mask_compress_epi32","_mm256_mask_compress_epi64","_mm256_mask_compress_epi8","_mm256_mask_compress_pd","_mm256_mask_compress_ps","_mm256_mask_compressstoreu_epi16","_mm256_mask_compressstoreu_epi32","_mm256_mask_compressstoreu_epi64","_mm256_mask_compressstoreu_epi8","_mm256_mask_compressstoreu_pd","_mm256_mask_compressstoreu_ps","_mm256_mask_conflict_epi32","_mm256_mask_conflict_epi64","_mm256_mask_cvt_roundps_ph","_mm256_mask_cvtepi16_epi32","_mm256_mask_cvtepi16_epi64","_mm256_mask_cvtepi16_epi8","_mm256_mask_cvtepi16_storeu_epi8","_mm256_mask_cvtepi32_epi16","_mm256_mask_cvtepi32_epi64","_mm256_mask_cvtepi32_epi8","_mm256_mask_cvtepi32_pd","_mm256_mask_cvtepi32_ps","_mm256_mask_cvtepi32_storeu_epi16","_mm256_mask_cvtepi32_storeu_epi8","_mm256_mask_cvtepi64_epi16","_mm256_mask_cvtepi64_epi32","_mm256_mask_cvtepi64_epi8","_mm256_mask_cvtepi64_storeu_epi16","_mm256_mask_cvtepi64_storeu_epi32","_mm256_mask_cvtepi64_storeu_epi8","_mm256_mask_cvtepi8_epi16","_mm256_mask_cvtepi8_epi32","_mm256_mask_cvtepi8_epi64","_mm256_mask_cvtepu16_epi32","_mm256_mask_cvtepu16_epi64","_mm256_mask_cvtepu32_epi64","_mm256_mask_cvtepu32_pd","_mm256_mask_cvtepu8_epi16","_mm256_mask_cvtepu8_epi32","_mm256_mask_cvtepu8_epi64","_mm256_mask_cvtne2ps_pbh","_mm256_mask_cvtneps_pbh","_mm256_mask_cvtpd_epi32","_mm256_mask_cvtpd_epu32","_mm256_mask_cvtpd_ps","_mm256_mask_cvtph_ps","_mm256_mask_cvtps_epi32","_mm256_mask_cvtps_epu32","_mm256_mask_cvtps_ph","_mm256_mask_cvtsepi16_epi8","_mm256_mask_cvtsepi16_storeu_epi8","_mm256_mask_cvtsepi32_epi16","_mm256_mask_cvtsepi32_epi8","_mm256_mask_cvtsepi32_storeu_epi16","_mm256_mask_cvtsepi32_storeu_epi8","_mm256_mask_cvtsepi64_epi16","_mm256_mask_cvtsepi64_epi32","_mm256_mask_cvtsepi64_epi8","_mm256_mask_cvtsepi64_storeu_epi16","_mm256_mask_cvtsepi64_storeu_epi32","_mm256_mask_cvtsepi64_storeu_epi8","_mm256_mask_cvttpd_epi32","_mm256_mask_cvttpd_epu32","_mm256_mask_cvttps_epi32","_mm256_mask_cvttps_epu32","_mm256_mask_cvtusepi16_epi8","_mm256_mask_cvtusepi16_storeu_epi8","_mm256_mask_cvtusepi32_epi16","_mm256_mask_cvtusepi32_epi8","_mm256_mask_cvtusepi32_storeu_epi16","_mm256_mask_cvtusepi32_storeu_epi8","_mm256_mask_cvtusepi64_epi16","_mm256_mask_cvtusepi64_epi32","_mm256_mask_cvtusepi64_epi8","_mm256_mask_cvtusepi64_storeu_epi16","_mm256_mask_cvtusepi64_storeu_epi32","_mm256_mask_cvtusepi64_storeu_epi8","_mm256_mask_dbsad_epu8","_mm256_mask_div_pd","_mm256_mask_div_ps","_mm256_mask_dpbf16_ps","_mm256_mask_dpbusd_epi32","_mm256_mask_dpbusds_epi32","_mm256_mask_dpwssd_epi32","_mm256_mask_dpwssds_epi32","_mm256_mask_expand_epi16","_mm256_mask_expand_epi32","_mm256_mask_expand_epi64","_mm256_mask_expand_epi8","_mm256_mask_expand_pd","_mm256_mask_expand_ps","_mm256_mask_expandloadu_epi16","_mm256_mask_expandloadu_epi32","_mm256_mask_expandloadu_epi64","_mm256_mask_expandloadu_epi8","_mm256_mask_expandloadu_pd","_mm256_mask_expandloadu_ps","_mm256_mask_extractf32x4_ps","_mm256_mask_extracti32x4_epi32","_mm256_mask_fixupimm_pd","_mm256_mask_fixupimm_ps","_mm256_mask_fmadd_pd","_mm256_mask_fmadd_ps","_mm256_mask_fmaddsub_pd","_mm256_mask_fmaddsub_ps","_mm256_mask_fmsub_pd","_mm256_mask_fmsub_ps","_mm256_mask_fmsubadd_pd","_mm256_mask_fmsubadd_ps","_mm256_mask_fnmadd_pd","_mm256_mask_fnmadd_ps","_mm256_mask_fnmsub_pd","_mm256_mask_fnmsub_ps","_mm256_mask_getexp_pd","_mm256_mask_getexp_ps","_mm256_mask_getmant_pd","_mm256_mask_getmant_ps","_mm256_mask_gf2p8affine_epi64_epi8","_mm256_mask_gf2p8affineinv_epi64_epi8","_mm256_mask_gf2p8mul_epi8","_mm256_mask_i32gather_epi32","_mm256_mask_i32gather_epi64","_mm256_mask_i32gather_pd","_mm256_mask_i32gather_ps","_mm256_mask_i64gather_epi32","_mm256_mask_i64gather_epi64","_mm256_mask_i64gather_pd","_mm256_mask_i64gather_ps","_mm256_mask_insertf32x4","_mm256_mask_inserti32x4","_mm256_mask_load_epi32","_mm256_mask_load_epi64","_mm256_mask_load_pd","_mm256_mask_load_ps","_mm256_mask_loadu_epi16","_mm256_mask_loadu_epi32","_mm256_mask_loadu_epi64","_mm256_mask_loadu_epi8","_mm256_mask_loadu_pd","_mm256_mask_loadu_ps","_mm256_mask_lzcnt_epi32","_mm256_mask_lzcnt_epi64","_mm256_mask_madd_epi16","_mm256_mask_maddubs_epi16","_mm256_mask_max_epi16","_mm256_mask_max_epi32","_mm256_mask_max_epi64","_mm256_mask_max_epi8","_mm256_mask_max_epu16","_mm256_mask_max_epu32","_mm256_mask_max_epu64","_mm256_mask_max_epu8","_mm256_mask_max_pd","_mm256_mask_max_ps","_mm256_mask_min_epi16","_mm256_mask_min_epi32","_mm256_mask_min_epi64","_mm256_mask_min_epi8","_mm256_mask_min_epu16","_mm256_mask_min_epu32","_mm256_mask_min_epu64","_mm256_mask_min_epu8","_mm256_mask_min_pd","_mm256_mask_min_ps","_mm256_mask_mov_epi16","_mm256_mask_mov_epi32","_mm256_mask_mov_epi64","_mm256_mask_mov_epi8","_mm256_mask_mov_pd","_mm256_mask_mov_ps","_mm256_mask_movedup_pd","_mm256_mask_movehdup_ps","_mm256_mask_moveldup_ps","_mm256_mask_mul_epi32","_mm256_mask_mul_epu32","_mm256_mask_mul_pd","_mm256_mask_mul_ps","_mm256_mask_mulhi_epi16","_mm256_mask_mulhi_epu16","_mm256_mask_mulhrs_epi16","_mm256_mask_mullo_epi16","_mm256_mask_mullo_epi32","_mm256_mask_multishift_epi64_epi8","_mm256_mask_or_epi32","_mm256_mask_or_epi64","_mm256_mask_packs_epi16","_mm256_mask_packs_epi32","_mm256_mask_packus_epi16","_mm256_mask_packus_epi32","_mm256_mask_permute_pd","_mm256_mask_permute_ps","_mm256_mask_permutevar_pd","_mm256_mask_permutevar_ps","_mm256_mask_permutex2var_epi16","_mm256_mask_permutex2var_epi32","_mm256_mask_permutex2var_epi64","_mm256_mask_permutex2var_epi8","_mm256_mask_permutex2var_pd","_mm256_mask_permutex2var_ps","_mm256_mask_permutex_epi64","_mm256_mask_permutex_pd","_mm256_mask_permutexvar_epi16","_mm256_mask_permutexvar_epi32","_mm256_mask_permutexvar_epi64","_mm256_mask_permutexvar_epi8","_mm256_mask_permutexvar_pd","_mm256_mask_permutexvar_ps","_mm256_mask_popcnt_epi16","_mm256_mask_popcnt_epi32","_mm256_mask_popcnt_epi64","_mm256_mask_popcnt_epi8","_mm256_mask_rcp14_pd","_mm256_mask_rcp14_ps","_mm256_mask_rol_epi32","_mm256_mask_rol_epi64","_mm256_mask_rolv_epi32","_mm256_mask_rolv_epi64","_mm256_mask_ror_epi32","_mm256_mask_ror_epi64","_mm256_mask_rorv_epi32","_mm256_mask_rorv_epi64","_mm256_mask_roundscale_pd","_mm256_mask_roundscale_ps","_mm256_mask_rsqrt14_pd","_mm256_mask_rsqrt14_ps","_mm256_mask_scalef_pd","_mm256_mask_scalef_ps","_mm256_mask_set1_epi16","_mm256_mask_set1_epi32","_mm256_mask_set1_epi64","_mm256_mask_set1_epi8","_mm256_mask_shldi_epi16","_mm256_mask_shldi_epi32","_mm256_mask_shldi_epi64","_mm256_mask_shldv_epi16","_mm256_mask_shldv_epi32","_mm256_mask_shldv_epi64","_mm256_mask_shrdi_epi16","_mm256_mask_shrdi_epi32","_mm256_mask_shrdi_epi64","_mm256_mask_shrdv_epi16","_mm256_mask_shrdv_epi32","_mm256_mask_shrdv_epi64","_mm256_mask_shuffle_epi32","_mm256_mask_shuffle_epi8","_mm256_mask_shuffle_f32x4","_mm256_mask_shuffle_f64x2","_mm256_mask_shuffle_i32x4","_mm256_mask_shuffle_i64x2","_mm256_mask_shuffle_pd","_mm256_mask_shuffle_ps","_mm256_mask_shufflehi_epi16","_mm256_mask_shufflelo_epi16","_mm256_mask_sll_epi16","_mm256_mask_sll_epi32","_mm256_mask_sll_epi64","_mm256_mask_slli_epi16","_mm256_mask_slli_epi32","_mm256_mask_slli_epi64","_mm256_mask_sllv_epi16","_mm256_mask_sllv_epi32","_mm256_mask_sllv_epi64","_mm256_mask_sqrt_pd","_mm256_mask_sqrt_ps","_mm256_mask_sra_epi16","_mm256_mask_sra_epi32","_mm256_mask_sra_epi64","_mm256_mask_srai_epi16","_mm256_mask_srai_epi32","_mm256_mask_srai_epi64","_mm256_mask_srav_epi16","_mm256_mask_srav_epi32","_mm256_mask_srav_epi64","_mm256_mask_srl_epi16","_mm256_mask_srl_epi32","_mm256_mask_srl_epi64","_mm256_mask_srli_epi16","_mm256_mask_srli_epi32","_mm256_mask_srli_epi64","_mm256_mask_srlv_epi16","_mm256_mask_srlv_epi32","_mm256_mask_srlv_epi64","_mm256_mask_store_epi32","_mm256_mask_store_epi64","_mm256_mask_store_pd","_mm256_mask_store_ps","_mm256_mask_storeu_epi16","_mm256_mask_storeu_epi32","_mm256_mask_storeu_epi64","_mm256_mask_storeu_epi8","_mm256_mask_storeu_pd","_mm256_mask_storeu_ps","_mm256_mask_sub_epi16","_mm256_mask_sub_epi32","_mm256_mask_sub_epi64","_mm256_mask_sub_epi8","_mm256_mask_sub_pd","_mm256_mask_sub_ps","_mm256_mask_subs_epi16","_mm256_mask_subs_epi8","_mm256_mask_subs_epu16","_mm256_mask_subs_epu8","_mm256_mask_ternarylogic_epi32","_mm256_mask_ternarylogic_epi64","_mm256_mask_test_epi16_mask","_mm256_mask_test_epi32_mask","_mm256_mask_test_epi64_mask","_mm256_mask_test_epi8_mask","_mm256_mask_testn_epi16_mask","_mm256_mask_testn_epi32_mask","_mm256_mask_testn_epi64_mask","_mm256_mask_testn_epi8_mask","_mm256_mask_unpackhi_epi16","_mm256_mask_unpackhi_epi32","_mm256_mask_unpackhi_epi64","_mm256_mask_unpackhi_epi8","_mm256_mask_unpackhi_pd","_mm256_mask_unpackhi_ps","_mm256_mask_unpacklo_epi16","_mm256_mask_unpacklo_epi32","_mm256_mask_unpacklo_epi64","_mm256_mask_unpacklo_epi8","_mm256_mask_unpacklo_pd","_mm256_mask_unpacklo_ps","_mm256_mask_xor_epi32","_mm256_mask_xor_epi64","_mm256_maskload_epi32","_mm256_maskload_epi64","_mm256_maskload_pd","_mm256_maskload_ps","_mm256_maskstore_epi32","_mm256_maskstore_epi64","_mm256_maskstore_pd","_mm256_maskstore_ps","_mm256_maskz_abs_epi16","_mm256_maskz_abs_epi32","_mm256_maskz_abs_epi64","_mm256_maskz_abs_epi8","_mm256_maskz_add_epi16","_mm256_maskz_add_epi32","_mm256_maskz_add_epi64","_mm256_maskz_add_epi8","_mm256_maskz_add_pd","_mm256_maskz_add_ps","_mm256_maskz_adds_epi16","_mm256_maskz_adds_epi8","_mm256_maskz_adds_epu16","_mm256_maskz_adds_epu8","_mm256_maskz_alignr_epi32","_mm256_maskz_alignr_epi64","_mm256_maskz_alignr_epi8","_mm256_maskz_and_epi32","_mm256_maskz_and_epi64","_mm256_maskz_andnot_epi32","_mm256_maskz_andnot_epi64","_mm256_maskz_avg_epu16","_mm256_maskz_avg_epu8","_mm256_maskz_broadcast_f32x4","_mm256_maskz_broadcast_i32x4","_mm256_maskz_broadcastb_epi8","_mm256_maskz_broadcastd_epi32","_mm256_maskz_broadcastq_epi64","_mm256_maskz_broadcastsd_pd","_mm256_maskz_broadcastss_ps","_mm256_maskz_broadcastw_epi16","_mm256_maskz_compress_epi16","_mm256_maskz_compress_epi32","_mm256_maskz_compress_epi64","_mm256_maskz_compress_epi8","_mm256_maskz_compress_pd","_mm256_maskz_compress_ps","_mm256_maskz_conflict_epi32","_mm256_maskz_conflict_epi64","_mm256_maskz_cvt_roundps_ph","_mm256_maskz_cvtepi16_epi32","_mm256_maskz_cvtepi16_epi64","_mm256_maskz_cvtepi16_epi8","_mm256_maskz_cvtepi32_epi16","_mm256_maskz_cvtepi32_epi64","_mm256_maskz_cvtepi32_epi8","_mm256_maskz_cvtepi32_pd","_mm256_maskz_cvtepi32_ps","_mm256_maskz_cvtepi64_epi16","_mm256_maskz_cvtepi64_epi32","_mm256_maskz_cvtepi64_epi8","_mm256_maskz_cvtepi8_epi16","_mm256_maskz_cvtepi8_epi32","_mm256_maskz_cvtepi8_epi64","_mm256_maskz_cvtepu16_epi32","_mm256_maskz_cvtepu16_epi64","_mm256_maskz_cvtepu32_epi64","_mm256_maskz_cvtepu32_pd","_mm256_maskz_cvtepu8_epi16","_mm256_maskz_cvtepu8_epi32","_mm256_maskz_cvtepu8_epi64","_mm256_maskz_cvtne2ps_pbh","_mm256_maskz_cvtneps_pbh","_mm256_maskz_cvtpd_epi32","_mm256_maskz_cvtpd_epu32","_mm256_maskz_cvtpd_ps","_mm256_maskz_cvtph_ps","_mm256_maskz_cvtps_epi32","_mm256_maskz_cvtps_epu32","_mm256_maskz_cvtps_ph","_mm256_maskz_cvtsepi16_epi8","_mm256_maskz_cvtsepi32_epi16","_mm256_maskz_cvtsepi32_epi8","_mm256_maskz_cvtsepi64_epi16","_mm256_maskz_cvtsepi64_epi32","_mm256_maskz_cvtsepi64_epi8","_mm256_maskz_cvttpd_epi32","_mm256_maskz_cvttpd_epu32","_mm256_maskz_cvttps_epi32","_mm256_maskz_cvttps_epu32","_mm256_maskz_cvtusepi16_epi8","_mm256_maskz_cvtusepi32_epi16","_mm256_maskz_cvtusepi32_epi8","_mm256_maskz_cvtusepi64_epi16","_mm256_maskz_cvtusepi64_epi32","_mm256_maskz_cvtusepi64_epi8","_mm256_maskz_dbsad_epu8","_mm256_maskz_div_pd","_mm256_maskz_div_ps","_mm256_maskz_dpbf16_ps","_mm256_maskz_dpbusd_epi32","_mm256_maskz_dpbusds_epi32","_mm256_maskz_dpwssd_epi32","_mm256_maskz_dpwssds_epi32","_mm256_maskz_expand_epi16","_mm256_maskz_expand_epi32","_mm256_maskz_expand_epi64","_mm256_maskz_expand_epi8","_mm256_maskz_expand_pd","_mm256_maskz_expand_ps","_mm256_maskz_expandloadu_epi16","_mm256_maskz_expandloadu_epi32","_mm256_maskz_expandloadu_epi64","_mm256_maskz_expandloadu_epi8","_mm256_maskz_expandloadu_pd","_mm256_maskz_expandloadu_ps","_mm256_maskz_extractf32x4_ps","_mm256_maskz_extracti32x4_epi32","_mm256_maskz_fixupimm_pd","_mm256_maskz_fixupimm_ps","_mm256_maskz_fmadd_pd","_mm256_maskz_fmadd_ps","_mm256_maskz_fmaddsub_pd","_mm256_maskz_fmaddsub_ps","_mm256_maskz_fmsub_pd","_mm256_maskz_fmsub_ps","_mm256_maskz_fmsubadd_pd","_mm256_maskz_fmsubadd_ps","_mm256_maskz_fnmadd_pd","_mm256_maskz_fnmadd_ps","_mm256_maskz_fnmsub_pd","_mm256_maskz_fnmsub_ps","_mm256_maskz_getexp_pd","_mm256_maskz_getexp_ps","_mm256_maskz_getmant_pd","_mm256_maskz_getmant_ps","_mm256_maskz_gf2p8affine_epi64_epi8","_mm256_maskz_gf2p8affineinv_epi64_epi8","_mm256_maskz_gf2p8mul_epi8","_mm256_maskz_insertf32x4","_mm256_maskz_inserti32x4","_mm256_maskz_load_epi32","_mm256_maskz_load_epi64","_mm256_maskz_load_pd","_mm256_maskz_load_ps","_mm256_maskz_loadu_epi16","_mm256_maskz_loadu_epi32","_mm256_maskz_loadu_epi64","_mm256_maskz_loadu_epi8","_mm256_maskz_loadu_pd","_mm256_maskz_loadu_ps","_mm256_maskz_lzcnt_epi32","_mm256_maskz_lzcnt_epi64","_mm256_maskz_madd_epi16","_mm256_maskz_maddubs_epi16","_mm256_maskz_max_epi16","_mm256_maskz_max_epi32","_mm256_maskz_max_epi64","_mm256_maskz_max_epi8","_mm256_maskz_max_epu16","_mm256_maskz_max_epu32","_mm256_maskz_max_epu64","_mm256_maskz_max_epu8","_mm256_maskz_max_pd","_mm256_maskz_max_ps","_mm256_maskz_min_epi16","_mm256_maskz_min_epi32","_mm256_maskz_min_epi64","_mm256_maskz_min_epi8","_mm256_maskz_min_epu16","_mm256_maskz_min_epu32","_mm256_maskz_min_epu64","_mm256_maskz_min_epu8","_mm256_maskz_min_pd","_mm256_maskz_min_ps","_mm256_maskz_mov_epi16","_mm256_maskz_mov_epi32","_mm256_maskz_mov_epi64","_mm256_maskz_mov_epi8","_mm256_maskz_mov_pd","_mm256_maskz_mov_ps","_mm256_maskz_movedup_pd","_mm256_maskz_movehdup_ps","_mm256_maskz_moveldup_ps","_mm256_maskz_mul_epi32","_mm256_maskz_mul_epu32","_mm256_maskz_mul_pd","_mm256_maskz_mul_ps","_mm256_maskz_mulhi_epi16","_mm256_maskz_mulhi_epu16","_mm256_maskz_mulhrs_epi16","_mm256_maskz_mullo_epi16","_mm256_maskz_mullo_epi32","_mm256_maskz_multishift_epi64_epi8","_mm256_maskz_or_epi32","_mm256_maskz_or_epi64","_mm256_maskz_packs_epi16","_mm256_maskz_packs_epi32","_mm256_maskz_packus_epi16","_mm256_maskz_packus_epi32","_mm256_maskz_permute_pd","_mm256_maskz_permute_ps","_mm256_maskz_permutevar_pd","_mm256_maskz_permutevar_ps","_mm256_maskz_permutex2var_epi16","_mm256_maskz_permutex2var_epi32","_mm256_maskz_permutex2var_epi64","_mm256_maskz_permutex2var_epi8","_mm256_maskz_permutex2var_pd","_mm256_maskz_permutex2var_ps","_mm256_maskz_permutex_epi64","_mm256_maskz_permutex_pd","_mm256_maskz_permutexvar_epi16","_mm256_maskz_permutexvar_epi32","_mm256_maskz_permutexvar_epi64","_mm256_maskz_permutexvar_epi8","_mm256_maskz_permutexvar_pd","_mm256_maskz_permutexvar_ps","_mm256_maskz_popcnt_epi16","_mm256_maskz_popcnt_epi32","_mm256_maskz_popcnt_epi64","_mm256_maskz_popcnt_epi8","_mm256_maskz_rcp14_pd","_mm256_maskz_rcp14_ps","_mm256_maskz_rol_epi32","_mm256_maskz_rol_epi64","_mm256_maskz_rolv_epi32","_mm256_maskz_rolv_epi64","_mm256_maskz_ror_epi32","_mm256_maskz_ror_epi64","_mm256_maskz_rorv_epi32","_mm256_maskz_rorv_epi64","_mm256_maskz_roundscale_pd","_mm256_maskz_roundscale_ps","_mm256_maskz_rsqrt14_pd","_mm256_maskz_rsqrt14_ps","_mm256_maskz_scalef_pd","_mm256_maskz_scalef_ps","_mm256_maskz_set1_epi16","_mm256_maskz_set1_epi32","_mm256_maskz_set1_epi64","_mm256_maskz_set1_epi8","_mm256_maskz_shldi_epi16","_mm256_maskz_shldi_epi32","_mm256_maskz_shldi_epi64","_mm256_maskz_shldv_epi16","_mm256_maskz_shldv_epi32","_mm256_maskz_shldv_epi64","_mm256_maskz_shrdi_epi16","_mm256_maskz_shrdi_epi32","_mm256_maskz_shrdi_epi64","_mm256_maskz_shrdv_epi16","_mm256_maskz_shrdv_epi32","_mm256_maskz_shrdv_epi64","_mm256_maskz_shuffle_epi32","_mm256_maskz_shuffle_epi8","_mm256_maskz_shuffle_f32x4","_mm256_maskz_shuffle_f64x2","_mm256_maskz_shuffle_i32x4","_mm256_maskz_shuffle_i64x2","_mm256_maskz_shuffle_pd","_mm256_maskz_shuffle_ps","_mm256_maskz_shufflehi_epi16","_mm256_maskz_shufflelo_epi16","_mm256_maskz_sll_epi16","_mm256_maskz_sll_epi32","_mm256_maskz_sll_epi64","_mm256_maskz_slli_epi16","_mm256_maskz_slli_epi32","_mm256_maskz_slli_epi64","_mm256_maskz_sllv_epi16","_mm256_maskz_sllv_epi32","_mm256_maskz_sllv_epi64","_mm256_maskz_sqrt_pd","_mm256_maskz_sqrt_ps","_mm256_maskz_sra_epi16","_mm256_maskz_sra_epi32","_mm256_maskz_sra_epi64","_mm256_maskz_srai_epi16","_mm256_maskz_srai_epi32","_mm256_maskz_srai_epi64","_mm256_maskz_srav_epi16","_mm256_maskz_srav_epi32","_mm256_maskz_srav_epi64","_mm256_maskz_srl_epi16","_mm256_maskz_srl_epi32","_mm256_maskz_srl_epi64","_mm256_maskz_srli_epi16","_mm256_maskz_srli_epi32","_mm256_maskz_srli_epi64","_mm256_maskz_srlv_epi16","_mm256_maskz_srlv_epi32","_mm256_maskz_srlv_epi64","_mm256_maskz_sub_epi16","_mm256_maskz_sub_epi32","_mm256_maskz_sub_epi64","_mm256_maskz_sub_epi8","_mm256_maskz_sub_pd","_mm256_maskz_sub_ps","_mm256_maskz_subs_epi16","_mm256_maskz_subs_epi8","_mm256_maskz_subs_epu16","_mm256_maskz_subs_epu8","_mm256_maskz_ternarylogic_epi32","_mm256_maskz_ternarylogic_epi64","_mm256_maskz_unpackhi_epi16","_mm256_maskz_unpackhi_epi32","_mm256_maskz_unpackhi_epi64","_mm256_maskz_unpackhi_epi8","_mm256_maskz_unpackhi_pd","_mm256_maskz_unpackhi_ps","_mm256_maskz_unpacklo_epi16","_mm256_maskz_unpacklo_epi32","_mm256_maskz_unpacklo_epi64","_mm256_maskz_unpacklo_epi8","_mm256_maskz_unpacklo_pd","_mm256_maskz_unpacklo_ps","_mm256_maskz_xor_epi32","_mm256_maskz_xor_epi64","_mm256_max_epi16","_mm256_max_epi32","_mm256_max_epi64","_mm256_max_epi8","_mm256_max_epu16","_mm256_max_epu32","_mm256_max_epu64","_mm256_max_epu8","_mm256_max_pd","_mm256_max_ps","_mm256_min_epi16","_mm256_min_epi32","_mm256_min_epi64","_mm256_min_epi8","_mm256_min_epu16","_mm256_min_epu32","_mm256_min_epu64","_mm256_min_epu8","_mm256_min_pd","_mm256_min_ps","_mm256_movedup_pd","_mm256_movehdup_ps","_mm256_moveldup_ps","_mm256_movemask_epi8","_mm256_movemask_pd","_mm256_movemask_ps","_mm256_movepi16_mask","_mm256_movepi8_mask","_mm256_movm_epi16","_mm256_movm_epi8","_mm256_mpsadbw_epu8","_mm256_mul_epi32","_mm256_mul_epu32","_mm256_mul_pd","_mm256_mul_ps","_mm256_mulhi_epi16","_mm256_mulhi_epu16","_mm256_mulhrs_epi16","_mm256_mullo_epi16","_mm256_mullo_epi32","_mm256_multishift_epi64_epi8","_mm256_or_epi32","_mm256_or_epi64","_mm256_or_pd","_mm256_or_ps","_mm256_or_si256","_mm256_packs_epi16","_mm256_packs_epi32","_mm256_packus_epi16","_mm256_packus_epi32","_mm256_permute2f128_pd","_mm256_permute2f128_ps","_mm256_permute2f128_si256","_mm256_permute2x128_si256","_mm256_permute4x64_epi64","_mm256_permute4x64_pd","_mm256_permute_pd","_mm256_permute_ps","_mm256_permutevar8x32_epi32","_mm256_permutevar8x32_ps","_mm256_permutevar_pd","_mm256_permutevar_ps","_mm256_permutex2var_epi16","_mm256_permutex2var_epi32","_mm256_permutex2var_epi64","_mm256_permutex2var_epi8","_mm256_permutex2var_pd","_mm256_permutex2var_ps","_mm256_permutex_epi64","_mm256_permutex_pd","_mm256_permutexvar_epi16","_mm256_permutexvar_epi32","_mm256_permutexvar_epi64","_mm256_permutexvar_epi8","_mm256_permutexvar_pd","_mm256_permutexvar_ps","_mm256_popcnt_epi16","_mm256_popcnt_epi32","_mm256_popcnt_epi64","_mm256_popcnt_epi8","_mm256_rcp14_pd","_mm256_rcp14_ps","_mm256_rcp_ps","_mm256_rol_epi32","_mm256_rol_epi64","_mm256_rolv_epi32","_mm256_rolv_epi64","_mm256_ror_epi32","_mm256_ror_epi64","_mm256_rorv_epi32","_mm256_rorv_epi64","_mm256_round_pd","_mm256_round_ps","_mm256_roundscale_pd","_mm256_roundscale_ps","_mm256_rsqrt_ps","_mm256_sad_epu8","_mm256_scalef_pd","_mm256_scalef_ps","_mm256_set1_epi16","_mm256_set1_epi32","_mm256_set1_epi64x","_mm256_set1_epi8","_mm256_set1_pd","_mm256_set1_ps","_mm256_set_epi16","_mm256_set_epi32","_mm256_set_epi64x","_mm256_set_epi8","_mm256_set_m128","_mm256_set_m128d","_mm256_set_m128i","_mm256_set_pd","_mm256_set_ps","_mm256_setr_epi16","_mm256_setr_epi32","_mm256_setr_epi64x","_mm256_setr_epi8","_mm256_setr_m128","_mm256_setr_m128d","_mm256_setr_m128i","_mm256_setr_pd","_mm256_setr_ps","_mm256_setzero_pd","_mm256_setzero_ps","_mm256_setzero_si256","_mm256_shldi_epi16","_mm256_shldi_epi32","_mm256_shldi_epi64","_mm256_shldv_epi16","_mm256_shldv_epi32","_mm256_shldv_epi64","_mm256_shrdi_epi16","_mm256_shrdi_epi32","_mm256_shrdi_epi64","_mm256_shrdv_epi16","_mm256_shrdv_epi32","_mm256_shrdv_epi64","_mm256_shuffle_epi32","_mm256_shuffle_epi8","_mm256_shuffle_f32x4","_mm256_shuffle_f64x2","_mm256_shuffle_i32x4","_mm256_shuffle_i64x2","_mm256_shuffle_pd","_mm256_shuffle_ps","_mm256_shufflehi_epi16","_mm256_shufflelo_epi16","_mm256_sign_epi16","_mm256_sign_epi32","_mm256_sign_epi8","_mm256_sll_epi16","_mm256_sll_epi32","_mm256_sll_epi64","_mm256_slli_epi16","_mm256_slli_epi32","_mm256_slli_epi64","_mm256_slli_si256","_mm256_sllv_epi16","_mm256_sllv_epi32","_mm256_sllv_epi64","_mm256_sqrt_pd","_mm256_sqrt_ps","_mm256_sra_epi16","_mm256_sra_epi32","_mm256_sra_epi64","_mm256_srai_epi16","_mm256_srai_epi32","_mm256_srai_epi64","_mm256_srav_epi16","_mm256_srav_epi32","_mm256_srav_epi64","_mm256_srl_epi16","_mm256_srl_epi32","_mm256_srl_epi64","_mm256_srli_epi16","_mm256_srli_epi32","_mm256_srli_epi64","_mm256_srli_si256","_mm256_srlv_epi16","_mm256_srlv_epi32","_mm256_srlv_epi64","_mm256_store_epi32","_mm256_store_epi64","_mm256_store_pd","_mm256_store_ps","_mm256_store_si256","_mm256_storeu2_m128","_mm256_storeu2_m128d","_mm256_storeu2_m128i","_mm256_storeu_epi16","_mm256_storeu_epi32","_mm256_storeu_epi64","_mm256_storeu_epi8","_mm256_storeu_pd","_mm256_storeu_ps","_mm256_storeu_si256","_mm256_stream_pd","_mm256_stream_ps","_mm256_stream_si256","_mm256_sub_epi16","_mm256_sub_epi32","_mm256_sub_epi64","_mm256_sub_epi8","_mm256_sub_pd","_mm256_sub_ps","_mm256_subs_epi16","_mm256_subs_epi8","_mm256_subs_epu16","_mm256_subs_epu8","_mm256_ternarylogic_epi32","_mm256_ternarylogic_epi64","_mm256_test_epi16_mask","_mm256_test_epi32_mask","_mm256_test_epi64_mask","_mm256_test_epi8_mask","_mm256_testc_pd","_mm256_testc_ps","_mm256_testc_si256","_mm256_testn_epi16_mask","_mm256_testn_epi32_mask","_mm256_testn_epi64_mask","_mm256_testn_epi8_mask","_mm256_testnzc_pd","_mm256_testnzc_ps","_mm256_testnzc_si256","_mm256_testz_pd","_mm256_testz_ps","_mm256_testz_si256","_mm256_undefined_pd","_mm256_undefined_ps","_mm256_undefined_si256","_mm256_unpackhi_epi16","_mm256_unpackhi_epi32","_mm256_unpackhi_epi64","_mm256_unpackhi_epi8","_mm256_unpackhi_pd","_mm256_unpackhi_ps","_mm256_unpacklo_epi16","_mm256_unpacklo_epi32","_mm256_unpacklo_epi64","_mm256_unpacklo_epi8","_mm256_unpacklo_pd","_mm256_unpacklo_ps","_mm256_xor_epi32","_mm256_xor_epi64","_mm256_xor_pd","_mm256_xor_ps","_mm256_xor_si256","_mm256_zeroall","_mm256_zeroupper","_mm256_zextpd128_pd256","_mm256_zextps128_ps256","_mm256_zextsi128_si256","_mm512_abs_epi16","_mm512_abs_epi32","_mm512_abs_epi64","_mm512_abs_epi8","_mm512_abs_pd","_mm512_abs_ps","_mm512_add_epi16","_mm512_add_epi32","_mm512_add_epi64","_mm512_add_epi8","_mm512_add_pd","_mm512_add_ps","_mm512_add_round_pd","_mm512_add_round_ps","_mm512_adds_epi16","_mm512_adds_epi8","_mm512_adds_epu16","_mm512_adds_epu8","_mm512_aesdec_epi128","_mm512_aesdeclast_epi128","_mm512_aesenc_epi128","_mm512_aesenclast_epi128","_mm512_alignr_epi32","_mm512_alignr_epi64","_mm512_alignr_epi8","_mm512_and_epi32","_mm512_and_epi64","_mm512_and_si512","_mm512_andnot_epi32","_mm512_andnot_epi64","_mm512_andnot_si512","_mm512_avg_epu16","_mm512_avg_epu8","_mm512_bitshuffle_epi64_mask","_mm512_broadcast_f32x4","_mm512_broadcast_f64x4","_mm512_broadcast_i32x4","_mm512_broadcast_i64x4","_mm512_broadcastb_epi8","_mm512_broadcastd_epi32","_mm512_broadcastmb_epi64","_mm512_broadcastmw_epi32","_mm512_broadcastq_epi64","_mm512_broadcastsd_pd","_mm512_broadcastss_ps","_mm512_broadcastw_epi16","_mm512_bslli_epi128","_mm512_bsrli_epi128","_mm512_castpd128_pd512","_mm512_castpd256_pd512","_mm512_castpd512_pd128","_mm512_castpd512_pd256","_mm512_castpd_ps","_mm512_castpd_si512","_mm512_castps128_ps512","_mm512_castps256_ps512","_mm512_castps512_ps128","_mm512_castps512_ps256","_mm512_castps_pd","_mm512_castps_si512","_mm512_castsi128_si512","_mm512_castsi256_si512","_mm512_castsi512_pd","_mm512_castsi512_ps","_mm512_castsi512_si128","_mm512_castsi512_si256","_mm512_clmulepi64_epi128","_mm512_cmp_epi16_mask","_mm512_cmp_epi32_mask","_mm512_cmp_epi64_mask","_mm512_cmp_epi8_mask","_mm512_cmp_epu16_mask","_mm512_cmp_epu32_mask","_mm512_cmp_epu64_mask","_mm512_cmp_epu8_mask","_mm512_cmp_pd_mask","_mm512_cmp_ps_mask","_mm512_cmp_round_pd_mask","_mm512_cmp_round_ps_mask","_mm512_cmpeq_epi16_mask","_mm512_cmpeq_epi32_mask","_mm512_cmpeq_epi64_mask","_mm512_cmpeq_epi8_mask","_mm512_cmpeq_epu16_mask","_mm512_cmpeq_epu32_mask","_mm512_cmpeq_epu64_mask","_mm512_cmpeq_epu8_mask","_mm512_cmpeq_pd_mask","_mm512_cmpeq_ps_mask","_mm512_cmpge_epi16_mask","_mm512_cmpge_epi32_mask","_mm512_cmpge_epi64_mask","_mm512_cmpge_epi8_mask","_mm512_cmpge_epu16_mask","_mm512_cmpge_epu32_mask","_mm512_cmpge_epu64_mask","_mm512_cmpge_epu8_mask","_mm512_cmpgt_epi16_mask","_mm512_cmpgt_epi32_mask","_mm512_cmpgt_epi64_mask","_mm512_cmpgt_epi8_mask","_mm512_cmpgt_epu16_mask","_mm512_cmpgt_epu32_mask","_mm512_cmpgt_epu64_mask","_mm512_cmpgt_epu8_mask","_mm512_cmple_epi16_mask","_mm512_cmple_epi32_mask","_mm512_cmple_epi64_mask","_mm512_cmple_epi8_mask","_mm512_cmple_epu16_mask","_mm512_cmple_epu32_mask","_mm512_cmple_epu64_mask","_mm512_cmple_epu8_mask","_mm512_cmple_pd_mask","_mm512_cmple_ps_mask","_mm512_cmplt_epi16_mask","_mm512_cmplt_epi32_mask","_mm512_cmplt_epi64_mask","_mm512_cmplt_epi8_mask","_mm512_cmplt_epu16_mask","_mm512_cmplt_epu32_mask","_mm512_cmplt_epu64_mask","_mm512_cmplt_epu8_mask","_mm512_cmplt_pd_mask","_mm512_cmplt_ps_mask","_mm512_cmpneq_epi16_mask","_mm512_cmpneq_epi32_mask","_mm512_cmpneq_epi64_mask","_mm512_cmpneq_epi8_mask","_mm512_cmpneq_epu16_mask","_mm512_cmpneq_epu32_mask","_mm512_cmpneq_epu64_mask","_mm512_cmpneq_epu8_mask","_mm512_cmpneq_pd_mask","_mm512_cmpneq_ps_mask","_mm512_cmpnle_pd_mask","_mm512_cmpnle_ps_mask","_mm512_cmpnlt_pd_mask","_mm512_cmpnlt_ps_mask","_mm512_cmpord_pd_mask","_mm512_cmpord_ps_mask","_mm512_cmpunord_pd_mask","_mm512_cmpunord_ps_mask","_mm512_conflict_epi32","_mm512_conflict_epi64","_mm512_cvt_roundepi32_ps","_mm512_cvt_roundepu32_ps","_mm512_cvt_roundpd_epi32","_mm512_cvt_roundpd_epu32","_mm512_cvt_roundpd_ps","_mm512_cvt_roundph_ps","_mm512_cvt_roundps_epi32","_mm512_cvt_roundps_epu32","_mm512_cvt_roundps_pd","_mm512_cvt_roundps_ph","_mm512_cvtepi16_epi32","_mm512_cvtepi16_epi64","_mm512_cvtepi16_epi8","_mm512_cvtepi32_epi16","_mm512_cvtepi32_epi64","_mm512_cvtepi32_epi8","_mm512_cvtepi32_pd","_mm512_cvtepi32_ps","_mm512_cvtepi32lo_pd","_mm512_cvtepi64_epi16","_mm512_cvtepi64_epi32","_mm512_cvtepi64_epi8","_mm512_cvtepi8_epi16","_mm512_cvtepi8_epi32","_mm512_cvtepi8_epi64","_mm512_cvtepu16_epi32","_mm512_cvtepu16_epi64","_mm512_cvtepu32_epi64","_mm512_cvtepu32_pd","_mm512_cvtepu32_ps","_mm512_cvtepu32lo_pd","_mm512_cvtepu8_epi16","_mm512_cvtepu8_epi32","_mm512_cvtepu8_epi64","_mm512_cvtne2ps_pbh","_mm512_cvtneps_pbh","_mm512_cvtpd_epi32","_mm512_cvtpd_epu32","_mm512_cvtpd_ps","_mm512_cvtpd_pslo","_mm512_cvtph_ps","_mm512_cvtps_epi32","_mm512_cvtps_epu32","_mm512_cvtps_pd","_mm512_cvtps_ph","_mm512_cvtpslo_pd","_mm512_cvtsepi16_epi8","_mm512_cvtsepi32_epi16","_mm512_cvtsepi32_epi8","_mm512_cvtsepi64_epi16","_mm512_cvtsepi64_epi32","_mm512_cvtsepi64_epi8","_mm512_cvtsi512_si32","_mm512_cvtt_roundpd_epi32","_mm512_cvtt_roundpd_epu32","_mm512_cvtt_roundps_epi32","_mm512_cvtt_roundps_epu32","_mm512_cvttpd_epi32","_mm512_cvttpd_epu32","_mm512_cvttps_epi32","_mm512_cvttps_epu32","_mm512_cvtusepi16_epi8","_mm512_cvtusepi32_epi16","_mm512_cvtusepi32_epi8","_mm512_cvtusepi64_epi16","_mm512_cvtusepi64_epi32","_mm512_cvtusepi64_epi8","_mm512_dbsad_epu8","_mm512_div_pd","_mm512_div_ps","_mm512_div_round_pd","_mm512_div_round_ps","_mm512_dpbf16_ps","_mm512_dpbusd_epi32","_mm512_dpbusds_epi32","_mm512_dpwssd_epi32","_mm512_dpwssds_epi32","_mm512_extractf32x4_ps","_mm512_extractf64x4_pd","_mm512_extracti32x4_epi32","_mm512_extracti64x4_epi64","_mm512_fixupimm_pd","_mm512_fixupimm_ps","_mm512_fixupimm_round_pd","_mm512_fixupimm_round_ps","_mm512_fmadd_pd","_mm512_fmadd_ps","_mm512_fmadd_round_pd","_mm512_fmadd_round_ps","_mm512_fmaddsub_pd","_mm512_fmaddsub_ps","_mm512_fmaddsub_round_pd","_mm512_fmaddsub_round_ps","_mm512_fmsub_pd","_mm512_fmsub_ps","_mm512_fmsub_round_pd","_mm512_fmsub_round_ps","_mm512_fmsubadd_pd","_mm512_fmsubadd_ps","_mm512_fmsubadd_round_pd","_mm512_fmsubadd_round_ps","_mm512_fnmadd_pd","_mm512_fnmadd_ps","_mm512_fnmadd_round_pd","_mm512_fnmadd_round_ps","_mm512_fnmsub_pd","_mm512_fnmsub_ps","_mm512_fnmsub_round_pd","_mm512_fnmsub_round_ps","_mm512_getexp_pd","_mm512_getexp_ps","_mm512_getexp_round_pd","_mm512_getexp_round_ps","_mm512_getmant_pd","_mm512_getmant_ps","_mm512_getmant_round_pd","_mm512_getmant_round_ps","_mm512_gf2p8affine_epi64_epi8","_mm512_gf2p8affineinv_epi64_epi8","_mm512_gf2p8mul_epi8","_mm512_i32gather_epi32","_mm512_i32gather_epi64","_mm512_i32gather_pd","_mm512_i32gather_ps","_mm512_i32scatter_epi32","_mm512_i32scatter_epi64","_mm512_i32scatter_pd","_mm512_i32scatter_ps","_mm512_i64gather_epi32","_mm512_i64gather_epi64","_mm512_i64gather_pd","_mm512_i64gather_ps","_mm512_i64scatter_epi32","_mm512_i64scatter_epi64","_mm512_i64scatter_pd","_mm512_i64scatter_ps","_mm512_insertf32x4","_mm512_insertf64x4","_mm512_inserti32x4","_mm512_inserti64x4","_mm512_int2mask","_mm512_kand","_mm512_kandn","_mm512_kmov","_mm512_knot","_mm512_kor","_mm512_kortestc","_mm512_kunpackb","_mm512_kxnor","_mm512_kxor","_mm512_load_epi32","_mm512_load_epi64","_mm512_load_pd","_mm512_load_ps","_mm512_load_si512","_mm512_loadu_epi16","_mm512_loadu_epi32","_mm512_loadu_epi64","_mm512_loadu_epi8","_mm512_loadu_pd","_mm512_loadu_ps","_mm512_loadu_si512","_mm512_lzcnt_epi32","_mm512_lzcnt_epi64","_mm512_madd52hi_epu64","_mm512_madd52lo_epu64","_mm512_madd_epi16","_mm512_maddubs_epi16","_mm512_mask2_permutex2var_epi16","_mm512_mask2_permutex2var_epi32","_mm512_mask2_permutex2var_epi64","_mm512_mask2_permutex2var_epi8","_mm512_mask2_permutex2var_pd","_mm512_mask2_permutex2var_ps","_mm512_mask2int","_mm512_mask3_fmadd_pd","_mm512_mask3_fmadd_ps","_mm512_mask3_fmadd_round_pd","_mm512_mask3_fmadd_round_ps","_mm512_mask3_fmaddsub_pd","_mm512_mask3_fmaddsub_ps","_mm512_mask3_fmaddsub_round_pd","_mm512_mask3_fmaddsub_round_ps","_mm512_mask3_fmsub_pd","_mm512_mask3_fmsub_ps","_mm512_mask3_fmsub_round_pd","_mm512_mask3_fmsub_round_ps","_mm512_mask3_fmsubadd_pd","_mm512_mask3_fmsubadd_ps","_mm512_mask3_fmsubadd_round_pd","_mm512_mask3_fmsubadd_round_ps","_mm512_mask3_fnmadd_pd","_mm512_mask3_fnmadd_ps","_mm512_mask3_fnmadd_round_pd","_mm512_mask3_fnmadd_round_ps","_mm512_mask3_fnmsub_pd","_mm512_mask3_fnmsub_ps","_mm512_mask3_fnmsub_round_pd","_mm512_mask3_fnmsub_round_ps","_mm512_mask_abs_epi16","_mm512_mask_abs_epi32","_mm512_mask_abs_epi64","_mm512_mask_abs_epi8","_mm512_mask_abs_pd","_mm512_mask_abs_ps","_mm512_mask_add_epi16","_mm512_mask_add_epi32","_mm512_mask_add_epi64","_mm512_mask_add_epi8","_mm512_mask_add_pd","_mm512_mask_add_ps","_mm512_mask_add_round_pd","_mm512_mask_add_round_ps","_mm512_mask_adds_epi16","_mm512_mask_adds_epi8","_mm512_mask_adds_epu16","_mm512_mask_adds_epu8","_mm512_mask_alignr_epi32","_mm512_mask_alignr_epi64","_mm512_mask_alignr_epi8","_mm512_mask_and_epi32","_mm512_mask_and_epi64","_mm512_mask_andnot_epi32","_mm512_mask_andnot_epi64","_mm512_mask_avg_epu16","_mm512_mask_avg_epu8","_mm512_mask_bitshuffle_epi64_mask","_mm512_mask_blend_epi16","_mm512_mask_blend_epi32","_mm512_mask_blend_epi64","_mm512_mask_blend_epi8","_mm512_mask_blend_pd","_mm512_mask_blend_ps","_mm512_mask_broadcast_f32x4","_mm512_mask_broadcast_f64x4","_mm512_mask_broadcast_i32x4","_mm512_mask_broadcast_i64x4","_mm512_mask_broadcastb_epi8","_mm512_mask_broadcastd_epi32","_mm512_mask_broadcastq_epi64","_mm512_mask_broadcastsd_pd","_mm512_mask_broadcastss_ps","_mm512_mask_broadcastw_epi16","_mm512_mask_cmp_epi16_mask","_mm512_mask_cmp_epi32_mask","_mm512_mask_cmp_epi64_mask","_mm512_mask_cmp_epi8_mask","_mm512_mask_cmp_epu16_mask","_mm512_mask_cmp_epu32_mask","_mm512_mask_cmp_epu64_mask","_mm512_mask_cmp_epu8_mask","_mm512_mask_cmp_pd_mask","_mm512_mask_cmp_ps_mask","_mm512_mask_cmp_round_pd_mask","_mm512_mask_cmp_round_ps_mask","_mm512_mask_cmpeq_epi16_mask","_mm512_mask_cmpeq_epi32_mask","_mm512_mask_cmpeq_epi64_mask","_mm512_mask_cmpeq_epi8_mask","_mm512_mask_cmpeq_epu16_mask","_mm512_mask_cmpeq_epu32_mask","_mm512_mask_cmpeq_epu64_mask","_mm512_mask_cmpeq_epu8_mask","_mm512_mask_cmpeq_pd_mask","_mm512_mask_cmpeq_ps_mask","_mm512_mask_cmpge_epi16_mask","_mm512_mask_cmpge_epi32_mask","_mm512_mask_cmpge_epi64_mask","_mm512_mask_cmpge_epi8_mask","_mm512_mask_cmpge_epu16_mask","_mm512_mask_cmpge_epu32_mask","_mm512_mask_cmpge_epu64_mask","_mm512_mask_cmpge_epu8_mask","_mm512_mask_cmpgt_epi16_mask","_mm512_mask_cmpgt_epi32_mask","_mm512_mask_cmpgt_epi64_mask","_mm512_mask_cmpgt_epi8_mask","_mm512_mask_cmpgt_epu16_mask","_mm512_mask_cmpgt_epu32_mask","_mm512_mask_cmpgt_epu64_mask","_mm512_mask_cmpgt_epu8_mask","_mm512_mask_cmple_epi16_mask","_mm512_mask_cmple_epi32_mask","_mm512_mask_cmple_epi64_mask","_mm512_mask_cmple_epi8_mask","_mm512_mask_cmple_epu16_mask","_mm512_mask_cmple_epu32_mask","_mm512_mask_cmple_epu64_mask","_mm512_mask_cmple_epu8_mask","_mm512_mask_cmple_pd_mask","_mm512_mask_cmple_ps_mask","_mm512_mask_cmplt_epi16_mask","_mm512_mask_cmplt_epi32_mask","_mm512_mask_cmplt_epi64_mask","_mm512_mask_cmplt_epi8_mask","_mm512_mask_cmplt_epu16_mask","_mm512_mask_cmplt_epu32_mask","_mm512_mask_cmplt_epu64_mask","_mm512_mask_cmplt_epu8_mask","_mm512_mask_cmplt_pd_mask","_mm512_mask_cmplt_ps_mask","_mm512_mask_cmpneq_epi16_mask","_mm512_mask_cmpneq_epi32_mask","_mm512_mask_cmpneq_epi64_mask","_mm512_mask_cmpneq_epi8_mask","_mm512_mask_cmpneq_epu16_mask","_mm512_mask_cmpneq_epu32_mask","_mm512_mask_cmpneq_epu64_mask","_mm512_mask_cmpneq_epu8_mask","_mm512_mask_cmpneq_pd_mask","_mm512_mask_cmpneq_ps_mask","_mm512_mask_cmpnle_pd_mask","_mm512_mask_cmpnle_ps_mask","_mm512_mask_cmpnlt_pd_mask","_mm512_mask_cmpnlt_ps_mask","_mm512_mask_cmpord_pd_mask","_mm512_mask_cmpord_ps_mask","_mm512_mask_cmpunord_pd_mask","_mm512_mask_cmpunord_ps_mask","_mm512_mask_compress_epi16","_mm512_mask_compress_epi32","_mm512_mask_compress_epi64","_mm512_mask_compress_epi8","_mm512_mask_compress_pd","_mm512_mask_compress_ps","_mm512_mask_compressstoreu_epi16","_mm512_mask_compressstoreu_epi32","_mm512_mask_compressstoreu_epi64","_mm512_mask_compressstoreu_epi8","_mm512_mask_compressstoreu_pd","_mm512_mask_compressstoreu_ps","_mm512_mask_conflict_epi32","_mm512_mask_conflict_epi64","_mm512_mask_cvt_roundepi32_ps","_mm512_mask_cvt_roundepu32_ps","_mm512_mask_cvt_roundpd_epi32","_mm512_mask_cvt_roundpd_epu32","_mm512_mask_cvt_roundpd_ps","_mm512_mask_cvt_roundph_ps","_mm512_mask_cvt_roundps_epi32","_mm512_mask_cvt_roundps_epu32","_mm512_mask_cvt_roundps_pd","_mm512_mask_cvt_roundps_ph","_mm512_mask_cvtepi16_epi32","_mm512_mask_cvtepi16_epi64","_mm512_mask_cvtepi16_epi8","_mm512_mask_cvtepi16_storeu_epi8","_mm512_mask_cvtepi32_epi16","_mm512_mask_cvtepi32_epi64","_mm512_mask_cvtepi32_epi8","_mm512_mask_cvtepi32_pd","_mm512_mask_cvtepi32_ps","_mm512_mask_cvtepi32_storeu_epi16","_mm512_mask_cvtepi32_storeu_epi8","_mm512_mask_cvtepi32lo_pd","_mm512_mask_cvtepi64_epi16","_mm512_mask_cvtepi64_epi32","_mm512_mask_cvtepi64_epi8","_mm512_mask_cvtepi64_storeu_epi16","_mm512_mask_cvtepi64_storeu_epi32","_mm512_mask_cvtepi64_storeu_epi8","_mm512_mask_cvtepi8_epi16","_mm512_mask_cvtepi8_epi32","_mm512_mask_cvtepi8_epi64","_mm512_mask_cvtepu16_epi32","_mm512_mask_cvtepu16_epi64","_mm512_mask_cvtepu32_epi64","_mm512_mask_cvtepu32_pd","_mm512_mask_cvtepu32_ps","_mm512_mask_cvtepu32lo_pd","_mm512_mask_cvtepu8_epi16","_mm512_mask_cvtepu8_epi32","_mm512_mask_cvtepu8_epi64","_mm512_mask_cvtne2ps_pbh","_mm512_mask_cvtneps_pbh","_mm512_mask_cvtpd_epi32","_mm512_mask_cvtpd_epu32","_mm512_mask_cvtpd_ps","_mm512_mask_cvtpd_pslo","_mm512_mask_cvtph_ps","_mm512_mask_cvtps_epi32","_mm512_mask_cvtps_epu32","_mm512_mask_cvtps_pd","_mm512_mask_cvtps_ph","_mm512_mask_cvtpslo_pd","_mm512_mask_cvtsepi16_epi8","_mm512_mask_cvtsepi16_storeu_epi8","_mm512_mask_cvtsepi32_epi16","_mm512_mask_cvtsepi32_epi8","_mm512_mask_cvtsepi32_storeu_epi16","_mm512_mask_cvtsepi32_storeu_epi8","_mm512_mask_cvtsepi64_epi16","_mm512_mask_cvtsepi64_epi32","_mm512_mask_cvtsepi64_epi8","_mm512_mask_cvtsepi64_storeu_epi16","_mm512_mask_cvtsepi64_storeu_epi32","_mm512_mask_cvtsepi64_storeu_epi8","_mm512_mask_cvtt_roundpd_epi32","_mm512_mask_cvtt_roundpd_epu32","_mm512_mask_cvtt_roundps_epi32","_mm512_mask_cvtt_roundps_epu32","_mm512_mask_cvttpd_epi32","_mm512_mask_cvttpd_epu32","_mm512_mask_cvttps_epi32","_mm512_mask_cvttps_epu32","_mm512_mask_cvtusepi16_epi8","_mm512_mask_cvtusepi16_storeu_epi8","_mm512_mask_cvtusepi32_epi16","_mm512_mask_cvtusepi32_epi8","_mm512_mask_cvtusepi32_storeu_epi16","_mm512_mask_cvtusepi32_storeu_epi8","_mm512_mask_cvtusepi64_epi16","_mm512_mask_cvtusepi64_epi32","_mm512_mask_cvtusepi64_epi8","_mm512_mask_cvtusepi64_storeu_epi16","_mm512_mask_cvtusepi64_storeu_epi32","_mm512_mask_cvtusepi64_storeu_epi8","_mm512_mask_dbsad_epu8","_mm512_mask_div_pd","_mm512_mask_div_ps","_mm512_mask_div_round_pd","_mm512_mask_div_round_ps","_mm512_mask_dpbf16_ps","_mm512_mask_dpbusd_epi32","_mm512_mask_dpbusds_epi32","_mm512_mask_dpwssd_epi32","_mm512_mask_dpwssds_epi32","_mm512_mask_expand_epi16","_mm512_mask_expand_epi32","_mm512_mask_expand_epi64","_mm512_mask_expand_epi8","_mm512_mask_expand_pd","_mm512_mask_expand_ps","_mm512_mask_expandloadu_epi16","_mm512_mask_expandloadu_epi32","_mm512_mask_expandloadu_epi64","_mm512_mask_expandloadu_epi8","_mm512_mask_expandloadu_pd","_mm512_mask_expandloadu_ps","_mm512_mask_extractf32x4_ps","_mm512_mask_extractf64x4_pd","_mm512_mask_extracti32x4_epi32","_mm512_mask_extracti64x4_epi64","_mm512_mask_fixupimm_pd","_mm512_mask_fixupimm_ps","_mm512_mask_fixupimm_round_pd","_mm512_mask_fixupimm_round_ps","_mm512_mask_fmadd_pd","_mm512_mask_fmadd_ps","_mm512_mask_fmadd_round_pd","_mm512_mask_fmadd_round_ps","_mm512_mask_fmaddsub_pd","_mm512_mask_fmaddsub_ps","_mm512_mask_fmaddsub_round_pd","_mm512_mask_fmaddsub_round_ps","_mm512_mask_fmsub_pd","_mm512_mask_fmsub_ps","_mm512_mask_fmsub_round_pd","_mm512_mask_fmsub_round_ps","_mm512_mask_fmsubadd_pd","_mm512_mask_fmsubadd_ps","_mm512_mask_fmsubadd_round_pd","_mm512_mask_fmsubadd_round_ps","_mm512_mask_fnmadd_pd","_mm512_mask_fnmadd_ps","_mm512_mask_fnmadd_round_pd","_mm512_mask_fnmadd_round_ps","_mm512_mask_fnmsub_pd","_mm512_mask_fnmsub_ps","_mm512_mask_fnmsub_round_pd","_mm512_mask_fnmsub_round_ps","_mm512_mask_getexp_pd","_mm512_mask_getexp_ps","_mm512_mask_getexp_round_pd","_mm512_mask_getexp_round_ps","_mm512_mask_getmant_pd","_mm512_mask_getmant_ps","_mm512_mask_getmant_round_pd","_mm512_mask_getmant_round_ps","_mm512_mask_gf2p8affine_epi64_epi8","_mm512_mask_gf2p8affineinv_epi64_epi8","_mm512_mask_gf2p8mul_epi8","_mm512_mask_i32gather_epi32","_mm512_mask_i32gather_epi64","_mm512_mask_i32gather_pd","_mm512_mask_i32gather_ps","_mm512_mask_i32scatter_epi32","_mm512_mask_i32scatter_epi64","_mm512_mask_i32scatter_pd","_mm512_mask_i32scatter_ps","_mm512_mask_i64gather_epi32","_mm512_mask_i64gather_epi64","_mm512_mask_i64gather_pd","_mm512_mask_i64gather_ps","_mm512_mask_i64scatter_epi32","_mm512_mask_i64scatter_epi64","_mm512_mask_i64scatter_pd","_mm512_mask_i64scatter_ps","_mm512_mask_insertf32x4","_mm512_mask_insertf64x4","_mm512_mask_inserti32x4","_mm512_mask_inserti64x4","_mm512_mask_load_epi32","_mm512_mask_load_epi64","_mm512_mask_load_pd","_mm512_mask_load_ps","_mm512_mask_loadu_epi16","_mm512_mask_loadu_epi32","_mm512_mask_loadu_epi64","_mm512_mask_loadu_epi8","_mm512_mask_loadu_pd","_mm512_mask_loadu_ps","_mm512_mask_lzcnt_epi32","_mm512_mask_lzcnt_epi64","_mm512_mask_madd_epi16","_mm512_mask_maddubs_epi16","_mm512_mask_max_epi16","_mm512_mask_max_epi32","_mm512_mask_max_epi64","_mm512_mask_max_epi8","_mm512_mask_max_epu16","_mm512_mask_max_epu32","_mm512_mask_max_epu64","_mm512_mask_max_epu8","_mm512_mask_max_pd","_mm512_mask_max_ps","_mm512_mask_max_round_pd","_mm512_mask_max_round_ps","_mm512_mask_min_epi16","_mm512_mask_min_epi32","_mm512_mask_min_epi64","_mm512_mask_min_epi8","_mm512_mask_min_epu16","_mm512_mask_min_epu32","_mm512_mask_min_epu64","_mm512_mask_min_epu8","_mm512_mask_min_pd","_mm512_mask_min_ps","_mm512_mask_min_round_pd","_mm512_mask_min_round_ps","_mm512_mask_mov_epi16","_mm512_mask_mov_epi32","_mm512_mask_mov_epi64","_mm512_mask_mov_epi8","_mm512_mask_mov_pd","_mm512_mask_mov_ps","_mm512_mask_movedup_pd","_mm512_mask_movehdup_ps","_mm512_mask_moveldup_ps","_mm512_mask_mul_epi32","_mm512_mask_mul_epu32","_mm512_mask_mul_pd","_mm512_mask_mul_ps","_mm512_mask_mul_round_pd","_mm512_mask_mul_round_ps","_mm512_mask_mulhi_epi16","_mm512_mask_mulhi_epu16","_mm512_mask_mulhrs_epi16","_mm512_mask_mullo_epi16","_mm512_mask_mullo_epi32","_mm512_mask_mullox_epi64","_mm512_mask_multishift_epi64_epi8","_mm512_mask_or_epi32","_mm512_mask_or_epi64","_mm512_mask_packs_epi16","_mm512_mask_packs_epi32","_mm512_mask_packus_epi16","_mm512_mask_packus_epi32","_mm512_mask_permute_pd","_mm512_mask_permute_ps","_mm512_mask_permutevar_epi32","_mm512_mask_permutevar_pd","_mm512_mask_permutevar_ps","_mm512_mask_permutex2var_epi16","_mm512_mask_permutex2var_epi32","_mm512_mask_permutex2var_epi64","_mm512_mask_permutex2var_epi8","_mm512_mask_permutex2var_pd","_mm512_mask_permutex2var_ps","_mm512_mask_permutex_epi64","_mm512_mask_permutex_pd","_mm512_mask_permutexvar_epi16","_mm512_mask_permutexvar_epi32","_mm512_mask_permutexvar_epi64","_mm512_mask_permutexvar_epi8","_mm512_mask_permutexvar_pd","_mm512_mask_permutexvar_ps","_mm512_mask_popcnt_epi16","_mm512_mask_popcnt_epi32","_mm512_mask_popcnt_epi64","_mm512_mask_popcnt_epi8","_mm512_mask_rcp14_pd","_mm512_mask_rcp14_ps","_mm512_mask_reduce_add_epi32","_mm512_mask_reduce_add_epi64","_mm512_mask_reduce_add_pd","_mm512_mask_reduce_add_ps","_mm512_mask_reduce_and_epi32","_mm512_mask_reduce_and_epi64","_mm512_mask_reduce_max_epi32","_mm512_mask_reduce_max_epi64","_mm512_mask_reduce_max_epu32","_mm512_mask_reduce_max_epu64","_mm512_mask_reduce_max_pd","_mm512_mask_reduce_max_ps","_mm512_mask_reduce_min_epi32","_mm512_mask_reduce_min_epi64","_mm512_mask_reduce_min_epu32","_mm512_mask_reduce_min_epu64","_mm512_mask_reduce_min_pd","_mm512_mask_reduce_min_ps","_mm512_mask_reduce_mul_epi32","_mm512_mask_reduce_mul_epi64","_mm512_mask_reduce_mul_pd","_mm512_mask_reduce_mul_ps","_mm512_mask_reduce_or_epi32","_mm512_mask_reduce_or_epi64","_mm512_mask_rol_epi32","_mm512_mask_rol_epi64","_mm512_mask_rolv_epi32","_mm512_mask_rolv_epi64","_mm512_mask_ror_epi32","_mm512_mask_ror_epi64","_mm512_mask_rorv_epi32","_mm512_mask_rorv_epi64","_mm512_mask_roundscale_pd","_mm512_mask_roundscale_ps","_mm512_mask_roundscale_round_pd","_mm512_mask_roundscale_round_ps","_mm512_mask_rsqrt14_pd","_mm512_mask_rsqrt14_ps","_mm512_mask_scalef_pd","_mm512_mask_scalef_ps","_mm512_mask_scalef_round_pd","_mm512_mask_scalef_round_ps","_mm512_mask_set1_epi16","_mm512_mask_set1_epi32","_mm512_mask_set1_epi64","_mm512_mask_set1_epi8","_mm512_mask_shldi_epi16","_mm512_mask_shldi_epi32","_mm512_mask_shldi_epi64","_mm512_mask_shldv_epi16","_mm512_mask_shldv_epi32","_mm512_mask_shldv_epi64","_mm512_mask_shrdi_epi16","_mm512_mask_shrdi_epi32","_mm512_mask_shrdi_epi64","_mm512_mask_shrdv_epi16","_mm512_mask_shrdv_epi32","_mm512_mask_shrdv_epi64","_mm512_mask_shuffle_epi32","_mm512_mask_shuffle_epi8","_mm512_mask_shuffle_f32x4","_mm512_mask_shuffle_f64x2","_mm512_mask_shuffle_i32x4","_mm512_mask_shuffle_i64x2","_mm512_mask_shuffle_pd","_mm512_mask_shuffle_ps","_mm512_mask_shufflehi_epi16","_mm512_mask_shufflelo_epi16","_mm512_mask_sll_epi16","_mm512_mask_sll_epi32","_mm512_mask_sll_epi64","_mm512_mask_slli_epi16","_mm512_mask_slli_epi32","_mm512_mask_slli_epi64","_mm512_mask_sllv_epi16","_mm512_mask_sllv_epi32","_mm512_mask_sllv_epi64","_mm512_mask_sqrt_pd","_mm512_mask_sqrt_ps","_mm512_mask_sqrt_round_pd","_mm512_mask_sqrt_round_ps","_mm512_mask_sra_epi16","_mm512_mask_sra_epi32","_mm512_mask_sra_epi64","_mm512_mask_srai_epi16","_mm512_mask_srai_epi32","_mm512_mask_srai_epi64","_mm512_mask_srav_epi16","_mm512_mask_srav_epi32","_mm512_mask_srav_epi64","_mm512_mask_srl_epi16","_mm512_mask_srl_epi32","_mm512_mask_srl_epi64","_mm512_mask_srli_epi16","_mm512_mask_srli_epi32","_mm512_mask_srli_epi64","_mm512_mask_srlv_epi16","_mm512_mask_srlv_epi32","_mm512_mask_srlv_epi64","_mm512_mask_store_epi32","_mm512_mask_store_epi64","_mm512_mask_store_pd","_mm512_mask_store_ps","_mm512_mask_storeu_epi16","_mm512_mask_storeu_epi32","_mm512_mask_storeu_epi64","_mm512_mask_storeu_epi8","_mm512_mask_storeu_pd","_mm512_mask_storeu_ps","_mm512_mask_sub_epi16","_mm512_mask_sub_epi32","_mm512_mask_sub_epi64","_mm512_mask_sub_epi8","_mm512_mask_sub_pd","_mm512_mask_sub_ps","_mm512_mask_sub_round_pd","_mm512_mask_sub_round_ps","_mm512_mask_subs_epi16","_mm512_mask_subs_epi8","_mm512_mask_subs_epu16","_mm512_mask_subs_epu8","_mm512_mask_ternarylogic_epi32","_mm512_mask_ternarylogic_epi64","_mm512_mask_test_epi16_mask","_mm512_mask_test_epi32_mask","_mm512_mask_test_epi64_mask","_mm512_mask_test_epi8_mask","_mm512_mask_testn_epi16_mask","_mm512_mask_testn_epi32_mask","_mm512_mask_testn_epi64_mask","_mm512_mask_testn_epi8_mask","_mm512_mask_unpackhi_epi16","_mm512_mask_unpackhi_epi32","_mm512_mask_unpackhi_epi64","_mm512_mask_unpackhi_epi8","_mm512_mask_unpackhi_pd","_mm512_mask_unpackhi_ps","_mm512_mask_unpacklo_epi16","_mm512_mask_unpacklo_epi32","_mm512_mask_unpacklo_epi64","_mm512_mask_unpacklo_epi8","_mm512_mask_unpacklo_pd","_mm512_mask_unpacklo_ps","_mm512_mask_xor_epi32","_mm512_mask_xor_epi64","_mm512_maskz_abs_epi16","_mm512_maskz_abs_epi32","_mm512_maskz_abs_epi64","_mm512_maskz_abs_epi8","_mm512_maskz_add_epi16","_mm512_maskz_add_epi32","_mm512_maskz_add_epi64","_mm512_maskz_add_epi8","_mm512_maskz_add_pd","_mm512_maskz_add_ps","_mm512_maskz_add_round_pd","_mm512_maskz_add_round_ps","_mm512_maskz_adds_epi16","_mm512_maskz_adds_epi8","_mm512_maskz_adds_epu16","_mm512_maskz_adds_epu8","_mm512_maskz_alignr_epi32","_mm512_maskz_alignr_epi64","_mm512_maskz_alignr_epi8","_mm512_maskz_and_epi32","_mm512_maskz_and_epi64","_mm512_maskz_andnot_epi32","_mm512_maskz_andnot_epi64","_mm512_maskz_avg_epu16","_mm512_maskz_avg_epu8","_mm512_maskz_broadcast_f32x4","_mm512_maskz_broadcast_f64x4","_mm512_maskz_broadcast_i32x4","_mm512_maskz_broadcast_i64x4","_mm512_maskz_broadcastb_epi8","_mm512_maskz_broadcastd_epi32","_mm512_maskz_broadcastq_epi64","_mm512_maskz_broadcastsd_pd","_mm512_maskz_broadcastss_ps","_mm512_maskz_broadcastw_epi16","_mm512_maskz_compress_epi16","_mm512_maskz_compress_epi32","_mm512_maskz_compress_epi64","_mm512_maskz_compress_epi8","_mm512_maskz_compress_pd","_mm512_maskz_compress_ps","_mm512_maskz_conflict_epi32","_mm512_maskz_conflict_epi64","_mm512_maskz_cvt_roundepi32_ps","_mm512_maskz_cvt_roundepu32_ps","_mm512_maskz_cvt_roundpd_epi32","_mm512_maskz_cvt_roundpd_epu32","_mm512_maskz_cvt_roundpd_ps","_mm512_maskz_cvt_roundph_ps","_mm512_maskz_cvt_roundps_epi32","_mm512_maskz_cvt_roundps_epu32","_mm512_maskz_cvt_roundps_pd","_mm512_maskz_cvt_roundps_ph","_mm512_maskz_cvtepi16_epi32","_mm512_maskz_cvtepi16_epi64","_mm512_maskz_cvtepi16_epi8","_mm512_maskz_cvtepi32_epi16","_mm512_maskz_cvtepi32_epi64","_mm512_maskz_cvtepi32_epi8","_mm512_maskz_cvtepi32_pd","_mm512_maskz_cvtepi32_ps","_mm512_maskz_cvtepi64_epi16","_mm512_maskz_cvtepi64_epi32","_mm512_maskz_cvtepi64_epi8","_mm512_maskz_cvtepi8_epi16","_mm512_maskz_cvtepi8_epi32","_mm512_maskz_cvtepi8_epi64","_mm512_maskz_cvtepu16_epi32","_mm512_maskz_cvtepu16_epi64","_mm512_maskz_cvtepu32_epi64","_mm512_maskz_cvtepu32_pd","_mm512_maskz_cvtepu32_ps","_mm512_maskz_cvtepu8_epi16","_mm512_maskz_cvtepu8_epi32","_mm512_maskz_cvtepu8_epi64","_mm512_maskz_cvtne2ps_pbh","_mm512_maskz_cvtneps_pbh","_mm512_maskz_cvtpd_epi32","_mm512_maskz_cvtpd_epu32","_mm512_maskz_cvtpd_ps","_mm512_maskz_cvtph_ps","_mm512_maskz_cvtps_epi32","_mm512_maskz_cvtps_epu32","_mm512_maskz_cvtps_pd","_mm512_maskz_cvtps_ph","_mm512_maskz_cvtsepi16_epi8","_mm512_maskz_cvtsepi32_epi16","_mm512_maskz_cvtsepi32_epi8","_mm512_maskz_cvtsepi64_epi16","_mm512_maskz_cvtsepi64_epi32","_mm512_maskz_cvtsepi64_epi8","_mm512_maskz_cvtt_roundpd_epi32","_mm512_maskz_cvtt_roundpd_epu32","_mm512_maskz_cvtt_roundps_epi32","_mm512_maskz_cvtt_roundps_epu32","_mm512_maskz_cvttpd_epi32","_mm512_maskz_cvttpd_epu32","_mm512_maskz_cvttps_epi32","_mm512_maskz_cvttps_epu32","_mm512_maskz_cvtusepi16_epi8","_mm512_maskz_cvtusepi32_epi16","_mm512_maskz_cvtusepi32_epi8","_mm512_maskz_cvtusepi64_epi16","_mm512_maskz_cvtusepi64_epi32","_mm512_maskz_cvtusepi64_epi8","_mm512_maskz_dbsad_epu8","_mm512_maskz_div_pd","_mm512_maskz_div_ps","_mm512_maskz_div_round_pd","_mm512_maskz_div_round_ps","_mm512_maskz_dpbf16_ps","_mm512_maskz_dpbusd_epi32","_mm512_maskz_dpbusds_epi32","_mm512_maskz_dpwssd_epi32","_mm512_maskz_dpwssds_epi32","_mm512_maskz_expand_epi16","_mm512_maskz_expand_epi32","_mm512_maskz_expand_epi64","_mm512_maskz_expand_epi8","_mm512_maskz_expand_pd","_mm512_maskz_expand_ps","_mm512_maskz_expandloadu_epi16","_mm512_maskz_expandloadu_epi32","_mm512_maskz_expandloadu_epi64","_mm512_maskz_expandloadu_epi8","_mm512_maskz_expandloadu_pd","_mm512_maskz_expandloadu_ps","_mm512_maskz_extractf32x4_ps","_mm512_maskz_extractf64x4_pd","_mm512_maskz_extracti32x4_epi32","_mm512_maskz_extracti64x4_epi64","_mm512_maskz_fixupimm_pd","_mm512_maskz_fixupimm_ps","_mm512_maskz_fixupimm_round_pd","_mm512_maskz_fixupimm_round_ps","_mm512_maskz_fmadd_pd","_mm512_maskz_fmadd_ps","_mm512_maskz_fmadd_round_pd","_mm512_maskz_fmadd_round_ps","_mm512_maskz_fmaddsub_pd","_mm512_maskz_fmaddsub_ps","_mm512_maskz_fmaddsub_round_pd","_mm512_maskz_fmaddsub_round_ps","_mm512_maskz_fmsub_pd","_mm512_maskz_fmsub_ps","_mm512_maskz_fmsub_round_pd","_mm512_maskz_fmsub_round_ps","_mm512_maskz_fmsubadd_pd","_mm512_maskz_fmsubadd_ps","_mm512_maskz_fmsubadd_round_pd","_mm512_maskz_fmsubadd_round_ps","_mm512_maskz_fnmadd_pd","_mm512_maskz_fnmadd_ps","_mm512_maskz_fnmadd_round_pd","_mm512_maskz_fnmadd_round_ps","_mm512_maskz_fnmsub_pd","_mm512_maskz_fnmsub_ps","_mm512_maskz_fnmsub_round_pd","_mm512_maskz_fnmsub_round_ps","_mm512_maskz_getexp_pd","_mm512_maskz_getexp_ps","_mm512_maskz_getexp_round_pd","_mm512_maskz_getexp_round_ps","_mm512_maskz_getmant_pd","_mm512_maskz_getmant_ps","_mm512_maskz_getmant_round_pd","_mm512_maskz_getmant_round_ps","_mm512_maskz_gf2p8affine_epi64_epi8","_mm512_maskz_gf2p8affineinv_epi64_epi8","_mm512_maskz_gf2p8mul_epi8","_mm512_maskz_insertf32x4","_mm512_maskz_insertf64x4","_mm512_maskz_inserti32x4","_mm512_maskz_inserti64x4","_mm512_maskz_load_epi32","_mm512_maskz_load_epi64","_mm512_maskz_load_pd","_mm512_maskz_load_ps","_mm512_maskz_loadu_epi16","_mm512_maskz_loadu_epi32","_mm512_maskz_loadu_epi64","_mm512_maskz_loadu_epi8","_mm512_maskz_loadu_pd","_mm512_maskz_loadu_ps","_mm512_maskz_lzcnt_epi32","_mm512_maskz_lzcnt_epi64","_mm512_maskz_madd_epi16","_mm512_maskz_maddubs_epi16","_mm512_maskz_max_epi16","_mm512_maskz_max_epi32","_mm512_maskz_max_epi64","_mm512_maskz_max_epi8","_mm512_maskz_max_epu16","_mm512_maskz_max_epu32","_mm512_maskz_max_epu64","_mm512_maskz_max_epu8","_mm512_maskz_max_pd","_mm512_maskz_max_ps","_mm512_maskz_max_round_pd","_mm512_maskz_max_round_ps","_mm512_maskz_min_epi16","_mm512_maskz_min_epi32","_mm512_maskz_min_epi64","_mm512_maskz_min_epi8","_mm512_maskz_min_epu16","_mm512_maskz_min_epu32","_mm512_maskz_min_epu64","_mm512_maskz_min_epu8","_mm512_maskz_min_pd","_mm512_maskz_min_ps","_mm512_maskz_min_round_pd","_mm512_maskz_min_round_ps","_mm512_maskz_mov_epi16","_mm512_maskz_mov_epi32","_mm512_maskz_mov_epi64","_mm512_maskz_mov_epi8","_mm512_maskz_mov_pd","_mm512_maskz_mov_ps","_mm512_maskz_movedup_pd","_mm512_maskz_movehdup_ps","_mm512_maskz_moveldup_ps","_mm512_maskz_mul_epi32","_mm512_maskz_mul_epu32","_mm512_maskz_mul_pd","_mm512_maskz_mul_ps","_mm512_maskz_mul_round_pd","_mm512_maskz_mul_round_ps","_mm512_maskz_mulhi_epi16","_mm512_maskz_mulhi_epu16","_mm512_maskz_mulhrs_epi16","_mm512_maskz_mullo_epi16","_mm512_maskz_mullo_epi32","_mm512_maskz_multishift_epi64_epi8","_mm512_maskz_or_epi32","_mm512_maskz_or_epi64","_mm512_maskz_packs_epi16","_mm512_maskz_packs_epi32","_mm512_maskz_packus_epi16","_mm512_maskz_packus_epi32","_mm512_maskz_permute_pd","_mm512_maskz_permute_ps","_mm512_maskz_permutevar_pd","_mm512_maskz_permutevar_ps","_mm512_maskz_permutex2var_epi16","_mm512_maskz_permutex2var_epi32","_mm512_maskz_permutex2var_epi64","_mm512_maskz_permutex2var_epi8","_mm512_maskz_permutex2var_pd","_mm512_maskz_permutex2var_ps","_mm512_maskz_permutex_epi64","_mm512_maskz_permutex_pd","_mm512_maskz_permutexvar_epi16","_mm512_maskz_permutexvar_epi32","_mm512_maskz_permutexvar_epi64","_mm512_maskz_permutexvar_epi8","_mm512_maskz_permutexvar_pd","_mm512_maskz_permutexvar_ps","_mm512_maskz_popcnt_epi16","_mm512_maskz_popcnt_epi32","_mm512_maskz_popcnt_epi64","_mm512_maskz_popcnt_epi8","_mm512_maskz_rcp14_pd","_mm512_maskz_rcp14_ps","_mm512_maskz_rol_epi32","_mm512_maskz_rol_epi64","_mm512_maskz_rolv_epi32","_mm512_maskz_rolv_epi64","_mm512_maskz_ror_epi32","_mm512_maskz_ror_epi64","_mm512_maskz_rorv_epi32","_mm512_maskz_rorv_epi64","_mm512_maskz_roundscale_pd","_mm512_maskz_roundscale_ps","_mm512_maskz_roundscale_round_pd","_mm512_maskz_roundscale_round_ps","_mm512_maskz_rsqrt14_pd","_mm512_maskz_rsqrt14_ps","_mm512_maskz_scalef_pd","_mm512_maskz_scalef_ps","_mm512_maskz_scalef_round_pd","_mm512_maskz_scalef_round_ps","_mm512_maskz_set1_epi16","_mm512_maskz_set1_epi32","_mm512_maskz_set1_epi64","_mm512_maskz_set1_epi8","_mm512_maskz_shldi_epi16","_mm512_maskz_shldi_epi32","_mm512_maskz_shldi_epi64","_mm512_maskz_shldv_epi16","_mm512_maskz_shldv_epi32","_mm512_maskz_shldv_epi64","_mm512_maskz_shrdi_epi16","_mm512_maskz_shrdi_epi32","_mm512_maskz_shrdi_epi64","_mm512_maskz_shrdv_epi16","_mm512_maskz_shrdv_epi32","_mm512_maskz_shrdv_epi64","_mm512_maskz_shuffle_epi32","_mm512_maskz_shuffle_epi8","_mm512_maskz_shuffle_f32x4","_mm512_maskz_shuffle_f64x2","_mm512_maskz_shuffle_i32x4","_mm512_maskz_shuffle_i64x2","_mm512_maskz_shuffle_pd","_mm512_maskz_shuffle_ps","_mm512_maskz_shufflehi_epi16","_mm512_maskz_shufflelo_epi16","_mm512_maskz_sll_epi16","_mm512_maskz_sll_epi32","_mm512_maskz_sll_epi64","_mm512_maskz_slli_epi16","_mm512_maskz_slli_epi32","_mm512_maskz_slli_epi64","_mm512_maskz_sllv_epi16","_mm512_maskz_sllv_epi32","_mm512_maskz_sllv_epi64","_mm512_maskz_sqrt_pd","_mm512_maskz_sqrt_ps","_mm512_maskz_sqrt_round_pd","_mm512_maskz_sqrt_round_ps","_mm512_maskz_sra_epi16","_mm512_maskz_sra_epi32","_mm512_maskz_sra_epi64","_mm512_maskz_srai_epi16","_mm512_maskz_srai_epi32","_mm512_maskz_srai_epi64","_mm512_maskz_srav_epi16","_mm512_maskz_srav_epi32","_mm512_maskz_srav_epi64","_mm512_maskz_srl_epi16","_mm512_maskz_srl_epi32","_mm512_maskz_srl_epi64","_mm512_maskz_srli_epi16","_mm512_maskz_srli_epi32","_mm512_maskz_srli_epi64","_mm512_maskz_srlv_epi16","_mm512_maskz_srlv_epi32","_mm512_maskz_srlv_epi64","_mm512_maskz_sub_epi16","_mm512_maskz_sub_epi32","_mm512_maskz_sub_epi64","_mm512_maskz_sub_epi8","_mm512_maskz_sub_pd","_mm512_maskz_sub_ps","_mm512_maskz_sub_round_pd","_mm512_maskz_sub_round_ps","_mm512_maskz_subs_epi16","_mm512_maskz_subs_epi8","_mm512_maskz_subs_epu16","_mm512_maskz_subs_epu8","_mm512_maskz_ternarylogic_epi32","_mm512_maskz_ternarylogic_epi64","_mm512_maskz_unpackhi_epi16","_mm512_maskz_unpackhi_epi32","_mm512_maskz_unpackhi_epi64","_mm512_maskz_unpackhi_epi8","_mm512_maskz_unpackhi_pd","_mm512_maskz_unpackhi_ps","_mm512_maskz_unpacklo_epi16","_mm512_maskz_unpacklo_epi32","_mm512_maskz_unpacklo_epi64","_mm512_maskz_unpacklo_epi8","_mm512_maskz_unpacklo_pd","_mm512_maskz_unpacklo_ps","_mm512_maskz_xor_epi32","_mm512_maskz_xor_epi64","_mm512_max_epi16","_mm512_max_epi32","_mm512_max_epi64","_mm512_max_epi8","_mm512_max_epu16","_mm512_max_epu32","_mm512_max_epu64","_mm512_max_epu8","_mm512_max_pd","_mm512_max_ps","_mm512_max_round_pd","_mm512_max_round_ps","_mm512_min_epi16","_mm512_min_epi32","_mm512_min_epi64","_mm512_min_epi8","_mm512_min_epu16","_mm512_min_epu32","_mm512_min_epu64","_mm512_min_epu8","_mm512_min_pd","_mm512_min_ps","_mm512_min_round_pd","_mm512_min_round_ps","_mm512_movedup_pd","_mm512_movehdup_ps","_mm512_moveldup_ps","_mm512_movepi16_mask","_mm512_movepi8_mask","_mm512_movm_epi16","_mm512_movm_epi8","_mm512_mul_epi32","_mm512_mul_epu32","_mm512_mul_pd","_mm512_mul_ps","_mm512_mul_round_pd","_mm512_mul_round_ps","_mm512_mulhi_epi16","_mm512_mulhi_epu16","_mm512_mulhrs_epi16","_mm512_mullo_epi16","_mm512_mullo_epi32","_mm512_mullox_epi64","_mm512_multishift_epi64_epi8","_mm512_or_epi32","_mm512_or_epi64","_mm512_or_si512","_mm512_packs_epi16","_mm512_packs_epi32","_mm512_packus_epi16","_mm512_packus_epi32","_mm512_permute_pd","_mm512_permute_ps","_mm512_permutevar_epi32","_mm512_permutevar_pd","_mm512_permutevar_ps","_mm512_permutex2var_epi16","_mm512_permutex2var_epi32","_mm512_permutex2var_epi64","_mm512_permutex2var_epi8","_mm512_permutex2var_pd","_mm512_permutex2var_ps","_mm512_permutex_epi64","_mm512_permutex_pd","_mm512_permutexvar_epi16","_mm512_permutexvar_epi32","_mm512_permutexvar_epi64","_mm512_permutexvar_epi8","_mm512_permutexvar_pd","_mm512_permutexvar_ps","_mm512_popcnt_epi16","_mm512_popcnt_epi32","_mm512_popcnt_epi64","_mm512_popcnt_epi8","_mm512_rcp14_pd","_mm512_rcp14_ps","_mm512_reduce_add_epi32","_mm512_reduce_add_epi64","_mm512_reduce_add_pd","_mm512_reduce_add_ps","_mm512_reduce_and_epi32","_mm512_reduce_and_epi64","_mm512_reduce_max_epi32","_mm512_reduce_max_epi64","_mm512_reduce_max_epu32","_mm512_reduce_max_epu64","_mm512_reduce_max_pd","_mm512_reduce_max_ps","_mm512_reduce_min_epi32","_mm512_reduce_min_epi64","_mm512_reduce_min_epu32","_mm512_reduce_min_epu64","_mm512_reduce_min_pd","_mm512_reduce_min_ps","_mm512_reduce_mul_epi32","_mm512_reduce_mul_epi64","_mm512_reduce_mul_pd","_mm512_reduce_mul_ps","_mm512_reduce_or_epi32","_mm512_reduce_or_epi64","_mm512_rol_epi32","_mm512_rol_epi64","_mm512_rolv_epi32","_mm512_rolv_epi64","_mm512_ror_epi32","_mm512_ror_epi64","_mm512_rorv_epi32","_mm512_rorv_epi64","_mm512_roundscale_pd","_mm512_roundscale_ps","_mm512_roundscale_round_pd","_mm512_roundscale_round_ps","_mm512_rsqrt14_pd","_mm512_rsqrt14_ps","_mm512_sad_epu8","_mm512_scalef_pd","_mm512_scalef_ps","_mm512_scalef_round_pd","_mm512_scalef_round_ps","_mm512_set1_epi16","_mm512_set1_epi32","_mm512_set1_epi64","_mm512_set1_epi8","_mm512_set1_pd","_mm512_set1_ps","_mm512_set4_epi32","_mm512_set4_epi64","_mm512_set4_pd","_mm512_set4_ps","_mm512_set_epi16","_mm512_set_epi32","_mm512_set_epi64","_mm512_set_epi8","_mm512_set_pd","_mm512_set_ps","_mm512_setr4_epi32","_mm512_setr4_epi64","_mm512_setr4_pd","_mm512_setr4_ps","_mm512_setr_epi32","_mm512_setr_epi64","_mm512_setr_pd","_mm512_setr_ps","_mm512_setzero","_mm512_setzero_epi32","_mm512_setzero_pd","_mm512_setzero_ps","_mm512_setzero_si512","_mm512_shldi_epi16","_mm512_shldi_epi32","_mm512_shldi_epi64","_mm512_shldv_epi16","_mm512_shldv_epi32","_mm512_shldv_epi64","_mm512_shrdi_epi16","_mm512_shrdi_epi32","_mm512_shrdi_epi64","_mm512_shrdv_epi16","_mm512_shrdv_epi32","_mm512_shrdv_epi64","_mm512_shuffle_epi32","_mm512_shuffle_epi8","_mm512_shuffle_f32x4","_mm512_shuffle_f64x2","_mm512_shuffle_i32x4","_mm512_shuffle_i64x2","_mm512_shuffle_pd","_mm512_shuffle_ps","_mm512_shufflehi_epi16","_mm512_shufflelo_epi16","_mm512_sll_epi16","_mm512_sll_epi32","_mm512_sll_epi64","_mm512_slli_epi16","_mm512_slli_epi32","_mm512_slli_epi64","_mm512_sllv_epi16","_mm512_sllv_epi32","_mm512_sllv_epi64","_mm512_sqrt_pd","_mm512_sqrt_ps","_mm512_sqrt_round_pd","_mm512_sqrt_round_ps","_mm512_sra_epi16","_mm512_sra_epi32","_mm512_sra_epi64","_mm512_srai_epi16","_mm512_srai_epi32","_mm512_srai_epi64","_mm512_srav_epi16","_mm512_srav_epi32","_mm512_srav_epi64","_mm512_srl_epi16","_mm512_srl_epi32","_mm512_srl_epi64","_mm512_srli_epi16","_mm512_srli_epi32","_mm512_srli_epi64","_mm512_srlv_epi16","_mm512_srlv_epi32","_mm512_srlv_epi64","_mm512_store_epi32","_mm512_store_epi64","_mm512_store_pd","_mm512_store_ps","_mm512_store_si512","_mm512_storeu_epi16","_mm512_storeu_epi32","_mm512_storeu_epi64","_mm512_storeu_epi8","_mm512_storeu_pd","_mm512_storeu_ps","_mm512_storeu_si512","_mm512_stream_pd","_mm512_stream_ps","_mm512_stream_si512","_mm512_sub_epi16","_mm512_sub_epi32","_mm512_sub_epi64","_mm512_sub_epi8","_mm512_sub_pd","_mm512_sub_ps","_mm512_sub_round_pd","_mm512_sub_round_ps","_mm512_subs_epi16","_mm512_subs_epi8","_mm512_subs_epu16","_mm512_subs_epu8","_mm512_ternarylogic_epi32","_mm512_ternarylogic_epi64","_mm512_test_epi16_mask","_mm512_test_epi32_mask","_mm512_test_epi64_mask","_mm512_test_epi8_mask","_mm512_testn_epi16_mask","_mm512_testn_epi32_mask","_mm512_testn_epi64_mask","_mm512_testn_epi8_mask","_mm512_undefined","_mm512_undefined_epi32","_mm512_undefined_pd","_mm512_undefined_ps","_mm512_unpackhi_epi16","_mm512_unpackhi_epi32","_mm512_unpackhi_epi64","_mm512_unpackhi_epi8","_mm512_unpackhi_pd","_mm512_unpackhi_ps","_mm512_unpacklo_epi16","_mm512_unpacklo_epi32","_mm512_unpacklo_epi64","_mm512_unpacklo_epi8","_mm512_unpacklo_pd","_mm512_unpacklo_ps","_mm512_xor_epi32","_mm512_xor_epi64","_mm512_xor_si512","_mm512_zextpd128_pd512","_mm512_zextpd256_pd512","_mm512_zextps128_ps512","_mm512_zextps256_ps512","_mm512_zextsi128_si512","_mm512_zextsi256_si512","_mm_abs_epi16","_mm_abs_epi32","_mm_abs_epi8","_mm_add_epi16","_mm_add_epi32","_mm_add_epi64","_mm_add_epi8","_mm_add_pd","_mm_add_ps","_mm_add_round_sd","_mm_add_round_ss","_mm_add_sd","_mm_add_ss","_mm_adds_epi16","_mm_adds_epi8","_mm_adds_epu16","_mm_adds_epu8","_mm_addsub_pd","_mm_addsub_ps","_mm_aesdec_si128","_mm_aesdeclast_si128","_mm_aesenc_si128","_mm_aesenclast_si128","_mm_aesimc_si128","_mm_aeskeygenassist_si128","_mm_alignr_epi32","_mm_alignr_epi64","_mm_alignr_epi8","_mm_and_pd","_mm_and_ps","_mm_and_si128","_mm_andnot_pd","_mm_andnot_ps","_mm_andnot_si128","_mm_avg_epu16","_mm_avg_epu8","_mm_bitshuffle_epi64_mask","_mm_blend_epi16","_mm_blend_epi32","_mm_blend_pd","_mm_blend_ps","_mm_blendv_epi8","_mm_blendv_pd","_mm_blendv_ps","_mm_broadcast_ss","_mm_broadcastb_epi8","_mm_broadcastd_epi32","_mm_broadcastmb_epi64","_mm_broadcastmw_epi32","_mm_broadcastq_epi64","_mm_broadcastsd_pd","_mm_broadcastss_ps","_mm_broadcastw_epi16","_mm_bslli_si128","_mm_bsrli_si128","_mm_castpd_ps","_mm_castpd_si128","_mm_castps_pd","_mm_castps_si128","_mm_castsi128_pd","_mm_castsi128_ps","_mm_ceil_pd","_mm_ceil_ps","_mm_ceil_sd","_mm_ceil_ss","_mm_clflush","_mm_clmulepi64_si128","_mm_cmp_epi16_mask","_mm_cmp_epi32_mask","_mm_cmp_epi64_mask","_mm_cmp_epi8_mask","_mm_cmp_epu16_mask","_mm_cmp_epu32_mask","_mm_cmp_epu64_mask","_mm_cmp_epu8_mask","_mm_cmp_pd","_mm_cmp_pd_mask","_mm_cmp_ps","_mm_cmp_ps_mask","_mm_cmp_round_sd_mask","_mm_cmp_round_ss_mask","_mm_cmp_sd","_mm_cmp_sd_mask","_mm_cmp_ss","_mm_cmp_ss_mask","_mm_cmpeq_epi16","_mm_cmpeq_epi16_mask","_mm_cmpeq_epi32","_mm_cmpeq_epi32_mask","_mm_cmpeq_epi64","_mm_cmpeq_epi64_mask","_mm_cmpeq_epi8","_mm_cmpeq_epi8_mask","_mm_cmpeq_epu16_mask","_mm_cmpeq_epu32_mask","_mm_cmpeq_epu64_mask","_mm_cmpeq_epu8_mask","_mm_cmpeq_pd","_mm_cmpeq_ps","_mm_cmpeq_sd","_mm_cmpeq_ss","_mm_cmpestra","_mm_cmpestrc","_mm_cmpestri","_mm_cmpestrm","_mm_cmpestro","_mm_cmpestrs","_mm_cmpestrz","_mm_cmpge_epi16_mask","_mm_cmpge_epi32_mask","_mm_cmpge_epi64_mask","_mm_cmpge_epi8_mask","_mm_cmpge_epu16_mask","_mm_cmpge_epu32_mask","_mm_cmpge_epu64_mask","_mm_cmpge_epu8_mask","_mm_cmpge_pd","_mm_cmpge_ps","_mm_cmpge_sd","_mm_cmpge_ss","_mm_cmpgt_epi16","_mm_cmpgt_epi16_mask","_mm_cmpgt_epi32","_mm_cmpgt_epi32_mask","_mm_cmpgt_epi64","_mm_cmpgt_epi64_mask","_mm_cmpgt_epi8","_mm_cmpgt_epi8_mask","_mm_cmpgt_epu16_mask","_mm_cmpgt_epu32_mask","_mm_cmpgt_epu64_mask","_mm_cmpgt_epu8_mask","_mm_cmpgt_pd","_mm_cmpgt_ps","_mm_cmpgt_sd","_mm_cmpgt_ss","_mm_cmpistra","_mm_cmpistrc","_mm_cmpistri","_mm_cmpistrm","_mm_cmpistro","_mm_cmpistrs","_mm_cmpistrz","_mm_cmple_epi16_mask","_mm_cmple_epi32_mask","_mm_cmple_epi64_mask","_mm_cmple_epi8_mask","_mm_cmple_epu16_mask","_mm_cmple_epu32_mask","_mm_cmple_epu64_mask","_mm_cmple_epu8_mask","_mm_cmple_pd","_mm_cmple_ps","_mm_cmple_sd","_mm_cmple_ss","_mm_cmplt_epi16","_mm_cmplt_epi16_mask","_mm_cmplt_epi32","_mm_cmplt_epi32_mask","_mm_cmplt_epi64_mask","_mm_cmplt_epi8","_mm_cmplt_epi8_mask","_mm_cmplt_epu16_mask","_mm_cmplt_epu32_mask","_mm_cmplt_epu64_mask","_mm_cmplt_epu8_mask","_mm_cmplt_pd","_mm_cmplt_ps","_mm_cmplt_sd","_mm_cmplt_ss","_mm_cmpneq_epi16_mask","_mm_cmpneq_epi32_mask","_mm_cmpneq_epi64_mask","_mm_cmpneq_epi8_mask","_mm_cmpneq_epu16_mask","_mm_cmpneq_epu32_mask","_mm_cmpneq_epu64_mask","_mm_cmpneq_epu8_mask","_mm_cmpneq_pd","_mm_cmpneq_ps","_mm_cmpneq_sd","_mm_cmpneq_ss","_mm_cmpnge_pd","_mm_cmpnge_ps","_mm_cmpnge_sd","_mm_cmpnge_ss","_mm_cmpngt_pd","_mm_cmpngt_ps","_mm_cmpngt_sd","_mm_cmpngt_ss","_mm_cmpnle_pd","_mm_cmpnle_ps","_mm_cmpnle_sd","_mm_cmpnle_ss","_mm_cmpnlt_pd","_mm_cmpnlt_ps","_mm_cmpnlt_sd","_mm_cmpnlt_ss","_mm_cmpord_pd","_mm_cmpord_ps","_mm_cmpord_sd","_mm_cmpord_ss","_mm_cmpunord_pd","_mm_cmpunord_ps","_mm_cmpunord_sd","_mm_cmpunord_ss","_mm_comi_round_sd","_mm_comi_round_ss","_mm_comieq_sd","_mm_comieq_ss","_mm_comige_sd","_mm_comige_ss","_mm_comigt_sd","_mm_comigt_ss","_mm_comile_sd","_mm_comile_ss","_mm_comilt_sd","_mm_comilt_ss","_mm_comineq_sd","_mm_comineq_ss","_mm_conflict_epi32","_mm_conflict_epi64","_mm_crc32_u16","_mm_crc32_u32","_mm_crc32_u8","_mm_cvt_roundi32_ss","_mm_cvt_roundsd_i32","_mm_cvt_roundsd_si32","_mm_cvt_roundsd_ss","_mm_cvt_roundsd_u32","_mm_cvt_roundsi32_ss","_mm_cvt_roundss_i32","_mm_cvt_roundss_sd","_mm_cvt_roundss_si32","_mm_cvt_roundss_u32","_mm_cvt_roundu32_ss","_mm_cvt_si2ss","_mm_cvt_ss2si","_mm_cvtepi16_epi32","_mm_cvtepi16_epi64","_mm_cvtepi16_epi8","_mm_cvtepi32_epi16","_mm_cvtepi32_epi64","_mm_cvtepi32_epi8","_mm_cvtepi32_pd","_mm_cvtepi32_ps","_mm_cvtepi64_epi16","_mm_cvtepi64_epi32","_mm_cvtepi64_epi8","_mm_cvtepi8_epi16","_mm_cvtepi8_epi32","_mm_cvtepi8_epi64","_mm_cvtepu16_epi32","_mm_cvtepu16_epi64","_mm_cvtepu32_epi64","_mm_cvtepu32_pd","_mm_cvtepu8_epi16","_mm_cvtepu8_epi32","_mm_cvtepu8_epi64","_mm_cvti32_sd","_mm_cvti32_ss","_mm_cvtne2ps_pbh","_mm_cvtpd_epi32","_mm_cvtpd_epu32","_mm_cvtpd_ps","_mm_cvtph_ps","_mm_cvtps_epi32","_mm_cvtps_epu32","_mm_cvtps_pd","_mm_cvtps_ph","_mm_cvtsd_f64","_mm_cvtsd_i32","_mm_cvtsd_si32","_mm_cvtsd_ss","_mm_cvtsd_u32","_mm_cvtsepi16_epi8","_mm_cvtsepi32_epi16","_mm_cvtsepi32_epi8","_mm_cvtsepi64_epi16","_mm_cvtsepi64_epi32","_mm_cvtsepi64_epi8","_mm_cvtsi128_si32","_mm_cvtsi32_sd","_mm_cvtsi32_si128","_mm_cvtsi32_ss","_mm_cvtss_f32","_mm_cvtss_i32","_mm_cvtss_sd","_mm_cvtss_si32","_mm_cvtss_u32","_mm_cvtt_roundsd_i32","_mm_cvtt_roundsd_si32","_mm_cvtt_roundsd_u32","_mm_cvtt_roundss_i32","_mm_cvtt_roundss_si32","_mm_cvtt_roundss_u32","_mm_cvtt_ss2si","_mm_cvttpd_epi32","_mm_cvttpd_epu32","_mm_cvttps_epi32","_mm_cvttps_epu32","_mm_cvttsd_i32","_mm_cvttsd_si32","_mm_cvttsd_u32","_mm_cvttss_i32","_mm_cvttss_si32","_mm_cvttss_u32","_mm_cvtu32_sd","_mm_cvtu32_ss","_mm_cvtusepi16_epi8","_mm_cvtusepi32_epi16","_mm_cvtusepi32_epi8","_mm_cvtusepi64_epi16","_mm_cvtusepi64_epi32","_mm_cvtusepi64_epi8","_mm_dbsad_epu8","_mm_div_pd","_mm_div_ps","_mm_div_round_sd","_mm_div_round_ss","_mm_div_sd","_mm_div_ss","_mm_dp_pd","_mm_dp_ps","_mm_dpbf16_ps","_mm_dpbusd_epi32","_mm_dpbusds_epi32","_mm_dpwssd_epi32","_mm_dpwssds_epi32","_mm_extract_epi16","_mm_extract_epi32","_mm_extract_epi8","_mm_extract_ps","_mm_extract_si64","_mm_fixupimm_pd","_mm_fixupimm_ps","_mm_fixupimm_round_sd","_mm_fixupimm_round_ss","_mm_fixupimm_sd","_mm_fixupimm_ss","_mm_floor_pd","_mm_floor_ps","_mm_floor_sd","_mm_floor_ss","_mm_fmadd_pd","_mm_fmadd_ps","_mm_fmadd_round_sd","_mm_fmadd_round_ss","_mm_fmadd_sd","_mm_fmadd_ss","_mm_fmaddsub_pd","_mm_fmaddsub_ps","_mm_fmsub_pd","_mm_fmsub_ps","_mm_fmsub_round_sd","_mm_fmsub_round_ss","_mm_fmsub_sd","_mm_fmsub_ss","_mm_fmsubadd_pd","_mm_fmsubadd_ps","_mm_fnmadd_pd","_mm_fnmadd_ps","_mm_fnmadd_round_sd","_mm_fnmadd_round_ss","_mm_fnmadd_sd","_mm_fnmadd_ss","_mm_fnmsub_pd","_mm_fnmsub_ps","_mm_fnmsub_round_sd","_mm_fnmsub_round_ss","_mm_fnmsub_sd","_mm_fnmsub_ss","_mm_getcsr","_mm_getexp_pd","_mm_getexp_ps","_mm_getexp_round_sd","_mm_getexp_round_ss","_mm_getexp_sd","_mm_getexp_ss","_mm_getmant_pd","_mm_getmant_ps","_mm_getmant_round_sd","_mm_getmant_round_ss","_mm_getmant_sd","_mm_getmant_ss","_mm_gf2p8affine_epi64_epi8","_mm_gf2p8affineinv_epi64_epi8","_mm_gf2p8mul_epi8","_mm_hadd_epi16","_mm_hadd_epi32","_mm_hadd_pd","_mm_hadd_ps","_mm_hadds_epi16","_mm_hsub_epi16","_mm_hsub_epi32","_mm_hsub_pd","_mm_hsub_ps","_mm_hsubs_epi16","_mm_i32gather_epi32","_mm_i32gather_epi64","_mm_i32gather_pd","_mm_i32gather_ps","_mm_i64gather_epi32","_mm_i64gather_epi64","_mm_i64gather_pd","_mm_i64gather_ps","_mm_insert_epi16","_mm_insert_epi32","_mm_insert_epi8","_mm_insert_ps","_mm_insert_si64","_mm_lddqu_si128","_mm_lfence","_mm_load1_pd","_mm_load1_ps","_mm_load_epi32","_mm_load_epi64","_mm_load_pd","_mm_load_pd1","_mm_load_ps","_mm_load_ps1","_mm_load_sd","_mm_load_si128","_mm_load_ss","_mm_loaddup_pd","_mm_loadh_pd","_mm_loadl_epi64","_mm_loadl_pd","_mm_loadr_pd","_mm_loadr_ps","_mm_loadu_epi16","_mm_loadu_epi32","_mm_loadu_epi64","_mm_loadu_epi8","_mm_loadu_pd","_mm_loadu_ps","_mm_loadu_si128","_mm_loadu_si64","_mm_lzcnt_epi32","_mm_lzcnt_epi64","_mm_madd52hi_epu64","_mm_madd52lo_epu64","_mm_madd_epi16","_mm_maddubs_epi16","_mm_mask2_permutex2var_epi16","_mm_mask2_permutex2var_epi32","_mm_mask2_permutex2var_epi64","_mm_mask2_permutex2var_epi8","_mm_mask2_permutex2var_pd","_mm_mask2_permutex2var_ps","_mm_mask3_fmadd_pd","_mm_mask3_fmadd_ps","_mm_mask3_fmadd_round_sd","_mm_mask3_fmadd_round_ss","_mm_mask3_fmadd_sd","_mm_mask3_fmadd_ss","_mm_mask3_fmaddsub_pd","_mm_mask3_fmaddsub_ps","_mm_mask3_fmsub_pd","_mm_mask3_fmsub_ps","_mm_mask3_fmsub_round_sd","_mm_mask3_fmsub_round_ss","_mm_mask3_fmsub_sd","_mm_mask3_fmsub_ss","_mm_mask3_fmsubadd_pd","_mm_mask3_fmsubadd_ps","_mm_mask3_fnmadd_pd","_mm_mask3_fnmadd_ps","_mm_mask3_fnmadd_round_sd","_mm_mask3_fnmadd_round_ss","_mm_mask3_fnmadd_sd","_mm_mask3_fnmadd_ss","_mm_mask3_fnmsub_pd","_mm_mask3_fnmsub_ps","_mm_mask3_fnmsub_round_sd","_mm_mask3_fnmsub_round_ss","_mm_mask3_fnmsub_sd","_mm_mask3_fnmsub_ss","_mm_mask_abs_epi16","_mm_mask_abs_epi32","_mm_mask_abs_epi8","_mm_mask_add_epi16","_mm_mask_add_epi32","_mm_mask_add_epi64","_mm_mask_add_epi8","_mm_mask_add_pd","_mm_mask_add_ps","_mm_mask_add_round_sd","_mm_mask_add_round_ss","_mm_mask_add_sd","_mm_mask_add_ss","_mm_mask_adds_epi16","_mm_mask_adds_epi8","_mm_mask_adds_epu16","_mm_mask_adds_epu8","_mm_mask_alignr_epi32","_mm_mask_alignr_epi64","_mm_mask_alignr_epi8","_mm_mask_and_epi32","_mm_mask_and_epi64","_mm_mask_andnot_epi32","_mm_mask_andnot_epi64","_mm_mask_avg_epu16","_mm_mask_avg_epu8","_mm_mask_bitshuffle_epi64_mask","_mm_mask_blend_epi16","_mm_mask_blend_epi32","_mm_mask_blend_epi64","_mm_mask_blend_epi8","_mm_mask_blend_pd","_mm_mask_blend_ps","_mm_mask_broadcastb_epi8","_mm_mask_broadcastd_epi32","_mm_mask_broadcastq_epi64","_mm_mask_broadcastss_ps","_mm_mask_broadcastw_epi16","_mm_mask_cmp_epi16_mask","_mm_mask_cmp_epi32_mask","_mm_mask_cmp_epi64_mask","_mm_mask_cmp_epi8_mask","_mm_mask_cmp_epu16_mask","_mm_mask_cmp_epu32_mask","_mm_mask_cmp_epu64_mask","_mm_mask_cmp_epu8_mask","_mm_mask_cmp_pd_mask","_mm_mask_cmp_ps_mask","_mm_mask_cmp_round_sd_mask","_mm_mask_cmp_round_ss_mask","_mm_mask_cmp_sd_mask","_mm_mask_cmp_ss_mask","_mm_mask_cmpeq_epi16_mask","_mm_mask_cmpeq_epi32_mask","_mm_mask_cmpeq_epi64_mask","_mm_mask_cmpeq_epi8_mask","_mm_mask_cmpeq_epu16_mask","_mm_mask_cmpeq_epu32_mask","_mm_mask_cmpeq_epu64_mask","_mm_mask_cmpeq_epu8_mask","_mm_mask_cmpge_epi16_mask","_mm_mask_cmpge_epi32_mask","_mm_mask_cmpge_epi64_mask","_mm_mask_cmpge_epi8_mask","_mm_mask_cmpge_epu16_mask","_mm_mask_cmpge_epu32_mask","_mm_mask_cmpge_epu64_mask","_mm_mask_cmpge_epu8_mask","_mm_mask_cmpgt_epi16_mask","_mm_mask_cmpgt_epi32_mask","_mm_mask_cmpgt_epi64_mask","_mm_mask_cmpgt_epi8_mask","_mm_mask_cmpgt_epu16_mask","_mm_mask_cmpgt_epu32_mask","_mm_mask_cmpgt_epu64_mask","_mm_mask_cmpgt_epu8_mask","_mm_mask_cmple_epi16_mask","_mm_mask_cmple_epi32_mask","_mm_mask_cmple_epi64_mask","_mm_mask_cmple_epi8_mask","_mm_mask_cmple_epu16_mask","_mm_mask_cmple_epu32_mask","_mm_mask_cmple_epu64_mask","_mm_mask_cmple_epu8_mask","_mm_mask_cmplt_epi16_mask","_mm_mask_cmplt_epi32_mask","_mm_mask_cmplt_epi64_mask","_mm_mask_cmplt_epi8_mask","_mm_mask_cmplt_epu16_mask","_mm_mask_cmplt_epu32_mask","_mm_mask_cmplt_epu64_mask","_mm_mask_cmplt_epu8_mask","_mm_mask_cmpneq_epi16_mask","_mm_mask_cmpneq_epi32_mask","_mm_mask_cmpneq_epi64_mask","_mm_mask_cmpneq_epi8_mask","_mm_mask_cmpneq_epu16_mask","_mm_mask_cmpneq_epu32_mask","_mm_mask_cmpneq_epu64_mask","_mm_mask_cmpneq_epu8_mask","_mm_mask_compress_epi16","_mm_mask_compress_epi32","_mm_mask_compress_epi64","_mm_mask_compress_epi8","_mm_mask_compress_pd","_mm_mask_compress_ps","_mm_mask_compressstoreu_epi16","_mm_mask_compressstoreu_epi32","_mm_mask_compressstoreu_epi64","_mm_mask_compressstoreu_epi8","_mm_mask_compressstoreu_pd","_mm_mask_compressstoreu_ps","_mm_mask_conflict_epi32","_mm_mask_conflict_epi64","_mm_mask_cvt_roundps_ph","_mm_mask_cvt_roundsd_ss","_mm_mask_cvt_roundss_sd","_mm_mask_cvtepi16_epi32","_mm_mask_cvtepi16_epi64","_mm_mask_cvtepi16_epi8","_mm_mask_cvtepi16_storeu_epi8","_mm_mask_cvtepi32_epi16","_mm_mask_cvtepi32_epi64","_mm_mask_cvtepi32_epi8","_mm_mask_cvtepi32_pd","_mm_mask_cvtepi32_ps","_mm_mask_cvtepi32_storeu_epi16","_mm_mask_cvtepi32_storeu_epi8","_mm_mask_cvtepi64_epi16","_mm_mask_cvtepi64_epi32","_mm_mask_cvtepi64_epi8","_mm_mask_cvtepi64_storeu_epi16","_mm_mask_cvtepi64_storeu_epi32","_mm_mask_cvtepi64_storeu_epi8","_mm_mask_cvtepi8_epi16","_mm_mask_cvtepi8_epi32","_mm_mask_cvtepi8_epi64","_mm_mask_cvtepu16_epi32","_mm_mask_cvtepu16_epi64","_mm_mask_cvtepu32_epi64","_mm_mask_cvtepu32_pd","_mm_mask_cvtepu8_epi16","_mm_mask_cvtepu8_epi32","_mm_mask_cvtepu8_epi64","_mm_mask_cvtne2ps_pbh","_mm_mask_cvtpd_epi32","_mm_mask_cvtpd_epu32","_mm_mask_cvtpd_ps","_mm_mask_cvtph_ps","_mm_mask_cvtps_epi32","_mm_mask_cvtps_epu32","_mm_mask_cvtps_ph","_mm_mask_cvtsd_ss","_mm_mask_cvtsepi16_epi8","_mm_mask_cvtsepi16_storeu_epi8","_mm_mask_cvtsepi32_epi16","_mm_mask_cvtsepi32_epi8","_mm_mask_cvtsepi32_storeu_epi16","_mm_mask_cvtsepi32_storeu_epi8","_mm_mask_cvtsepi64_epi16","_mm_mask_cvtsepi64_epi32","_mm_mask_cvtsepi64_epi8","_mm_mask_cvtsepi64_storeu_epi16","_mm_mask_cvtsepi64_storeu_epi32","_mm_mask_cvtsepi64_storeu_epi8","_mm_mask_cvtss_sd","_mm_mask_cvttpd_epi32","_mm_mask_cvttpd_epu32","_mm_mask_cvttps_epi32","_mm_mask_cvttps_epu32","_mm_mask_cvtusepi16_epi8","_mm_mask_cvtusepi16_storeu_epi8","_mm_mask_cvtusepi32_epi16","_mm_mask_cvtusepi32_epi8","_mm_mask_cvtusepi32_storeu_epi16","_mm_mask_cvtusepi32_storeu_epi8","_mm_mask_cvtusepi64_epi16","_mm_mask_cvtusepi64_epi32","_mm_mask_cvtusepi64_epi8","_mm_mask_cvtusepi64_storeu_epi16","_mm_mask_cvtusepi64_storeu_epi32","_mm_mask_cvtusepi64_storeu_epi8","_mm_mask_dbsad_epu8","_mm_mask_div_pd","_mm_mask_div_ps","_mm_mask_div_round_sd","_mm_mask_div_round_ss","_mm_mask_div_sd","_mm_mask_div_ss","_mm_mask_dpbf16_ps","_mm_mask_dpbusd_epi32","_mm_mask_dpbusds_epi32","_mm_mask_dpwssd_epi32","_mm_mask_dpwssds_epi32","_mm_mask_expand_epi16","_mm_mask_expand_epi32","_mm_mask_expand_epi64","_mm_mask_expand_epi8","_mm_mask_expand_pd","_mm_mask_expand_ps","_mm_mask_expandloadu_epi16","_mm_mask_expandloadu_epi32","_mm_mask_expandloadu_epi64","_mm_mask_expandloadu_epi8","_mm_mask_expandloadu_pd","_mm_mask_expandloadu_ps","_mm_mask_fixupimm_pd","_mm_mask_fixupimm_ps","_mm_mask_fixupimm_round_sd","_mm_mask_fixupimm_round_ss","_mm_mask_fixupimm_sd","_mm_mask_fixupimm_ss","_mm_mask_fmadd_pd","_mm_mask_fmadd_ps","_mm_mask_fmadd_round_sd","_mm_mask_fmadd_round_ss","_mm_mask_fmadd_sd","_mm_mask_fmadd_ss","_mm_mask_fmaddsub_pd","_mm_mask_fmaddsub_ps","_mm_mask_fmsub_pd","_mm_mask_fmsub_ps","_mm_mask_fmsub_round_sd","_mm_mask_fmsub_round_ss","_mm_mask_fmsub_sd","_mm_mask_fmsub_ss","_mm_mask_fmsubadd_pd","_mm_mask_fmsubadd_ps","_mm_mask_fnmadd_pd","_mm_mask_fnmadd_ps","_mm_mask_fnmadd_round_sd","_mm_mask_fnmadd_round_ss","_mm_mask_fnmadd_sd","_mm_mask_fnmadd_ss","_mm_mask_fnmsub_pd","_mm_mask_fnmsub_ps","_mm_mask_fnmsub_round_sd","_mm_mask_fnmsub_round_ss","_mm_mask_fnmsub_sd","_mm_mask_fnmsub_ss","_mm_mask_getexp_pd","_mm_mask_getexp_ps","_mm_mask_getexp_round_sd","_mm_mask_getexp_round_ss","_mm_mask_getexp_sd","_mm_mask_getexp_ss","_mm_mask_getmant_pd","_mm_mask_getmant_ps","_mm_mask_getmant_round_sd","_mm_mask_getmant_round_ss","_mm_mask_getmant_sd","_mm_mask_getmant_ss","_mm_mask_gf2p8affine_epi64_epi8","_mm_mask_gf2p8affineinv_epi64_epi8","_mm_mask_gf2p8mul_epi8","_mm_mask_i32gather_epi32","_mm_mask_i32gather_epi64","_mm_mask_i32gather_pd","_mm_mask_i32gather_ps","_mm_mask_i64gather_epi32","_mm_mask_i64gather_epi64","_mm_mask_i64gather_pd","_mm_mask_i64gather_ps","_mm_mask_load_epi32","_mm_mask_load_epi64","_mm_mask_load_pd","_mm_mask_load_ps","_mm_mask_loadu_epi16","_mm_mask_loadu_epi32","_mm_mask_loadu_epi64","_mm_mask_loadu_epi8","_mm_mask_loadu_pd","_mm_mask_loadu_ps","_mm_mask_lzcnt_epi32","_mm_mask_lzcnt_epi64","_mm_mask_madd_epi16","_mm_mask_maddubs_epi16","_mm_mask_max_epi16","_mm_mask_max_epi32","_mm_mask_max_epi64","_mm_mask_max_epi8","_mm_mask_max_epu16","_mm_mask_max_epu32","_mm_mask_max_epu64","_mm_mask_max_epu8","_mm_mask_max_pd","_mm_mask_max_ps","_mm_mask_max_round_sd","_mm_mask_max_round_ss","_mm_mask_max_sd","_mm_mask_max_ss","_mm_mask_min_epi16","_mm_mask_min_epi32","_mm_mask_min_epi8","_mm_mask_min_epu16","_mm_mask_min_epu32","_mm_mask_min_epu64","_mm_mask_min_epu8","_mm_mask_min_pd","_mm_mask_min_ps","_mm_mask_min_round_sd","_mm_mask_min_round_ss","_mm_mask_min_sd","_mm_mask_min_ss","_mm_mask_mov_epi16","_mm_mask_mov_epi32","_mm_mask_mov_epi64","_mm_mask_mov_epi8","_mm_mask_mov_pd","_mm_mask_mov_ps","_mm_mask_move_sd","_mm_mask_move_ss","_mm_mask_movedup_pd","_mm_mask_movehdup_ps","_mm_mask_moveldup_ps","_mm_mask_mul_epi32","_mm_mask_mul_epu32","_mm_mask_mul_pd","_mm_mask_mul_ps","_mm_mask_mul_round_sd","_mm_mask_mul_round_ss","_mm_mask_mul_sd","_mm_mask_mul_ss","_mm_mask_mulhi_epi16","_mm_mask_mulhi_epu16","_mm_mask_mulhrs_epi16","_mm_mask_mullo_epi16","_mm_mask_mullo_epi32","_mm_mask_multishift_epi64_epi8","_mm_mask_or_epi32","_mm_mask_or_epi64","_mm_mask_packs_epi16","_mm_mask_packs_epi32","_mm_mask_packus_epi16","_mm_mask_packus_epi32","_mm_mask_permute_pd","_mm_mask_permute_ps","_mm_mask_permutevar_pd","_mm_mask_permutevar_ps","_mm_mask_permutex2var_epi16","_mm_mask_permutex2var_epi32","_mm_mask_permutex2var_epi64","_mm_mask_permutex2var_epi8","_mm_mask_permutex2var_pd","_mm_mask_permutex2var_ps","_mm_mask_permutexvar_epi16","_mm_mask_permutexvar_epi8","_mm_mask_popcnt_epi16","_mm_mask_popcnt_epi32","_mm_mask_popcnt_epi64","_mm_mask_popcnt_epi8","_mm_mask_rcp14_pd","_mm_mask_rcp14_ps","_mm_mask_rcp14_sd","_mm_mask_rcp14_ss","_mm_mask_rol_epi32","_mm_mask_rol_epi64","_mm_mask_rolv_epi32","_mm_mask_rolv_epi64","_mm_mask_ror_epi32","_mm_mask_ror_epi64","_mm_mask_rorv_epi32","_mm_mask_rorv_epi64","_mm_mask_roundscale_pd","_mm_mask_roundscale_ps","_mm_mask_roundscale_round_sd","_mm_mask_roundscale_round_ss","_mm_mask_roundscale_sd","_mm_mask_roundscale_ss","_mm_mask_rsqrt14_pd","_mm_mask_rsqrt14_ps","_mm_mask_rsqrt14_sd","_mm_mask_rsqrt14_ss","_mm_mask_scalef_pd","_mm_mask_scalef_ps","_mm_mask_scalef_round_sd","_mm_mask_scalef_round_ss","_mm_mask_scalef_sd","_mm_mask_scalef_ss","_mm_mask_set1_epi16","_mm_mask_set1_epi32","_mm_mask_set1_epi64","_mm_mask_set1_epi8","_mm_mask_shldi_epi16","_mm_mask_shldi_epi32","_mm_mask_shldi_epi64","_mm_mask_shldv_epi16","_mm_mask_shldv_epi32","_mm_mask_shldv_epi64","_mm_mask_shrdi_epi16","_mm_mask_shrdi_epi32","_mm_mask_shrdi_epi64","_mm_mask_shrdv_epi16","_mm_mask_shrdv_epi32","_mm_mask_shrdv_epi64","_mm_mask_shuffle_epi32","_mm_mask_shuffle_epi8","_mm_mask_shuffle_pd","_mm_mask_shuffle_ps","_mm_mask_shufflehi_epi16","_mm_mask_shufflelo_epi16","_mm_mask_sll_epi16","_mm_mask_sll_epi32","_mm_mask_sll_epi64","_mm_mask_slli_epi16","_mm_mask_slli_epi32","_mm_mask_slli_epi64","_mm_mask_sllv_epi16","_mm_mask_sllv_epi32","_mm_mask_sllv_epi64","_mm_mask_sqrt_pd","_mm_mask_sqrt_ps","_mm_mask_sqrt_round_sd","_mm_mask_sqrt_round_ss","_mm_mask_sqrt_sd","_mm_mask_sqrt_ss","_mm_mask_sra_epi16","_mm_mask_sra_epi32","_mm_mask_sra_epi64","_mm_mask_srai_epi16","_mm_mask_srai_epi32","_mm_mask_srai_epi64","_mm_mask_srav_epi16","_mm_mask_srav_epi32","_mm_mask_srav_epi64","_mm_mask_srl_epi16","_mm_mask_srl_epi32","_mm_mask_srl_epi64","_mm_mask_srli_epi16","_mm_mask_srli_epi32","_mm_mask_srli_epi64","_mm_mask_srlv_epi16","_mm_mask_srlv_epi32","_mm_mask_srlv_epi64","_mm_mask_store_epi32","_mm_mask_store_epi64","_mm_mask_store_pd","_mm_mask_store_ps","_mm_mask_storeu_epi16","_mm_mask_storeu_epi32","_mm_mask_storeu_epi64","_mm_mask_storeu_epi8","_mm_mask_storeu_pd","_mm_mask_storeu_ps","_mm_mask_sub_epi16","_mm_mask_sub_epi32","_mm_mask_sub_epi64","_mm_mask_sub_epi8","_mm_mask_sub_pd","_mm_mask_sub_ps","_mm_mask_sub_round_sd","_mm_mask_sub_round_ss","_mm_mask_sub_sd","_mm_mask_sub_ss","_mm_mask_subs_epi16","_mm_mask_subs_epi8","_mm_mask_subs_epu16","_mm_mask_subs_epu8","_mm_mask_ternarylogic_epi32","_mm_mask_ternarylogic_epi64","_mm_mask_test_epi16_mask","_mm_mask_test_epi32_mask","_mm_mask_test_epi64_mask","_mm_mask_test_epi8_mask","_mm_mask_testn_epi16_mask","_mm_mask_testn_epi32_mask","_mm_mask_testn_epi64_mask","_mm_mask_testn_epi8_mask","_mm_mask_unpackhi_epi16","_mm_mask_unpackhi_epi32","_mm_mask_unpackhi_epi64","_mm_mask_unpackhi_epi8","_mm_mask_unpackhi_pd","_mm_mask_unpackhi_ps","_mm_mask_unpacklo_epi16","_mm_mask_unpacklo_epi32","_mm_mask_unpacklo_epi64","_mm_mask_unpacklo_epi8","_mm_mask_unpacklo_pd","_mm_mask_unpacklo_ps","_mm_mask_xor_epi32","_mm_mask_xor_epi64","_mm_maskload_epi32","_mm_maskload_epi64","_mm_maskload_pd","_mm_maskload_ps","_mm_maskmoveu_si128","_mm_maskstore_epi32","_mm_maskstore_epi64","_mm_maskstore_pd","_mm_maskstore_ps","_mm_maskz_abs_epi16","_mm_maskz_abs_epi32","_mm_maskz_abs_epi8","_mm_maskz_add_epi16","_mm_maskz_add_epi32","_mm_maskz_add_epi64","_mm_maskz_add_epi8","_mm_maskz_add_pd","_mm_maskz_add_ps","_mm_maskz_add_round_sd","_mm_maskz_add_round_ss","_mm_maskz_add_sd","_mm_maskz_add_ss","_mm_maskz_adds_epi16","_mm_maskz_adds_epi8","_mm_maskz_adds_epu16","_mm_maskz_adds_epu8","_mm_maskz_alignr_epi32","_mm_maskz_alignr_epi64","_mm_maskz_alignr_epi8","_mm_maskz_and_epi32","_mm_maskz_and_epi64","_mm_maskz_andnot_epi32","_mm_maskz_andnot_epi64","_mm_maskz_avg_epu16","_mm_maskz_avg_epu8","_mm_maskz_broadcastb_epi8","_mm_maskz_broadcastd_epi32","_mm_maskz_broadcastq_epi64","_mm_maskz_broadcastss_ps","_mm_maskz_broadcastw_epi16","_mm_maskz_compress_epi16","_mm_maskz_compress_epi32","_mm_maskz_compress_epi64","_mm_maskz_compress_epi8","_mm_maskz_compress_pd","_mm_maskz_compress_ps","_mm_maskz_conflict_epi32","_mm_maskz_conflict_epi64","_mm_maskz_cvt_roundps_ph","_mm_maskz_cvt_roundsd_ss","_mm_maskz_cvt_roundss_sd","_mm_maskz_cvtepi16_epi32","_mm_maskz_cvtepi16_epi64","_mm_maskz_cvtepi16_epi8","_mm_maskz_cvtepi32_epi16","_mm_maskz_cvtepi32_epi64","_mm_maskz_cvtepi32_epi8","_mm_maskz_cvtepi32_pd","_mm_maskz_cvtepi32_ps","_mm_maskz_cvtepi64_epi16","_mm_maskz_cvtepi64_epi32","_mm_maskz_cvtepi64_epi8","_mm_maskz_cvtepi8_epi16","_mm_maskz_cvtepi8_epi32","_mm_maskz_cvtepi8_epi64","_mm_maskz_cvtepu16_epi32","_mm_maskz_cvtepu16_epi64","_mm_maskz_cvtepu32_epi64","_mm_maskz_cvtepu32_pd","_mm_maskz_cvtepu8_epi16","_mm_maskz_cvtepu8_epi32","_mm_maskz_cvtepu8_epi64","_mm_maskz_cvtne2ps_pbh","_mm_maskz_cvtpd_epi32","_mm_maskz_cvtpd_epu32","_mm_maskz_cvtpd_ps","_mm_maskz_cvtph_ps","_mm_maskz_cvtps_epi32","_mm_maskz_cvtps_epu32","_mm_maskz_cvtps_ph","_mm_maskz_cvtsd_ss","_mm_maskz_cvtsepi16_epi8","_mm_maskz_cvtsepi32_epi16","_mm_maskz_cvtsepi32_epi8","_mm_maskz_cvtsepi64_epi16","_mm_maskz_cvtsepi64_epi32","_mm_maskz_cvtsepi64_epi8","_mm_maskz_cvtss_sd","_mm_maskz_cvttpd_epi32","_mm_maskz_cvttpd_epu32","_mm_maskz_cvttps_epi32","_mm_maskz_cvttps_epu32","_mm_maskz_cvtusepi16_epi8","_mm_maskz_cvtusepi32_epi16","_mm_maskz_cvtusepi32_epi8","_mm_maskz_cvtusepi64_epi16","_mm_maskz_cvtusepi64_epi32","_mm_maskz_cvtusepi64_epi8","_mm_maskz_dbsad_epu8","_mm_maskz_div_pd","_mm_maskz_div_ps","_mm_maskz_div_round_sd","_mm_maskz_div_round_ss","_mm_maskz_div_sd","_mm_maskz_div_ss","_mm_maskz_dpbf16_ps","_mm_maskz_dpbusd_epi32","_mm_maskz_dpbusds_epi32","_mm_maskz_dpwssd_epi32","_mm_maskz_dpwssds_epi32","_mm_maskz_expand_epi16","_mm_maskz_expand_epi32","_mm_maskz_expand_epi64","_mm_maskz_expand_epi8","_mm_maskz_expand_pd","_mm_maskz_expand_ps","_mm_maskz_expandloadu_epi16","_mm_maskz_expandloadu_epi32","_mm_maskz_expandloadu_epi64","_mm_maskz_expandloadu_epi8","_mm_maskz_expandloadu_pd","_mm_maskz_expandloadu_ps","_mm_maskz_fixupimm_pd","_mm_maskz_fixupimm_ps","_mm_maskz_fixupimm_round_sd","_mm_maskz_fixupimm_round_ss","_mm_maskz_fixupimm_sd","_mm_maskz_fixupimm_ss","_mm_maskz_fmadd_pd","_mm_maskz_fmadd_ps","_mm_maskz_fmadd_round_sd","_mm_maskz_fmadd_round_ss","_mm_maskz_fmadd_sd","_mm_maskz_fmadd_ss","_mm_maskz_fmaddsub_pd","_mm_maskz_fmaddsub_ps","_mm_maskz_fmsub_pd","_mm_maskz_fmsub_ps","_mm_maskz_fmsub_round_sd","_mm_maskz_fmsub_round_ss","_mm_maskz_fmsub_sd","_mm_maskz_fmsub_ss","_mm_maskz_fmsubadd_pd","_mm_maskz_fmsubadd_ps","_mm_maskz_fnmadd_pd","_mm_maskz_fnmadd_ps","_mm_maskz_fnmadd_round_sd","_mm_maskz_fnmadd_round_ss","_mm_maskz_fnmadd_sd","_mm_maskz_fnmadd_ss","_mm_maskz_fnmsub_pd","_mm_maskz_fnmsub_ps","_mm_maskz_fnmsub_round_sd","_mm_maskz_fnmsub_round_ss","_mm_maskz_fnmsub_sd","_mm_maskz_fnmsub_ss","_mm_maskz_getexp_pd","_mm_maskz_getexp_ps","_mm_maskz_getexp_round_sd","_mm_maskz_getexp_round_ss","_mm_maskz_getexp_sd","_mm_maskz_getexp_ss","_mm_maskz_getmant_pd","_mm_maskz_getmant_ps","_mm_maskz_getmant_round_sd","_mm_maskz_getmant_round_ss","_mm_maskz_getmant_sd","_mm_maskz_getmant_ss","_mm_maskz_gf2p8affine_epi64_epi8","_mm_maskz_gf2p8affineinv_epi64_epi8","_mm_maskz_gf2p8mul_epi8","_mm_maskz_load_epi32","_mm_maskz_load_epi64","_mm_maskz_load_pd","_mm_maskz_load_ps","_mm_maskz_loadu_epi16","_mm_maskz_loadu_epi32","_mm_maskz_loadu_epi64","_mm_maskz_loadu_epi8","_mm_maskz_loadu_pd","_mm_maskz_loadu_ps","_mm_maskz_lzcnt_epi32","_mm_maskz_lzcnt_epi64","_mm_maskz_madd_epi16","_mm_maskz_maddubs_epi16","_mm_maskz_max_epi16","_mm_maskz_max_epi32","_mm_maskz_max_epi64","_mm_maskz_max_epi8","_mm_maskz_max_epu16","_mm_maskz_max_epu32","_mm_maskz_max_epu64","_mm_maskz_max_epu8","_mm_maskz_max_pd","_mm_maskz_max_ps","_mm_maskz_max_round_sd","_mm_maskz_max_round_ss","_mm_maskz_max_sd","_mm_maskz_max_ss","_mm_maskz_min_epi16","_mm_maskz_min_epi32","_mm_maskz_min_epi8","_mm_maskz_min_epu16","_mm_maskz_min_epu32","_mm_maskz_min_epu64","_mm_maskz_min_epu8","_mm_maskz_min_pd","_mm_maskz_min_ps","_mm_maskz_min_round_sd","_mm_maskz_min_round_ss","_mm_maskz_min_sd","_mm_maskz_min_ss","_mm_maskz_mov_epi16","_mm_maskz_mov_epi32","_mm_maskz_mov_epi64","_mm_maskz_mov_epi8","_mm_maskz_mov_pd","_mm_maskz_mov_ps","_mm_maskz_move_sd","_mm_maskz_move_ss","_mm_maskz_movedup_pd","_mm_maskz_movehdup_ps","_mm_maskz_moveldup_ps","_mm_maskz_mul_epi32","_mm_maskz_mul_epu32","_mm_maskz_mul_pd","_mm_maskz_mul_ps","_mm_maskz_mul_round_sd","_mm_maskz_mul_round_ss","_mm_maskz_mul_sd","_mm_maskz_mul_ss","_mm_maskz_mulhi_epi16","_mm_maskz_mulhi_epu16","_mm_maskz_mulhrs_epi16","_mm_maskz_mullo_epi16","_mm_maskz_mullo_epi32","_mm_maskz_multishift_epi64_epi8","_mm_maskz_or_epi32","_mm_maskz_or_epi64","_mm_maskz_packs_epi16","_mm_maskz_packs_epi32","_mm_maskz_packus_epi16","_mm_maskz_packus_epi32","_mm_maskz_permute_pd","_mm_maskz_permute_ps","_mm_maskz_permutevar_pd","_mm_maskz_permutevar_ps","_mm_maskz_permutex2var_epi16","_mm_maskz_permutex2var_epi32","_mm_maskz_permutex2var_epi64","_mm_maskz_permutex2var_epi8","_mm_maskz_permutex2var_pd","_mm_maskz_permutex2var_ps","_mm_maskz_permutexvar_epi16","_mm_maskz_permutexvar_epi8","_mm_maskz_popcnt_epi16","_mm_maskz_popcnt_epi32","_mm_maskz_popcnt_epi64","_mm_maskz_popcnt_epi8","_mm_maskz_rcp14_pd","_mm_maskz_rcp14_ps","_mm_maskz_rcp14_sd","_mm_maskz_rcp14_ss","_mm_maskz_rol_epi32","_mm_maskz_rol_epi64","_mm_maskz_rolv_epi32","_mm_maskz_rolv_epi64","_mm_maskz_ror_epi32","_mm_maskz_ror_epi64","_mm_maskz_rorv_epi32","_mm_maskz_rorv_epi64","_mm_maskz_roundscale_pd","_mm_maskz_roundscale_ps","_mm_maskz_roundscale_round_sd","_mm_maskz_roundscale_round_ss","_mm_maskz_roundscale_sd","_mm_maskz_roundscale_ss","_mm_maskz_rsqrt14_pd","_mm_maskz_rsqrt14_ps","_mm_maskz_rsqrt14_sd","_mm_maskz_rsqrt14_ss","_mm_maskz_scalef_pd","_mm_maskz_scalef_ps","_mm_maskz_scalef_round_sd","_mm_maskz_scalef_round_ss","_mm_maskz_scalef_sd","_mm_maskz_scalef_ss","_mm_maskz_set1_epi16","_mm_maskz_set1_epi32","_mm_maskz_set1_epi64","_mm_maskz_set1_epi8","_mm_maskz_shldi_epi16","_mm_maskz_shldi_epi32","_mm_maskz_shldi_epi64","_mm_maskz_shldv_epi16","_mm_maskz_shldv_epi32","_mm_maskz_shldv_epi64","_mm_maskz_shrdi_epi16","_mm_maskz_shrdi_epi32","_mm_maskz_shrdi_epi64","_mm_maskz_shrdv_epi16","_mm_maskz_shrdv_epi32","_mm_maskz_shrdv_epi64","_mm_maskz_shuffle_epi32","_mm_maskz_shuffle_epi8","_mm_maskz_shuffle_pd","_mm_maskz_shuffle_ps","_mm_maskz_shufflehi_epi16","_mm_maskz_shufflelo_epi16","_mm_maskz_sll_epi16","_mm_maskz_sll_epi32","_mm_maskz_sll_epi64","_mm_maskz_slli_epi16","_mm_maskz_slli_epi32","_mm_maskz_slli_epi64","_mm_maskz_sllv_epi16","_mm_maskz_sllv_epi32","_mm_maskz_sllv_epi64","_mm_maskz_sqrt_pd","_mm_maskz_sqrt_ps","_mm_maskz_sqrt_round_sd","_mm_maskz_sqrt_round_ss","_mm_maskz_sqrt_sd","_mm_maskz_sqrt_ss","_mm_maskz_sra_epi16","_mm_maskz_sra_epi32","_mm_maskz_sra_epi64","_mm_maskz_srai_epi16","_mm_maskz_srai_epi32","_mm_maskz_srai_epi64","_mm_maskz_srav_epi16","_mm_maskz_srav_epi32","_mm_maskz_srav_epi64","_mm_maskz_srl_epi16","_mm_maskz_srl_epi32","_mm_maskz_srl_epi64","_mm_maskz_srli_epi16","_mm_maskz_srli_epi32","_mm_maskz_srli_epi64","_mm_maskz_srlv_epi16","_mm_maskz_srlv_epi32","_mm_maskz_srlv_epi64","_mm_maskz_sub_epi16","_mm_maskz_sub_epi32","_mm_maskz_sub_epi64","_mm_maskz_sub_epi8","_mm_maskz_sub_pd","_mm_maskz_sub_ps","_mm_maskz_sub_round_sd","_mm_maskz_sub_round_ss","_mm_maskz_sub_sd","_mm_maskz_sub_ss","_mm_maskz_subs_epi16","_mm_maskz_subs_epi8","_mm_maskz_subs_epu16","_mm_maskz_subs_epu8","_mm_maskz_ternarylogic_epi32","_mm_maskz_ternarylogic_epi64","_mm_maskz_unpackhi_epi16","_mm_maskz_unpackhi_epi32","_mm_maskz_unpackhi_epi64","_mm_maskz_unpackhi_epi8","_mm_maskz_unpackhi_pd","_mm_maskz_unpackhi_ps","_mm_maskz_unpacklo_epi16","_mm_maskz_unpacklo_epi32","_mm_maskz_unpacklo_epi64","_mm_maskz_unpacklo_epi8","_mm_maskz_unpacklo_pd","_mm_maskz_unpacklo_ps","_mm_maskz_xor_epi32","_mm_maskz_xor_epi64","_mm_max_epi16","_mm_max_epi32","_mm_max_epi64","_mm_max_epi8","_mm_max_epu16","_mm_max_epu32","_mm_max_epu64","_mm_max_epu8","_mm_max_pd","_mm_max_ps","_mm_max_round_sd","_mm_max_round_ss","_mm_max_sd","_mm_max_ss","_mm_mfence","_mm_min_epi16","_mm_min_epi32","_mm_min_epi8","_mm_min_epu16","_mm_min_epu32","_mm_min_epu64","_mm_min_epu8","_mm_min_pd","_mm_min_ps","_mm_min_round_sd","_mm_min_round_ss","_mm_min_sd","_mm_min_ss","_mm_minpos_epu16","_mm_move_epi64","_mm_move_sd","_mm_move_ss","_mm_movedup_pd","_mm_movehdup_ps","_mm_movehl_ps","_mm_moveldup_ps","_mm_movelh_ps","_mm_movemask_epi8","_mm_movemask_pd","_mm_movemask_ps","_mm_movepi16_mask","_mm_movepi8_mask","_mm_movm_epi16","_mm_movm_epi8","_mm_mpsadbw_epu8","_mm_mul_epi32","_mm_mul_epu32","_mm_mul_pd","_mm_mul_ps","_mm_mul_round_sd","_mm_mul_round_ss","_mm_mul_sd","_mm_mul_ss","_mm_mulhi_epi16","_mm_mulhi_epu16","_mm_mulhrs_epi16","_mm_mullo_epi16","_mm_mullo_epi32","_mm_multishift_epi64_epi8","_mm_or_epi32","_mm_or_epi64","_mm_or_pd","_mm_or_ps","_mm_or_si128","_mm_packs_epi16","_mm_packs_epi32","_mm_packus_epi16","_mm_packus_epi32","_mm_pause","_mm_permute_pd","_mm_permute_ps","_mm_permutevar_pd","_mm_permutevar_ps","_mm_permutex2var_epi16","_mm_permutex2var_epi32","_mm_permutex2var_epi64","_mm_permutex2var_epi8","_mm_permutex2var_pd","_mm_permutex2var_ps","_mm_permutexvar_epi16","_mm_permutexvar_epi8","_mm_popcnt_epi16","_mm_popcnt_epi32","_mm_popcnt_epi64","_mm_popcnt_epi8","_mm_prefetch","_mm_rcp14_pd","_mm_rcp14_ps","_mm_rcp14_sd","_mm_rcp14_ss","_mm_rcp_ps","_mm_rcp_ss","_mm_rol_epi32","_mm_rol_epi64","_mm_rolv_epi32","_mm_rolv_epi64","_mm_ror_epi32","_mm_ror_epi64","_mm_rorv_epi32","_mm_rorv_epi64","_mm_round_pd","_mm_round_ps","_mm_round_sd","_mm_round_ss","_mm_roundscale_pd","_mm_roundscale_ps","_mm_roundscale_round_sd","_mm_roundscale_round_ss","_mm_roundscale_sd","_mm_roundscale_ss","_mm_rsqrt14_sd","_mm_rsqrt14_ss","_mm_rsqrt_ps","_mm_rsqrt_ss","_mm_sad_epu8","_mm_scalef_pd","_mm_scalef_ps","_mm_scalef_round_sd","_mm_scalef_round_ss","_mm_scalef_sd","_mm_scalef_ss","_mm_set1_epi16","_mm_set1_epi32","_mm_set1_epi64x","_mm_set1_epi8","_mm_set1_pd","_mm_set1_ps","_mm_set_epi16","_mm_set_epi32","_mm_set_epi64x","_mm_set_epi8","_mm_set_pd","_mm_set_pd1","_mm_set_ps","_mm_set_ps1","_mm_set_sd","_mm_set_ss","_mm_setcsr","_mm_setr_epi16","_mm_setr_epi32","_mm_setr_epi8","_mm_setr_pd","_mm_setr_ps","_mm_setzero_pd","_mm_setzero_ps","_mm_setzero_si128","_mm_sfence","_mm_sha1msg1_epu32","_mm_sha1msg2_epu32","_mm_sha1nexte_epu32","_mm_sha1rnds4_epu32","_mm_sha256msg1_epu32","_mm_sha256msg2_epu32","_mm_sha256rnds2_epu32","_mm_shldi_epi16","_mm_shldi_epi32","_mm_shldi_epi64","_mm_shldv_epi16","_mm_shldv_epi32","_mm_shldv_epi64","_mm_shrdi_epi16","_mm_shrdi_epi32","_mm_shrdi_epi64","_mm_shrdv_epi16","_mm_shrdv_epi32","_mm_shrdv_epi64","_mm_shuffle_epi32","_mm_shuffle_epi8","_mm_shuffle_pd","_mm_shuffle_ps","_mm_shufflehi_epi16","_mm_shufflelo_epi16","_mm_sign_epi16","_mm_sign_epi32","_mm_sign_epi8","_mm_sll_epi16","_mm_sll_epi32","_mm_sll_epi64","_mm_slli_epi16","_mm_slli_epi32","_mm_slli_epi64","_mm_slli_si128","_mm_sllv_epi16","_mm_sllv_epi32","_mm_sllv_epi64","_mm_sqrt_pd","_mm_sqrt_ps","_mm_sqrt_round_sd","_mm_sqrt_round_ss","_mm_sqrt_sd","_mm_sqrt_ss","_mm_sra_epi16","_mm_sra_epi32","_mm_sra_epi64","_mm_srai_epi16","_mm_srai_epi32","_mm_srai_epi64","_mm_srav_epi16","_mm_srav_epi32","_mm_srav_epi64","_mm_srl_epi16","_mm_srl_epi32","_mm_srl_epi64","_mm_srli_epi16","_mm_srli_epi32","_mm_srli_epi64","_mm_srli_si128","_mm_srlv_epi16","_mm_srlv_epi32","_mm_srlv_epi64","_mm_store1_pd","_mm_store1_ps","_mm_store_epi32","_mm_store_epi64","_mm_store_pd","_mm_store_pd1","_mm_store_ps","_mm_store_ps1","_mm_store_sd","_mm_store_si128","_mm_store_ss","_mm_storeh_pd","_mm_storel_epi64","_mm_storel_pd","_mm_storer_pd","_mm_storer_ps","_mm_storeu_epi16","_mm_storeu_epi32","_mm_storeu_epi64","_mm_storeu_epi8","_mm_storeu_pd","_mm_storeu_ps","_mm_storeu_si128","_mm_stream_pd","_mm_stream_ps","_mm_stream_sd","_mm_stream_si128","_mm_stream_si32","_mm_stream_ss","_mm_sub_epi16","_mm_sub_epi32","_mm_sub_epi64","_mm_sub_epi8","_mm_sub_pd","_mm_sub_ps","_mm_sub_round_sd","_mm_sub_round_ss","_mm_sub_sd","_mm_sub_ss","_mm_subs_epi16","_mm_subs_epi8","_mm_subs_epu16","_mm_subs_epu8","_mm_ternarylogic_epi32","_mm_ternarylogic_epi64","_mm_test_all_ones","_mm_test_all_zeros","_mm_test_epi16_mask","_mm_test_epi32_mask","_mm_test_epi64_mask","_mm_test_epi8_mask","_mm_test_mix_ones_zeros","_mm_testc_pd","_mm_testc_ps","_mm_testc_si128","_mm_testn_epi16_mask","_mm_testn_epi32_mask","_mm_testn_epi64_mask","_mm_testn_epi8_mask","_mm_testnzc_pd","_mm_testnzc_ps","_mm_testnzc_si128","_mm_testz_pd","_mm_testz_ps","_mm_testz_si128","_mm_tzcnt_32","_mm_ucomieq_sd","_mm_ucomieq_ss","_mm_ucomige_sd","_mm_ucomige_ss","_mm_ucomigt_sd","_mm_ucomigt_ss","_mm_ucomile_sd","_mm_ucomile_ss","_mm_ucomilt_sd","_mm_ucomilt_ss","_mm_ucomineq_sd","_mm_ucomineq_ss","_mm_undefined_pd","_mm_undefined_ps","_mm_undefined_si128","_mm_unpackhi_epi16","_mm_unpackhi_epi32","_mm_unpackhi_epi64","_mm_unpackhi_epi8","_mm_unpackhi_pd","_mm_unpackhi_ps","_mm_unpacklo_epi16","_mm_unpacklo_epi32","_mm_unpacklo_epi64","_mm_unpacklo_epi8","_mm_unpacklo_pd","_mm_unpacklo_ps","_mm_xor_epi32","_mm_xor_epi64","_mm_xor_pd","_mm_xor_ps","_mm_xor_si128","_mulx_u32","_pdep_u32","_pext_u32","_popcnt32","_rdrand16_step","_rdrand32_step","_rdseed16_step","_rdseed32_step","_rdtsc","_store_mask32","_store_mask64","_subborrow_u32","_t1mskc_u32","_t1mskc_u64","_tzcnt_u32","_tzmsk_u32","_tzmsk_u64","_xabort","_xabort_code","_xbegin","_xend","_xgetbv","_xrstor","_xrstors","_xsave","_xsavec","_xsaveopt","_xsaves","_xsetbv","_xtest","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","eax","ebx","ecx","edx","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_cpuid","into","into","into","into","into","into","into","into","into","into","into","into","into","partial_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","CpuidResult","_CMP_EQ_OQ","_CMP_EQ_OS","_CMP_EQ_UQ","_CMP_EQ_US","_CMP_FALSE_OQ","_CMP_FALSE_OS","_CMP_GE_OQ","_CMP_GE_OS","_CMP_GT_OQ","_CMP_GT_OS","_CMP_LE_OQ","_CMP_LE_OS","_CMP_LT_OQ","_CMP_LT_OS","_CMP_NEQ_OQ","_CMP_NEQ_OS","_CMP_NEQ_UQ","_CMP_NEQ_US","_CMP_NGE_UQ","_CMP_NGE_US","_CMP_NGT_UQ","_CMP_NGT_US","_CMP_NLE_UQ","_CMP_NLE_US","_CMP_NLT_UQ","_CMP_NLT_US","_CMP_ORD_Q","_CMP_ORD_S","_CMP_TRUE_UQ","_CMP_TRUE_US","_CMP_UNORD_Q","_CMP_UNORD_S","_MM_CMPINT_ENUM","_MM_CMPINT_EQ","_MM_CMPINT_FALSE","_MM_CMPINT_LE","_MM_CMPINT_LT","_MM_CMPINT_NE","_MM_CMPINT_NLE","_MM_CMPINT_NLT","_MM_CMPINT_TRUE","_MM_EXCEPT_DENORM","_MM_EXCEPT_DIV_ZERO","_MM_EXCEPT_INEXACT","_MM_EXCEPT_INVALID","_MM_EXCEPT_MASK","_MM_EXCEPT_OVERFLOW","_MM_EXCEPT_UNDERFLOW","_MM_FLUSH_ZERO_MASK","_MM_FLUSH_ZERO_OFF","_MM_FLUSH_ZERO_ON","_MM_FROUND_CEIL","_MM_FROUND_CUR_DIRECTION","_MM_FROUND_FLOOR","_MM_FROUND_NEARBYINT","_MM_FROUND_NINT","_MM_FROUND_NO_EXC","_MM_FROUND_RAISE_EXC","_MM_FROUND_RINT","_MM_FROUND_TO_NEAREST_INT","_MM_FROUND_TO_NEG_INF","_MM_FROUND_TO_POS_INF","_MM_FROUND_TO_ZERO","_MM_FROUND_TRUNC","_MM_GET_EXCEPTION_MASK","_MM_GET_EXCEPTION_STATE","_MM_GET_FLUSH_ZERO_MODE","_MM_GET_ROUNDING_MODE","_MM_HINT_ET0","_MM_HINT_ET1","_MM_HINT_NTA","_MM_HINT_T0","_MM_HINT_T1","_MM_HINT_T2","_MM_MANTISSA_NORM_ENUM","_MM_MANTISSA_SIGN_ENUM","_MM_MANT_NORM_1_2","_MM_MANT_NORM_P5_1","_MM_MANT_NORM_P5_2","_MM_MANT_NORM_P75_1P5","_MM_MANT_SIGN_NAN","_MM_MANT_SIGN_SRC","_MM_MANT_SIGN_ZERO","_MM_MASK_DENORM","_MM_MASK_DIV_ZERO","_MM_MASK_INEXACT","_MM_MASK_INVALID","_MM_MASK_MASK","_MM_MASK_OVERFLOW","_MM_MASK_UNDERFLOW","_MM_PERM_AAAA","_MM_PERM_AAAB","_MM_PERM_AAAC","_MM_PERM_AAAD","_MM_PERM_AABA","_MM_PERM_AABB","_MM_PERM_AABC","_MM_PERM_AABD","_MM_PERM_AACA","_MM_PERM_AACB","_MM_PERM_AACC","_MM_PERM_AACD","_MM_PERM_AADA","_MM_PERM_AADB","_MM_PERM_AADC","_MM_PERM_AADD","_MM_PERM_ABAA","_MM_PERM_ABAB","_MM_PERM_ABAC","_MM_PERM_ABAD","_MM_PERM_ABBA","_MM_PERM_ABBB","_MM_PERM_ABBC","_MM_PERM_ABBD","_MM_PERM_ABCA","_MM_PERM_ABCB","_MM_PERM_ABCC","_MM_PERM_ABCD","_MM_PERM_ABDA","_MM_PERM_ABDB","_MM_PERM_ABDC","_MM_PERM_ABDD","_MM_PERM_ACAA","_MM_PERM_ACAB","_MM_PERM_ACAC","_MM_PERM_ACAD","_MM_PERM_ACBA","_MM_PERM_ACBB","_MM_PERM_ACBC","_MM_PERM_ACBD","_MM_PERM_ACCA","_MM_PERM_ACCB","_MM_PERM_ACCC","_MM_PERM_ACCD","_MM_PERM_ACDA","_MM_PERM_ACDB","_MM_PERM_ACDC","_MM_PERM_ACDD","_MM_PERM_ADAA","_MM_PERM_ADAB","_MM_PERM_ADAC","_MM_PERM_ADAD","_MM_PERM_ADBA","_MM_PERM_ADBB","_MM_PERM_ADBC","_MM_PERM_ADBD","_MM_PERM_ADCA","_MM_PERM_ADCB","_MM_PERM_ADCC","_MM_PERM_ADCD","_MM_PERM_ADDA","_MM_PERM_ADDB","_MM_PERM_ADDC","_MM_PERM_ADDD","_MM_PERM_BAAA","_MM_PERM_BAAB","_MM_PERM_BAAC","_MM_PERM_BAAD","_MM_PERM_BABA","_MM_PERM_BABB","_MM_PERM_BABC","_MM_PERM_BABD","_MM_PERM_BACA","_MM_PERM_BACB","_MM_PERM_BACC","_MM_PERM_BACD","_MM_PERM_BADA","_MM_PERM_BADB","_MM_PERM_BADC","_MM_PERM_BADD","_MM_PERM_BBAA","_MM_PERM_BBAB","_MM_PERM_BBAC","_MM_PERM_BBAD","_MM_PERM_BBBA","_MM_PERM_BBBB","_MM_PERM_BBBC","_MM_PERM_BBBD","_MM_PERM_BBCA","_MM_PERM_BBCB","_MM_PERM_BBCC","_MM_PERM_BBCD","_MM_PERM_BBDA","_MM_PERM_BBDB","_MM_PERM_BBDC","_MM_PERM_BBDD","_MM_PERM_BCAA","_MM_PERM_BCAB","_MM_PERM_BCAC","_MM_PERM_BCAD","_MM_PERM_BCBA","_MM_PERM_BCBB","_MM_PERM_BCBC","_MM_PERM_BCBD","_MM_PERM_BCCA","_MM_PERM_BCCB","_MM_PERM_BCCC","_MM_PERM_BCCD","_MM_PERM_BCDA","_MM_PERM_BCDB","_MM_PERM_BCDC","_MM_PERM_BCDD","_MM_PERM_BDAA","_MM_PERM_BDAB","_MM_PERM_BDAC","_MM_PERM_BDAD","_MM_PERM_BDBA","_MM_PERM_BDBB","_MM_PERM_BDBC","_MM_PERM_BDBD","_MM_PERM_BDCA","_MM_PERM_BDCB","_MM_PERM_BDCC","_MM_PERM_BDCD","_MM_PERM_BDDA","_MM_PERM_BDDB","_MM_PERM_BDDC","_MM_PERM_BDDD","_MM_PERM_CAAA","_MM_PERM_CAAB","_MM_PERM_CAAC","_MM_PERM_CAAD","_MM_PERM_CABA","_MM_PERM_CABB","_MM_PERM_CABC","_MM_PERM_CABD","_MM_PERM_CACA","_MM_PERM_CACB","_MM_PERM_CACC","_MM_PERM_CACD","_MM_PERM_CADA","_MM_PERM_CADB","_MM_PERM_CADC","_MM_PERM_CADD","_MM_PERM_CBAA","_MM_PERM_CBAB","_MM_PERM_CBAC","_MM_PERM_CBAD","_MM_PERM_CBBA","_MM_PERM_CBBB","_MM_PERM_CBBC","_MM_PERM_CBBD","_MM_PERM_CBCA","_MM_PERM_CBCB","_MM_PERM_CBCC","_MM_PERM_CBCD","_MM_PERM_CBDA","_MM_PERM_CBDB","_MM_PERM_CBDC","_MM_PERM_CBDD","_MM_PERM_CCAA","_MM_PERM_CCAB","_MM_PERM_CCAC","_MM_PERM_CCAD","_MM_PERM_CCBA","_MM_PERM_CCBB","_MM_PERM_CCBC","_MM_PERM_CCBD","_MM_PERM_CCCA","_MM_PERM_CCCB","_MM_PERM_CCCC","_MM_PERM_CCCD","_MM_PERM_CCDA","_MM_PERM_CCDB","_MM_PERM_CCDC","_MM_PERM_CCDD","_MM_PERM_CDAA","_MM_PERM_CDAB","_MM_PERM_CDAC","_MM_PERM_CDAD","_MM_PERM_CDBA","_MM_PERM_CDBB","_MM_PERM_CDBC","_MM_PERM_CDBD","_MM_PERM_CDCA","_MM_PERM_CDCB","_MM_PERM_CDCC","_MM_PERM_CDCD","_MM_PERM_CDDA","_MM_PERM_CDDB","_MM_PERM_CDDC","_MM_PERM_CDDD","_MM_PERM_DAAA","_MM_PERM_DAAB","_MM_PERM_DAAC","_MM_PERM_DAAD","_MM_PERM_DABA","_MM_PERM_DABB","_MM_PERM_DABC","_MM_PERM_DABD","_MM_PERM_DACA","_MM_PERM_DACB","_MM_PERM_DACC","_MM_PERM_DACD","_MM_PERM_DADA","_MM_PERM_DADB","_MM_PERM_DADC","_MM_PERM_DADD","_MM_PERM_DBAA","_MM_PERM_DBAB","_MM_PERM_DBAC","_MM_PERM_DBAD","_MM_PERM_DBBA","_MM_PERM_DBBB","_MM_PERM_DBBC","_MM_PERM_DBBD","_MM_PERM_DBCA","_MM_PERM_DBCB","_MM_PERM_DBCC","_MM_PERM_DBCD","_MM_PERM_DBDA","_MM_PERM_DBDB","_MM_PERM_DBDC","_MM_PERM_DBDD","_MM_PERM_DCAA","_MM_PERM_DCAB","_MM_PERM_DCAC","_MM_PERM_DCAD","_MM_PERM_DCBA","_MM_PERM_DCBB","_MM_PERM_DCBC","_MM_PERM_DCBD","_MM_PERM_DCCA","_MM_PERM_DCCB","_MM_PERM_DCCC","_MM_PERM_DCCD","_MM_PERM_DCDA","_MM_PERM_DCDB","_MM_PERM_DCDC","_MM_PERM_DCDD","_MM_PERM_DDAA","_MM_PERM_DDAB","_MM_PERM_DDAC","_MM_PERM_DDAD","_MM_PERM_DDBA","_MM_PERM_DDBB","_MM_PERM_DDBC","_MM_PERM_DDBD","_MM_PERM_DDCA","_MM_PERM_DDCB","_MM_PERM_DDCC","_MM_PERM_DDCD","_MM_PERM_DDDA","_MM_PERM_DDDB","_MM_PERM_DDDC","_MM_PERM_DDDD","_MM_PERM_ENUM","_MM_ROUND_DOWN","_MM_ROUND_MASK","_MM_ROUND_NEAREST","_MM_ROUND_TOWARD_ZERO","_MM_ROUND_UP","_MM_SET_EXCEPTION_MASK","_MM_SET_EXCEPTION_STATE","_MM_SET_FLUSH_ZERO_MODE","_MM_SET_ROUNDING_MODE","_MM_SHUFFLE","_MM_TRANSPOSE4_PS","_SIDD_BIT_MASK","_SIDD_CMP_EQUAL_ANY","_SIDD_CMP_EQUAL_EACH","_SIDD_CMP_EQUAL_ORDERED","_SIDD_CMP_RANGES","_SIDD_LEAST_SIGNIFICANT","_SIDD_MASKED_NEGATIVE_POLARITY","_SIDD_MASKED_POSITIVE_POLARITY","_SIDD_MOST_SIGNIFICANT","_SIDD_NEGATIVE_POLARITY","_SIDD_POSITIVE_POLARITY","_SIDD_SBYTE_OPS","_SIDD_SWORD_OPS","_SIDD_UBYTE_OPS","_SIDD_UNIT_MASK","_SIDD_UWORD_OPS","_XABORT_CAPACITY","_XABORT_CONFLICT","_XABORT_DEBUG","_XABORT_EXPLICIT","_XABORT_NESTED","_XABORT_RETRY","_XBEGIN_STARTED","_XCR_XFEATURE_ENABLED_MASK","__cpuid","__cpuid_count","__get_cpuid_max","__m128","__m128bh","__m128d","__m128i","__m256","__m256bh","__m256d","__m256i","__m512","__m512bh","__m512d","__m512i","__mmask16","__mmask32","__mmask64","__mmask8","__rdtscp","_addcarry_u32","_addcarry_u64","_addcarryx_u32","_addcarryx_u64","_andn_u32","_andn_u64","_bextr2_u32","_bextr2_u64","_bextr_u32","_bextr_u64","_bittest","_bittest64","_bittestandcomplement","_bittestandcomplement64","_bittestandreset","_bittestandreset64","_bittestandset","_bittestandset64","_blcfill_u32","_blcfill_u64","_blci_u32","_blci_u64","_blcic_u32","_blcic_u64","_blcmsk_u32","_blcmsk_u64","_blcs_u32","_blcs_u64","_blsfill_u32","_blsfill_u64","_blsi_u32","_blsi_u64","_blsic_u32","_blsic_u64","_blsmsk_u32","_blsmsk_u64","_blsr_u32","_blsr_u64","_bswap","_bswap64","_bzhi_u32","_bzhi_u64","_fxrstor","_fxrstor64","_fxsave","_fxsave64","_kadd_mask32","_kadd_mask64","_kand_mask16","_kand_mask32","_kand_mask64","_kandn_mask16","_kandn_mask32","_kandn_mask64","_knot_mask16","_knot_mask32","_knot_mask64","_kor_mask16","_kor_mask32","_kor_mask64","_kxnor_mask16","_kxnor_mask32","_kxnor_mask64","_kxor_mask16","_kxor_mask32","_kxor_mask64","_load_mask32","_load_mask64","_lzcnt_u32","_lzcnt_u64","_mm256_abs_epi16","_mm256_abs_epi32","_mm256_abs_epi64","_mm256_abs_epi8","_mm256_add_epi16","_mm256_add_epi32","_mm256_add_epi64","_mm256_add_epi8","_mm256_add_pd","_mm256_add_ps","_mm256_adds_epi16","_mm256_adds_epi8","_mm256_adds_epu16","_mm256_adds_epu8","_mm256_addsub_pd","_mm256_addsub_ps","_mm256_aesdec_epi128","_mm256_aesdeclast_epi128","_mm256_aesenc_epi128","_mm256_aesenclast_epi128","_mm256_alignr_epi32","_mm256_alignr_epi64","_mm256_alignr_epi8","_mm256_and_pd","_mm256_and_ps","_mm256_and_si256","_mm256_andnot_pd","_mm256_andnot_ps","_mm256_andnot_si256","_mm256_avg_epu16","_mm256_avg_epu8","_mm256_bitshuffle_epi64_mask","_mm256_blend_epi16","_mm256_blend_epi32","_mm256_blend_pd","_mm256_blend_ps","_mm256_blendv_epi8","_mm256_blendv_pd","_mm256_blendv_ps","_mm256_broadcast_f32x4","_mm256_broadcast_i32x4","_mm256_broadcast_pd","_mm256_broadcast_ps","_mm256_broadcast_sd","_mm256_broadcast_ss","_mm256_broadcastb_epi8","_mm256_broadcastd_epi32","_mm256_broadcastmb_epi64","_mm256_broadcastmw_epi32","_mm256_broadcastq_epi64","_mm256_broadcastsd_pd","_mm256_broadcastsi128_si256","_mm256_broadcastss_ps","_mm256_broadcastw_epi16","_mm256_bslli_epi128","_mm256_bsrli_epi128","_mm256_castpd128_pd256","_mm256_castpd256_pd128","_mm256_castpd_ps","_mm256_castpd_si256","_mm256_castps128_ps256","_mm256_castps256_ps128","_mm256_castps_pd","_mm256_castps_si256","_mm256_castsi128_si256","_mm256_castsi256_pd","_mm256_castsi256_ps","_mm256_castsi256_si128","_mm256_ceil_pd","_mm256_ceil_ps","_mm256_clmulepi64_epi128","_mm256_cmp_epi16_mask","_mm256_cmp_epi32_mask","_mm256_cmp_epi64_mask","_mm256_cmp_epi8_mask","_mm256_cmp_epu16_mask","_mm256_cmp_epu32_mask","_mm256_cmp_epu64_mask","_mm256_cmp_epu8_mask","_mm256_cmp_pd","_mm256_cmp_pd_mask","_mm256_cmp_ps","_mm256_cmp_ps_mask","_mm256_cmpeq_epi16","_mm256_cmpeq_epi16_mask","_mm256_cmpeq_epi32","_mm256_cmpeq_epi32_mask","_mm256_cmpeq_epi64","_mm256_cmpeq_epi64_mask","_mm256_cmpeq_epi8","_mm256_cmpeq_epi8_mask","_mm256_cmpeq_epu16_mask","_mm256_cmpeq_epu32_mask","_mm256_cmpeq_epu64_mask","_mm256_cmpeq_epu8_mask","_mm256_cmpge_epi16_mask","_mm256_cmpge_epi32_mask","_mm256_cmpge_epi64_mask","_mm256_cmpge_epi8_mask","_mm256_cmpge_epu16_mask","_mm256_cmpge_epu32_mask","_mm256_cmpge_epu64_mask","_mm256_cmpge_epu8_mask","_mm256_cmpgt_epi16","_mm256_cmpgt_epi16_mask","_mm256_cmpgt_epi32","_mm256_cmpgt_epi32_mask","_mm256_cmpgt_epi64","_mm256_cmpgt_epi64_mask","_mm256_cmpgt_epi8","_mm256_cmpgt_epi8_mask","_mm256_cmpgt_epu16_mask","_mm256_cmpgt_epu32_mask","_mm256_cmpgt_epu64_mask","_mm256_cmpgt_epu8_mask","_mm256_cmple_epi16_mask","_mm256_cmple_epi32_mask","_mm256_cmple_epi64_mask","_mm256_cmple_epi8_mask","_mm256_cmple_epu16_mask","_mm256_cmple_epu32_mask","_mm256_cmple_epu64_mask","_mm256_cmple_epu8_mask","_mm256_cmplt_epi16_mask","_mm256_cmplt_epi32_mask","_mm256_cmplt_epi64_mask","_mm256_cmplt_epi8_mask","_mm256_cmplt_epu16_mask","_mm256_cmplt_epu32_mask","_mm256_cmplt_epu64_mask","_mm256_cmplt_epu8_mask","_mm256_cmpneq_epi16_mask","_mm256_cmpneq_epi32_mask","_mm256_cmpneq_epi64_mask","_mm256_cmpneq_epi8_mask","_mm256_cmpneq_epu16_mask","_mm256_cmpneq_epu32_mask","_mm256_cmpneq_epu64_mask","_mm256_cmpneq_epu8_mask","_mm256_conflict_epi32","_mm256_conflict_epi64","_mm256_cvtepi16_epi32","_mm256_cvtepi16_epi64","_mm256_cvtepi16_epi8","_mm256_cvtepi32_epi16","_mm256_cvtepi32_epi64","_mm256_cvtepi32_epi8","_mm256_cvtepi32_pd","_mm256_cvtepi32_ps","_mm256_cvtepi64_epi16","_mm256_cvtepi64_epi32","_mm256_cvtepi64_epi8","_mm256_cvtepi8_epi16","_mm256_cvtepi8_epi32","_mm256_cvtepi8_epi64","_mm256_cvtepu16_epi32","_mm256_cvtepu16_epi64","_mm256_cvtepu32_epi64","_mm256_cvtepu32_pd","_mm256_cvtepu8_epi16","_mm256_cvtepu8_epi32","_mm256_cvtepu8_epi64","_mm256_cvtne2ps_pbh","_mm256_cvtneps_pbh","_mm256_cvtpd_epi32","_mm256_cvtpd_epu32","_mm256_cvtpd_ps","_mm256_cvtph_ps","_mm256_cvtps_epi32","_mm256_cvtps_epu32","_mm256_cvtps_pd","_mm256_cvtps_ph","_mm256_cvtsd_f64","_mm256_cvtsepi16_epi8","_mm256_cvtsepi32_epi16","_mm256_cvtsepi32_epi8","_mm256_cvtsepi64_epi16","_mm256_cvtsepi64_epi32","_mm256_cvtsepi64_epi8","_mm256_cvtsi256_si32","_mm256_cvtss_f32","_mm256_cvttpd_epi32","_mm256_cvttpd_epu32","_mm256_cvttps_epi32","_mm256_cvttps_epu32","_mm256_cvtusepi16_epi8","_mm256_cvtusepi32_epi16","_mm256_cvtusepi32_epi8","_mm256_cvtusepi64_epi16","_mm256_cvtusepi64_epi32","_mm256_cvtusepi64_epi8","_mm256_dbsad_epu8","_mm256_div_pd","_mm256_div_ps","_mm256_dp_ps","_mm256_dpbf16_ps","_mm256_dpbusd_epi32","_mm256_dpbusds_epi32","_mm256_dpwssd_epi32","_mm256_dpwssds_epi32","_mm256_extract_epi16","_mm256_extract_epi32","_mm256_extract_epi64","_mm256_extract_epi8","_mm256_extractf128_pd","_mm256_extractf128_ps","_mm256_extractf128_si256","_mm256_extractf32x4_ps","_mm256_extracti128_si256","_mm256_extracti32x4_epi32","_mm256_fixupimm_pd","_mm256_fixupimm_ps","_mm256_floor_pd","_mm256_floor_ps","_mm256_fmadd_pd","_mm256_fmadd_ps","_mm256_fmaddsub_pd","_mm256_fmaddsub_ps","_mm256_fmsub_pd","_mm256_fmsub_ps","_mm256_fmsubadd_pd","_mm256_fmsubadd_ps","_mm256_fnmadd_pd","_mm256_fnmadd_ps","_mm256_fnmsub_pd","_mm256_fnmsub_ps","_mm256_getexp_pd","_mm256_getexp_ps","_mm256_getmant_pd","_mm256_getmant_ps","_mm256_gf2p8affine_epi64_epi8","_mm256_gf2p8affineinv_epi64_epi8","_mm256_gf2p8mul_epi8","_mm256_hadd_epi16","_mm256_hadd_epi32","_mm256_hadd_pd","_mm256_hadd_ps","_mm256_hadds_epi16","_mm256_hsub_epi16","_mm256_hsub_epi32","_mm256_hsub_pd","_mm256_hsub_ps","_mm256_hsubs_epi16","_mm256_i32gather_epi32","_mm256_i32gather_epi64","_mm256_i32gather_pd","_mm256_i32gather_ps","_mm256_i32scatter_epi64","_mm256_i64gather_epi32","_mm256_i64gather_epi64","_mm256_i64gather_pd","_mm256_i64gather_ps","_mm256_insert_epi16","_mm256_insert_epi32","_mm256_insert_epi64","_mm256_insert_epi8","_mm256_insertf128_pd","_mm256_insertf128_ps","_mm256_insertf128_si256","_mm256_insertf32x4","_mm256_inserti128_si256","_mm256_inserti32x4","_mm256_lddqu_si256","_mm256_load_epi32","_mm256_load_epi64","_mm256_load_pd","_mm256_load_ps","_mm256_load_si256","_mm256_loadu2_m128","_mm256_loadu2_m128d","_mm256_loadu2_m128i","_mm256_loadu_epi16","_mm256_loadu_epi32","_mm256_loadu_epi64","_mm256_loadu_epi8","_mm256_loadu_pd","_mm256_loadu_ps","_mm256_loadu_si256","_mm256_lzcnt_epi32","_mm256_lzcnt_epi64","_mm256_madd52hi_epu64","_mm256_madd52lo_epu64","_mm256_madd_epi16","_mm256_maddubs_epi16","_mm256_mask2_permutex2var_epi16","_mm256_mask2_permutex2var_epi32","_mm256_mask2_permutex2var_epi64","_mm256_mask2_permutex2var_epi8","_mm256_mask2_permutex2var_pd","_mm256_mask2_permutex2var_ps","_mm256_mask3_fmadd_pd","_mm256_mask3_fmadd_ps","_mm256_mask3_fmaddsub_pd","_mm256_mask3_fmaddsub_ps","_mm256_mask3_fmsub_pd","_mm256_mask3_fmsub_ps","_mm256_mask3_fmsubadd_pd","_mm256_mask3_fmsubadd_ps","_mm256_mask3_fnmadd_pd","_mm256_mask3_fnmadd_ps","_mm256_mask3_fnmsub_pd","_mm256_mask3_fnmsub_ps","_mm256_mask_abs_epi16","_mm256_mask_abs_epi32","_mm256_mask_abs_epi64","_mm256_mask_abs_epi8","_mm256_mask_add_epi16","_mm256_mask_add_epi32","_mm256_mask_add_epi64","_mm256_mask_add_epi8","_mm256_mask_add_pd","_mm256_mask_add_ps","_mm256_mask_adds_epi16","_mm256_mask_adds_epi8","_mm256_mask_adds_epu16","_mm256_mask_adds_epu8","_mm256_mask_alignr_epi32","_mm256_mask_alignr_epi64","_mm256_mask_alignr_epi8","_mm256_mask_and_epi32","_mm256_mask_and_epi64","_mm256_mask_andnot_epi32","_mm256_mask_andnot_epi64","_mm256_mask_avg_epu16","_mm256_mask_avg_epu8","_mm256_mask_bitshuffle_epi64_mask","_mm256_mask_blend_epi16","_mm256_mask_blend_epi32","_mm256_mask_blend_epi64","_mm256_mask_blend_epi8","_mm256_mask_blend_pd","_mm256_mask_blend_ps","_mm256_mask_broadcast_f32x4","_mm256_mask_broadcast_i32x4","_mm256_mask_broadcastb_epi8","_mm256_mask_broadcastd_epi32","_mm256_mask_broadcastq_epi64","_mm256_mask_broadcastsd_pd","_mm256_mask_broadcastss_ps","_mm256_mask_broadcastw_epi16","_mm256_mask_cmp_epi16_mask","_mm256_mask_cmp_epi32_mask","_mm256_mask_cmp_epi64_mask","_mm256_mask_cmp_epi8_mask","_mm256_mask_cmp_epu16_mask","_mm256_mask_cmp_epu32_mask","_mm256_mask_cmp_epu64_mask","_mm256_mask_cmp_epu8_mask","_mm256_mask_cmp_pd_mask","_mm256_mask_cmp_ps_mask","_mm256_mask_cmpeq_epi16_mask","_mm256_mask_cmpeq_epi32_mask","_mm256_mask_cmpeq_epi64_mask","_mm256_mask_cmpeq_epi8_mask","_mm256_mask_cmpeq_epu16_mask","_mm256_mask_cmpeq_epu32_mask","_mm256_mask_cmpeq_epu64_mask","_mm256_mask_cmpeq_epu8_mask","_mm256_mask_cmpge_epi16_mask","_mm256_mask_cmpge_epi32_mask","_mm256_mask_cmpge_epi64_mask","_mm256_mask_cmpge_epi8_mask","_mm256_mask_cmpge_epu16_mask","_mm256_mask_cmpge_epu32_mask","_mm256_mask_cmpge_epu64_mask","_mm256_mask_cmpge_epu8_mask","_mm256_mask_cmpgt_epi16_mask","_mm256_mask_cmpgt_epi32_mask","_mm256_mask_cmpgt_epi64_mask","_mm256_mask_cmpgt_epi8_mask","_mm256_mask_cmpgt_epu16_mask","_mm256_mask_cmpgt_epu32_mask","_mm256_mask_cmpgt_epu64_mask","_mm256_mask_cmpgt_epu8_mask","_mm256_mask_cmple_epi16_mask","_mm256_mask_cmple_epi32_mask","_mm256_mask_cmple_epi64_mask","_mm256_mask_cmple_epi8_mask","_mm256_mask_cmple_epu16_mask","_mm256_mask_cmple_epu32_mask","_mm256_mask_cmple_epu64_mask","_mm256_mask_cmple_epu8_mask","_mm256_mask_cmplt_epi16_mask","_mm256_mask_cmplt_epi32_mask","_mm256_mask_cmplt_epi64_mask","_mm256_mask_cmplt_epi8_mask","_mm256_mask_cmplt_epu16_mask","_mm256_mask_cmplt_epu32_mask","_mm256_mask_cmplt_epu64_mask","_mm256_mask_cmplt_epu8_mask","_mm256_mask_cmpneq_epi16_mask","_mm256_mask_cmpneq_epi32_mask","_mm256_mask_cmpneq_epi64_mask","_mm256_mask_cmpneq_epi8_mask","_mm256_mask_cmpneq_epu16_mask","_mm256_mask_cmpneq_epu32_mask","_mm256_mask_cmpneq_epu64_mask","_mm256_mask_cmpneq_epu8_mask","_mm256_mask_compress_epi16","_mm256_mask_compress_epi32","_mm256_mask_compress_epi64","_mm256_mask_compress_epi8","_mm256_mask_compress_pd","_mm256_mask_compress_ps","_mm256_mask_compressstoreu_epi16","_mm256_mask_compressstoreu_epi32","_mm256_mask_compressstoreu_epi64","_mm256_mask_compressstoreu_epi8","_mm256_mask_compressstoreu_pd","_mm256_mask_compressstoreu_ps","_mm256_mask_conflict_epi32","_mm256_mask_conflict_epi64","_mm256_mask_cvt_roundps_ph","_mm256_mask_cvtepi16_epi32","_mm256_mask_cvtepi16_epi64","_mm256_mask_cvtepi16_epi8","_mm256_mask_cvtepi16_storeu_epi8","_mm256_mask_cvtepi32_epi16","_mm256_mask_cvtepi32_epi64","_mm256_mask_cvtepi32_epi8","_mm256_mask_cvtepi32_pd","_mm256_mask_cvtepi32_ps","_mm256_mask_cvtepi32_storeu_epi16","_mm256_mask_cvtepi32_storeu_epi8","_mm256_mask_cvtepi64_epi16","_mm256_mask_cvtepi64_epi32","_mm256_mask_cvtepi64_epi8","_mm256_mask_cvtepi64_storeu_epi16","_mm256_mask_cvtepi64_storeu_epi32","_mm256_mask_cvtepi64_storeu_epi8","_mm256_mask_cvtepi8_epi16","_mm256_mask_cvtepi8_epi32","_mm256_mask_cvtepi8_epi64","_mm256_mask_cvtepu16_epi32","_mm256_mask_cvtepu16_epi64","_mm256_mask_cvtepu32_epi64","_mm256_mask_cvtepu32_pd","_mm256_mask_cvtepu8_epi16","_mm256_mask_cvtepu8_epi32","_mm256_mask_cvtepu8_epi64","_mm256_mask_cvtne2ps_pbh","_mm256_mask_cvtneps_pbh","_mm256_mask_cvtpd_epi32","_mm256_mask_cvtpd_epu32","_mm256_mask_cvtpd_ps","_mm256_mask_cvtph_ps","_mm256_mask_cvtps_epi32","_mm256_mask_cvtps_epu32","_mm256_mask_cvtps_ph","_mm256_mask_cvtsepi16_epi8","_mm256_mask_cvtsepi16_storeu_epi8","_mm256_mask_cvtsepi32_epi16","_mm256_mask_cvtsepi32_epi8","_mm256_mask_cvtsepi32_storeu_epi16","_mm256_mask_cvtsepi32_storeu_epi8","_mm256_mask_cvtsepi64_epi16","_mm256_mask_cvtsepi64_epi32","_mm256_mask_cvtsepi64_epi8","_mm256_mask_cvtsepi64_storeu_epi16","_mm256_mask_cvtsepi64_storeu_epi32","_mm256_mask_cvtsepi64_storeu_epi8","_mm256_mask_cvttpd_epi32","_mm256_mask_cvttpd_epu32","_mm256_mask_cvttps_epi32","_mm256_mask_cvttps_epu32","_mm256_mask_cvtusepi16_epi8","_mm256_mask_cvtusepi16_storeu_epi8","_mm256_mask_cvtusepi32_epi16","_mm256_mask_cvtusepi32_epi8","_mm256_mask_cvtusepi32_storeu_epi16","_mm256_mask_cvtusepi32_storeu_epi8","_mm256_mask_cvtusepi64_epi16","_mm256_mask_cvtusepi64_epi32","_mm256_mask_cvtusepi64_epi8","_mm256_mask_cvtusepi64_storeu_epi16","_mm256_mask_cvtusepi64_storeu_epi32","_mm256_mask_cvtusepi64_storeu_epi8","_mm256_mask_dbsad_epu8","_mm256_mask_div_pd","_mm256_mask_div_ps","_mm256_mask_dpbf16_ps","_mm256_mask_dpbusd_epi32","_mm256_mask_dpbusds_epi32","_mm256_mask_dpwssd_epi32","_mm256_mask_dpwssds_epi32","_mm256_mask_expand_epi16","_mm256_mask_expand_epi32","_mm256_mask_expand_epi64","_mm256_mask_expand_epi8","_mm256_mask_expand_pd","_mm256_mask_expand_ps","_mm256_mask_expandloadu_epi16","_mm256_mask_expandloadu_epi32","_mm256_mask_expandloadu_epi64","_mm256_mask_expandloadu_epi8","_mm256_mask_expandloadu_pd","_mm256_mask_expandloadu_ps","_mm256_mask_extractf32x4_ps","_mm256_mask_extracti32x4_epi32","_mm256_mask_fixupimm_pd","_mm256_mask_fixupimm_ps","_mm256_mask_fmadd_pd","_mm256_mask_fmadd_ps","_mm256_mask_fmaddsub_pd","_mm256_mask_fmaddsub_ps","_mm256_mask_fmsub_pd","_mm256_mask_fmsub_ps","_mm256_mask_fmsubadd_pd","_mm256_mask_fmsubadd_ps","_mm256_mask_fnmadd_pd","_mm256_mask_fnmadd_ps","_mm256_mask_fnmsub_pd","_mm256_mask_fnmsub_ps","_mm256_mask_getexp_pd","_mm256_mask_getexp_ps","_mm256_mask_getmant_pd","_mm256_mask_getmant_ps","_mm256_mask_gf2p8affine_epi64_epi8","_mm256_mask_gf2p8affineinv_epi64_epi8","_mm256_mask_gf2p8mul_epi8","_mm256_mask_i32gather_epi32","_mm256_mask_i32gather_epi64","_mm256_mask_i32gather_pd","_mm256_mask_i32gather_ps","_mm256_mask_i64gather_epi32","_mm256_mask_i64gather_epi64","_mm256_mask_i64gather_pd","_mm256_mask_i64gather_ps","_mm256_mask_insertf32x4","_mm256_mask_inserti32x4","_mm256_mask_load_epi32","_mm256_mask_load_epi64","_mm256_mask_load_pd","_mm256_mask_load_ps","_mm256_mask_loadu_epi16","_mm256_mask_loadu_epi32","_mm256_mask_loadu_epi64","_mm256_mask_loadu_epi8","_mm256_mask_loadu_pd","_mm256_mask_loadu_ps","_mm256_mask_lzcnt_epi32","_mm256_mask_lzcnt_epi64","_mm256_mask_madd_epi16","_mm256_mask_maddubs_epi16","_mm256_mask_max_epi16","_mm256_mask_max_epi32","_mm256_mask_max_epi64","_mm256_mask_max_epi8","_mm256_mask_max_epu16","_mm256_mask_max_epu32","_mm256_mask_max_epu64","_mm256_mask_max_epu8","_mm256_mask_max_pd","_mm256_mask_max_ps","_mm256_mask_min_epi16","_mm256_mask_min_epi32","_mm256_mask_min_epi64","_mm256_mask_min_epi8","_mm256_mask_min_epu16","_mm256_mask_min_epu32","_mm256_mask_min_epu64","_mm256_mask_min_epu8","_mm256_mask_min_pd","_mm256_mask_min_ps","_mm256_mask_mov_epi16","_mm256_mask_mov_epi32","_mm256_mask_mov_epi64","_mm256_mask_mov_epi8","_mm256_mask_mov_pd","_mm256_mask_mov_ps","_mm256_mask_movedup_pd","_mm256_mask_movehdup_ps","_mm256_mask_moveldup_ps","_mm256_mask_mul_epi32","_mm256_mask_mul_epu32","_mm256_mask_mul_pd","_mm256_mask_mul_ps","_mm256_mask_mulhi_epi16","_mm256_mask_mulhi_epu16","_mm256_mask_mulhrs_epi16","_mm256_mask_mullo_epi16","_mm256_mask_mullo_epi32","_mm256_mask_multishift_epi64_epi8","_mm256_mask_or_epi32","_mm256_mask_or_epi64","_mm256_mask_packs_epi16","_mm256_mask_packs_epi32","_mm256_mask_packus_epi16","_mm256_mask_packus_epi32","_mm256_mask_permute_pd","_mm256_mask_permute_ps","_mm256_mask_permutevar_pd","_mm256_mask_permutevar_ps","_mm256_mask_permutex2var_epi16","_mm256_mask_permutex2var_epi32","_mm256_mask_permutex2var_epi64","_mm256_mask_permutex2var_epi8","_mm256_mask_permutex2var_pd","_mm256_mask_permutex2var_ps","_mm256_mask_permutex_epi64","_mm256_mask_permutex_pd","_mm256_mask_permutexvar_epi16","_mm256_mask_permutexvar_epi32","_mm256_mask_permutexvar_epi64","_mm256_mask_permutexvar_epi8","_mm256_mask_permutexvar_pd","_mm256_mask_permutexvar_ps","_mm256_mask_popcnt_epi16","_mm256_mask_popcnt_epi32","_mm256_mask_popcnt_epi64","_mm256_mask_popcnt_epi8","_mm256_mask_rcp14_pd","_mm256_mask_rcp14_ps","_mm256_mask_rol_epi32","_mm256_mask_rol_epi64","_mm256_mask_rolv_epi32","_mm256_mask_rolv_epi64","_mm256_mask_ror_epi32","_mm256_mask_ror_epi64","_mm256_mask_rorv_epi32","_mm256_mask_rorv_epi64","_mm256_mask_roundscale_pd","_mm256_mask_roundscale_ps","_mm256_mask_rsqrt14_pd","_mm256_mask_rsqrt14_ps","_mm256_mask_scalef_pd","_mm256_mask_scalef_ps","_mm256_mask_set1_epi16","_mm256_mask_set1_epi32","_mm256_mask_set1_epi64","_mm256_mask_set1_epi8","_mm256_mask_shldi_epi16","_mm256_mask_shldi_epi32","_mm256_mask_shldi_epi64","_mm256_mask_shldv_epi16","_mm256_mask_shldv_epi32","_mm256_mask_shldv_epi64","_mm256_mask_shrdi_epi16","_mm256_mask_shrdi_epi32","_mm256_mask_shrdi_epi64","_mm256_mask_shrdv_epi16","_mm256_mask_shrdv_epi32","_mm256_mask_shrdv_epi64","_mm256_mask_shuffle_epi32","_mm256_mask_shuffle_epi8","_mm256_mask_shuffle_f32x4","_mm256_mask_shuffle_f64x2","_mm256_mask_shuffle_i32x4","_mm256_mask_shuffle_i64x2","_mm256_mask_shuffle_pd","_mm256_mask_shuffle_ps","_mm256_mask_shufflehi_epi16","_mm256_mask_shufflelo_epi16","_mm256_mask_sll_epi16","_mm256_mask_sll_epi32","_mm256_mask_sll_epi64","_mm256_mask_slli_epi16","_mm256_mask_slli_epi32","_mm256_mask_slli_epi64","_mm256_mask_sllv_epi16","_mm256_mask_sllv_epi32","_mm256_mask_sllv_epi64","_mm256_mask_sqrt_pd","_mm256_mask_sqrt_ps","_mm256_mask_sra_epi16","_mm256_mask_sra_epi32","_mm256_mask_sra_epi64","_mm256_mask_srai_epi16","_mm256_mask_srai_epi32","_mm256_mask_srai_epi64","_mm256_mask_srav_epi16","_mm256_mask_srav_epi32","_mm256_mask_srav_epi64","_mm256_mask_srl_epi16","_mm256_mask_srl_epi32","_mm256_mask_srl_epi64","_mm256_mask_srli_epi16","_mm256_mask_srli_epi32","_mm256_mask_srli_epi64","_mm256_mask_srlv_epi16","_mm256_mask_srlv_epi32","_mm256_mask_srlv_epi64","_mm256_mask_store_epi32","_mm256_mask_store_epi64","_mm256_mask_store_pd","_mm256_mask_store_ps","_mm256_mask_storeu_epi16","_mm256_mask_storeu_epi32","_mm256_mask_storeu_epi64","_mm256_mask_storeu_epi8","_mm256_mask_storeu_pd","_mm256_mask_storeu_ps","_mm256_mask_sub_epi16","_mm256_mask_sub_epi32","_mm256_mask_sub_epi64","_mm256_mask_sub_epi8","_mm256_mask_sub_pd","_mm256_mask_sub_ps","_mm256_mask_subs_epi16","_mm256_mask_subs_epi8","_mm256_mask_subs_epu16","_mm256_mask_subs_epu8","_mm256_mask_ternarylogic_epi32","_mm256_mask_ternarylogic_epi64","_mm256_mask_test_epi16_mask","_mm256_mask_test_epi32_mask","_mm256_mask_test_epi64_mask","_mm256_mask_test_epi8_mask","_mm256_mask_testn_epi16_mask","_mm256_mask_testn_epi32_mask","_mm256_mask_testn_epi64_mask","_mm256_mask_testn_epi8_mask","_mm256_mask_unpackhi_epi16","_mm256_mask_unpackhi_epi32","_mm256_mask_unpackhi_epi64","_mm256_mask_unpackhi_epi8","_mm256_mask_unpackhi_pd","_mm256_mask_unpackhi_ps","_mm256_mask_unpacklo_epi16","_mm256_mask_unpacklo_epi32","_mm256_mask_unpacklo_epi64","_mm256_mask_unpacklo_epi8","_mm256_mask_unpacklo_pd","_mm256_mask_unpacklo_ps","_mm256_mask_xor_epi32","_mm256_mask_xor_epi64","_mm256_maskload_epi32","_mm256_maskload_epi64","_mm256_maskload_pd","_mm256_maskload_ps","_mm256_maskstore_epi32","_mm256_maskstore_epi64","_mm256_maskstore_pd","_mm256_maskstore_ps","_mm256_maskz_abs_epi16","_mm256_maskz_abs_epi32","_mm256_maskz_abs_epi64","_mm256_maskz_abs_epi8","_mm256_maskz_add_epi16","_mm256_maskz_add_epi32","_mm256_maskz_add_epi64","_mm256_maskz_add_epi8","_mm256_maskz_add_pd","_mm256_maskz_add_ps","_mm256_maskz_adds_epi16","_mm256_maskz_adds_epi8","_mm256_maskz_adds_epu16","_mm256_maskz_adds_epu8","_mm256_maskz_alignr_epi32","_mm256_maskz_alignr_epi64","_mm256_maskz_alignr_epi8","_mm256_maskz_and_epi32","_mm256_maskz_and_epi64","_mm256_maskz_andnot_epi32","_mm256_maskz_andnot_epi64","_mm256_maskz_avg_epu16","_mm256_maskz_avg_epu8","_mm256_maskz_broadcast_f32x4","_mm256_maskz_broadcast_i32x4","_mm256_maskz_broadcastb_epi8","_mm256_maskz_broadcastd_epi32","_mm256_maskz_broadcastq_epi64","_mm256_maskz_broadcastsd_pd","_mm256_maskz_broadcastss_ps","_mm256_maskz_broadcastw_epi16","_mm256_maskz_compress_epi16","_mm256_maskz_compress_epi32","_mm256_maskz_compress_epi64","_mm256_maskz_compress_epi8","_mm256_maskz_compress_pd","_mm256_maskz_compress_ps","_mm256_maskz_conflict_epi32","_mm256_maskz_conflict_epi64","_mm256_maskz_cvt_roundps_ph","_mm256_maskz_cvtepi16_epi32","_mm256_maskz_cvtepi16_epi64","_mm256_maskz_cvtepi16_epi8","_mm256_maskz_cvtepi32_epi16","_mm256_maskz_cvtepi32_epi64","_mm256_maskz_cvtepi32_epi8","_mm256_maskz_cvtepi32_pd","_mm256_maskz_cvtepi32_ps","_mm256_maskz_cvtepi64_epi16","_mm256_maskz_cvtepi64_epi32","_mm256_maskz_cvtepi64_epi8","_mm256_maskz_cvtepi8_epi16","_mm256_maskz_cvtepi8_epi32","_mm256_maskz_cvtepi8_epi64","_mm256_maskz_cvtepu16_epi32","_mm256_maskz_cvtepu16_epi64","_mm256_maskz_cvtepu32_epi64","_mm256_maskz_cvtepu32_pd","_mm256_maskz_cvtepu8_epi16","_mm256_maskz_cvtepu8_epi32","_mm256_maskz_cvtepu8_epi64","_mm256_maskz_cvtne2ps_pbh","_mm256_maskz_cvtneps_pbh","_mm256_maskz_cvtpd_epi32","_mm256_maskz_cvtpd_epu32","_mm256_maskz_cvtpd_ps","_mm256_maskz_cvtph_ps","_mm256_maskz_cvtps_epi32","_mm256_maskz_cvtps_epu32","_mm256_maskz_cvtps_ph","_mm256_maskz_cvtsepi16_epi8","_mm256_maskz_cvtsepi32_epi16","_mm256_maskz_cvtsepi32_epi8","_mm256_maskz_cvtsepi64_epi16","_mm256_maskz_cvtsepi64_epi32","_mm256_maskz_cvtsepi64_epi8","_mm256_maskz_cvttpd_epi32","_mm256_maskz_cvttpd_epu32","_mm256_maskz_cvttps_epi32","_mm256_maskz_cvttps_epu32","_mm256_maskz_cvtusepi16_epi8","_mm256_maskz_cvtusepi32_epi16","_mm256_maskz_cvtusepi32_epi8","_mm256_maskz_cvtusepi64_epi16","_mm256_maskz_cvtusepi64_epi32","_mm256_maskz_cvtusepi64_epi8","_mm256_maskz_dbsad_epu8","_mm256_maskz_div_pd","_mm256_maskz_div_ps","_mm256_maskz_dpbf16_ps","_mm256_maskz_dpbusd_epi32","_mm256_maskz_dpbusds_epi32","_mm256_maskz_dpwssd_epi32","_mm256_maskz_dpwssds_epi32","_mm256_maskz_expand_epi16","_mm256_maskz_expand_epi32","_mm256_maskz_expand_epi64","_mm256_maskz_expand_epi8","_mm256_maskz_expand_pd","_mm256_maskz_expand_ps","_mm256_maskz_expandloadu_epi16","_mm256_maskz_expandloadu_epi32","_mm256_maskz_expandloadu_epi64","_mm256_maskz_expandloadu_epi8","_mm256_maskz_expandloadu_pd","_mm256_maskz_expandloadu_ps","_mm256_maskz_extractf32x4_ps","_mm256_maskz_extracti32x4_epi32","_mm256_maskz_fixupimm_pd","_mm256_maskz_fixupimm_ps","_mm256_maskz_fmadd_pd","_mm256_maskz_fmadd_ps","_mm256_maskz_fmaddsub_pd","_mm256_maskz_fmaddsub_ps","_mm256_maskz_fmsub_pd","_mm256_maskz_fmsub_ps","_mm256_maskz_fmsubadd_pd","_mm256_maskz_fmsubadd_ps","_mm256_maskz_fnmadd_pd","_mm256_maskz_fnmadd_ps","_mm256_maskz_fnmsub_pd","_mm256_maskz_fnmsub_ps","_mm256_maskz_getexp_pd","_mm256_maskz_getexp_ps","_mm256_maskz_getmant_pd","_mm256_maskz_getmant_ps","_mm256_maskz_gf2p8affine_epi64_epi8","_mm256_maskz_gf2p8affineinv_epi64_epi8","_mm256_maskz_gf2p8mul_epi8","_mm256_maskz_insertf32x4","_mm256_maskz_inserti32x4","_mm256_maskz_load_epi32","_mm256_maskz_load_epi64","_mm256_maskz_load_pd","_mm256_maskz_load_ps","_mm256_maskz_loadu_epi16","_mm256_maskz_loadu_epi32","_mm256_maskz_loadu_epi64","_mm256_maskz_loadu_epi8","_mm256_maskz_loadu_pd","_mm256_maskz_loadu_ps","_mm256_maskz_lzcnt_epi32","_mm256_maskz_lzcnt_epi64","_mm256_maskz_madd_epi16","_mm256_maskz_maddubs_epi16","_mm256_maskz_max_epi16","_mm256_maskz_max_epi32","_mm256_maskz_max_epi64","_mm256_maskz_max_epi8","_mm256_maskz_max_epu16","_mm256_maskz_max_epu32","_mm256_maskz_max_epu64","_mm256_maskz_max_epu8","_mm256_maskz_max_pd","_mm256_maskz_max_ps","_mm256_maskz_min_epi16","_mm256_maskz_min_epi32","_mm256_maskz_min_epi64","_mm256_maskz_min_epi8","_mm256_maskz_min_epu16","_mm256_maskz_min_epu32","_mm256_maskz_min_epu64","_mm256_maskz_min_epu8","_mm256_maskz_min_pd","_mm256_maskz_min_ps","_mm256_maskz_mov_epi16","_mm256_maskz_mov_epi32","_mm256_maskz_mov_epi64","_mm256_maskz_mov_epi8","_mm256_maskz_mov_pd","_mm256_maskz_mov_ps","_mm256_maskz_movedup_pd","_mm256_maskz_movehdup_ps","_mm256_maskz_moveldup_ps","_mm256_maskz_mul_epi32","_mm256_maskz_mul_epu32","_mm256_maskz_mul_pd","_mm256_maskz_mul_ps","_mm256_maskz_mulhi_epi16","_mm256_maskz_mulhi_epu16","_mm256_maskz_mulhrs_epi16","_mm256_maskz_mullo_epi16","_mm256_maskz_mullo_epi32","_mm256_maskz_multishift_epi64_epi8","_mm256_maskz_or_epi32","_mm256_maskz_or_epi64","_mm256_maskz_packs_epi16","_mm256_maskz_packs_epi32","_mm256_maskz_packus_epi16","_mm256_maskz_packus_epi32","_mm256_maskz_permute_pd","_mm256_maskz_permute_ps","_mm256_maskz_permutevar_pd","_mm256_maskz_permutevar_ps","_mm256_maskz_permutex2var_epi16","_mm256_maskz_permutex2var_epi32","_mm256_maskz_permutex2var_epi64","_mm256_maskz_permutex2var_epi8","_mm256_maskz_permutex2var_pd","_mm256_maskz_permutex2var_ps","_mm256_maskz_permutex_epi64","_mm256_maskz_permutex_pd","_mm256_maskz_permutexvar_epi16","_mm256_maskz_permutexvar_epi32","_mm256_maskz_permutexvar_epi64","_mm256_maskz_permutexvar_epi8","_mm256_maskz_permutexvar_pd","_mm256_maskz_permutexvar_ps","_mm256_maskz_popcnt_epi16","_mm256_maskz_popcnt_epi32","_mm256_maskz_popcnt_epi64","_mm256_maskz_popcnt_epi8","_mm256_maskz_rcp14_pd","_mm256_maskz_rcp14_ps","_mm256_maskz_rol_epi32","_mm256_maskz_rol_epi64","_mm256_maskz_rolv_epi32","_mm256_maskz_rolv_epi64","_mm256_maskz_ror_epi32","_mm256_maskz_ror_epi64","_mm256_maskz_rorv_epi32","_mm256_maskz_rorv_epi64","_mm256_maskz_roundscale_pd","_mm256_maskz_roundscale_ps","_mm256_maskz_rsqrt14_pd","_mm256_maskz_rsqrt14_ps","_mm256_maskz_scalef_pd","_mm256_maskz_scalef_ps","_mm256_maskz_set1_epi16","_mm256_maskz_set1_epi32","_mm256_maskz_set1_epi64","_mm256_maskz_set1_epi8","_mm256_maskz_shldi_epi16","_mm256_maskz_shldi_epi32","_mm256_maskz_shldi_epi64","_mm256_maskz_shldv_epi16","_mm256_maskz_shldv_epi32","_mm256_maskz_shldv_epi64","_mm256_maskz_shrdi_epi16","_mm256_maskz_shrdi_epi32","_mm256_maskz_shrdi_epi64","_mm256_maskz_shrdv_epi16","_mm256_maskz_shrdv_epi32","_mm256_maskz_shrdv_epi64","_mm256_maskz_shuffle_epi32","_mm256_maskz_shuffle_epi8","_mm256_maskz_shuffle_f32x4","_mm256_maskz_shuffle_f64x2","_mm256_maskz_shuffle_i32x4","_mm256_maskz_shuffle_i64x2","_mm256_maskz_shuffle_pd","_mm256_maskz_shuffle_ps","_mm256_maskz_shufflehi_epi16","_mm256_maskz_shufflelo_epi16","_mm256_maskz_sll_epi16","_mm256_maskz_sll_epi32","_mm256_maskz_sll_epi64","_mm256_maskz_slli_epi16","_mm256_maskz_slli_epi32","_mm256_maskz_slli_epi64","_mm256_maskz_sllv_epi16","_mm256_maskz_sllv_epi32","_mm256_maskz_sllv_epi64","_mm256_maskz_sqrt_pd","_mm256_maskz_sqrt_ps","_mm256_maskz_sra_epi16","_mm256_maskz_sra_epi32","_mm256_maskz_sra_epi64","_mm256_maskz_srai_epi16","_mm256_maskz_srai_epi32","_mm256_maskz_srai_epi64","_mm256_maskz_srav_epi16","_mm256_maskz_srav_epi32","_mm256_maskz_srav_epi64","_mm256_maskz_srl_epi16","_mm256_maskz_srl_epi32","_mm256_maskz_srl_epi64","_mm256_maskz_srli_epi16","_mm256_maskz_srli_epi32","_mm256_maskz_srli_epi64","_mm256_maskz_srlv_epi16","_mm256_maskz_srlv_epi32","_mm256_maskz_srlv_epi64","_mm256_maskz_sub_epi16","_mm256_maskz_sub_epi32","_mm256_maskz_sub_epi64","_mm256_maskz_sub_epi8","_mm256_maskz_sub_pd","_mm256_maskz_sub_ps","_mm256_maskz_subs_epi16","_mm256_maskz_subs_epi8","_mm256_maskz_subs_epu16","_mm256_maskz_subs_epu8","_mm256_maskz_ternarylogic_epi32","_mm256_maskz_ternarylogic_epi64","_mm256_maskz_unpackhi_epi16","_mm256_maskz_unpackhi_epi32","_mm256_maskz_unpackhi_epi64","_mm256_maskz_unpackhi_epi8","_mm256_maskz_unpackhi_pd","_mm256_maskz_unpackhi_ps","_mm256_maskz_unpacklo_epi16","_mm256_maskz_unpacklo_epi32","_mm256_maskz_unpacklo_epi64","_mm256_maskz_unpacklo_epi8","_mm256_maskz_unpacklo_pd","_mm256_maskz_unpacklo_ps","_mm256_maskz_xor_epi32","_mm256_maskz_xor_epi64","_mm256_max_epi16","_mm256_max_epi32","_mm256_max_epi64","_mm256_max_epi8","_mm256_max_epu16","_mm256_max_epu32","_mm256_max_epu64","_mm256_max_epu8","_mm256_max_pd","_mm256_max_ps","_mm256_min_epi16","_mm256_min_epi32","_mm256_min_epi64","_mm256_min_epi8","_mm256_min_epu16","_mm256_min_epu32","_mm256_min_epu64","_mm256_min_epu8","_mm256_min_pd","_mm256_min_ps","_mm256_movedup_pd","_mm256_movehdup_ps","_mm256_moveldup_ps","_mm256_movemask_epi8","_mm256_movemask_pd","_mm256_movemask_ps","_mm256_movepi16_mask","_mm256_movepi8_mask","_mm256_movm_epi16","_mm256_movm_epi8","_mm256_mpsadbw_epu8","_mm256_mul_epi32","_mm256_mul_epu32","_mm256_mul_pd","_mm256_mul_ps","_mm256_mulhi_epi16","_mm256_mulhi_epu16","_mm256_mulhrs_epi16","_mm256_mullo_epi16","_mm256_mullo_epi32","_mm256_multishift_epi64_epi8","_mm256_or_epi32","_mm256_or_epi64","_mm256_or_pd","_mm256_or_ps","_mm256_or_si256","_mm256_packs_epi16","_mm256_packs_epi32","_mm256_packus_epi16","_mm256_packus_epi32","_mm256_permute2f128_pd","_mm256_permute2f128_ps","_mm256_permute2f128_si256","_mm256_permute2x128_si256","_mm256_permute4x64_epi64","_mm256_permute4x64_pd","_mm256_permute_pd","_mm256_permute_ps","_mm256_permutevar8x32_epi32","_mm256_permutevar8x32_ps","_mm256_permutevar_pd","_mm256_permutevar_ps","_mm256_permutex2var_epi16","_mm256_permutex2var_epi32","_mm256_permutex2var_epi64","_mm256_permutex2var_epi8","_mm256_permutex2var_pd","_mm256_permutex2var_ps","_mm256_permutex_epi64","_mm256_permutex_pd","_mm256_permutexvar_epi16","_mm256_permutexvar_epi32","_mm256_permutexvar_epi64","_mm256_permutexvar_epi8","_mm256_permutexvar_pd","_mm256_permutexvar_ps","_mm256_popcnt_epi16","_mm256_popcnt_epi32","_mm256_popcnt_epi64","_mm256_popcnt_epi8","_mm256_rcp14_pd","_mm256_rcp14_ps","_mm256_rcp_ps","_mm256_rol_epi32","_mm256_rol_epi64","_mm256_rolv_epi32","_mm256_rolv_epi64","_mm256_ror_epi32","_mm256_ror_epi64","_mm256_rorv_epi32","_mm256_rorv_epi64","_mm256_round_pd","_mm256_round_ps","_mm256_roundscale_pd","_mm256_roundscale_ps","_mm256_rsqrt_ps","_mm256_sad_epu8","_mm256_scalef_pd","_mm256_scalef_ps","_mm256_set1_epi16","_mm256_set1_epi32","_mm256_set1_epi64x","_mm256_set1_epi8","_mm256_set1_pd","_mm256_set1_ps","_mm256_set_epi16","_mm256_set_epi32","_mm256_set_epi64x","_mm256_set_epi8","_mm256_set_m128","_mm256_set_m128d","_mm256_set_m128i","_mm256_set_pd","_mm256_set_ps","_mm256_setr_epi16","_mm256_setr_epi32","_mm256_setr_epi64x","_mm256_setr_epi8","_mm256_setr_m128","_mm256_setr_m128d","_mm256_setr_m128i","_mm256_setr_pd","_mm256_setr_ps","_mm256_setzero_pd","_mm256_setzero_ps","_mm256_setzero_si256","_mm256_shldi_epi16","_mm256_shldi_epi32","_mm256_shldi_epi64","_mm256_shldv_epi16","_mm256_shldv_epi32","_mm256_shldv_epi64","_mm256_shrdi_epi16","_mm256_shrdi_epi32","_mm256_shrdi_epi64","_mm256_shrdv_epi16","_mm256_shrdv_epi32","_mm256_shrdv_epi64","_mm256_shuffle_epi32","_mm256_shuffle_epi8","_mm256_shuffle_f32x4","_mm256_shuffle_f64x2","_mm256_shuffle_i32x4","_mm256_shuffle_i64x2","_mm256_shuffle_pd","_mm256_shuffle_ps","_mm256_shufflehi_epi16","_mm256_shufflelo_epi16","_mm256_sign_epi16","_mm256_sign_epi32","_mm256_sign_epi8","_mm256_sll_epi16","_mm256_sll_epi32","_mm256_sll_epi64","_mm256_slli_epi16","_mm256_slli_epi32","_mm256_slli_epi64","_mm256_slli_si256","_mm256_sllv_epi16","_mm256_sllv_epi32","_mm256_sllv_epi64","_mm256_sqrt_pd","_mm256_sqrt_ps","_mm256_sra_epi16","_mm256_sra_epi32","_mm256_sra_epi64","_mm256_srai_epi16","_mm256_srai_epi32","_mm256_srai_epi64","_mm256_srav_epi16","_mm256_srav_epi32","_mm256_srav_epi64","_mm256_srl_epi16","_mm256_srl_epi32","_mm256_srl_epi64","_mm256_srli_epi16","_mm256_srli_epi32","_mm256_srli_epi64","_mm256_srli_si256","_mm256_srlv_epi16","_mm256_srlv_epi32","_mm256_srlv_epi64","_mm256_store_epi32","_mm256_store_epi64","_mm256_store_pd","_mm256_store_ps","_mm256_store_si256","_mm256_storeu2_m128","_mm256_storeu2_m128d","_mm256_storeu2_m128i","_mm256_storeu_epi16","_mm256_storeu_epi32","_mm256_storeu_epi64","_mm256_storeu_epi8","_mm256_storeu_pd","_mm256_storeu_ps","_mm256_storeu_si256","_mm256_stream_pd","_mm256_stream_ps","_mm256_stream_si256","_mm256_sub_epi16","_mm256_sub_epi32","_mm256_sub_epi64","_mm256_sub_epi8","_mm256_sub_pd","_mm256_sub_ps","_mm256_subs_epi16","_mm256_subs_epi8","_mm256_subs_epu16","_mm256_subs_epu8","_mm256_ternarylogic_epi32","_mm256_ternarylogic_epi64","_mm256_test_epi16_mask","_mm256_test_epi32_mask","_mm256_test_epi64_mask","_mm256_test_epi8_mask","_mm256_testc_pd","_mm256_testc_ps","_mm256_testc_si256","_mm256_testn_epi16_mask","_mm256_testn_epi32_mask","_mm256_testn_epi64_mask","_mm256_testn_epi8_mask","_mm256_testnzc_pd","_mm256_testnzc_ps","_mm256_testnzc_si256","_mm256_testz_pd","_mm256_testz_ps","_mm256_testz_si256","_mm256_undefined_pd","_mm256_undefined_ps","_mm256_undefined_si256","_mm256_unpackhi_epi16","_mm256_unpackhi_epi32","_mm256_unpackhi_epi64","_mm256_unpackhi_epi8","_mm256_unpackhi_pd","_mm256_unpackhi_ps","_mm256_unpacklo_epi16","_mm256_unpacklo_epi32","_mm256_unpacklo_epi64","_mm256_unpacklo_epi8","_mm256_unpacklo_pd","_mm256_unpacklo_ps","_mm256_xor_epi32","_mm256_xor_epi64","_mm256_xor_pd","_mm256_xor_ps","_mm256_xor_si256","_mm256_zeroall","_mm256_zeroupper","_mm256_zextpd128_pd256","_mm256_zextps128_ps256","_mm256_zextsi128_si256","_mm512_abs_epi16","_mm512_abs_epi32","_mm512_abs_epi64","_mm512_abs_epi8","_mm512_abs_pd","_mm512_abs_ps","_mm512_add_epi16","_mm512_add_epi32","_mm512_add_epi64","_mm512_add_epi8","_mm512_add_pd","_mm512_add_ps","_mm512_add_round_pd","_mm512_add_round_ps","_mm512_adds_epi16","_mm512_adds_epi8","_mm512_adds_epu16","_mm512_adds_epu8","_mm512_aesdec_epi128","_mm512_aesdeclast_epi128","_mm512_aesenc_epi128","_mm512_aesenclast_epi128","_mm512_alignr_epi32","_mm512_alignr_epi64","_mm512_alignr_epi8","_mm512_and_epi32","_mm512_and_epi64","_mm512_and_si512","_mm512_andnot_epi32","_mm512_andnot_epi64","_mm512_andnot_si512","_mm512_avg_epu16","_mm512_avg_epu8","_mm512_bitshuffle_epi64_mask","_mm512_broadcast_f32x4","_mm512_broadcast_f64x4","_mm512_broadcast_i32x4","_mm512_broadcast_i64x4","_mm512_broadcastb_epi8","_mm512_broadcastd_epi32","_mm512_broadcastmb_epi64","_mm512_broadcastmw_epi32","_mm512_broadcastq_epi64","_mm512_broadcastsd_pd","_mm512_broadcastss_ps","_mm512_broadcastw_epi16","_mm512_bslli_epi128","_mm512_bsrli_epi128","_mm512_castpd128_pd512","_mm512_castpd256_pd512","_mm512_castpd512_pd128","_mm512_castpd512_pd256","_mm512_castpd_ps","_mm512_castpd_si512","_mm512_castps128_ps512","_mm512_castps256_ps512","_mm512_castps512_ps128","_mm512_castps512_ps256","_mm512_castps_pd","_mm512_castps_si512","_mm512_castsi128_si512","_mm512_castsi256_si512","_mm512_castsi512_pd","_mm512_castsi512_ps","_mm512_castsi512_si128","_mm512_castsi512_si256","_mm512_clmulepi64_epi128","_mm512_cmp_epi16_mask","_mm512_cmp_epi32_mask","_mm512_cmp_epi64_mask","_mm512_cmp_epi8_mask","_mm512_cmp_epu16_mask","_mm512_cmp_epu32_mask","_mm512_cmp_epu64_mask","_mm512_cmp_epu8_mask","_mm512_cmp_pd_mask","_mm512_cmp_ps_mask","_mm512_cmp_round_pd_mask","_mm512_cmp_round_ps_mask","_mm512_cmpeq_epi16_mask","_mm512_cmpeq_epi32_mask","_mm512_cmpeq_epi64_mask","_mm512_cmpeq_epi8_mask","_mm512_cmpeq_epu16_mask","_mm512_cmpeq_epu32_mask","_mm512_cmpeq_epu64_mask","_mm512_cmpeq_epu8_mask","_mm512_cmpeq_pd_mask","_mm512_cmpeq_ps_mask","_mm512_cmpge_epi16_mask","_mm512_cmpge_epi32_mask","_mm512_cmpge_epi64_mask","_mm512_cmpge_epi8_mask","_mm512_cmpge_epu16_mask","_mm512_cmpge_epu32_mask","_mm512_cmpge_epu64_mask","_mm512_cmpge_epu8_mask","_mm512_cmpgt_epi16_mask","_mm512_cmpgt_epi32_mask","_mm512_cmpgt_epi64_mask","_mm512_cmpgt_epi8_mask","_mm512_cmpgt_epu16_mask","_mm512_cmpgt_epu32_mask","_mm512_cmpgt_epu64_mask","_mm512_cmpgt_epu8_mask","_mm512_cmple_epi16_mask","_mm512_cmple_epi32_mask","_mm512_cmple_epi64_mask","_mm512_cmple_epi8_mask","_mm512_cmple_epu16_mask","_mm512_cmple_epu32_mask","_mm512_cmple_epu64_mask","_mm512_cmple_epu8_mask","_mm512_cmple_pd_mask","_mm512_cmple_ps_mask","_mm512_cmplt_epi16_mask","_mm512_cmplt_epi32_mask","_mm512_cmplt_epi64_mask","_mm512_cmplt_epi8_mask","_mm512_cmplt_epu16_mask","_mm512_cmplt_epu32_mask","_mm512_cmplt_epu64_mask","_mm512_cmplt_epu8_mask","_mm512_cmplt_pd_mask","_mm512_cmplt_ps_mask","_mm512_cmpneq_epi16_mask","_mm512_cmpneq_epi32_mask","_mm512_cmpneq_epi64_mask","_mm512_cmpneq_epi8_mask","_mm512_cmpneq_epu16_mask","_mm512_cmpneq_epu32_mask","_mm512_cmpneq_epu64_mask","_mm512_cmpneq_epu8_mask","_mm512_cmpneq_pd_mask","_mm512_cmpneq_ps_mask","_mm512_cmpnle_pd_mask","_mm512_cmpnle_ps_mask","_mm512_cmpnlt_pd_mask","_mm512_cmpnlt_ps_mask","_mm512_cmpord_pd_mask","_mm512_cmpord_ps_mask","_mm512_cmpunord_pd_mask","_mm512_cmpunord_ps_mask","_mm512_conflict_epi32","_mm512_conflict_epi64","_mm512_cvt_roundepi32_ps","_mm512_cvt_roundepu32_ps","_mm512_cvt_roundpd_epi32","_mm512_cvt_roundpd_epu32","_mm512_cvt_roundpd_ps","_mm512_cvt_roundph_ps","_mm512_cvt_roundps_epi32","_mm512_cvt_roundps_epu32","_mm512_cvt_roundps_pd","_mm512_cvt_roundps_ph","_mm512_cvtepi16_epi32","_mm512_cvtepi16_epi64","_mm512_cvtepi16_epi8","_mm512_cvtepi32_epi16","_mm512_cvtepi32_epi64","_mm512_cvtepi32_epi8","_mm512_cvtepi32_pd","_mm512_cvtepi32_ps","_mm512_cvtepi32lo_pd","_mm512_cvtepi64_epi16","_mm512_cvtepi64_epi32","_mm512_cvtepi64_epi8","_mm512_cvtepi8_epi16","_mm512_cvtepi8_epi32","_mm512_cvtepi8_epi64","_mm512_cvtepu16_epi32","_mm512_cvtepu16_epi64","_mm512_cvtepu32_epi64","_mm512_cvtepu32_pd","_mm512_cvtepu32_ps","_mm512_cvtepu32lo_pd","_mm512_cvtepu8_epi16","_mm512_cvtepu8_epi32","_mm512_cvtepu8_epi64","_mm512_cvtne2ps_pbh","_mm512_cvtneps_pbh","_mm512_cvtpd_epi32","_mm512_cvtpd_epu32","_mm512_cvtpd_ps","_mm512_cvtpd_pslo","_mm512_cvtph_ps","_mm512_cvtps_epi32","_mm512_cvtps_epu32","_mm512_cvtps_pd","_mm512_cvtps_ph","_mm512_cvtpslo_pd","_mm512_cvtsepi16_epi8","_mm512_cvtsepi32_epi16","_mm512_cvtsepi32_epi8","_mm512_cvtsepi64_epi16","_mm512_cvtsepi64_epi32","_mm512_cvtsepi64_epi8","_mm512_cvtsi512_si32","_mm512_cvtt_roundpd_epi32","_mm512_cvtt_roundpd_epu32","_mm512_cvtt_roundps_epi32","_mm512_cvtt_roundps_epu32","_mm512_cvttpd_epi32","_mm512_cvttpd_epu32","_mm512_cvttps_epi32","_mm512_cvttps_epu32","_mm512_cvtusepi16_epi8","_mm512_cvtusepi32_epi16","_mm512_cvtusepi32_epi8","_mm512_cvtusepi64_epi16","_mm512_cvtusepi64_epi32","_mm512_cvtusepi64_epi8","_mm512_dbsad_epu8","_mm512_div_pd","_mm512_div_ps","_mm512_div_round_pd","_mm512_div_round_ps","_mm512_dpbf16_ps","_mm512_dpbusd_epi32","_mm512_dpbusds_epi32","_mm512_dpwssd_epi32","_mm512_dpwssds_epi32","_mm512_extractf32x4_ps","_mm512_extractf64x4_pd","_mm512_extracti32x4_epi32","_mm512_extracti64x4_epi64","_mm512_fixupimm_pd","_mm512_fixupimm_ps","_mm512_fixupimm_round_pd","_mm512_fixupimm_round_ps","_mm512_fmadd_pd","_mm512_fmadd_ps","_mm512_fmadd_round_pd","_mm512_fmadd_round_ps","_mm512_fmaddsub_pd","_mm512_fmaddsub_ps","_mm512_fmaddsub_round_pd","_mm512_fmaddsub_round_ps","_mm512_fmsub_pd","_mm512_fmsub_ps","_mm512_fmsub_round_pd","_mm512_fmsub_round_ps","_mm512_fmsubadd_pd","_mm512_fmsubadd_ps","_mm512_fmsubadd_round_pd","_mm512_fmsubadd_round_ps","_mm512_fnmadd_pd","_mm512_fnmadd_ps","_mm512_fnmadd_round_pd","_mm512_fnmadd_round_ps","_mm512_fnmsub_pd","_mm512_fnmsub_ps","_mm512_fnmsub_round_pd","_mm512_fnmsub_round_ps","_mm512_getexp_pd","_mm512_getexp_ps","_mm512_getexp_round_pd","_mm512_getexp_round_ps","_mm512_getmant_pd","_mm512_getmant_ps","_mm512_getmant_round_pd","_mm512_getmant_round_ps","_mm512_gf2p8affine_epi64_epi8","_mm512_gf2p8affineinv_epi64_epi8","_mm512_gf2p8mul_epi8","_mm512_i32gather_epi32","_mm512_i32gather_epi64","_mm512_i32gather_pd","_mm512_i32gather_ps","_mm512_i32scatter_epi32","_mm512_i32scatter_epi64","_mm512_i32scatter_pd","_mm512_i32scatter_ps","_mm512_i64gather_epi32","_mm512_i64gather_epi64","_mm512_i64gather_pd","_mm512_i64gather_ps","_mm512_i64scatter_epi32","_mm512_i64scatter_epi64","_mm512_i64scatter_pd","_mm512_i64scatter_ps","_mm512_insertf32x4","_mm512_insertf64x4","_mm512_inserti32x4","_mm512_inserti64x4","_mm512_int2mask","_mm512_kand","_mm512_kandn","_mm512_kmov","_mm512_knot","_mm512_kor","_mm512_kortestc","_mm512_kunpackb","_mm512_kxnor","_mm512_kxor","_mm512_load_epi32","_mm512_load_epi64","_mm512_load_pd","_mm512_load_ps","_mm512_load_si512","_mm512_loadu_epi16","_mm512_loadu_epi32","_mm512_loadu_epi64","_mm512_loadu_epi8","_mm512_loadu_pd","_mm512_loadu_ps","_mm512_loadu_si512","_mm512_lzcnt_epi32","_mm512_lzcnt_epi64","_mm512_madd52hi_epu64","_mm512_madd52lo_epu64","_mm512_madd_epi16","_mm512_maddubs_epi16","_mm512_mask2_permutex2var_epi16","_mm512_mask2_permutex2var_epi32","_mm512_mask2_permutex2var_epi64","_mm512_mask2_permutex2var_epi8","_mm512_mask2_permutex2var_pd","_mm512_mask2_permutex2var_ps","_mm512_mask2int","_mm512_mask3_fmadd_pd","_mm512_mask3_fmadd_ps","_mm512_mask3_fmadd_round_pd","_mm512_mask3_fmadd_round_ps","_mm512_mask3_fmaddsub_pd","_mm512_mask3_fmaddsub_ps","_mm512_mask3_fmaddsub_round_pd","_mm512_mask3_fmaddsub_round_ps","_mm512_mask3_fmsub_pd","_mm512_mask3_fmsub_ps","_mm512_mask3_fmsub_round_pd","_mm512_mask3_fmsub_round_ps","_mm512_mask3_fmsubadd_pd","_mm512_mask3_fmsubadd_ps","_mm512_mask3_fmsubadd_round_pd","_mm512_mask3_fmsubadd_round_ps","_mm512_mask3_fnmadd_pd","_mm512_mask3_fnmadd_ps","_mm512_mask3_fnmadd_round_pd","_mm512_mask3_fnmadd_round_ps","_mm512_mask3_fnmsub_pd","_mm512_mask3_fnmsub_ps","_mm512_mask3_fnmsub_round_pd","_mm512_mask3_fnmsub_round_ps","_mm512_mask_abs_epi16","_mm512_mask_abs_epi32","_mm512_mask_abs_epi64","_mm512_mask_abs_epi8","_mm512_mask_abs_pd","_mm512_mask_abs_ps","_mm512_mask_add_epi16","_mm512_mask_add_epi32","_mm512_mask_add_epi64","_mm512_mask_add_epi8","_mm512_mask_add_pd","_mm512_mask_add_ps","_mm512_mask_add_round_pd","_mm512_mask_add_round_ps","_mm512_mask_adds_epi16","_mm512_mask_adds_epi8","_mm512_mask_adds_epu16","_mm512_mask_adds_epu8","_mm512_mask_alignr_epi32","_mm512_mask_alignr_epi64","_mm512_mask_alignr_epi8","_mm512_mask_and_epi32","_mm512_mask_and_epi64","_mm512_mask_andnot_epi32","_mm512_mask_andnot_epi64","_mm512_mask_avg_epu16","_mm512_mask_avg_epu8","_mm512_mask_bitshuffle_epi64_mask","_mm512_mask_blend_epi16","_mm512_mask_blend_epi32","_mm512_mask_blend_epi64","_mm512_mask_blend_epi8","_mm512_mask_blend_pd","_mm512_mask_blend_ps","_mm512_mask_broadcast_f32x4","_mm512_mask_broadcast_f64x4","_mm512_mask_broadcast_i32x4","_mm512_mask_broadcast_i64x4","_mm512_mask_broadcastb_epi8","_mm512_mask_broadcastd_epi32","_mm512_mask_broadcastq_epi64","_mm512_mask_broadcastsd_pd","_mm512_mask_broadcastss_ps","_mm512_mask_broadcastw_epi16","_mm512_mask_cmp_epi16_mask","_mm512_mask_cmp_epi32_mask","_mm512_mask_cmp_epi64_mask","_mm512_mask_cmp_epi8_mask","_mm512_mask_cmp_epu16_mask","_mm512_mask_cmp_epu32_mask","_mm512_mask_cmp_epu64_mask","_mm512_mask_cmp_epu8_mask","_mm512_mask_cmp_pd_mask","_mm512_mask_cmp_ps_mask","_mm512_mask_cmp_round_pd_mask","_mm512_mask_cmp_round_ps_mask","_mm512_mask_cmpeq_epi16_mask","_mm512_mask_cmpeq_epi32_mask","_mm512_mask_cmpeq_epi64_mask","_mm512_mask_cmpeq_epi8_mask","_mm512_mask_cmpeq_epu16_mask","_mm512_mask_cmpeq_epu32_mask","_mm512_mask_cmpeq_epu64_mask","_mm512_mask_cmpeq_epu8_mask","_mm512_mask_cmpeq_pd_mask","_mm512_mask_cmpeq_ps_mask","_mm512_mask_cmpge_epi16_mask","_mm512_mask_cmpge_epi32_mask","_mm512_mask_cmpge_epi64_mask","_mm512_mask_cmpge_epi8_mask","_mm512_mask_cmpge_epu16_mask","_mm512_mask_cmpge_epu32_mask","_mm512_mask_cmpge_epu64_mask","_mm512_mask_cmpge_epu8_mask","_mm512_mask_cmpgt_epi16_mask","_mm512_mask_cmpgt_epi32_mask","_mm512_mask_cmpgt_epi64_mask","_mm512_mask_cmpgt_epi8_mask","_mm512_mask_cmpgt_epu16_mask","_mm512_mask_cmpgt_epu32_mask","_mm512_mask_cmpgt_epu64_mask","_mm512_mask_cmpgt_epu8_mask","_mm512_mask_cmple_epi16_mask","_mm512_mask_cmple_epi32_mask","_mm512_mask_cmple_epi64_mask","_mm512_mask_cmple_epi8_mask","_mm512_mask_cmple_epu16_mask","_mm512_mask_cmple_epu32_mask","_mm512_mask_cmple_epu64_mask","_mm512_mask_cmple_epu8_mask","_mm512_mask_cmple_pd_mask","_mm512_mask_cmple_ps_mask","_mm512_mask_cmplt_epi16_mask","_mm512_mask_cmplt_epi32_mask","_mm512_mask_cmplt_epi64_mask","_mm512_mask_cmplt_epi8_mask","_mm512_mask_cmplt_epu16_mask","_mm512_mask_cmplt_epu32_mask","_mm512_mask_cmplt_epu64_mask","_mm512_mask_cmplt_epu8_mask","_mm512_mask_cmplt_pd_mask","_mm512_mask_cmplt_ps_mask","_mm512_mask_cmpneq_epi16_mask","_mm512_mask_cmpneq_epi32_mask","_mm512_mask_cmpneq_epi64_mask","_mm512_mask_cmpneq_epi8_mask","_mm512_mask_cmpneq_epu16_mask","_mm512_mask_cmpneq_epu32_mask","_mm512_mask_cmpneq_epu64_mask","_mm512_mask_cmpneq_epu8_mask","_mm512_mask_cmpneq_pd_mask","_mm512_mask_cmpneq_ps_mask","_mm512_mask_cmpnle_pd_mask","_mm512_mask_cmpnle_ps_mask","_mm512_mask_cmpnlt_pd_mask","_mm512_mask_cmpnlt_ps_mask","_mm512_mask_cmpord_pd_mask","_mm512_mask_cmpord_ps_mask","_mm512_mask_cmpunord_pd_mask","_mm512_mask_cmpunord_ps_mask","_mm512_mask_compress_epi16","_mm512_mask_compress_epi32","_mm512_mask_compress_epi64","_mm512_mask_compress_epi8","_mm512_mask_compress_pd","_mm512_mask_compress_ps","_mm512_mask_compressstoreu_epi16","_mm512_mask_compressstoreu_epi32","_mm512_mask_compressstoreu_epi64","_mm512_mask_compressstoreu_epi8","_mm512_mask_compressstoreu_pd","_mm512_mask_compressstoreu_ps","_mm512_mask_conflict_epi32","_mm512_mask_conflict_epi64","_mm512_mask_cvt_roundepi32_ps","_mm512_mask_cvt_roundepu32_ps","_mm512_mask_cvt_roundpd_epi32","_mm512_mask_cvt_roundpd_epu32","_mm512_mask_cvt_roundpd_ps","_mm512_mask_cvt_roundph_ps","_mm512_mask_cvt_roundps_epi32","_mm512_mask_cvt_roundps_epu32","_mm512_mask_cvt_roundps_pd","_mm512_mask_cvt_roundps_ph","_mm512_mask_cvtepi16_epi32","_mm512_mask_cvtepi16_epi64","_mm512_mask_cvtepi16_epi8","_mm512_mask_cvtepi16_storeu_epi8","_mm512_mask_cvtepi32_epi16","_mm512_mask_cvtepi32_epi64","_mm512_mask_cvtepi32_epi8","_mm512_mask_cvtepi32_pd","_mm512_mask_cvtepi32_ps","_mm512_mask_cvtepi32_storeu_epi16","_mm512_mask_cvtepi32_storeu_epi8","_mm512_mask_cvtepi32lo_pd","_mm512_mask_cvtepi64_epi16","_mm512_mask_cvtepi64_epi32","_mm512_mask_cvtepi64_epi8","_mm512_mask_cvtepi64_storeu_epi16","_mm512_mask_cvtepi64_storeu_epi32","_mm512_mask_cvtepi64_storeu_epi8","_mm512_mask_cvtepi8_epi16","_mm512_mask_cvtepi8_epi32","_mm512_mask_cvtepi8_epi64","_mm512_mask_cvtepu16_epi32","_mm512_mask_cvtepu16_epi64","_mm512_mask_cvtepu32_epi64","_mm512_mask_cvtepu32_pd","_mm512_mask_cvtepu32_ps","_mm512_mask_cvtepu32lo_pd","_mm512_mask_cvtepu8_epi16","_mm512_mask_cvtepu8_epi32","_mm512_mask_cvtepu8_epi64","_mm512_mask_cvtne2ps_pbh","_mm512_mask_cvtneps_pbh","_mm512_mask_cvtpd_epi32","_mm512_mask_cvtpd_epu32","_mm512_mask_cvtpd_ps","_mm512_mask_cvtpd_pslo","_mm512_mask_cvtph_ps","_mm512_mask_cvtps_epi32","_mm512_mask_cvtps_epu32","_mm512_mask_cvtps_pd","_mm512_mask_cvtps_ph","_mm512_mask_cvtpslo_pd","_mm512_mask_cvtsepi16_epi8","_mm512_mask_cvtsepi16_storeu_epi8","_mm512_mask_cvtsepi32_epi16","_mm512_mask_cvtsepi32_epi8","_mm512_mask_cvtsepi32_storeu_epi16","_mm512_mask_cvtsepi32_storeu_epi8","_mm512_mask_cvtsepi64_epi16","_mm512_mask_cvtsepi64_epi32","_mm512_mask_cvtsepi64_epi8","_mm512_mask_cvtsepi64_storeu_epi16","_mm512_mask_cvtsepi64_storeu_epi32","_mm512_mask_cvtsepi64_storeu_epi8","_mm512_mask_cvtt_roundpd_epi32","_mm512_mask_cvtt_roundpd_epu32","_mm512_mask_cvtt_roundps_epi32","_mm512_mask_cvtt_roundps_epu32","_mm512_mask_cvttpd_epi32","_mm512_mask_cvttpd_epu32","_mm512_mask_cvttps_epi32","_mm512_mask_cvttps_epu32","_mm512_mask_cvtusepi16_epi8","_mm512_mask_cvtusepi16_storeu_epi8","_mm512_mask_cvtusepi32_epi16","_mm512_mask_cvtusepi32_epi8","_mm512_mask_cvtusepi32_storeu_epi16","_mm512_mask_cvtusepi32_storeu_epi8","_mm512_mask_cvtusepi64_epi16","_mm512_mask_cvtusepi64_epi32","_mm512_mask_cvtusepi64_epi8","_mm512_mask_cvtusepi64_storeu_epi16","_mm512_mask_cvtusepi64_storeu_epi32","_mm512_mask_cvtusepi64_storeu_epi8","_mm512_mask_dbsad_epu8","_mm512_mask_div_pd","_mm512_mask_div_ps","_mm512_mask_div_round_pd","_mm512_mask_div_round_ps","_mm512_mask_dpbf16_ps","_mm512_mask_dpbusd_epi32","_mm512_mask_dpbusds_epi32","_mm512_mask_dpwssd_epi32","_mm512_mask_dpwssds_epi32","_mm512_mask_expand_epi16","_mm512_mask_expand_epi32","_mm512_mask_expand_epi64","_mm512_mask_expand_epi8","_mm512_mask_expand_pd","_mm512_mask_expand_ps","_mm512_mask_expandloadu_epi16","_mm512_mask_expandloadu_epi32","_mm512_mask_expandloadu_epi64","_mm512_mask_expandloadu_epi8","_mm512_mask_expandloadu_pd","_mm512_mask_expandloadu_ps","_mm512_mask_extractf32x4_ps","_mm512_mask_extractf64x4_pd","_mm512_mask_extracti32x4_epi32","_mm512_mask_extracti64x4_epi64","_mm512_mask_fixupimm_pd","_mm512_mask_fixupimm_ps","_mm512_mask_fixupimm_round_pd","_mm512_mask_fixupimm_round_ps","_mm512_mask_fmadd_pd","_mm512_mask_fmadd_ps","_mm512_mask_fmadd_round_pd","_mm512_mask_fmadd_round_ps","_mm512_mask_fmaddsub_pd","_mm512_mask_fmaddsub_ps","_mm512_mask_fmaddsub_round_pd","_mm512_mask_fmaddsub_round_ps","_mm512_mask_fmsub_pd","_mm512_mask_fmsub_ps","_mm512_mask_fmsub_round_pd","_mm512_mask_fmsub_round_ps","_mm512_mask_fmsubadd_pd","_mm512_mask_fmsubadd_ps","_mm512_mask_fmsubadd_round_pd","_mm512_mask_fmsubadd_round_ps","_mm512_mask_fnmadd_pd","_mm512_mask_fnmadd_ps","_mm512_mask_fnmadd_round_pd","_mm512_mask_fnmadd_round_ps","_mm512_mask_fnmsub_pd","_mm512_mask_fnmsub_ps","_mm512_mask_fnmsub_round_pd","_mm512_mask_fnmsub_round_ps","_mm512_mask_getexp_pd","_mm512_mask_getexp_ps","_mm512_mask_getexp_round_pd","_mm512_mask_getexp_round_ps","_mm512_mask_getmant_pd","_mm512_mask_getmant_ps","_mm512_mask_getmant_round_pd","_mm512_mask_getmant_round_ps","_mm512_mask_gf2p8affine_epi64_epi8","_mm512_mask_gf2p8affineinv_epi64_epi8","_mm512_mask_gf2p8mul_epi8","_mm512_mask_i32gather_epi32","_mm512_mask_i32gather_epi64","_mm512_mask_i32gather_pd","_mm512_mask_i32gather_ps","_mm512_mask_i32scatter_epi32","_mm512_mask_i32scatter_epi64","_mm512_mask_i32scatter_pd","_mm512_mask_i32scatter_ps","_mm512_mask_i64gather_epi32","_mm512_mask_i64gather_epi64","_mm512_mask_i64gather_pd","_mm512_mask_i64gather_ps","_mm512_mask_i64scatter_epi32","_mm512_mask_i64scatter_epi64","_mm512_mask_i64scatter_pd","_mm512_mask_i64scatter_ps","_mm512_mask_insertf32x4","_mm512_mask_insertf64x4","_mm512_mask_inserti32x4","_mm512_mask_inserti64x4","_mm512_mask_load_epi32","_mm512_mask_load_epi64","_mm512_mask_load_pd","_mm512_mask_load_ps","_mm512_mask_loadu_epi16","_mm512_mask_loadu_epi32","_mm512_mask_loadu_epi64","_mm512_mask_loadu_epi8","_mm512_mask_loadu_pd","_mm512_mask_loadu_ps","_mm512_mask_lzcnt_epi32","_mm512_mask_lzcnt_epi64","_mm512_mask_madd_epi16","_mm512_mask_maddubs_epi16","_mm512_mask_max_epi16","_mm512_mask_max_epi32","_mm512_mask_max_epi64","_mm512_mask_max_epi8","_mm512_mask_max_epu16","_mm512_mask_max_epu32","_mm512_mask_max_epu64","_mm512_mask_max_epu8","_mm512_mask_max_pd","_mm512_mask_max_ps","_mm512_mask_max_round_pd","_mm512_mask_max_round_ps","_mm512_mask_min_epi16","_mm512_mask_min_epi32","_mm512_mask_min_epi64","_mm512_mask_min_epi8","_mm512_mask_min_epu16","_mm512_mask_min_epu32","_mm512_mask_min_epu64","_mm512_mask_min_epu8","_mm512_mask_min_pd","_mm512_mask_min_ps","_mm512_mask_min_round_pd","_mm512_mask_min_round_ps","_mm512_mask_mov_epi16","_mm512_mask_mov_epi32","_mm512_mask_mov_epi64","_mm512_mask_mov_epi8","_mm512_mask_mov_pd","_mm512_mask_mov_ps","_mm512_mask_movedup_pd","_mm512_mask_movehdup_ps","_mm512_mask_moveldup_ps","_mm512_mask_mul_epi32","_mm512_mask_mul_epu32","_mm512_mask_mul_pd","_mm512_mask_mul_ps","_mm512_mask_mul_round_pd","_mm512_mask_mul_round_ps","_mm512_mask_mulhi_epi16","_mm512_mask_mulhi_epu16","_mm512_mask_mulhrs_epi16","_mm512_mask_mullo_epi16","_mm512_mask_mullo_epi32","_mm512_mask_mullox_epi64","_mm512_mask_multishift_epi64_epi8","_mm512_mask_or_epi32","_mm512_mask_or_epi64","_mm512_mask_packs_epi16","_mm512_mask_packs_epi32","_mm512_mask_packus_epi16","_mm512_mask_packus_epi32","_mm512_mask_permute_pd","_mm512_mask_permute_ps","_mm512_mask_permutevar_epi32","_mm512_mask_permutevar_pd","_mm512_mask_permutevar_ps","_mm512_mask_permutex2var_epi16","_mm512_mask_permutex2var_epi32","_mm512_mask_permutex2var_epi64","_mm512_mask_permutex2var_epi8","_mm512_mask_permutex2var_pd","_mm512_mask_permutex2var_ps","_mm512_mask_permutex_epi64","_mm512_mask_permutex_pd","_mm512_mask_permutexvar_epi16","_mm512_mask_permutexvar_epi32","_mm512_mask_permutexvar_epi64","_mm512_mask_permutexvar_epi8","_mm512_mask_permutexvar_pd","_mm512_mask_permutexvar_ps","_mm512_mask_popcnt_epi16","_mm512_mask_popcnt_epi32","_mm512_mask_popcnt_epi64","_mm512_mask_popcnt_epi8","_mm512_mask_rcp14_pd","_mm512_mask_rcp14_ps","_mm512_mask_reduce_add_epi32","_mm512_mask_reduce_add_epi64","_mm512_mask_reduce_add_pd","_mm512_mask_reduce_add_ps","_mm512_mask_reduce_and_epi32","_mm512_mask_reduce_and_epi64","_mm512_mask_reduce_max_epi32","_mm512_mask_reduce_max_epi64","_mm512_mask_reduce_max_epu32","_mm512_mask_reduce_max_epu64","_mm512_mask_reduce_max_pd","_mm512_mask_reduce_max_ps","_mm512_mask_reduce_min_epi32","_mm512_mask_reduce_min_epi64","_mm512_mask_reduce_min_epu32","_mm512_mask_reduce_min_epu64","_mm512_mask_reduce_min_pd","_mm512_mask_reduce_min_ps","_mm512_mask_reduce_mul_epi32","_mm512_mask_reduce_mul_epi64","_mm512_mask_reduce_mul_pd","_mm512_mask_reduce_mul_ps","_mm512_mask_reduce_or_epi32","_mm512_mask_reduce_or_epi64","_mm512_mask_rol_epi32","_mm512_mask_rol_epi64","_mm512_mask_rolv_epi32","_mm512_mask_rolv_epi64","_mm512_mask_ror_epi32","_mm512_mask_ror_epi64","_mm512_mask_rorv_epi32","_mm512_mask_rorv_epi64","_mm512_mask_roundscale_pd","_mm512_mask_roundscale_ps","_mm512_mask_roundscale_round_pd","_mm512_mask_roundscale_round_ps","_mm512_mask_rsqrt14_pd","_mm512_mask_rsqrt14_ps","_mm512_mask_scalef_pd","_mm512_mask_scalef_ps","_mm512_mask_scalef_round_pd","_mm512_mask_scalef_round_ps","_mm512_mask_set1_epi16","_mm512_mask_set1_epi32","_mm512_mask_set1_epi64","_mm512_mask_set1_epi8","_mm512_mask_shldi_epi16","_mm512_mask_shldi_epi32","_mm512_mask_shldi_epi64","_mm512_mask_shldv_epi16","_mm512_mask_shldv_epi32","_mm512_mask_shldv_epi64","_mm512_mask_shrdi_epi16","_mm512_mask_shrdi_epi32","_mm512_mask_shrdi_epi64","_mm512_mask_shrdv_epi16","_mm512_mask_shrdv_epi32","_mm512_mask_shrdv_epi64","_mm512_mask_shuffle_epi32","_mm512_mask_shuffle_epi8","_mm512_mask_shuffle_f32x4","_mm512_mask_shuffle_f64x2","_mm512_mask_shuffle_i32x4","_mm512_mask_shuffle_i64x2","_mm512_mask_shuffle_pd","_mm512_mask_shuffle_ps","_mm512_mask_shufflehi_epi16","_mm512_mask_shufflelo_epi16","_mm512_mask_sll_epi16","_mm512_mask_sll_epi32","_mm512_mask_sll_epi64","_mm512_mask_slli_epi16","_mm512_mask_slli_epi32","_mm512_mask_slli_epi64","_mm512_mask_sllv_epi16","_mm512_mask_sllv_epi32","_mm512_mask_sllv_epi64","_mm512_mask_sqrt_pd","_mm512_mask_sqrt_ps","_mm512_mask_sqrt_round_pd","_mm512_mask_sqrt_round_ps","_mm512_mask_sra_epi16","_mm512_mask_sra_epi32","_mm512_mask_sra_epi64","_mm512_mask_srai_epi16","_mm512_mask_srai_epi32","_mm512_mask_srai_epi64","_mm512_mask_srav_epi16","_mm512_mask_srav_epi32","_mm512_mask_srav_epi64","_mm512_mask_srl_epi16","_mm512_mask_srl_epi32","_mm512_mask_srl_epi64","_mm512_mask_srli_epi16","_mm512_mask_srli_epi32","_mm512_mask_srli_epi64","_mm512_mask_srlv_epi16","_mm512_mask_srlv_epi32","_mm512_mask_srlv_epi64","_mm512_mask_store_epi32","_mm512_mask_store_epi64","_mm512_mask_store_pd","_mm512_mask_store_ps","_mm512_mask_storeu_epi16","_mm512_mask_storeu_epi32","_mm512_mask_storeu_epi64","_mm512_mask_storeu_epi8","_mm512_mask_storeu_pd","_mm512_mask_storeu_ps","_mm512_mask_sub_epi16","_mm512_mask_sub_epi32","_mm512_mask_sub_epi64","_mm512_mask_sub_epi8","_mm512_mask_sub_pd","_mm512_mask_sub_ps","_mm512_mask_sub_round_pd","_mm512_mask_sub_round_ps","_mm512_mask_subs_epi16","_mm512_mask_subs_epi8","_mm512_mask_subs_epu16","_mm512_mask_subs_epu8","_mm512_mask_ternarylogic_epi32","_mm512_mask_ternarylogic_epi64","_mm512_mask_test_epi16_mask","_mm512_mask_test_epi32_mask","_mm512_mask_test_epi64_mask","_mm512_mask_test_epi8_mask","_mm512_mask_testn_epi16_mask","_mm512_mask_testn_epi32_mask","_mm512_mask_testn_epi64_mask","_mm512_mask_testn_epi8_mask","_mm512_mask_unpackhi_epi16","_mm512_mask_unpackhi_epi32","_mm512_mask_unpackhi_epi64","_mm512_mask_unpackhi_epi8","_mm512_mask_unpackhi_pd","_mm512_mask_unpackhi_ps","_mm512_mask_unpacklo_epi16","_mm512_mask_unpacklo_epi32","_mm512_mask_unpacklo_epi64","_mm512_mask_unpacklo_epi8","_mm512_mask_unpacklo_pd","_mm512_mask_unpacklo_ps","_mm512_mask_xor_epi32","_mm512_mask_xor_epi64","_mm512_maskz_abs_epi16","_mm512_maskz_abs_epi32","_mm512_maskz_abs_epi64","_mm512_maskz_abs_epi8","_mm512_maskz_add_epi16","_mm512_maskz_add_epi32","_mm512_maskz_add_epi64","_mm512_maskz_add_epi8","_mm512_maskz_add_pd","_mm512_maskz_add_ps","_mm512_maskz_add_round_pd","_mm512_maskz_add_round_ps","_mm512_maskz_adds_epi16","_mm512_maskz_adds_epi8","_mm512_maskz_adds_epu16","_mm512_maskz_adds_epu8","_mm512_maskz_alignr_epi32","_mm512_maskz_alignr_epi64","_mm512_maskz_alignr_epi8","_mm512_maskz_and_epi32","_mm512_maskz_and_epi64","_mm512_maskz_andnot_epi32","_mm512_maskz_andnot_epi64","_mm512_maskz_avg_epu16","_mm512_maskz_avg_epu8","_mm512_maskz_broadcast_f32x4","_mm512_maskz_broadcast_f64x4","_mm512_maskz_broadcast_i32x4","_mm512_maskz_broadcast_i64x4","_mm512_maskz_broadcastb_epi8","_mm512_maskz_broadcastd_epi32","_mm512_maskz_broadcastq_epi64","_mm512_maskz_broadcastsd_pd","_mm512_maskz_broadcastss_ps","_mm512_maskz_broadcastw_epi16","_mm512_maskz_compress_epi16","_mm512_maskz_compress_epi32","_mm512_maskz_compress_epi64","_mm512_maskz_compress_epi8","_mm512_maskz_compress_pd","_mm512_maskz_compress_ps","_mm512_maskz_conflict_epi32","_mm512_maskz_conflict_epi64","_mm512_maskz_cvt_roundepi32_ps","_mm512_maskz_cvt_roundepu32_ps","_mm512_maskz_cvt_roundpd_epi32","_mm512_maskz_cvt_roundpd_epu32","_mm512_maskz_cvt_roundpd_ps","_mm512_maskz_cvt_roundph_ps","_mm512_maskz_cvt_roundps_epi32","_mm512_maskz_cvt_roundps_epu32","_mm512_maskz_cvt_roundps_pd","_mm512_maskz_cvt_roundps_ph","_mm512_maskz_cvtepi16_epi32","_mm512_maskz_cvtepi16_epi64","_mm512_maskz_cvtepi16_epi8","_mm512_maskz_cvtepi32_epi16","_mm512_maskz_cvtepi32_epi64","_mm512_maskz_cvtepi32_epi8","_mm512_maskz_cvtepi32_pd","_mm512_maskz_cvtepi32_ps","_mm512_maskz_cvtepi64_epi16","_mm512_maskz_cvtepi64_epi32","_mm512_maskz_cvtepi64_epi8","_mm512_maskz_cvtepi8_epi16","_mm512_maskz_cvtepi8_epi32","_mm512_maskz_cvtepi8_epi64","_mm512_maskz_cvtepu16_epi32","_mm512_maskz_cvtepu16_epi64","_mm512_maskz_cvtepu32_epi64","_mm512_maskz_cvtepu32_pd","_mm512_maskz_cvtepu32_ps","_mm512_maskz_cvtepu8_epi16","_mm512_maskz_cvtepu8_epi32","_mm512_maskz_cvtepu8_epi64","_mm512_maskz_cvtne2ps_pbh","_mm512_maskz_cvtneps_pbh","_mm512_maskz_cvtpd_epi32","_mm512_maskz_cvtpd_epu32","_mm512_maskz_cvtpd_ps","_mm512_maskz_cvtph_ps","_mm512_maskz_cvtps_epi32","_mm512_maskz_cvtps_epu32","_mm512_maskz_cvtps_pd","_mm512_maskz_cvtps_ph","_mm512_maskz_cvtsepi16_epi8","_mm512_maskz_cvtsepi32_epi16","_mm512_maskz_cvtsepi32_epi8","_mm512_maskz_cvtsepi64_epi16","_mm512_maskz_cvtsepi64_epi32","_mm512_maskz_cvtsepi64_epi8","_mm512_maskz_cvtt_roundpd_epi32","_mm512_maskz_cvtt_roundpd_epu32","_mm512_maskz_cvtt_roundps_epi32","_mm512_maskz_cvtt_roundps_epu32","_mm512_maskz_cvttpd_epi32","_mm512_maskz_cvttpd_epu32","_mm512_maskz_cvttps_epi32","_mm512_maskz_cvttps_epu32","_mm512_maskz_cvtusepi16_epi8","_mm512_maskz_cvtusepi32_epi16","_mm512_maskz_cvtusepi32_epi8","_mm512_maskz_cvtusepi64_epi16","_mm512_maskz_cvtusepi64_epi32","_mm512_maskz_cvtusepi64_epi8","_mm512_maskz_dbsad_epu8","_mm512_maskz_div_pd","_mm512_maskz_div_ps","_mm512_maskz_div_round_pd","_mm512_maskz_div_round_ps","_mm512_maskz_dpbf16_ps","_mm512_maskz_dpbusd_epi32","_mm512_maskz_dpbusds_epi32","_mm512_maskz_dpwssd_epi32","_mm512_maskz_dpwssds_epi32","_mm512_maskz_expand_epi16","_mm512_maskz_expand_epi32","_mm512_maskz_expand_epi64","_mm512_maskz_expand_epi8","_mm512_maskz_expand_pd","_mm512_maskz_expand_ps","_mm512_maskz_expandloadu_epi16","_mm512_maskz_expandloadu_epi32","_mm512_maskz_expandloadu_epi64","_mm512_maskz_expandloadu_epi8","_mm512_maskz_expandloadu_pd","_mm512_maskz_expandloadu_ps","_mm512_maskz_extractf32x4_ps","_mm512_maskz_extractf64x4_pd","_mm512_maskz_extracti32x4_epi32","_mm512_maskz_extracti64x4_epi64","_mm512_maskz_fixupimm_pd","_mm512_maskz_fixupimm_ps","_mm512_maskz_fixupimm_round_pd","_mm512_maskz_fixupimm_round_ps","_mm512_maskz_fmadd_pd","_mm512_maskz_fmadd_ps","_mm512_maskz_fmadd_round_pd","_mm512_maskz_fmadd_round_ps","_mm512_maskz_fmaddsub_pd","_mm512_maskz_fmaddsub_ps","_mm512_maskz_fmaddsub_round_pd","_mm512_maskz_fmaddsub_round_ps","_mm512_maskz_fmsub_pd","_mm512_maskz_fmsub_ps","_mm512_maskz_fmsub_round_pd","_mm512_maskz_fmsub_round_ps","_mm512_maskz_fmsubadd_pd","_mm512_maskz_fmsubadd_ps","_mm512_maskz_fmsubadd_round_pd","_mm512_maskz_fmsubadd_round_ps","_mm512_maskz_fnmadd_pd","_mm512_maskz_fnmadd_ps","_mm512_maskz_fnmadd_round_pd","_mm512_maskz_fnmadd_round_ps","_mm512_maskz_fnmsub_pd","_mm512_maskz_fnmsub_ps","_mm512_maskz_fnmsub_round_pd","_mm512_maskz_fnmsub_round_ps","_mm512_maskz_getexp_pd","_mm512_maskz_getexp_ps","_mm512_maskz_getexp_round_pd","_mm512_maskz_getexp_round_ps","_mm512_maskz_getmant_pd","_mm512_maskz_getmant_ps","_mm512_maskz_getmant_round_pd","_mm512_maskz_getmant_round_ps","_mm512_maskz_gf2p8affine_epi64_epi8","_mm512_maskz_gf2p8affineinv_epi64_epi8","_mm512_maskz_gf2p8mul_epi8","_mm512_maskz_insertf32x4","_mm512_maskz_insertf64x4","_mm512_maskz_inserti32x4","_mm512_maskz_inserti64x4","_mm512_maskz_load_epi32","_mm512_maskz_load_epi64","_mm512_maskz_load_pd","_mm512_maskz_load_ps","_mm512_maskz_loadu_epi16","_mm512_maskz_loadu_epi32","_mm512_maskz_loadu_epi64","_mm512_maskz_loadu_epi8","_mm512_maskz_loadu_pd","_mm512_maskz_loadu_ps","_mm512_maskz_lzcnt_epi32","_mm512_maskz_lzcnt_epi64","_mm512_maskz_madd_epi16","_mm512_maskz_maddubs_epi16","_mm512_maskz_max_epi16","_mm512_maskz_max_epi32","_mm512_maskz_max_epi64","_mm512_maskz_max_epi8","_mm512_maskz_max_epu16","_mm512_maskz_max_epu32","_mm512_maskz_max_epu64","_mm512_maskz_max_epu8","_mm512_maskz_max_pd","_mm512_maskz_max_ps","_mm512_maskz_max_round_pd","_mm512_maskz_max_round_ps","_mm512_maskz_min_epi16","_mm512_maskz_min_epi32","_mm512_maskz_min_epi64","_mm512_maskz_min_epi8","_mm512_maskz_min_epu16","_mm512_maskz_min_epu32","_mm512_maskz_min_epu64","_mm512_maskz_min_epu8","_mm512_maskz_min_pd","_mm512_maskz_min_ps","_mm512_maskz_min_round_pd","_mm512_maskz_min_round_ps","_mm512_maskz_mov_epi16","_mm512_maskz_mov_epi32","_mm512_maskz_mov_epi64","_mm512_maskz_mov_epi8","_mm512_maskz_mov_pd","_mm512_maskz_mov_ps","_mm512_maskz_movedup_pd","_mm512_maskz_movehdup_ps","_mm512_maskz_moveldup_ps","_mm512_maskz_mul_epi32","_mm512_maskz_mul_epu32","_mm512_maskz_mul_pd","_mm512_maskz_mul_ps","_mm512_maskz_mul_round_pd","_mm512_maskz_mul_round_ps","_mm512_maskz_mulhi_epi16","_mm512_maskz_mulhi_epu16","_mm512_maskz_mulhrs_epi16","_mm512_maskz_mullo_epi16","_mm512_maskz_mullo_epi32","_mm512_maskz_multishift_epi64_epi8","_mm512_maskz_or_epi32","_mm512_maskz_or_epi64","_mm512_maskz_packs_epi16","_mm512_maskz_packs_epi32","_mm512_maskz_packus_epi16","_mm512_maskz_packus_epi32","_mm512_maskz_permute_pd","_mm512_maskz_permute_ps","_mm512_maskz_permutevar_pd","_mm512_maskz_permutevar_ps","_mm512_maskz_permutex2var_epi16","_mm512_maskz_permutex2var_epi32","_mm512_maskz_permutex2var_epi64","_mm512_maskz_permutex2var_epi8","_mm512_maskz_permutex2var_pd","_mm512_maskz_permutex2var_ps","_mm512_maskz_permutex_epi64","_mm512_maskz_permutex_pd","_mm512_maskz_permutexvar_epi16","_mm512_maskz_permutexvar_epi32","_mm512_maskz_permutexvar_epi64","_mm512_maskz_permutexvar_epi8","_mm512_maskz_permutexvar_pd","_mm512_maskz_permutexvar_ps","_mm512_maskz_popcnt_epi16","_mm512_maskz_popcnt_epi32","_mm512_maskz_popcnt_epi64","_mm512_maskz_popcnt_epi8","_mm512_maskz_rcp14_pd","_mm512_maskz_rcp14_ps","_mm512_maskz_rol_epi32","_mm512_maskz_rol_epi64","_mm512_maskz_rolv_epi32","_mm512_maskz_rolv_epi64","_mm512_maskz_ror_epi32","_mm512_maskz_ror_epi64","_mm512_maskz_rorv_epi32","_mm512_maskz_rorv_epi64","_mm512_maskz_roundscale_pd","_mm512_maskz_roundscale_ps","_mm512_maskz_roundscale_round_pd","_mm512_maskz_roundscale_round_ps","_mm512_maskz_rsqrt14_pd","_mm512_maskz_rsqrt14_ps","_mm512_maskz_scalef_pd","_mm512_maskz_scalef_ps","_mm512_maskz_scalef_round_pd","_mm512_maskz_scalef_round_ps","_mm512_maskz_set1_epi16","_mm512_maskz_set1_epi32","_mm512_maskz_set1_epi64","_mm512_maskz_set1_epi8","_mm512_maskz_shldi_epi16","_mm512_maskz_shldi_epi32","_mm512_maskz_shldi_epi64","_mm512_maskz_shldv_epi16","_mm512_maskz_shldv_epi32","_mm512_maskz_shldv_epi64","_mm512_maskz_shrdi_epi16","_mm512_maskz_shrdi_epi32","_mm512_maskz_shrdi_epi64","_mm512_maskz_shrdv_epi16","_mm512_maskz_shrdv_epi32","_mm512_maskz_shrdv_epi64","_mm512_maskz_shuffle_epi32","_mm512_maskz_shuffle_epi8","_mm512_maskz_shuffle_f32x4","_mm512_maskz_shuffle_f64x2","_mm512_maskz_shuffle_i32x4","_mm512_maskz_shuffle_i64x2","_mm512_maskz_shuffle_pd","_mm512_maskz_shuffle_ps","_mm512_maskz_shufflehi_epi16","_mm512_maskz_shufflelo_epi16","_mm512_maskz_sll_epi16","_mm512_maskz_sll_epi32","_mm512_maskz_sll_epi64","_mm512_maskz_slli_epi16","_mm512_maskz_slli_epi32","_mm512_maskz_slli_epi64","_mm512_maskz_sllv_epi16","_mm512_maskz_sllv_epi32","_mm512_maskz_sllv_epi64","_mm512_maskz_sqrt_pd","_mm512_maskz_sqrt_ps","_mm512_maskz_sqrt_round_pd","_mm512_maskz_sqrt_round_ps","_mm512_maskz_sra_epi16","_mm512_maskz_sra_epi32","_mm512_maskz_sra_epi64","_mm512_maskz_srai_epi16","_mm512_maskz_srai_epi32","_mm512_maskz_srai_epi64","_mm512_maskz_srav_epi16","_mm512_maskz_srav_epi32","_mm512_maskz_srav_epi64","_mm512_maskz_srl_epi16","_mm512_maskz_srl_epi32","_mm512_maskz_srl_epi64","_mm512_maskz_srli_epi16","_mm512_maskz_srli_epi32","_mm512_maskz_srli_epi64","_mm512_maskz_srlv_epi16","_mm512_maskz_srlv_epi32","_mm512_maskz_srlv_epi64","_mm512_maskz_sub_epi16","_mm512_maskz_sub_epi32","_mm512_maskz_sub_epi64","_mm512_maskz_sub_epi8","_mm512_maskz_sub_pd","_mm512_maskz_sub_ps","_mm512_maskz_sub_round_pd","_mm512_maskz_sub_round_ps","_mm512_maskz_subs_epi16","_mm512_maskz_subs_epi8","_mm512_maskz_subs_epu16","_mm512_maskz_subs_epu8","_mm512_maskz_ternarylogic_epi32","_mm512_maskz_ternarylogic_epi64","_mm512_maskz_unpackhi_epi16","_mm512_maskz_unpackhi_epi32","_mm512_maskz_unpackhi_epi64","_mm512_maskz_unpackhi_epi8","_mm512_maskz_unpackhi_pd","_mm512_maskz_unpackhi_ps","_mm512_maskz_unpacklo_epi16","_mm512_maskz_unpacklo_epi32","_mm512_maskz_unpacklo_epi64","_mm512_maskz_unpacklo_epi8","_mm512_maskz_unpacklo_pd","_mm512_maskz_unpacklo_ps","_mm512_maskz_xor_epi32","_mm512_maskz_xor_epi64","_mm512_max_epi16","_mm512_max_epi32","_mm512_max_epi64","_mm512_max_epi8","_mm512_max_epu16","_mm512_max_epu32","_mm512_max_epu64","_mm512_max_epu8","_mm512_max_pd","_mm512_max_ps","_mm512_max_round_pd","_mm512_max_round_ps","_mm512_min_epi16","_mm512_min_epi32","_mm512_min_epi64","_mm512_min_epi8","_mm512_min_epu16","_mm512_min_epu32","_mm512_min_epu64","_mm512_min_epu8","_mm512_min_pd","_mm512_min_ps","_mm512_min_round_pd","_mm512_min_round_ps","_mm512_movedup_pd","_mm512_movehdup_ps","_mm512_moveldup_ps","_mm512_movepi16_mask","_mm512_movepi8_mask","_mm512_movm_epi16","_mm512_movm_epi8","_mm512_mul_epi32","_mm512_mul_epu32","_mm512_mul_pd","_mm512_mul_ps","_mm512_mul_round_pd","_mm512_mul_round_ps","_mm512_mulhi_epi16","_mm512_mulhi_epu16","_mm512_mulhrs_epi16","_mm512_mullo_epi16","_mm512_mullo_epi32","_mm512_mullox_epi64","_mm512_multishift_epi64_epi8","_mm512_or_epi32","_mm512_or_epi64","_mm512_or_si512","_mm512_packs_epi16","_mm512_packs_epi32","_mm512_packus_epi16","_mm512_packus_epi32","_mm512_permute_pd","_mm512_permute_ps","_mm512_permutevar_epi32","_mm512_permutevar_pd","_mm512_permutevar_ps","_mm512_permutex2var_epi16","_mm512_permutex2var_epi32","_mm512_permutex2var_epi64","_mm512_permutex2var_epi8","_mm512_permutex2var_pd","_mm512_permutex2var_ps","_mm512_permutex_epi64","_mm512_permutex_pd","_mm512_permutexvar_epi16","_mm512_permutexvar_epi32","_mm512_permutexvar_epi64","_mm512_permutexvar_epi8","_mm512_permutexvar_pd","_mm512_permutexvar_ps","_mm512_popcnt_epi16","_mm512_popcnt_epi32","_mm512_popcnt_epi64","_mm512_popcnt_epi8","_mm512_rcp14_pd","_mm512_rcp14_ps","_mm512_reduce_add_epi32","_mm512_reduce_add_epi64","_mm512_reduce_add_pd","_mm512_reduce_add_ps","_mm512_reduce_and_epi32","_mm512_reduce_and_epi64","_mm512_reduce_max_epi32","_mm512_reduce_max_epi64","_mm512_reduce_max_epu32","_mm512_reduce_max_epu64","_mm512_reduce_max_pd","_mm512_reduce_max_ps","_mm512_reduce_min_epi32","_mm512_reduce_min_epi64","_mm512_reduce_min_epu32","_mm512_reduce_min_epu64","_mm512_reduce_min_pd","_mm512_reduce_min_ps","_mm512_reduce_mul_epi32","_mm512_reduce_mul_epi64","_mm512_reduce_mul_pd","_mm512_reduce_mul_ps","_mm512_reduce_or_epi32","_mm512_reduce_or_epi64","_mm512_rol_epi32","_mm512_rol_epi64","_mm512_rolv_epi32","_mm512_rolv_epi64","_mm512_ror_epi32","_mm512_ror_epi64","_mm512_rorv_epi32","_mm512_rorv_epi64","_mm512_roundscale_pd","_mm512_roundscale_ps","_mm512_roundscale_round_pd","_mm512_roundscale_round_ps","_mm512_rsqrt14_pd","_mm512_rsqrt14_ps","_mm512_sad_epu8","_mm512_scalef_pd","_mm512_scalef_ps","_mm512_scalef_round_pd","_mm512_scalef_round_ps","_mm512_set1_epi16","_mm512_set1_epi32","_mm512_set1_epi64","_mm512_set1_epi8","_mm512_set1_pd","_mm512_set1_ps","_mm512_set4_epi32","_mm512_set4_epi64","_mm512_set4_pd","_mm512_set4_ps","_mm512_set_epi16","_mm512_set_epi32","_mm512_set_epi64","_mm512_set_epi8","_mm512_set_pd","_mm512_set_ps","_mm512_setr4_epi32","_mm512_setr4_epi64","_mm512_setr4_pd","_mm512_setr4_ps","_mm512_setr_epi32","_mm512_setr_epi64","_mm512_setr_pd","_mm512_setr_ps","_mm512_setzero","_mm512_setzero_epi32","_mm512_setzero_pd","_mm512_setzero_ps","_mm512_setzero_si512","_mm512_shldi_epi16","_mm512_shldi_epi32","_mm512_shldi_epi64","_mm512_shldv_epi16","_mm512_shldv_epi32","_mm512_shldv_epi64","_mm512_shrdi_epi16","_mm512_shrdi_epi32","_mm512_shrdi_epi64","_mm512_shrdv_epi16","_mm512_shrdv_epi32","_mm512_shrdv_epi64","_mm512_shuffle_epi32","_mm512_shuffle_epi8","_mm512_shuffle_f32x4","_mm512_shuffle_f64x2","_mm512_shuffle_i32x4","_mm512_shuffle_i64x2","_mm512_shuffle_pd","_mm512_shuffle_ps","_mm512_shufflehi_epi16","_mm512_shufflelo_epi16","_mm512_sll_epi16","_mm512_sll_epi32","_mm512_sll_epi64","_mm512_slli_epi16","_mm512_slli_epi32","_mm512_slli_epi64","_mm512_sllv_epi16","_mm512_sllv_epi32","_mm512_sllv_epi64","_mm512_sqrt_pd","_mm512_sqrt_ps","_mm512_sqrt_round_pd","_mm512_sqrt_round_ps","_mm512_sra_epi16","_mm512_sra_epi32","_mm512_sra_epi64","_mm512_srai_epi16","_mm512_srai_epi32","_mm512_srai_epi64","_mm512_srav_epi16","_mm512_srav_epi32","_mm512_srav_epi64","_mm512_srl_epi16","_mm512_srl_epi32","_mm512_srl_epi64","_mm512_srli_epi16","_mm512_srli_epi32","_mm512_srli_epi64","_mm512_srlv_epi16","_mm512_srlv_epi32","_mm512_srlv_epi64","_mm512_store_epi32","_mm512_store_epi64","_mm512_store_pd","_mm512_store_ps","_mm512_store_si512","_mm512_storeu_epi16","_mm512_storeu_epi32","_mm512_storeu_epi64","_mm512_storeu_epi8","_mm512_storeu_pd","_mm512_storeu_ps","_mm512_storeu_si512","_mm512_stream_pd","_mm512_stream_ps","_mm512_stream_si512","_mm512_sub_epi16","_mm512_sub_epi32","_mm512_sub_epi64","_mm512_sub_epi8","_mm512_sub_pd","_mm512_sub_ps","_mm512_sub_round_pd","_mm512_sub_round_ps","_mm512_subs_epi16","_mm512_subs_epi8","_mm512_subs_epu16","_mm512_subs_epu8","_mm512_ternarylogic_epi32","_mm512_ternarylogic_epi64","_mm512_test_epi16_mask","_mm512_test_epi32_mask","_mm512_test_epi64_mask","_mm512_test_epi8_mask","_mm512_testn_epi16_mask","_mm512_testn_epi32_mask","_mm512_testn_epi64_mask","_mm512_testn_epi8_mask","_mm512_undefined","_mm512_undefined_epi32","_mm512_undefined_pd","_mm512_undefined_ps","_mm512_unpackhi_epi16","_mm512_unpackhi_epi32","_mm512_unpackhi_epi64","_mm512_unpackhi_epi8","_mm512_unpackhi_pd","_mm512_unpackhi_ps","_mm512_unpacklo_epi16","_mm512_unpacklo_epi32","_mm512_unpacklo_epi64","_mm512_unpacklo_epi8","_mm512_unpacklo_pd","_mm512_unpacklo_ps","_mm512_xor_epi32","_mm512_xor_epi64","_mm512_xor_si512","_mm512_zextpd128_pd512","_mm512_zextpd256_pd512","_mm512_zextps128_ps512","_mm512_zextps256_ps512","_mm512_zextsi128_si512","_mm512_zextsi256_si512","_mm_abs_epi16","_mm_abs_epi32","_mm_abs_epi8","_mm_add_epi16","_mm_add_epi32","_mm_add_epi64","_mm_add_epi8","_mm_add_pd","_mm_add_ps","_mm_add_round_sd","_mm_add_round_ss","_mm_add_sd","_mm_add_ss","_mm_adds_epi16","_mm_adds_epi8","_mm_adds_epu16","_mm_adds_epu8","_mm_addsub_pd","_mm_addsub_ps","_mm_aesdec_si128","_mm_aesdeclast_si128","_mm_aesenc_si128","_mm_aesenclast_si128","_mm_aesimc_si128","_mm_aeskeygenassist_si128","_mm_alignr_epi32","_mm_alignr_epi64","_mm_alignr_epi8","_mm_and_pd","_mm_and_ps","_mm_and_si128","_mm_andnot_pd","_mm_andnot_ps","_mm_andnot_si128","_mm_avg_epu16","_mm_avg_epu8","_mm_bitshuffle_epi64_mask","_mm_blend_epi16","_mm_blend_epi32","_mm_blend_pd","_mm_blend_ps","_mm_blendv_epi8","_mm_blendv_pd","_mm_blendv_ps","_mm_broadcast_ss","_mm_broadcastb_epi8","_mm_broadcastd_epi32","_mm_broadcastmb_epi64","_mm_broadcastmw_epi32","_mm_broadcastq_epi64","_mm_broadcastsd_pd","_mm_broadcastss_ps","_mm_broadcastw_epi16","_mm_bslli_si128","_mm_bsrli_si128","_mm_castpd_ps","_mm_castpd_si128","_mm_castps_pd","_mm_castps_si128","_mm_castsi128_pd","_mm_castsi128_ps","_mm_ceil_pd","_mm_ceil_ps","_mm_ceil_sd","_mm_ceil_ss","_mm_clflush","_mm_clmulepi64_si128","_mm_cmp_epi16_mask","_mm_cmp_epi32_mask","_mm_cmp_epi64_mask","_mm_cmp_epi8_mask","_mm_cmp_epu16_mask","_mm_cmp_epu32_mask","_mm_cmp_epu64_mask","_mm_cmp_epu8_mask","_mm_cmp_pd","_mm_cmp_pd_mask","_mm_cmp_ps","_mm_cmp_ps_mask","_mm_cmp_round_sd_mask","_mm_cmp_round_ss_mask","_mm_cmp_sd","_mm_cmp_sd_mask","_mm_cmp_ss","_mm_cmp_ss_mask","_mm_cmpeq_epi16","_mm_cmpeq_epi16_mask","_mm_cmpeq_epi32","_mm_cmpeq_epi32_mask","_mm_cmpeq_epi64","_mm_cmpeq_epi64_mask","_mm_cmpeq_epi8","_mm_cmpeq_epi8_mask","_mm_cmpeq_epu16_mask","_mm_cmpeq_epu32_mask","_mm_cmpeq_epu64_mask","_mm_cmpeq_epu8_mask","_mm_cmpeq_pd","_mm_cmpeq_ps","_mm_cmpeq_sd","_mm_cmpeq_ss","_mm_cmpestra","_mm_cmpestrc","_mm_cmpestri","_mm_cmpestrm","_mm_cmpestro","_mm_cmpestrs","_mm_cmpestrz","_mm_cmpge_epi16_mask","_mm_cmpge_epi32_mask","_mm_cmpge_epi64_mask","_mm_cmpge_epi8_mask","_mm_cmpge_epu16_mask","_mm_cmpge_epu32_mask","_mm_cmpge_epu64_mask","_mm_cmpge_epu8_mask","_mm_cmpge_pd","_mm_cmpge_ps","_mm_cmpge_sd","_mm_cmpge_ss","_mm_cmpgt_epi16","_mm_cmpgt_epi16_mask","_mm_cmpgt_epi32","_mm_cmpgt_epi32_mask","_mm_cmpgt_epi64","_mm_cmpgt_epi64_mask","_mm_cmpgt_epi8","_mm_cmpgt_epi8_mask","_mm_cmpgt_epu16_mask","_mm_cmpgt_epu32_mask","_mm_cmpgt_epu64_mask","_mm_cmpgt_epu8_mask","_mm_cmpgt_pd","_mm_cmpgt_ps","_mm_cmpgt_sd","_mm_cmpgt_ss","_mm_cmpistra","_mm_cmpistrc","_mm_cmpistri","_mm_cmpistrm","_mm_cmpistro","_mm_cmpistrs","_mm_cmpistrz","_mm_cmple_epi16_mask","_mm_cmple_epi32_mask","_mm_cmple_epi64_mask","_mm_cmple_epi8_mask","_mm_cmple_epu16_mask","_mm_cmple_epu32_mask","_mm_cmple_epu64_mask","_mm_cmple_epu8_mask","_mm_cmple_pd","_mm_cmple_ps","_mm_cmple_sd","_mm_cmple_ss","_mm_cmplt_epi16","_mm_cmplt_epi16_mask","_mm_cmplt_epi32","_mm_cmplt_epi32_mask","_mm_cmplt_epi64_mask","_mm_cmplt_epi8","_mm_cmplt_epi8_mask","_mm_cmplt_epu16_mask","_mm_cmplt_epu32_mask","_mm_cmplt_epu64_mask","_mm_cmplt_epu8_mask","_mm_cmplt_pd","_mm_cmplt_ps","_mm_cmplt_sd","_mm_cmplt_ss","_mm_cmpneq_epi16_mask","_mm_cmpneq_epi32_mask","_mm_cmpneq_epi64_mask","_mm_cmpneq_epi8_mask","_mm_cmpneq_epu16_mask","_mm_cmpneq_epu32_mask","_mm_cmpneq_epu64_mask","_mm_cmpneq_epu8_mask","_mm_cmpneq_pd","_mm_cmpneq_ps","_mm_cmpneq_sd","_mm_cmpneq_ss","_mm_cmpnge_pd","_mm_cmpnge_ps","_mm_cmpnge_sd","_mm_cmpnge_ss","_mm_cmpngt_pd","_mm_cmpngt_ps","_mm_cmpngt_sd","_mm_cmpngt_ss","_mm_cmpnle_pd","_mm_cmpnle_ps","_mm_cmpnle_sd","_mm_cmpnle_ss","_mm_cmpnlt_pd","_mm_cmpnlt_ps","_mm_cmpnlt_sd","_mm_cmpnlt_ss","_mm_cmpord_pd","_mm_cmpord_ps","_mm_cmpord_sd","_mm_cmpord_ss","_mm_cmpunord_pd","_mm_cmpunord_ps","_mm_cmpunord_sd","_mm_cmpunord_ss","_mm_comi_round_sd","_mm_comi_round_ss","_mm_comieq_sd","_mm_comieq_ss","_mm_comige_sd","_mm_comige_ss","_mm_comigt_sd","_mm_comigt_ss","_mm_comile_sd","_mm_comile_ss","_mm_comilt_sd","_mm_comilt_ss","_mm_comineq_sd","_mm_comineq_ss","_mm_conflict_epi32","_mm_conflict_epi64","_mm_crc32_u16","_mm_crc32_u32","_mm_crc32_u64","_mm_crc32_u8","_mm_cvt_roundi32_ss","_mm_cvt_roundi64_sd","_mm_cvt_roundi64_ss","_mm_cvt_roundsd_i32","_mm_cvt_roundsd_i64","_mm_cvt_roundsd_si32","_mm_cvt_roundsd_si64","_mm_cvt_roundsd_ss","_mm_cvt_roundsd_u32","_mm_cvt_roundsd_u64","_mm_cvt_roundsi32_ss","_mm_cvt_roundsi64_sd","_mm_cvt_roundsi64_ss","_mm_cvt_roundss_i32","_mm_cvt_roundss_i64","_mm_cvt_roundss_sd","_mm_cvt_roundss_si32","_mm_cvt_roundss_si64","_mm_cvt_roundss_u32","_mm_cvt_roundss_u64","_mm_cvt_roundu32_ss","_mm_cvt_roundu64_sd","_mm_cvt_roundu64_ss","_mm_cvt_si2ss","_mm_cvt_ss2si","_mm_cvtepi16_epi32","_mm_cvtepi16_epi64","_mm_cvtepi16_epi8","_mm_cvtepi32_epi16","_mm_cvtepi32_epi64","_mm_cvtepi32_epi8","_mm_cvtepi32_pd","_mm_cvtepi32_ps","_mm_cvtepi64_epi16","_mm_cvtepi64_epi32","_mm_cvtepi64_epi8","_mm_cvtepi8_epi16","_mm_cvtepi8_epi32","_mm_cvtepi8_epi64","_mm_cvtepu16_epi32","_mm_cvtepu16_epi64","_mm_cvtepu32_epi64","_mm_cvtepu32_pd","_mm_cvtepu8_epi16","_mm_cvtepu8_epi32","_mm_cvtepu8_epi64","_mm_cvti32_sd","_mm_cvti32_ss","_mm_cvti64_sd","_mm_cvti64_ss","_mm_cvtne2ps_pbh","_mm_cvtpd_epi32","_mm_cvtpd_epu32","_mm_cvtpd_ps","_mm_cvtph_ps","_mm_cvtps_epi32","_mm_cvtps_epu32","_mm_cvtps_pd","_mm_cvtps_ph","_mm_cvtsd_f64","_mm_cvtsd_i32","_mm_cvtsd_i64","_mm_cvtsd_si32","_mm_cvtsd_si64","_mm_cvtsd_si64x","_mm_cvtsd_ss","_mm_cvtsd_u32","_mm_cvtsd_u64","_mm_cvtsepi16_epi8","_mm_cvtsepi32_epi16","_mm_cvtsepi32_epi8","_mm_cvtsepi64_epi16","_mm_cvtsepi64_epi32","_mm_cvtsepi64_epi8","_mm_cvtsi128_si32","_mm_cvtsi128_si64","_mm_cvtsi128_si64x","_mm_cvtsi32_sd","_mm_cvtsi32_si128","_mm_cvtsi32_ss","_mm_cvtsi64_sd","_mm_cvtsi64_si128","_mm_cvtsi64_ss","_mm_cvtsi64x_sd","_mm_cvtsi64x_si128","_mm_cvtss_f32","_mm_cvtss_i32","_mm_cvtss_i64","_mm_cvtss_sd","_mm_cvtss_si32","_mm_cvtss_si64","_mm_cvtss_u32","_mm_cvtss_u64","_mm_cvtt_roundsd_i32","_mm_cvtt_roundsd_i64","_mm_cvtt_roundsd_si32","_mm_cvtt_roundsd_si64","_mm_cvtt_roundsd_u32","_mm_cvtt_roundsd_u64","_mm_cvtt_roundss_i32","_mm_cvtt_roundss_i64","_mm_cvtt_roundss_si32","_mm_cvtt_roundss_si64","_mm_cvtt_roundss_u32","_mm_cvtt_roundss_u64","_mm_cvtt_ss2si","_mm_cvttpd_epi32","_mm_cvttpd_epu32","_mm_cvttps_epi32","_mm_cvttps_epu32","_mm_cvttsd_i32","_mm_cvttsd_i64","_mm_cvttsd_si32","_mm_cvttsd_si64","_mm_cvttsd_si64x","_mm_cvttsd_u32","_mm_cvttsd_u64","_mm_cvttss_i32","_mm_cvttss_i64","_mm_cvttss_si32","_mm_cvttss_si64","_mm_cvttss_u32","_mm_cvttss_u64","_mm_cvtu32_sd","_mm_cvtu32_ss","_mm_cvtu64_sd","_mm_cvtu64_ss","_mm_cvtusepi16_epi8","_mm_cvtusepi32_epi16","_mm_cvtusepi32_epi8","_mm_cvtusepi64_epi16","_mm_cvtusepi64_epi32","_mm_cvtusepi64_epi8","_mm_dbsad_epu8","_mm_div_pd","_mm_div_ps","_mm_div_round_sd","_mm_div_round_ss","_mm_div_sd","_mm_div_ss","_mm_dp_pd","_mm_dp_ps","_mm_dpbf16_ps","_mm_dpbusd_epi32","_mm_dpbusds_epi32","_mm_dpwssd_epi32","_mm_dpwssds_epi32","_mm_extract_epi16","_mm_extract_epi32","_mm_extract_epi64","_mm_extract_epi8","_mm_extract_ps","_mm_extract_si64","_mm_fixupimm_pd","_mm_fixupimm_ps","_mm_fixupimm_round_sd","_mm_fixupimm_round_ss","_mm_fixupimm_sd","_mm_fixupimm_ss","_mm_floor_pd","_mm_floor_ps","_mm_floor_sd","_mm_floor_ss","_mm_fmadd_pd","_mm_fmadd_ps","_mm_fmadd_round_sd","_mm_fmadd_round_ss","_mm_fmadd_sd","_mm_fmadd_ss","_mm_fmaddsub_pd","_mm_fmaddsub_ps","_mm_fmsub_pd","_mm_fmsub_ps","_mm_fmsub_round_sd","_mm_fmsub_round_ss","_mm_fmsub_sd","_mm_fmsub_ss","_mm_fmsubadd_pd","_mm_fmsubadd_ps","_mm_fnmadd_pd","_mm_fnmadd_ps","_mm_fnmadd_round_sd","_mm_fnmadd_round_ss","_mm_fnmadd_sd","_mm_fnmadd_ss","_mm_fnmsub_pd","_mm_fnmsub_ps","_mm_fnmsub_round_sd","_mm_fnmsub_round_ss","_mm_fnmsub_sd","_mm_fnmsub_ss","_mm_getcsr","_mm_getexp_pd","_mm_getexp_ps","_mm_getexp_round_sd","_mm_getexp_round_ss","_mm_getexp_sd","_mm_getexp_ss","_mm_getmant_pd","_mm_getmant_ps","_mm_getmant_round_sd","_mm_getmant_round_ss","_mm_getmant_sd","_mm_getmant_ss","_mm_gf2p8affine_epi64_epi8","_mm_gf2p8affineinv_epi64_epi8","_mm_gf2p8mul_epi8","_mm_hadd_epi16","_mm_hadd_epi32","_mm_hadd_pd","_mm_hadd_ps","_mm_hadds_epi16","_mm_hsub_epi16","_mm_hsub_epi32","_mm_hsub_pd","_mm_hsub_ps","_mm_hsubs_epi16","_mm_i32gather_epi32","_mm_i32gather_epi64","_mm_i32gather_pd","_mm_i32gather_ps","_mm_i64gather_epi32","_mm_i64gather_epi64","_mm_i64gather_pd","_mm_i64gather_ps","_mm_insert_epi16","_mm_insert_epi32","_mm_insert_epi64","_mm_insert_epi8","_mm_insert_ps","_mm_insert_si64","_mm_lddqu_si128","_mm_lfence","_mm_load1_pd","_mm_load1_ps","_mm_load_epi32","_mm_load_epi64","_mm_load_pd","_mm_load_pd1","_mm_load_ps","_mm_load_ps1","_mm_load_sd","_mm_load_si128","_mm_load_ss","_mm_loaddup_pd","_mm_loadh_pd","_mm_loadl_epi64","_mm_loadl_pd","_mm_loadr_pd","_mm_loadr_ps","_mm_loadu_epi16","_mm_loadu_epi32","_mm_loadu_epi64","_mm_loadu_epi8","_mm_loadu_pd","_mm_loadu_ps","_mm_loadu_si128","_mm_loadu_si64","_mm_lzcnt_epi32","_mm_lzcnt_epi64","_mm_madd52hi_epu64","_mm_madd52lo_epu64","_mm_madd_epi16","_mm_maddubs_epi16","_mm_mask2_permutex2var_epi16","_mm_mask2_permutex2var_epi32","_mm_mask2_permutex2var_epi64","_mm_mask2_permutex2var_epi8","_mm_mask2_permutex2var_pd","_mm_mask2_permutex2var_ps","_mm_mask3_fmadd_pd","_mm_mask3_fmadd_ps","_mm_mask3_fmadd_round_sd","_mm_mask3_fmadd_round_ss","_mm_mask3_fmadd_sd","_mm_mask3_fmadd_ss","_mm_mask3_fmaddsub_pd","_mm_mask3_fmaddsub_ps","_mm_mask3_fmsub_pd","_mm_mask3_fmsub_ps","_mm_mask3_fmsub_round_sd","_mm_mask3_fmsub_round_ss","_mm_mask3_fmsub_sd","_mm_mask3_fmsub_ss","_mm_mask3_fmsubadd_pd","_mm_mask3_fmsubadd_ps","_mm_mask3_fnmadd_pd","_mm_mask3_fnmadd_ps","_mm_mask3_fnmadd_round_sd","_mm_mask3_fnmadd_round_ss","_mm_mask3_fnmadd_sd","_mm_mask3_fnmadd_ss","_mm_mask3_fnmsub_pd","_mm_mask3_fnmsub_ps","_mm_mask3_fnmsub_round_sd","_mm_mask3_fnmsub_round_ss","_mm_mask3_fnmsub_sd","_mm_mask3_fnmsub_ss","_mm_mask_abs_epi16","_mm_mask_abs_epi32","_mm_mask_abs_epi8","_mm_mask_add_epi16","_mm_mask_add_epi32","_mm_mask_add_epi64","_mm_mask_add_epi8","_mm_mask_add_pd","_mm_mask_add_ps","_mm_mask_add_round_sd","_mm_mask_add_round_ss","_mm_mask_add_sd","_mm_mask_add_ss","_mm_mask_adds_epi16","_mm_mask_adds_epi8","_mm_mask_adds_epu16","_mm_mask_adds_epu8","_mm_mask_alignr_epi32","_mm_mask_alignr_epi64","_mm_mask_alignr_epi8","_mm_mask_and_epi32","_mm_mask_and_epi64","_mm_mask_andnot_epi32","_mm_mask_andnot_epi64","_mm_mask_avg_epu16","_mm_mask_avg_epu8","_mm_mask_bitshuffle_epi64_mask","_mm_mask_blend_epi16","_mm_mask_blend_epi32","_mm_mask_blend_epi64","_mm_mask_blend_epi8","_mm_mask_blend_pd","_mm_mask_blend_ps","_mm_mask_broadcastb_epi8","_mm_mask_broadcastd_epi32","_mm_mask_broadcastq_epi64","_mm_mask_broadcastss_ps","_mm_mask_broadcastw_epi16","_mm_mask_cmp_epi16_mask","_mm_mask_cmp_epi32_mask","_mm_mask_cmp_epi64_mask","_mm_mask_cmp_epi8_mask","_mm_mask_cmp_epu16_mask","_mm_mask_cmp_epu32_mask","_mm_mask_cmp_epu64_mask","_mm_mask_cmp_epu8_mask","_mm_mask_cmp_pd_mask","_mm_mask_cmp_ps_mask","_mm_mask_cmp_round_sd_mask","_mm_mask_cmp_round_ss_mask","_mm_mask_cmp_sd_mask","_mm_mask_cmp_ss_mask","_mm_mask_cmpeq_epi16_mask","_mm_mask_cmpeq_epi32_mask","_mm_mask_cmpeq_epi64_mask","_mm_mask_cmpeq_epi8_mask","_mm_mask_cmpeq_epu16_mask","_mm_mask_cmpeq_epu32_mask","_mm_mask_cmpeq_epu64_mask","_mm_mask_cmpeq_epu8_mask","_mm_mask_cmpge_epi16_mask","_mm_mask_cmpge_epi32_mask","_mm_mask_cmpge_epi64_mask","_mm_mask_cmpge_epi8_mask","_mm_mask_cmpge_epu16_mask","_mm_mask_cmpge_epu32_mask","_mm_mask_cmpge_epu64_mask","_mm_mask_cmpge_epu8_mask","_mm_mask_cmpgt_epi16_mask","_mm_mask_cmpgt_epi32_mask","_mm_mask_cmpgt_epi64_mask","_mm_mask_cmpgt_epi8_mask","_mm_mask_cmpgt_epu16_mask","_mm_mask_cmpgt_epu32_mask","_mm_mask_cmpgt_epu64_mask","_mm_mask_cmpgt_epu8_mask","_mm_mask_cmple_epi16_mask","_mm_mask_cmple_epi32_mask","_mm_mask_cmple_epi64_mask","_mm_mask_cmple_epi8_mask","_mm_mask_cmple_epu16_mask","_mm_mask_cmple_epu32_mask","_mm_mask_cmple_epu64_mask","_mm_mask_cmple_epu8_mask","_mm_mask_cmplt_epi16_mask","_mm_mask_cmplt_epi32_mask","_mm_mask_cmplt_epi64_mask","_mm_mask_cmplt_epi8_mask","_mm_mask_cmplt_epu16_mask","_mm_mask_cmplt_epu32_mask","_mm_mask_cmplt_epu64_mask","_mm_mask_cmplt_epu8_mask","_mm_mask_cmpneq_epi16_mask","_mm_mask_cmpneq_epi32_mask","_mm_mask_cmpneq_epi64_mask","_mm_mask_cmpneq_epi8_mask","_mm_mask_cmpneq_epu16_mask","_mm_mask_cmpneq_epu32_mask","_mm_mask_cmpneq_epu64_mask","_mm_mask_cmpneq_epu8_mask","_mm_mask_compress_epi16","_mm_mask_compress_epi32","_mm_mask_compress_epi64","_mm_mask_compress_epi8","_mm_mask_compress_pd","_mm_mask_compress_ps","_mm_mask_compressstoreu_epi16","_mm_mask_compressstoreu_epi32","_mm_mask_compressstoreu_epi64","_mm_mask_compressstoreu_epi8","_mm_mask_compressstoreu_pd","_mm_mask_compressstoreu_ps","_mm_mask_conflict_epi32","_mm_mask_conflict_epi64","_mm_mask_cvt_roundps_ph","_mm_mask_cvt_roundsd_ss","_mm_mask_cvt_roundss_sd","_mm_mask_cvtepi16_epi32","_mm_mask_cvtepi16_epi64","_mm_mask_cvtepi16_epi8","_mm_mask_cvtepi16_storeu_epi8","_mm_mask_cvtepi32_epi16","_mm_mask_cvtepi32_epi64","_mm_mask_cvtepi32_epi8","_mm_mask_cvtepi32_pd","_mm_mask_cvtepi32_ps","_mm_mask_cvtepi32_storeu_epi16","_mm_mask_cvtepi32_storeu_epi8","_mm_mask_cvtepi64_epi16","_mm_mask_cvtepi64_epi32","_mm_mask_cvtepi64_epi8","_mm_mask_cvtepi64_storeu_epi16","_mm_mask_cvtepi64_storeu_epi32","_mm_mask_cvtepi64_storeu_epi8","_mm_mask_cvtepi8_epi16","_mm_mask_cvtepi8_epi32","_mm_mask_cvtepi8_epi64","_mm_mask_cvtepu16_epi32","_mm_mask_cvtepu16_epi64","_mm_mask_cvtepu32_epi64","_mm_mask_cvtepu32_pd","_mm_mask_cvtepu8_epi16","_mm_mask_cvtepu8_epi32","_mm_mask_cvtepu8_epi64","_mm_mask_cvtne2ps_pbh","_mm_mask_cvtpd_epi32","_mm_mask_cvtpd_epu32","_mm_mask_cvtpd_ps","_mm_mask_cvtph_ps","_mm_mask_cvtps_epi32","_mm_mask_cvtps_epu32","_mm_mask_cvtps_ph","_mm_mask_cvtsd_ss","_mm_mask_cvtsepi16_epi8","_mm_mask_cvtsepi16_storeu_epi8","_mm_mask_cvtsepi32_epi16","_mm_mask_cvtsepi32_epi8","_mm_mask_cvtsepi32_storeu_epi16","_mm_mask_cvtsepi32_storeu_epi8","_mm_mask_cvtsepi64_epi16","_mm_mask_cvtsepi64_epi32","_mm_mask_cvtsepi64_epi8","_mm_mask_cvtsepi64_storeu_epi16","_mm_mask_cvtsepi64_storeu_epi32","_mm_mask_cvtsepi64_storeu_epi8","_mm_mask_cvtss_sd","_mm_mask_cvttpd_epi32","_mm_mask_cvttpd_epu32","_mm_mask_cvttps_epi32","_mm_mask_cvttps_epu32","_mm_mask_cvtusepi16_epi8","_mm_mask_cvtusepi16_storeu_epi8","_mm_mask_cvtusepi32_epi16","_mm_mask_cvtusepi32_epi8","_mm_mask_cvtusepi32_storeu_epi16","_mm_mask_cvtusepi32_storeu_epi8","_mm_mask_cvtusepi64_epi16","_mm_mask_cvtusepi64_epi32","_mm_mask_cvtusepi64_epi8","_mm_mask_cvtusepi64_storeu_epi16","_mm_mask_cvtusepi64_storeu_epi32","_mm_mask_cvtusepi64_storeu_epi8","_mm_mask_dbsad_epu8","_mm_mask_div_pd","_mm_mask_div_ps","_mm_mask_div_round_sd","_mm_mask_div_round_ss","_mm_mask_div_sd","_mm_mask_div_ss","_mm_mask_dpbf16_ps","_mm_mask_dpbusd_epi32","_mm_mask_dpbusds_epi32","_mm_mask_dpwssd_epi32","_mm_mask_dpwssds_epi32","_mm_mask_expand_epi16","_mm_mask_expand_epi32","_mm_mask_expand_epi64","_mm_mask_expand_epi8","_mm_mask_expand_pd","_mm_mask_expand_ps","_mm_mask_expandloadu_epi16","_mm_mask_expandloadu_epi32","_mm_mask_expandloadu_epi64","_mm_mask_expandloadu_epi8","_mm_mask_expandloadu_pd","_mm_mask_expandloadu_ps","_mm_mask_fixupimm_pd","_mm_mask_fixupimm_ps","_mm_mask_fixupimm_round_sd","_mm_mask_fixupimm_round_ss","_mm_mask_fixupimm_sd","_mm_mask_fixupimm_ss","_mm_mask_fmadd_pd","_mm_mask_fmadd_ps","_mm_mask_fmadd_round_sd","_mm_mask_fmadd_round_ss","_mm_mask_fmadd_sd","_mm_mask_fmadd_ss","_mm_mask_fmaddsub_pd","_mm_mask_fmaddsub_ps","_mm_mask_fmsub_pd","_mm_mask_fmsub_ps","_mm_mask_fmsub_round_sd","_mm_mask_fmsub_round_ss","_mm_mask_fmsub_sd","_mm_mask_fmsub_ss","_mm_mask_fmsubadd_pd","_mm_mask_fmsubadd_ps","_mm_mask_fnmadd_pd","_mm_mask_fnmadd_ps","_mm_mask_fnmadd_round_sd","_mm_mask_fnmadd_round_ss","_mm_mask_fnmadd_sd","_mm_mask_fnmadd_ss","_mm_mask_fnmsub_pd","_mm_mask_fnmsub_ps","_mm_mask_fnmsub_round_sd","_mm_mask_fnmsub_round_ss","_mm_mask_fnmsub_sd","_mm_mask_fnmsub_ss","_mm_mask_getexp_pd","_mm_mask_getexp_ps","_mm_mask_getexp_round_sd","_mm_mask_getexp_round_ss","_mm_mask_getexp_sd","_mm_mask_getexp_ss","_mm_mask_getmant_pd","_mm_mask_getmant_ps","_mm_mask_getmant_round_sd","_mm_mask_getmant_round_ss","_mm_mask_getmant_sd","_mm_mask_getmant_ss","_mm_mask_gf2p8affine_epi64_epi8","_mm_mask_gf2p8affineinv_epi64_epi8","_mm_mask_gf2p8mul_epi8","_mm_mask_i32gather_epi32","_mm_mask_i32gather_epi64","_mm_mask_i32gather_pd","_mm_mask_i32gather_ps","_mm_mask_i64gather_epi32","_mm_mask_i64gather_epi64","_mm_mask_i64gather_pd","_mm_mask_i64gather_ps","_mm_mask_load_epi32","_mm_mask_load_epi64","_mm_mask_load_pd","_mm_mask_load_ps","_mm_mask_loadu_epi16","_mm_mask_loadu_epi32","_mm_mask_loadu_epi64","_mm_mask_loadu_epi8","_mm_mask_loadu_pd","_mm_mask_loadu_ps","_mm_mask_lzcnt_epi32","_mm_mask_lzcnt_epi64","_mm_mask_madd_epi16","_mm_mask_maddubs_epi16","_mm_mask_max_epi16","_mm_mask_max_epi32","_mm_mask_max_epi64","_mm_mask_max_epi8","_mm_mask_max_epu16","_mm_mask_max_epu32","_mm_mask_max_epu64","_mm_mask_max_epu8","_mm_mask_max_pd","_mm_mask_max_ps","_mm_mask_max_round_sd","_mm_mask_max_round_ss","_mm_mask_max_sd","_mm_mask_max_ss","_mm_mask_min_epi16","_mm_mask_min_epi32","_mm_mask_min_epi8","_mm_mask_min_epu16","_mm_mask_min_epu32","_mm_mask_min_epu64","_mm_mask_min_epu8","_mm_mask_min_pd","_mm_mask_min_ps","_mm_mask_min_round_sd","_mm_mask_min_round_ss","_mm_mask_min_sd","_mm_mask_min_ss","_mm_mask_mov_epi16","_mm_mask_mov_epi32","_mm_mask_mov_epi64","_mm_mask_mov_epi8","_mm_mask_mov_pd","_mm_mask_mov_ps","_mm_mask_move_sd","_mm_mask_move_ss","_mm_mask_movedup_pd","_mm_mask_movehdup_ps","_mm_mask_moveldup_ps","_mm_mask_mul_epi32","_mm_mask_mul_epu32","_mm_mask_mul_pd","_mm_mask_mul_ps","_mm_mask_mul_round_sd","_mm_mask_mul_round_ss","_mm_mask_mul_sd","_mm_mask_mul_ss","_mm_mask_mulhi_epi16","_mm_mask_mulhi_epu16","_mm_mask_mulhrs_epi16","_mm_mask_mullo_epi16","_mm_mask_mullo_epi32","_mm_mask_multishift_epi64_epi8","_mm_mask_or_epi32","_mm_mask_or_epi64","_mm_mask_packs_epi16","_mm_mask_packs_epi32","_mm_mask_packus_epi16","_mm_mask_packus_epi32","_mm_mask_permute_pd","_mm_mask_permute_ps","_mm_mask_permutevar_pd","_mm_mask_permutevar_ps","_mm_mask_permutex2var_epi16","_mm_mask_permutex2var_epi32","_mm_mask_permutex2var_epi64","_mm_mask_permutex2var_epi8","_mm_mask_permutex2var_pd","_mm_mask_permutex2var_ps","_mm_mask_permutexvar_epi16","_mm_mask_permutexvar_epi8","_mm_mask_popcnt_epi16","_mm_mask_popcnt_epi32","_mm_mask_popcnt_epi64","_mm_mask_popcnt_epi8","_mm_mask_rcp14_pd","_mm_mask_rcp14_ps","_mm_mask_rcp14_sd","_mm_mask_rcp14_ss","_mm_mask_rol_epi32","_mm_mask_rol_epi64","_mm_mask_rolv_epi32","_mm_mask_rolv_epi64","_mm_mask_ror_epi32","_mm_mask_ror_epi64","_mm_mask_rorv_epi32","_mm_mask_rorv_epi64","_mm_mask_roundscale_pd","_mm_mask_roundscale_ps","_mm_mask_roundscale_round_sd","_mm_mask_roundscale_round_ss","_mm_mask_roundscale_sd","_mm_mask_roundscale_ss","_mm_mask_rsqrt14_pd","_mm_mask_rsqrt14_ps","_mm_mask_rsqrt14_sd","_mm_mask_rsqrt14_ss","_mm_mask_scalef_pd","_mm_mask_scalef_ps","_mm_mask_scalef_round_sd","_mm_mask_scalef_round_ss","_mm_mask_scalef_sd","_mm_mask_scalef_ss","_mm_mask_set1_epi16","_mm_mask_set1_epi32","_mm_mask_set1_epi64","_mm_mask_set1_epi8","_mm_mask_shldi_epi16","_mm_mask_shldi_epi32","_mm_mask_shldi_epi64","_mm_mask_shldv_epi16","_mm_mask_shldv_epi32","_mm_mask_shldv_epi64","_mm_mask_shrdi_epi16","_mm_mask_shrdi_epi32","_mm_mask_shrdi_epi64","_mm_mask_shrdv_epi16","_mm_mask_shrdv_epi32","_mm_mask_shrdv_epi64","_mm_mask_shuffle_epi32","_mm_mask_shuffle_epi8","_mm_mask_shuffle_pd","_mm_mask_shuffle_ps","_mm_mask_shufflehi_epi16","_mm_mask_shufflelo_epi16","_mm_mask_sll_epi16","_mm_mask_sll_epi32","_mm_mask_sll_epi64","_mm_mask_slli_epi16","_mm_mask_slli_epi32","_mm_mask_slli_epi64","_mm_mask_sllv_epi16","_mm_mask_sllv_epi32","_mm_mask_sllv_epi64","_mm_mask_sqrt_pd","_mm_mask_sqrt_ps","_mm_mask_sqrt_round_sd","_mm_mask_sqrt_round_ss","_mm_mask_sqrt_sd","_mm_mask_sqrt_ss","_mm_mask_sra_epi16","_mm_mask_sra_epi32","_mm_mask_sra_epi64","_mm_mask_srai_epi16","_mm_mask_srai_epi32","_mm_mask_srai_epi64","_mm_mask_srav_epi16","_mm_mask_srav_epi32","_mm_mask_srav_epi64","_mm_mask_srl_epi16","_mm_mask_srl_epi32","_mm_mask_srl_epi64","_mm_mask_srli_epi16","_mm_mask_srli_epi32","_mm_mask_srli_epi64","_mm_mask_srlv_epi16","_mm_mask_srlv_epi32","_mm_mask_srlv_epi64","_mm_mask_store_epi32","_mm_mask_store_epi64","_mm_mask_store_pd","_mm_mask_store_ps","_mm_mask_storeu_epi16","_mm_mask_storeu_epi32","_mm_mask_storeu_epi64","_mm_mask_storeu_epi8","_mm_mask_storeu_pd","_mm_mask_storeu_ps","_mm_mask_sub_epi16","_mm_mask_sub_epi32","_mm_mask_sub_epi64","_mm_mask_sub_epi8","_mm_mask_sub_pd","_mm_mask_sub_ps","_mm_mask_sub_round_sd","_mm_mask_sub_round_ss","_mm_mask_sub_sd","_mm_mask_sub_ss","_mm_mask_subs_epi16","_mm_mask_subs_epi8","_mm_mask_subs_epu16","_mm_mask_subs_epu8","_mm_mask_ternarylogic_epi32","_mm_mask_ternarylogic_epi64","_mm_mask_test_epi16_mask","_mm_mask_test_epi32_mask","_mm_mask_test_epi64_mask","_mm_mask_test_epi8_mask","_mm_mask_testn_epi16_mask","_mm_mask_testn_epi32_mask","_mm_mask_testn_epi64_mask","_mm_mask_testn_epi8_mask","_mm_mask_unpackhi_epi16","_mm_mask_unpackhi_epi32","_mm_mask_unpackhi_epi64","_mm_mask_unpackhi_epi8","_mm_mask_unpackhi_pd","_mm_mask_unpackhi_ps","_mm_mask_unpacklo_epi16","_mm_mask_unpacklo_epi32","_mm_mask_unpacklo_epi64","_mm_mask_unpacklo_epi8","_mm_mask_unpacklo_pd","_mm_mask_unpacklo_ps","_mm_mask_xor_epi32","_mm_mask_xor_epi64","_mm_maskload_epi32","_mm_maskload_epi64","_mm_maskload_pd","_mm_maskload_ps","_mm_maskmoveu_si128","_mm_maskstore_epi32","_mm_maskstore_epi64","_mm_maskstore_pd","_mm_maskstore_ps","_mm_maskz_abs_epi16","_mm_maskz_abs_epi32","_mm_maskz_abs_epi8","_mm_maskz_add_epi16","_mm_maskz_add_epi32","_mm_maskz_add_epi64","_mm_maskz_add_epi8","_mm_maskz_add_pd","_mm_maskz_add_ps","_mm_maskz_add_round_sd","_mm_maskz_add_round_ss","_mm_maskz_add_sd","_mm_maskz_add_ss","_mm_maskz_adds_epi16","_mm_maskz_adds_epi8","_mm_maskz_adds_epu16","_mm_maskz_adds_epu8","_mm_maskz_alignr_epi32","_mm_maskz_alignr_epi64","_mm_maskz_alignr_epi8","_mm_maskz_and_epi32","_mm_maskz_and_epi64","_mm_maskz_andnot_epi32","_mm_maskz_andnot_epi64","_mm_maskz_avg_epu16","_mm_maskz_avg_epu8","_mm_maskz_broadcastb_epi8","_mm_maskz_broadcastd_epi32","_mm_maskz_broadcastq_epi64","_mm_maskz_broadcastss_ps","_mm_maskz_broadcastw_epi16","_mm_maskz_compress_epi16","_mm_maskz_compress_epi32","_mm_maskz_compress_epi64","_mm_maskz_compress_epi8","_mm_maskz_compress_pd","_mm_maskz_compress_ps","_mm_maskz_conflict_epi32","_mm_maskz_conflict_epi64","_mm_maskz_cvt_roundps_ph","_mm_maskz_cvt_roundsd_ss","_mm_maskz_cvt_roundss_sd","_mm_maskz_cvtepi16_epi32","_mm_maskz_cvtepi16_epi64","_mm_maskz_cvtepi16_epi8","_mm_maskz_cvtepi32_epi16","_mm_maskz_cvtepi32_epi64","_mm_maskz_cvtepi32_epi8","_mm_maskz_cvtepi32_pd","_mm_maskz_cvtepi32_ps","_mm_maskz_cvtepi64_epi16","_mm_maskz_cvtepi64_epi32","_mm_maskz_cvtepi64_epi8","_mm_maskz_cvtepi8_epi16","_mm_maskz_cvtepi8_epi32","_mm_maskz_cvtepi8_epi64","_mm_maskz_cvtepu16_epi32","_mm_maskz_cvtepu16_epi64","_mm_maskz_cvtepu32_epi64","_mm_maskz_cvtepu32_pd","_mm_maskz_cvtepu8_epi16","_mm_maskz_cvtepu8_epi32","_mm_maskz_cvtepu8_epi64","_mm_maskz_cvtne2ps_pbh","_mm_maskz_cvtpd_epi32","_mm_maskz_cvtpd_epu32","_mm_maskz_cvtpd_ps","_mm_maskz_cvtph_ps","_mm_maskz_cvtps_epi32","_mm_maskz_cvtps_epu32","_mm_maskz_cvtps_ph","_mm_maskz_cvtsd_ss","_mm_maskz_cvtsepi16_epi8","_mm_maskz_cvtsepi32_epi16","_mm_maskz_cvtsepi32_epi8","_mm_maskz_cvtsepi64_epi16","_mm_maskz_cvtsepi64_epi32","_mm_maskz_cvtsepi64_epi8","_mm_maskz_cvtss_sd","_mm_maskz_cvttpd_epi32","_mm_maskz_cvttpd_epu32","_mm_maskz_cvttps_epi32","_mm_maskz_cvttps_epu32","_mm_maskz_cvtusepi16_epi8","_mm_maskz_cvtusepi32_epi16","_mm_maskz_cvtusepi32_epi8","_mm_maskz_cvtusepi64_epi16","_mm_maskz_cvtusepi64_epi32","_mm_maskz_cvtusepi64_epi8","_mm_maskz_dbsad_epu8","_mm_maskz_div_pd","_mm_maskz_div_ps","_mm_maskz_div_round_sd","_mm_maskz_div_round_ss","_mm_maskz_div_sd","_mm_maskz_div_ss","_mm_maskz_dpbf16_ps","_mm_maskz_dpbusd_epi32","_mm_maskz_dpbusds_epi32","_mm_maskz_dpwssd_epi32","_mm_maskz_dpwssds_epi32","_mm_maskz_expand_epi16","_mm_maskz_expand_epi32","_mm_maskz_expand_epi64","_mm_maskz_expand_epi8","_mm_maskz_expand_pd","_mm_maskz_expand_ps","_mm_maskz_expandloadu_epi16","_mm_maskz_expandloadu_epi32","_mm_maskz_expandloadu_epi64","_mm_maskz_expandloadu_epi8","_mm_maskz_expandloadu_pd","_mm_maskz_expandloadu_ps","_mm_maskz_fixupimm_pd","_mm_maskz_fixupimm_ps","_mm_maskz_fixupimm_round_sd","_mm_maskz_fixupimm_round_ss","_mm_maskz_fixupimm_sd","_mm_maskz_fixupimm_ss","_mm_maskz_fmadd_pd","_mm_maskz_fmadd_ps","_mm_maskz_fmadd_round_sd","_mm_maskz_fmadd_round_ss","_mm_maskz_fmadd_sd","_mm_maskz_fmadd_ss","_mm_maskz_fmaddsub_pd","_mm_maskz_fmaddsub_ps","_mm_maskz_fmsub_pd","_mm_maskz_fmsub_ps","_mm_maskz_fmsub_round_sd","_mm_maskz_fmsub_round_ss","_mm_maskz_fmsub_sd","_mm_maskz_fmsub_ss","_mm_maskz_fmsubadd_pd","_mm_maskz_fmsubadd_ps","_mm_maskz_fnmadd_pd","_mm_maskz_fnmadd_ps","_mm_maskz_fnmadd_round_sd","_mm_maskz_fnmadd_round_ss","_mm_maskz_fnmadd_sd","_mm_maskz_fnmadd_ss","_mm_maskz_fnmsub_pd","_mm_maskz_fnmsub_ps","_mm_maskz_fnmsub_round_sd","_mm_maskz_fnmsub_round_ss","_mm_maskz_fnmsub_sd","_mm_maskz_fnmsub_ss","_mm_maskz_getexp_pd","_mm_maskz_getexp_ps","_mm_maskz_getexp_round_sd","_mm_maskz_getexp_round_ss","_mm_maskz_getexp_sd","_mm_maskz_getexp_ss","_mm_maskz_getmant_pd","_mm_maskz_getmant_ps","_mm_maskz_getmant_round_sd","_mm_maskz_getmant_round_ss","_mm_maskz_getmant_sd","_mm_maskz_getmant_ss","_mm_maskz_gf2p8affine_epi64_epi8","_mm_maskz_gf2p8affineinv_epi64_epi8","_mm_maskz_gf2p8mul_epi8","_mm_maskz_load_epi32","_mm_maskz_load_epi64","_mm_maskz_load_pd","_mm_maskz_load_ps","_mm_maskz_loadu_epi16","_mm_maskz_loadu_epi32","_mm_maskz_loadu_epi64","_mm_maskz_loadu_epi8","_mm_maskz_loadu_pd","_mm_maskz_loadu_ps","_mm_maskz_lzcnt_epi32","_mm_maskz_lzcnt_epi64","_mm_maskz_madd_epi16","_mm_maskz_maddubs_epi16","_mm_maskz_max_epi16","_mm_maskz_max_epi32","_mm_maskz_max_epi64","_mm_maskz_max_epi8","_mm_maskz_max_epu16","_mm_maskz_max_epu32","_mm_maskz_max_epu64","_mm_maskz_max_epu8","_mm_maskz_max_pd","_mm_maskz_max_ps","_mm_maskz_max_round_sd","_mm_maskz_max_round_ss","_mm_maskz_max_sd","_mm_maskz_max_ss","_mm_maskz_min_epi16","_mm_maskz_min_epi32","_mm_maskz_min_epi8","_mm_maskz_min_epu16","_mm_maskz_min_epu32","_mm_maskz_min_epu64","_mm_maskz_min_epu8","_mm_maskz_min_pd","_mm_maskz_min_ps","_mm_maskz_min_round_sd","_mm_maskz_min_round_ss","_mm_maskz_min_sd","_mm_maskz_min_ss","_mm_maskz_mov_epi16","_mm_maskz_mov_epi32","_mm_maskz_mov_epi64","_mm_maskz_mov_epi8","_mm_maskz_mov_pd","_mm_maskz_mov_ps","_mm_maskz_move_sd","_mm_maskz_move_ss","_mm_maskz_movedup_pd","_mm_maskz_movehdup_ps","_mm_maskz_moveldup_ps","_mm_maskz_mul_epi32","_mm_maskz_mul_epu32","_mm_maskz_mul_pd","_mm_maskz_mul_ps","_mm_maskz_mul_round_sd","_mm_maskz_mul_round_ss","_mm_maskz_mul_sd","_mm_maskz_mul_ss","_mm_maskz_mulhi_epi16","_mm_maskz_mulhi_epu16","_mm_maskz_mulhrs_epi16","_mm_maskz_mullo_epi16","_mm_maskz_mullo_epi32","_mm_maskz_multishift_epi64_epi8","_mm_maskz_or_epi32","_mm_maskz_or_epi64","_mm_maskz_packs_epi16","_mm_maskz_packs_epi32","_mm_maskz_packus_epi16","_mm_maskz_packus_epi32","_mm_maskz_permute_pd","_mm_maskz_permute_ps","_mm_maskz_permutevar_pd","_mm_maskz_permutevar_ps","_mm_maskz_permutex2var_epi16","_mm_maskz_permutex2var_epi32","_mm_maskz_permutex2var_epi64","_mm_maskz_permutex2var_epi8","_mm_maskz_permutex2var_pd","_mm_maskz_permutex2var_ps","_mm_maskz_permutexvar_epi16","_mm_maskz_permutexvar_epi8","_mm_maskz_popcnt_epi16","_mm_maskz_popcnt_epi32","_mm_maskz_popcnt_epi64","_mm_maskz_popcnt_epi8","_mm_maskz_rcp14_pd","_mm_maskz_rcp14_ps","_mm_maskz_rcp14_sd","_mm_maskz_rcp14_ss","_mm_maskz_rol_epi32","_mm_maskz_rol_epi64","_mm_maskz_rolv_epi32","_mm_maskz_rolv_epi64","_mm_maskz_ror_epi32","_mm_maskz_ror_epi64","_mm_maskz_rorv_epi32","_mm_maskz_rorv_epi64","_mm_maskz_roundscale_pd","_mm_maskz_roundscale_ps","_mm_maskz_roundscale_round_sd","_mm_maskz_roundscale_round_ss","_mm_maskz_roundscale_sd","_mm_maskz_roundscale_ss","_mm_maskz_rsqrt14_pd","_mm_maskz_rsqrt14_ps","_mm_maskz_rsqrt14_sd","_mm_maskz_rsqrt14_ss","_mm_maskz_scalef_pd","_mm_maskz_scalef_ps","_mm_maskz_scalef_round_sd","_mm_maskz_scalef_round_ss","_mm_maskz_scalef_sd","_mm_maskz_scalef_ss","_mm_maskz_set1_epi16","_mm_maskz_set1_epi32","_mm_maskz_set1_epi64","_mm_maskz_set1_epi8","_mm_maskz_shldi_epi16","_mm_maskz_shldi_epi32","_mm_maskz_shldi_epi64","_mm_maskz_shldv_epi16","_mm_maskz_shldv_epi32","_mm_maskz_shldv_epi64","_mm_maskz_shrdi_epi16","_mm_maskz_shrdi_epi32","_mm_maskz_shrdi_epi64","_mm_maskz_shrdv_epi16","_mm_maskz_shrdv_epi32","_mm_maskz_shrdv_epi64","_mm_maskz_shuffle_epi32","_mm_maskz_shuffle_epi8","_mm_maskz_shuffle_pd","_mm_maskz_shuffle_ps","_mm_maskz_shufflehi_epi16","_mm_maskz_shufflelo_epi16","_mm_maskz_sll_epi16","_mm_maskz_sll_epi32","_mm_maskz_sll_epi64","_mm_maskz_slli_epi16","_mm_maskz_slli_epi32","_mm_maskz_slli_epi64","_mm_maskz_sllv_epi16","_mm_maskz_sllv_epi32","_mm_maskz_sllv_epi64","_mm_maskz_sqrt_pd","_mm_maskz_sqrt_ps","_mm_maskz_sqrt_round_sd","_mm_maskz_sqrt_round_ss","_mm_maskz_sqrt_sd","_mm_maskz_sqrt_ss","_mm_maskz_sra_epi16","_mm_maskz_sra_epi32","_mm_maskz_sra_epi64","_mm_maskz_srai_epi16","_mm_maskz_srai_epi32","_mm_maskz_srai_epi64","_mm_maskz_srav_epi16","_mm_maskz_srav_epi32","_mm_maskz_srav_epi64","_mm_maskz_srl_epi16","_mm_maskz_srl_epi32","_mm_maskz_srl_epi64","_mm_maskz_srli_epi16","_mm_maskz_srli_epi32","_mm_maskz_srli_epi64","_mm_maskz_srlv_epi16","_mm_maskz_srlv_epi32","_mm_maskz_srlv_epi64","_mm_maskz_sub_epi16","_mm_maskz_sub_epi32","_mm_maskz_sub_epi64","_mm_maskz_sub_epi8","_mm_maskz_sub_pd","_mm_maskz_sub_ps","_mm_maskz_sub_round_sd","_mm_maskz_sub_round_ss","_mm_maskz_sub_sd","_mm_maskz_sub_ss","_mm_maskz_subs_epi16","_mm_maskz_subs_epi8","_mm_maskz_subs_epu16","_mm_maskz_subs_epu8","_mm_maskz_ternarylogic_epi32","_mm_maskz_ternarylogic_epi64","_mm_maskz_unpackhi_epi16","_mm_maskz_unpackhi_epi32","_mm_maskz_unpackhi_epi64","_mm_maskz_unpackhi_epi8","_mm_maskz_unpackhi_pd","_mm_maskz_unpackhi_ps","_mm_maskz_unpacklo_epi16","_mm_maskz_unpacklo_epi32","_mm_maskz_unpacklo_epi64","_mm_maskz_unpacklo_epi8","_mm_maskz_unpacklo_pd","_mm_maskz_unpacklo_ps","_mm_maskz_xor_epi32","_mm_maskz_xor_epi64","_mm_max_epi16","_mm_max_epi32","_mm_max_epi64","_mm_max_epi8","_mm_max_epu16","_mm_max_epu32","_mm_max_epu64","_mm_max_epu8","_mm_max_pd","_mm_max_ps","_mm_max_round_sd","_mm_max_round_ss","_mm_max_sd","_mm_max_ss","_mm_mfence","_mm_min_epi16","_mm_min_epi32","_mm_min_epi8","_mm_min_epu16","_mm_min_epu32","_mm_min_epu64","_mm_min_epu8","_mm_min_pd","_mm_min_ps","_mm_min_round_sd","_mm_min_round_ss","_mm_min_sd","_mm_min_ss","_mm_minpos_epu16","_mm_move_epi64","_mm_move_sd","_mm_move_ss","_mm_movedup_pd","_mm_movehdup_ps","_mm_movehl_ps","_mm_moveldup_ps","_mm_movelh_ps","_mm_movemask_epi8","_mm_movemask_pd","_mm_movemask_ps","_mm_movepi16_mask","_mm_movepi8_mask","_mm_movm_epi16","_mm_movm_epi8","_mm_mpsadbw_epu8","_mm_mul_epi32","_mm_mul_epu32","_mm_mul_pd","_mm_mul_ps","_mm_mul_round_sd","_mm_mul_round_ss","_mm_mul_sd","_mm_mul_ss","_mm_mulhi_epi16","_mm_mulhi_epu16","_mm_mulhrs_epi16","_mm_mullo_epi16","_mm_mullo_epi32","_mm_multishift_epi64_epi8","_mm_or_epi32","_mm_or_epi64","_mm_or_pd","_mm_or_ps","_mm_or_si128","_mm_packs_epi16","_mm_packs_epi32","_mm_packus_epi16","_mm_packus_epi32","_mm_pause","_mm_permute_pd","_mm_permute_ps","_mm_permutevar_pd","_mm_permutevar_ps","_mm_permutex2var_epi16","_mm_permutex2var_epi32","_mm_permutex2var_epi64","_mm_permutex2var_epi8","_mm_permutex2var_pd","_mm_permutex2var_ps","_mm_permutexvar_epi16","_mm_permutexvar_epi8","_mm_popcnt_epi16","_mm_popcnt_epi32","_mm_popcnt_epi64","_mm_popcnt_epi8","_mm_prefetch","_mm_rcp14_pd","_mm_rcp14_ps","_mm_rcp14_sd","_mm_rcp14_ss","_mm_rcp_ps","_mm_rcp_ss","_mm_rol_epi32","_mm_rol_epi64","_mm_rolv_epi32","_mm_rolv_epi64","_mm_ror_epi32","_mm_ror_epi64","_mm_rorv_epi32","_mm_rorv_epi64","_mm_round_pd","_mm_round_ps","_mm_round_sd","_mm_round_ss","_mm_roundscale_pd","_mm_roundscale_ps","_mm_roundscale_round_sd","_mm_roundscale_round_ss","_mm_roundscale_sd","_mm_roundscale_ss","_mm_rsqrt14_sd","_mm_rsqrt14_ss","_mm_rsqrt_ps","_mm_rsqrt_ss","_mm_sad_epu8","_mm_scalef_pd","_mm_scalef_ps","_mm_scalef_round_sd","_mm_scalef_round_ss","_mm_scalef_sd","_mm_scalef_ss","_mm_set1_epi16","_mm_set1_epi32","_mm_set1_epi64x","_mm_set1_epi8","_mm_set1_pd","_mm_set1_ps","_mm_set_epi16","_mm_set_epi32","_mm_set_epi64x","_mm_set_epi8","_mm_set_pd","_mm_set_pd1","_mm_set_ps","_mm_set_ps1","_mm_set_sd","_mm_set_ss","_mm_setcsr","_mm_setr_epi16","_mm_setr_epi32","_mm_setr_epi8","_mm_setr_pd","_mm_setr_ps","_mm_setzero_pd","_mm_setzero_ps","_mm_setzero_si128","_mm_sfence","_mm_sha1msg1_epu32","_mm_sha1msg2_epu32","_mm_sha1nexte_epu32","_mm_sha1rnds4_epu32","_mm_sha256msg1_epu32","_mm_sha256msg2_epu32","_mm_sha256rnds2_epu32","_mm_shldi_epi16","_mm_shldi_epi32","_mm_shldi_epi64","_mm_shldv_epi16","_mm_shldv_epi32","_mm_shldv_epi64","_mm_shrdi_epi16","_mm_shrdi_epi32","_mm_shrdi_epi64","_mm_shrdv_epi16","_mm_shrdv_epi32","_mm_shrdv_epi64","_mm_shuffle_epi32","_mm_shuffle_epi8","_mm_shuffle_pd","_mm_shuffle_ps","_mm_shufflehi_epi16","_mm_shufflelo_epi16","_mm_sign_epi16","_mm_sign_epi32","_mm_sign_epi8","_mm_sll_epi16","_mm_sll_epi32","_mm_sll_epi64","_mm_slli_epi16","_mm_slli_epi32","_mm_slli_epi64","_mm_slli_si128","_mm_sllv_epi16","_mm_sllv_epi32","_mm_sllv_epi64","_mm_sqrt_pd","_mm_sqrt_ps","_mm_sqrt_round_sd","_mm_sqrt_round_ss","_mm_sqrt_sd","_mm_sqrt_ss","_mm_sra_epi16","_mm_sra_epi32","_mm_sra_epi64","_mm_srai_epi16","_mm_srai_epi32","_mm_srai_epi64","_mm_srav_epi16","_mm_srav_epi32","_mm_srav_epi64","_mm_srl_epi16","_mm_srl_epi32","_mm_srl_epi64","_mm_srli_epi16","_mm_srli_epi32","_mm_srli_epi64","_mm_srli_si128","_mm_srlv_epi16","_mm_srlv_epi32","_mm_srlv_epi64","_mm_store1_pd","_mm_store1_ps","_mm_store_epi32","_mm_store_epi64","_mm_store_pd","_mm_store_pd1","_mm_store_ps","_mm_store_ps1","_mm_store_sd","_mm_store_si128","_mm_store_ss","_mm_storeh_pd","_mm_storel_epi64","_mm_storel_pd","_mm_storer_pd","_mm_storer_ps","_mm_storeu_epi16","_mm_storeu_epi32","_mm_storeu_epi64","_mm_storeu_epi8","_mm_storeu_pd","_mm_storeu_ps","_mm_storeu_si128","_mm_stream_pd","_mm_stream_ps","_mm_stream_sd","_mm_stream_si128","_mm_stream_si32","_mm_stream_si64","_mm_stream_ss","_mm_sub_epi16","_mm_sub_epi32","_mm_sub_epi64","_mm_sub_epi8","_mm_sub_pd","_mm_sub_ps","_mm_sub_round_sd","_mm_sub_round_ss","_mm_sub_sd","_mm_sub_ss","_mm_subs_epi16","_mm_subs_epi8","_mm_subs_epu16","_mm_subs_epu8","_mm_ternarylogic_epi32","_mm_ternarylogic_epi64","_mm_test_all_ones","_mm_test_all_zeros","_mm_test_epi16_mask","_mm_test_epi32_mask","_mm_test_epi64_mask","_mm_test_epi8_mask","_mm_test_mix_ones_zeros","_mm_testc_pd","_mm_testc_ps","_mm_testc_si128","_mm_testn_epi16_mask","_mm_testn_epi32_mask","_mm_testn_epi64_mask","_mm_testn_epi8_mask","_mm_testnzc_pd","_mm_testnzc_ps","_mm_testnzc_si128","_mm_testz_pd","_mm_testz_ps","_mm_testz_si128","_mm_tzcnt_32","_mm_tzcnt_64","_mm_ucomieq_sd","_mm_ucomieq_ss","_mm_ucomige_sd","_mm_ucomige_ss","_mm_ucomigt_sd","_mm_ucomigt_ss","_mm_ucomile_sd","_mm_ucomile_ss","_mm_ucomilt_sd","_mm_ucomilt_ss","_mm_ucomineq_sd","_mm_ucomineq_ss","_mm_undefined_pd","_mm_undefined_ps","_mm_undefined_si128","_mm_unpackhi_epi16","_mm_unpackhi_epi32","_mm_unpackhi_epi64","_mm_unpackhi_epi8","_mm_unpackhi_pd","_mm_unpackhi_ps","_mm_unpacklo_epi16","_mm_unpacklo_epi32","_mm_unpacklo_epi64","_mm_unpacklo_epi8","_mm_unpacklo_pd","_mm_unpacklo_ps","_mm_xor_epi32","_mm_xor_epi64","_mm_xor_pd","_mm_xor_ps","_mm_xor_si128","_mulx_u32","_mulx_u64","_pdep_u32","_pdep_u64","_pext_u32","_pext_u64","_popcnt32","_popcnt64","_rdrand16_step","_rdrand32_step","_rdrand64_step","_rdseed16_step","_rdseed32_step","_rdseed64_step","_rdtsc","_store_mask32","_store_mask64","_subborrow_u32","_subborrow_u64","_t1mskc_u32","_t1mskc_u64","_tzcnt_u32","_tzcnt_u64","_tzmsk_u32","_tzmsk_u64","_xabort","_xabort_code","_xbegin","_xend","_xgetbv","_xrstor","_xrstor64","_xrstors","_xrstors64","_xsave","_xsave64","_xsavec","_xsavec64","_xsaveopt","_xsaveopt64","_xsaves","_xsaves64","_xsetbv","_xtest","cmpxchg16b","eax","ebx","ecx","edx","has_cpuid","IntoIter","TryFromSliceError","advance_back_by","advance_by","as_mut_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","count","description","drop","empty","fmt","fmt","fmt","fold","from","from","from","from_fn","from_mut","from_ref","into","into","into_iter","is_empty","last","len","new","new_unchecked","next","next_back","rfold","size_hint","try_from","try_from","try_from_fn","try_into","try_into","type_id","type_id","Acknowledge","Ampersand","Apostrophe","Asterisk","Backspace","Bell","Cancel","CapitalA","CapitalB","CapitalC","CapitalD","CapitalE","CapitalF","CapitalG","CapitalH","CapitalI","CapitalJ","CapitalK","CapitalL","CapitalM","CapitalN","CapitalO","CapitalP","CapitalQ","CapitalR","CapitalS","CapitalT","CapitalU","CapitalV","CapitalW","CapitalX","CapitalY","CapitalZ","CarriageReturn","Char","CharacterTabulation","CircumflexAccent","Colon","Comma","CommercialAt","DataLinkEscape","Delete","DeviceControlFour","DeviceControlOne","DeviceControlThree","DeviceControlTwo","Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","DollarSign","EndOfMedium","EndOfText","EndOfTransmission","EndOfTransmissionBlock","Enquiry","EqualsSign","Escape","EscapeDefault","ExclamationMark","FormFeed","FullStop","GraveAccent","GreaterThanSign","HyphenMinus","InformationSeparatorFour","InformationSeparatorOne","InformationSeparatorThree","InformationSeparatorTwo","LeftCurlyBracket","LeftParenthesis","LeftSquareBracket","LessThanSign","LineFeed","LineTabulation","LowLine","NegativeAcknowledge","Null","NumberSign","PercentSign","PlusSign","QuestionMark","QuotationMark","ReverseSolidus","RightCurlyBracket","RightParenthesis","RightSquareBracket","Semicolon","ShiftIn","ShiftOut","SmallA","SmallB","SmallC","SmallD","SmallE","SmallF","SmallG","SmallH","SmallI","SmallJ","SmallK","SmallL","SmallM","SmallN","SmallO","SmallP","SmallQ","SmallR","SmallS","SmallT","SmallU","SmallV","SmallW","SmallX","SmallY","SmallZ","Solidus","Space","StartOfHeading","StartOfText","Substitute","SynchronousIdle","Tilde","VerticalLine","advance_back_by","advance_by","as_str","backward_checked","backward_unchecked","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","count","digit","digit_unchecked","eq","escape_default","fmt","fmt","fmt","fmt","forward_checked","forward_unchecked","from","from","from_u8","from_u8_unchecked","hash","into","into","into_iter","last","len","next","next_back","partial_cmp","size_hint","steps_between","to_char","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","assert_matches","debug_assert_matches","AsyncIterator","FromIter","Item","borrow","borrow_mut","clone","fmt","from","from_iter","into","poll_next","poll_next","size_hint","size_hint","size_hint","try_from","try_into","type_id","Borrow","BorrowMut","borrow","borrow_mut","BorrowError","BorrowMutError","Cell","LazyCell","OnceCell","Ref","RefCell","RefMut","SyncUnsafeCell","UnsafeCell","as_array_of_cells","as_ptr","as_ptr","as_slice_of_cells","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_from","cmp","cmp","default","default","default","default","default","default","deref","deref","deref","deref_mut","description","description","eq","eq","eq","filter_map","filter_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","ge","ge","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_or_init","get_or_try_init","gt","gt","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","le","le","leak","leak","lt","lt","map","map","map_split","map_split","new","new","new","new","new","new","partial_cmp","partial_cmp","raw_get","raw_get","replace","replace","replace_with","set","set","swap","swap","take","take","take","try_borrow","try_borrow_mut","try_borrow_unguarded","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_leak","update","CharTryFromError","DecodeUtf16","DecodeUtf16Error","EscapeDebug","EscapeDefault","EscapeUnicode","MAX","ParseCharError","REPLACEMENT_CHARACTER","ToLowercase","ToUppercase","TryFromCharError","UNICODE_VERSION","advance_by","advance_by","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","count","count","count","decode_utf16","description","description","description","encode_utf16_raw","encode_utf8_raw","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_digit","from_u32","from_u32_unchecked","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","last","last","len","len","len","next","next","next","next","next","next","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpaired_surrogate","Clone","Clone","clone","clone_from","Eq","Eq","Equal","Greater","Less","Ord","Ord","Ordering","PartialEq","PartialEq","PartialOrd","PartialOrd","Reverse","borrow","borrow","borrow_mut","borrow_mut","clamp","clone","clone","clone_from","cmp","cmp","cmp","default","eq","eq","eq","fmt","fmt","from","from","ge","ge","gt","gt","hash","hash","into","into","is_eq","is_ge","is_gt","is_le","is_lt","is_ne","le","le","lt","lt","max","max","max_by","max_by_key","min","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","ne","partial_cmp","partial_cmp","partial_cmp","reverse","then","then_with","try_from","try_from","try_into","try_into","type_id","type_id","AsMut","AsRef","Error","Error","FloatToInt","From","Infallible","Into","TryFrom","TryInto","as_mut","as_ref","borrow","borrow_mut","clone","cmp","description","eq","fmt","fmt","from","from","from","from","hash","identity","into","into","partial_cmp","try_from","try_from","try_into","try_into","type_id","Default","Default","default","Error","Request","Source","borrow","borrow","borrow_mut","borrow_mut","cause","clone","description","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","fmt","fmt","from","into","into_iter","is","is","is","next","provide","provide_ref","provide_ref_with","provide_value","provide_value_with","request_ref","request_value","source","sources","try_from","try_into","type_id","type_id","would_be_satisfied_by_ref_of","would_be_satisfied_by_value_of","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","consts","E","EGAMMA","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_3","FRAC_1_SQRT_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PHI","PI","SQRT_2","SQRT_3","TAU","DIGITS","EPSILON","INFINITY","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","RADIX","consts","E","EGAMMA","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_3","FRAC_1_SQRT_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PHI","PI","SQRT_2","SQRT_3","TAU","CStr","FromBytesUntilNulError","FromBytesWithNulError","NonZero_c_char","NonZero_c_int","NonZero_c_long","NonZero_c_longlong","NonZero_c_schar","NonZero_c_short","NonZero_c_uchar","NonZero_c_uint","NonZero_c_ulong","NonZero_c_ulonglong","NonZero_c_ushort","VaList","VaListImpl","arg","as_ptr","as_ref","as_va_list","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_char","c_double","c_float","c_int","c_long","c_longlong","c_ptrdiff_t","c_schar","c_short","c_size_t","c_ssize_t","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","clone","clone","clone","cmp","count_bytes","default","deref","deref_mut","description","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes_until_nul","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_ptr","hash","index","into","into","into","into","into","is_empty","partial_cmp","to_bytes","to_bytes_with_nul","to_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_copy","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Err","Error","Formatter","Left","LowerExp","LowerHex","Octal","Ok","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","sign_aware_zero_pad","sign_minus","sign_plus","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","Future","IntoFuture","IntoFuture","Output","Output","Pending","PollFn","Ready","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","fmt","fmt","fmt","from","from","from","into","into","into","into_future","into_future","into_future","into_future","into_inner","join","pending","poll","poll","poll","poll","poll_fn","ready","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BuildHasher","BuildHasherDefault","Hash","Hash","Hasher","Hasher","SipHasher","borrow","borrow","borrow_mut","borrow_mut","build_hasher","build_hasher","clone","clone","default","default","eq","finish","finish","fmt","fmt","from","from","hash","hash_one","hash_slice","into","into","new","new_with_keys","try_from","try_from","try_into","try_into","type_id","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","black_box","must_use","spin_loop","unreachable_unchecked","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","abort","add_with_overflow","arith_offset","assert_inhabited","assert_mem_uninitialized_valid","assert_zero_valid","assume","atomic_and_acqrel","atomic_and_acquire","atomic_and_relaxed","atomic_and_release","atomic_and_seqcst","atomic_cxchg_acqrel_acquire","atomic_cxchg_acqrel_relaxed","atomic_cxchg_acqrel_seqcst","atomic_cxchg_acquire_acquire","atomic_cxchg_acquire_relaxed","atomic_cxchg_acquire_seqcst","atomic_cxchg_relaxed_acquire","atomic_cxchg_relaxed_relaxed","atomic_cxchg_relaxed_seqcst","atomic_cxchg_release_acquire","atomic_cxchg_release_relaxed","atomic_cxchg_release_seqcst","atomic_cxchg_seqcst_acquire","atomic_cxchg_seqcst_relaxed","atomic_cxchg_seqcst_seqcst","atomic_cxchgweak_acqrel_acquire","atomic_cxchgweak_acqrel_relaxed","atomic_cxchgweak_acqrel_seqcst","atomic_cxchgweak_acquire_acquire","atomic_cxchgweak_acquire_relaxed","atomic_cxchgweak_acquire_seqcst","atomic_cxchgweak_relaxed_acquire","atomic_cxchgweak_relaxed_relaxed","atomic_cxchgweak_relaxed_seqcst","atomic_cxchgweak_release_acquire","atomic_cxchgweak_release_relaxed","atomic_cxchgweak_release_seqcst","atomic_cxchgweak_seqcst_acquire","atomic_cxchgweak_seqcst_relaxed","atomic_cxchgweak_seqcst_seqcst","atomic_fence_acqrel","atomic_fence_acquire","atomic_fence_release","atomic_fence_seqcst","atomic_load_acquire","atomic_load_relaxed","atomic_load_seqcst","atomic_load_unordered","atomic_max_acqrel","atomic_max_acquire","atomic_max_relaxed","atomic_max_release","atomic_max_seqcst","atomic_min_acqrel","atomic_min_acquire","atomic_min_relaxed","atomic_min_release","atomic_min_seqcst","atomic_nand_acqrel","atomic_nand_acquire","atomic_nand_relaxed","atomic_nand_release","atomic_nand_seqcst","atomic_or_acqrel","atomic_or_acquire","atomic_or_relaxed","atomic_or_release","atomic_or_seqcst","atomic_singlethreadfence_acqrel","atomic_singlethreadfence_acquire","atomic_singlethreadfence_release","atomic_singlethreadfence_seqcst","atomic_store_relaxed","atomic_store_release","atomic_store_seqcst","atomic_store_unordered","atomic_umax_acqrel","atomic_umax_acquire","atomic_umax_relaxed","atomic_umax_release","atomic_umax_seqcst","atomic_umin_acqrel","atomic_umin_acquire","atomic_umin_relaxed","atomic_umin_release","atomic_umin_seqcst","atomic_xadd_acqrel","atomic_xadd_acquire","atomic_xadd_relaxed","atomic_xadd_release","atomic_xadd_seqcst","atomic_xchg_acqrel","atomic_xchg_acquire","atomic_xchg_relaxed","atomic_xchg_release","atomic_xchg_seqcst","atomic_xor_acqrel","atomic_xor_acquire","atomic_xor_relaxed","atomic_xor_release","atomic_xor_seqcst","atomic_xsub_acqrel","atomic_xsub_acquire","atomic_xsub_relaxed","atomic_xsub_release","atomic_xsub_seqcst","bitreverse","black_box","breakpoint","bswap","caller_location","ceilf32","ceilf64","compare_bytes","const_allocate","const_deallocate","const_eval_select","copy","copy_nonoverlapping","copysignf32","copysignf64","cosf32","cosf64","ctlz","ctlz_nonzero","ctpop","cttz","cttz_nonzero","discriminant_value","drop_in_place","exact_div","exp2f32","exp2f64","expf32","expf64","fabsf32","fabsf64","fadd_fast","fdiv_fast","float_to_int_unchecked","floorf32","floorf64","fmaf32","fmaf64","fmul_fast","forget","frem_fast","fsub_fast","likely","log10f32","log10f64","log2f32","log2f64","logf32","logf64","maxnumf32","maxnumf64","min_align_of","min_align_of_val","minnumf32","minnumf64","mir","mul_with_overflow","nearbyintf32","nearbyintf64","needs_drop","nontemporal_store","offset","option_payload_ptr","powf32","powf64","powif32","powif64","pref_align_of","prefetch_read_data","prefetch_read_instruction","prefetch_write_data","prefetch_write_instruction","ptr_guaranteed_cmp","ptr_mask","ptr_offset_from","ptr_offset_from_unsigned","raw_eq","read_via_copy","rintf32","rintf64","rotate_left","rotate_right","roundevenf32","roundevenf64","roundf32","roundf64","rustc_peek","saturating_add","saturating_sub","sinf32","sinf64","size_of","size_of_val","sqrtf32","sqrtf64","sub_with_overflow","transmute","transmute_unchecked","truncf32","truncf64","try","type_id","type_name","unaligned_volatile_load","unaligned_volatile_store","unchecked_add","unchecked_div","unchecked_mul","unchecked_rem","unchecked_shl","unchecked_shr","unchecked_sub","unlikely","unreachable","variant_count","volatile_copy_memory","volatile_copy_nonoverlapping_memory","volatile_load","volatile_set_memory","volatile_store","vtable_align","vtable_size","wrapping_add","wrapping_mul","wrapping_sub","write_bytes","write_via_move","BasicBlock","Call","CastTransmute","Checked","CopyForDeref","Deinit","Discriminant","Drop","Field","Goto","Len","Move","Offset","Retag","Return","SetDiscriminant","Static","StaticMut","StorageDead","StorageLive","Unreachable","Variant","borrow","borrow_mut","from","into","mir","place","try_from","try_into","type_id","MAX","MIN","ArrayChunks","ByRefSized","Chain","Cloned","Copied","Cycle","DoubleEndedIterator","Empty","Enumerate","ExactSizeIterator","Extend","Filter","FilterMap","FlatMap","Flatten","FromFn","FromIterator","Fuse","FusedIterator","InPlaceIterable","Inspect","Intersperse","IntersperseWith","IntoIter","IntoIterator","Item","Item","Iterator","Map","MapWhile","MapWindows","Once","OnceWith","Peekable","Product","Repeat","RepeatN","RepeatWith","Rev","Scan","Skip","SkipWhile","SourceIter","Step","StepBy","Successors","Sum","Take","TakeWhile","TrustedLen","TrustedRandomAccess","TrustedRandomAccessNoCoerce","TrustedStep","Zip","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","all","all","any","any","array_chunks","array_chunks","backward","backward","backward_checked","backward_unchecked","backward_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","chain","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cloned","cloned","cmp","cmp","cmp_by","cmp_by","collect","collect","collect_into","collect_into","copied","copied","count","count","count","count","count","count","count","count","count","count","count","count","count","cycle","cycle","default","default","default","default","default","default","default","default","empty","enumerate","enumerate","eq","eq","eq_by","eq_by","extend","extend_one","extend_one","extend_reserve","extend_reserve","filter","filter","filter_map","filter_map","find","find","find","find","find","find_map","find_map","flat_map","flat_map","flatten","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","for_each","for_each","for_each","forward","forward","forward_checked","forward_unchecked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_generator","from_iter","fuse","fuse","ge","ge","gt","gt","inspect","inspect","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_partitioned","is_partitioned","is_sorted","is_sorted","is_sorted_by","is_sorted_by","is_sorted_by_key","is_sorted_by_key","last","last","last","last","last","last","last","last","last","last","le","le","len","len","len","len","len","len","len","len","len","len","len","len","len","lt","lt","map","map","map_while","map_while","map_windows","map_windows","max","max","max_by","max_by","max_by_key","max_by_key","min","min","min_by","min_by","min_by_key","min_by_key","ne","ne","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_chunk","next_chunk","next_chunk","next_chunk","next_chunk","next_if","next_if_eq","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","once","once_with","partial_cmp","partial_cmp","partial_cmp_by","partial_cmp_by","partition","partition","partition_in_place","partition_in_place","peek","peek_mut","peekable","peekable","position","position","product","product","product","reduce","reduce","repeat","repeat_n","repeat_with","rev","rev","rfind","rfind","rfind","rfind","rfind","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rposition","rposition","scan","scan","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip","skip_while","skip_while","step_by","step_by","steps_between","successors","sum","sum","sum","take","take","take_while","take_while","try_collect","try_collect","try_find","try_find","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_for_each","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_reduce","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unzip","unzip","zip","zip","zip","ConstParamTy","ConstParamTy","Copy","Copy","Destruct","Discriminant","DiscriminantKind","FnPtr","PhantomData","PhantomPinned","PointerLike","Send","Sized","StructuralEq","StructuralPartialEq","Sync","Tuple","Unpin","Unsize","addr","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","partial_cmp","partial_cmp","try_from","try_from","try_into","try_into","type_id","type_id","ALIGNMENT","Assume","BikeshedIntrinsicFrom","Discriminant","LIFETIMES","ManuallyDrop","MaybeUninit","NOTHING","SAFETY","VALIDITY","add","align_of","align_of_val","align_of_val_raw","alignment","and","array_assume_init","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","but_not","clone","clone","clone","clone","cmp","copy","default","deref","deref_mut","discriminant","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","forget","forget_unsized","from","from","from","from","hash","hash","into","into","into","into","into_inner","lifetimes","min_align_of","min_align_of_val","needs_drop","new","new","offset_of","partial_cmp","replace","safety","size_of","size_of_val","size_of_val_raw","slice_as_bytes","slice_as_bytes_mut","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","sub","swap","take","take","transmute","transmute_copy","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninit","uninit_array","uninitialized","validity","variant_count","write","write_slice","write_slice_cloned","zeroed","zeroed","AddrParseError","AdminLocal","BITS","BITS","BROADCAST","Global","InterfaceLocal","IpAddr","Ipv4Addr","Ipv6Addr","Ipv6MulticastScope","LOCALHOST","LOCALHOST","LinkLocal","OrganizationLocal","RealmLocal","SiteLocal","SocketAddr","SocketAddrV4","SocketAddrV6","UNSPECIFIED","UNSPECIFIED","V4","V4","V6","V6","backward_checked","backward_checked","backward_unchecked","backward_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","flowinfo","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","forward_unchecked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","ip","ip","ip","is_benchmarking","is_benchmarking","is_benchmarking","is_broadcast","is_documentation","is_documentation","is_documentation","is_global","is_global","is_global","is_ipv4","is_ipv4","is_ipv6","is_ipv6","is_link_local","is_loopback","is_loopback","is_loopback","is_multicast","is_multicast","is_multicast","is_private","is_reserved","is_shared","is_unicast","is_unicast_global","is_unicast_link_local","is_unique_local","is_unspecified","is_unspecified","is_unspecified","multicast_scope","new","new","new","new","new","octets","octets","parse_ascii","parse_ascii","parse_ascii","parse_ascii","parse_ascii","parse_ascii","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","port","port","port","scope_id","segments","set_flowinfo","set_ip","set_ip","set_ip","set_port","set_port","set_port","set_scope_id","steps_between","steps_between","to_bits","to_bits","to_canonical","to_canonical","to_ipv4","to_ipv4_mapped","to_ipv6_compatible","to_ipv6_mapped","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","BITS","Empty","FpCategory","Infinite","IntErrorKind","InvalidDigit","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","Nan","NegOverflow","NonZeroI128","NonZeroI16","NonZeroI32","NonZeroI64","NonZeroI8","NonZeroIsize","NonZeroU128","NonZeroU16","NonZeroU32","NonZeroU64","NonZeroU8","NonZeroUsize","Normal","ParseIntError","PosOverflow","Saturating","Subnormal","TryFromIntError","Wrapping","Zero","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_next_power_of_two","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_be","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_le","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","get","get","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","is_power_of_two","kind","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","midpoint","midpoint","midpoint","midpoint","midpoint","midpoint","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","not","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_abs","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","overflowing_neg","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_be","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","to_le","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","unsigned_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_abs","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","wrapping_neg","Add","AddAssign","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Included","Index","IndexMut","Mul","MulAssign","Neg","Not","OneSidedRange","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Receiver","Rem","RemAssign","Residual","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","Target","Try","TryType","Unbounded","Yeet","Yield","Yielded","add","add_assign","advance_back_by","advance_by","as_mut","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","clone","clone","clone","clone","clone","clone","clone","clone","clone","cloned","cmp","contains","contains","contains","contains","contains","contains","contains","continue_value","count","count","default","default","deref","deref_mut","div","div_assign","drop","end","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from_output","from_output","from_residual","from_residual","get","get","get","get","get","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","is_break","is_continue","is_empty","is_empty","is_sorted","is_sorted","last","last","map","map_break","map_continue","max","max","min","min","mul","mul_assign","neg","new","next","next","next","next_back","next_back","not","nth","nth","nth","nth_back","nth_back","partial_cmp","rem","rem_assign","resume","rfold","shl","shl_assign","shr","shr_assign","size_hint","size_hint","size_hint","start","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub_assign","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","IntoIter","Iter","IterMut","None","Option","Some","and","and_then","as_deref","as_deref_mut","as_mut","as_mut_slice","as_pin_mut","as_pin_ref","as_ref","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone","clone","clone_from","cloned","cloned","cmp","copied","copied","default","eq","expect","filter","flatten","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_output","from_residual","from_residual","get_or_insert","get_or_insert_default","get_or_insert_with","hash","insert","inspect","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_none","is_some","is_some_and","iter","iter_mut","map","map_or","map_or_else","next","next","next","next_back","next_back","next_back","ok_or","ok_or_else","or","or_else","partial_cmp","product","replace","size_hint","size_hint","size_hint","sum","take","take_if","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","unzip","xor","zip","zip_with","AssertUnwindSafe","Location","PanicInfo","RefUnwindSafe","UnwindSafe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_once","caller","can_unwind","clone","cmp","column","default","deref","deref_mut","eq","file","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","into","into","into","into_future","line","location","message","partial_cmp","payload","poll","poll_next","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","const_panic_fmt","panic","panic_display","panic_fmt","panic_nounwind","panic_nounwind_fmt","panic_nounwind_nobacktrace","panic_str","unreachable_display","Pin","as_deref_mut","as_mut","as_ref","borrow","borrow_mut","clone","cmp","deref","deref_mut","eq","fmt","fmt","fmt","from","ge","get_mut","get_ref","get_unchecked_mut","gt","hash","into","into_future","into_inner","into_inner_unchecked","into_ref","le","lt","map_unchecked","map_unchecked_mut","ne","new","new_unchecked","partial_cmp","pin","poll","poll_next","resume","set","size_hint","static_mut","static_ref","try_from","try_into","type_id","rust_2015","rust_2018","rust_2021","rust_2024","v1","FromIterator","TryFrom","TryInto","AsMut","AsRef","Clone","Clone","Copy","Copy","Debug","Default","Default","DoubleEndedIterator","Drop","Eq","Eq","Err","ExactSizeIterator","Extend","Fn","FnMut","FnOnce","From","Hash","Into","IntoIterator","Iterator","None","Ok","Option","Ord","Ord","PartialEq","PartialEq","PartialOrd","PartialOrd","Result","RustcDecodable","RustcEncodable","Send","Sized","Some","Sync","Unpin","alloc_error_handler","assert","bench","cfg","cfg_accessible","cfg_eval","column","compile_error","concat","concat_bytes","concat_idents","derive","derive_const","drop","env","file","format_args","format_args_nl","global_allocator","include","include_bytes","include_str","line","log_syntax","module_path","option_env","stringify","test","test_case","trace_macros","type_ascribe","bool","char","f32","f64","i128","i16","i32","i64","i8","isize","str","u128","u16","u32","u64","u8","usize","Alignment","DynMetadata","MIN","Metadata","NonNull","Pointee","Thin","Unique","addr","addr_of","addr_of_mut","align_of","as_mut","as_mut_ptr","as_non_null_ptr","as_nonzero","as_ptr","as_ref","as_uninit_mut","as_uninit_ref","as_uninit_slice","as_uninit_slice_mut","as_usize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","cmp","cmp","cmp","copy","copy_nonoverlapping","dangling","drop_in_place","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_exposed_addr","from_exposed_addr_mut","from_mut","from_raw_parts","from_raw_parts","from_raw_parts_mut","from_ref","get_unchecked_mut","hash","hash","hash","hash","into","into","into","invalid","invalid_mut","layout","len","log2","map_addr","metadata","new","new","new_unchecked","new_unchecked","null","null_mut","of","partial_cmp","partial_cmp","partial_cmp","read","read_unaligned","read_volatile","replace","size_of","slice_from_raw_parts","slice_from_raw_parts","slice_from_raw_parts_mut","swap","swap_nonoverlapping","to_raw_parts","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_addr","write","write_bytes","write_unaligned","write_volatile","Err","IntoIter","Iter","IterMut","Ok","Result","and","and_then","as_deref","as_deref_mut","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","clone","clone","clone","clone_from","cloned","cloned","cmp","copied","copied","eq","err","expect","expect_err","flatten","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","from_output","from_residual","from_residual","hash","inspect","inspect_err","into","into","into","into","into_err","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_ok","is_err","is_err_and","is_ok","is_ok_and","iter","iter_mut","map","map_err","map_or","map_or_else","next","next","next","next_back","next_back","next_back","ok","or","or_else","partial_cmp","product","size_hint","size_hint","size_hint","sum","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","BITMASK_LEN","BitMask","Bits","Cast","Cast","Cast","CastPtr","CastPtr","ConstPtr","First","INDEX","INDEX","Isize","Isize","LANES","LaneCount","Mask","Mask","Mask","Mask","Mask","Mask","Mask","MaskElement","MutPtr","Scalar","Scalar","Scalar","Second","Simd","SimdCast","SimdConstPtr","SimdElement","SimdFloat","SimdInt","SimdMutPtr","SimdOrd","SimdPartialEq","SimdPartialOrd","SimdUint","SupportedLaneCount","Swizzle","Swizzle2","ToBitMask","Usize","Usize","Which","abs","abs","abs","abs","abs","abs","abs","abs","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","addr","addr","addr","addr","all","any","as_array","as_mut","as_mut","as_mut_array","as_ref","as_ref","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_const","cast_const","cast_mut","cast_mut","clone","clone","clone","cmp","cmp","copy_to_slice","copysign","copysign","copysign","default","default","deinterleave","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","eq","eq","eq","expose_addr","expose_addr","expose_addr","expose_addr","f32x1","f32x16","f32x2","f32x32","f32x4","f32x64","f32x8","f64x1","f64x16","f64x2","f64x32","f64x4","f64x64","f64x8","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bitmask","from_bits","from_bits","from_bits","from_exposed_addr","from_exposed_addr","from_exposed_addr","from_exposed_addr","from_int","from_int_unchecked","from_slice","gather_or","gather_or_default","gather_ptr","gather_select","gather_select_ptr","gather_select_unchecked","hash","hash","i16x1","i16x16","i16x2","i16x32","i16x4","i16x64","i16x8","i32x1","i32x16","i32x2","i32x32","i32x4","i32x64","i32x8","i64x1","i64x16","i64x2","i64x32","i64x4","i64x64","i64x8","i8x1","i8x16","i8x2","i8x32","i8x4","i8x64","i8x8","index","index_mut","interleave","into","into","into","into","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_null","is_null","is_null","is_null","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","is_subnormal","isizex1","isizex16","isizex2","isizex32","isizex4","isizex64","isizex8","lanes","mask16x1","mask16x16","mask16x2","mask16x32","mask16x4","mask16x64","mask16x8","mask32x1","mask32x16","mask32x2","mask32x32","mask32x4","mask32x64","mask32x8","mask64x1","mask64x16","mask64x2","mask64x32","mask64x4","mask64x64","mask64x8","mask8x1","mask8x16","mask8x2","mask8x32","mask8x4","mask8x64","mask8x8","masksizex1","masksizex16","masksizex2","masksizex32","masksizex4","masksizex64","masksizex8","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","ne","neg","neg","neg","neg","neg","neg","neg","not","not","not","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","prelude","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","product","recip","recip","recip","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_and","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_max","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_min","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_or","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_product","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_sum","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","reduce_xor","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","reverse","rotate_lanes_left","rotate_lanes_right","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","scatter","scatter_ptr","scatter_select","scatter_select_ptr","scatter_select_unchecked","select","select_mask","set","set_unchecked","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","signum","signum","signum","signum","signum","signum","signum","signum","signum","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_swizzle","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","sum","swizzle","swizzle","swizzle2","swizzle2","swizzle_dyn","test","test_unchecked","to_array","to_array","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bitmask","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_int","to_int_unchecked","to_int_unchecked","to_int_unchecked","to_radians","to_radians","to_radians","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u16x1","u16x16","u16x2","u16x32","u16x4","u16x64","u16x8","u32x1","u32x16","u32x2","u32x32","u32x4","u32x64","u32x8","u64x1","u64x16","u64x2","u64x32","u64x4","u64x64","u64x8","u8x1","u8x16","u8x2","u8x32","u8x4","u8x64","u8x8","usizex1","usizex16","usizex2","usizex32","usizex4","usizex64","usizex8","with_addr","with_addr","with_addr","with_addr","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_offset","wrapping_offset","wrapping_offset","wrapping_offset","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","Mask","Simd","SimdConstPtr","SimdFloat","SimdInt","SimdMutPtr","SimdOrd","SimdPartialEq","SimdPartialOrd","SimdUint","f32x1","f32x16","f32x2","f32x32","f32x4","f32x64","f32x8","f64x1","f64x16","f64x2","f64x32","f64x4","f64x64","f64x8","i16x1","i16x16","i16x2","i16x32","i16x4","i16x64","i16x8","i32x1","i32x16","i32x2","i32x32","i32x4","i32x64","i32x8","i64x1","i64x16","i64x2","i64x32","i64x4","i64x64","i64x8","i8x1","i8x16","i8x2","i8x32","i8x4","i8x64","i8x8","isizex1","isizex16","isizex2","isizex32","isizex4","isizex64","isizex8","mask16x1","mask16x16","mask16x2","mask16x32","mask16x4","mask16x64","mask16x8","mask32x1","mask32x16","mask32x2","mask32x32","mask32x4","mask32x64","mask32x8","mask64x1","mask64x16","mask64x2","mask64x32","mask64x4","mask64x64","mask64x8","mask8x1","mask8x16","mask8x2","mask8x32","mask8x4","mask8x64","mask8x8","masksizex1","masksizex16","masksizex2","masksizex32","masksizex4","masksizex64","masksizex8","simd_swizzle","u16x1","u16x16","u16x2","u16x32","u16x4","u16x64","u16x8","u32x1","u32x16","u32x2","u32x32","u32x4","u32x64","u32x8","u64x1","u64x16","u64x2","u64x32","u64x4","u64x64","u64x8","u8x1","u8x16","u8x2","u8x32","u8x4","u8x64","u8x8","usizex1","usizex16","usizex2","usizex32","usizex4","usizex64","usizex8","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","EscapeAscii","GetManyMutError","GroupBy","GroupByMut","Item","Iter","IterMut","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","SlicePattern","Split","SplitInclusive","SplitInclusiveMut","SplitMut","SplitN","SplitNMut","Windows","advance_back_by","advance_back_by","advance_by","advance_by","all","all","any","any","as_mut_slice","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","count","count","count","count","count","count","count","count","count","count","count","count","count","count","default","default","find","find","find_map","find_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_ptr_range","from_ptr_range","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","heapsort","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_slice","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_sorted_by","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","len","len","memchr","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","position","position","range","remainder","remainder","remainder","rposition","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","memchr","memrchr","TimSortRun","borrow","borrow_mut","clone","fmt","from","heapsort","into","merge_sort","quicksort","try_from","try_into","type_id","Bytes","CharIndices","Chars","EncodeUtf16","Err","EscapeDebug","EscapeDefault","EscapeUnicode","FromStr","Lines","LinesAny","MatchIndices","Matches","ParseBoolError","RMatchIndices","RMatches","RSplit","RSplitN","RSplitTerminator","Split","SplitAsciiWhitespace","SplitInclusive","SplitN","SplitTerminator","SplitWhitespace","Utf8Chunk","Utf8Chunks","Utf8Error","all","any","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","count","count","count","description","description","eq","eq","eq","error_len","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invalid","is_empty","last","last","last","last","last","last","len","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_code_point","nth","nth_back","offset","pattern","position","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","rfind","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_char_width","valid","valid_up_to","CharArrayRefSearcher","CharArraySearcher","CharPredicateSearcher","CharSearcher","CharSliceSearcher","Done","DoubleEndedSearcher","Match","Pattern","Reject","ReverseSearcher","SearchStep","Searcher","Searcher","StrSearcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","haystack","haystack","haystack","haystack","haystack","haystack","haystack","into","into","into","into","into","into","into","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_match","next_match","next_match","next_match","next_match","next_match","next_match","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_reject","next_reject","next_reject","next_reject","next_reject","next_reject_back","next_reject_back","next_reject_back","next_reject_back","next_reject_back","strip_prefix_of","strip_suffix_of","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Exclusive","atomic","borrow","borrow_mut","call_mut","call_once","default","fmt","from","from","from","from_mut","from_pin_mut","get_mut","get_pin_mut","into","into_future","into_inner","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","new","poll","resume","strip_prefix_of","strip_suffix_of","try_from","try_into","type_id","ATOMIC_BOOL_INIT","ATOMIC_ISIZE_INIT","ATOMIC_USIZE_INIT","AcqRel","Acquire","AtomicBool","AtomicI16","AtomicI32","AtomicI64","AtomicI8","AtomicIsize","AtomicPtr","AtomicU16","AtomicU32","AtomicU64","AtomicU8","AtomicUsize","Ordering","Relaxed","Release","SeqCst","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_and_swap","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compare_exchange_weak","compiler_fence","default","default","default","default","default","default","default","default","default","default","default","default","eq","fence","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_byte_add","fetch_byte_sub","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_max","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_min","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_nand","fetch_not","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_ptr_add","fetch_ptr_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_update","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_mut_slice","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","from_ptr","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","get_mut_slice","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","load","load","load","load","load","load","load","load","load","load","load","load","new","new","new","new","new","new","new","new","new","new","new","new","spin_loop_hint","store","store","store","store","store","store","store","store","store","store","store","store","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","swap","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Context","Pending","Poll","RawWaker","RawWakerVTable","Ready","Waker","as_raw","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","clone","clone","clone","cmp","data","drop","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_output","from_output","from_raw","from_residual","from_residual","from_waker","hash","into","into","into","into","into","is_pending","is_ready","map","map_err","map_err","map_ok","map_ok","new","new","noop","partial_cmp","ready","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vtable","wake","wake_by_ref","waker","will_wake","Duration","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","TryFromFloatSecsError","ZERO","add","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div","checked_mul","checked_sub","clone","clone","cmp","default","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","eq","eq","fmt","fmt","fmt","from","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","hash","into","into","is_zero","mul","mul_assign","mul_f32","mul_f64","new","partial_cmp","saturating_add","saturating_mul","saturating_sub","sub","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","type_id","type_id","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","MAX","MIN","Case_Ignorable","Cased","UNICODE_VERSION","conversions","to_lower","to_upper","MAX","MIN"],"q":[[0,"core"],[5289,"core::alloc"],[5357,"core::any"],[5394,"core::arch"],[5410,"core::arch::aarch64"],[9371,"core::arch::arm"],[12701,"core::arch::arm::dsp"],[12736,"core::arch::mips"],[12737,"core::arch::mips64"],[12738,"core::arch::nvptx"],[12756,"core::arch::powerpc"],[12988,"core::arch::powerpc64"],[13090,"core::arch::riscv32"],[13267,"core::arch::riscv64"],[13445,"core::arch::wasm"],[13784,"core::arch::wasm32"],[14132,"core::arch::wasm64"],[14471,"core::arch::x86"],[19565,"core::arch::x86_64"],[24585,"core::array"],[24630,"core::ascii"],[24806,"core::assert_matches"],[24808,"core::async_iter"],[24826,"core::borrow"],[24830,"core::cell"],[25023,"core::char"],[25179,"core::clone"],[25183,"core::cmp"],[25257,"core::convert"],[25291,"core::default"],[25294,"core::error"],[25334,"core::f32"],[25349,"core::f32::consts"],[25373,"core::f64"],[25388,"core::f64::consts"],[25412,"core::ffi"],[25520,"core::fmt"],[25675,"core::future"],[25722,"core::hash"],[25776,"core::hint"],[25780,"core::i128"],[25782,"core::i16"],[25784,"core::i32"],[25786,"core::i64"],[25788,"core::i8"],[25790,"core::intrinsics"],[26025,"core::intrinsics::mir"],[26056,"core::isize"],[26058,"core::iter"],[26924,"core::marker"],[26972,"core::mem"],[27087,"core::net"],[27329,"core::num"],[30414,"core::ops"],[30794,"core::option"],[30914,"core::panic"],[30966,"core::panicking"],[30975,"core::pin"],[31020,"core::prelude"],[31025,"core::prelude::rust_2021"],[31028,"core::prelude::v1"],[31100,"core::primitive"],[31117,"core::ptr"],[31229,"core::result"],[31336,"core::simd"],[32347,"core::simd::prelude"],[32477,"core::slice"],[32976,"core::slice::memchr"],[32978,"core::slice::sort"],[32991,"core::str"],[33386,"core::str::pattern"],[33516,"core::sync"],[33546,"core::sync::atomic"],[33974,"core::task"],[34059,"core::time"],[34134,"core::u128"],[34136,"core::u16"],[34138,"core::u32"],[34140,"core::u64"],[34142,"core::u8"],[34144,"core::unicode"],[34148,"core::unicode::conversions"],[34150,"core::usize"]],"d":["The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","The size of this integer type in bits.","Approximate number of significant digits in base 10.","Approximate number of significant digits in base 10.","Machine epsilon value for <code>f32</code>.","Machine epsilon value for <code>f64</code>.","Infinity (∞).","Infinity (∞).","Number of significant digits in base 2.","Number of significant digits in base 2.","The highest valid code point a <code>char</code> can have, <code>&#39;\\\\u{10FFFF}&#39;</code>.","Largest finite <code>f32</code> value.","Largest finite <code>f64</code> value.","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","The largest value that can be represented by this integer …","Maximum possible power of 10 exponent.","Maximum possible power of 10 exponent.","Maximum possible power of 2 exponent.","Maximum possible power of 2 exponent.","The lowest valid code point a <code>char</code> can have, <code>&#39;\\\\0&#39;</code>.","Smallest finite <code>f32</code> value.","Smallest finite <code>f64</code> value.","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The smallest value that can be represented by this integer …","Minimum possible normal power of 10 exponent.","Minimum possible normal power of 10 exponent.","One greater than the minimum possible normal power of 2 …","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value.","Smallest positive normal <code>f64</code> value.","Not a Number (NaN).","Not a Number (NaN).","Negative infinity (−∞).","Negative infinity (−∞).","The radix or base of the internal representation of <code>f32</code>.","The radix or base of the internal representation of <code>f64</code>.","<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …","The version of Unicode that the Unicode parts of <code>char</code> and …","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Computes the absolute difference between <code>self</code> and <code>other</code>.","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the “address” portion of the pointer.","Gets the “address” portion of the pointer.","Computes the offset that needs to be applied to the …","Computes the offset that needs to be applied to the …","Transmute the slice to a slice of another type, ensuring …","Transmute the mutable slice to a mutable slice of another …","Memory allocation APIs","Utilities for dynamic typing or type reflection.","SIMD and vendor intrinsics module.","Utilities for the array primitive type.","A fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>…","Returns an iterator over <code>N</code> elements of the slice at a …","Returns an iterator over <code>N</code> elements of the slice at a …","Returns an iterator over overlapping windows of <code>N</code> elements …","Returns <code>Some</code> if the value is within the ASCII range, or …","Converts this array of bytes into a array of ASCII …","If this slice <code>is_ascii</code>, returns it as a slice of ASCII …","If this string slice <code>is_ascii</code>, returns it as a slice of …","If the value of this byte is within the ASCII range, …","Converts this array of bytes into a array of ASCII …","Converts this slice of bytes into a slice of ASCII …","Views this slice of ASCII characters as a slice of <code>u8</code> …","Converts a string slice to a byte slice. To convert the …","Converts a mutable string slice to a mutable byte slice.","Splits the slice into a slice of <code>N</code>-element arrays, …","Splits the slice into a slice of <code>N</code>-element arrays, …","Splits the slice into a slice of <code>N</code>-element arrays, …","Splits the slice into a slice of <code>N</code>-element arrays, …","Returns <code>None</code> if the pointer is null, or else returns a …","","","","Returns a raw pointer to the slice’s buffer.","Returns an unsafe mutable pointer to the slice’s buffer.","Converts a mutable string slice to a raw pointer.","Returns the two unsafe mutable pointers spanning the slice.","Returns a mutable slice containing the entire array. …","Returns a raw pointer to the slice’s buffer.","Returns a raw pointer to the slice’s buffer.","Converts a string slice to a raw pointer.","Returns the two raw pointers spanning the slice.","Splits the slice into a slice of <code>N</code>-element arrays, …","Splits the slice into a slice of <code>N</code>-element arrays, …","Returns <code>None</code> if the pointer is null, or else returns a …","Returns <code>None</code> if the pointer is null, or else returns a …","","","","","Split a slice into a prefix, a middle of aligned SIMD …","Split a mutable slice into a mutable prefix, a middle of …","","Returns a slice containing the entire array. Equivalent to …","","Views this slice of ASCII characters as a UTF-8 <code>str</code>.","Returns <code>None</code> if the pointer is null, or else returns a …","Returns <code>None</code> if the pointer is null, or else returns a …","Returns <code>None</code> if the pointer is null, or else returns a …","Returns <code>None</code> if the pointer is null, or else returns a …","Returns <code>None</code> if the pointer is null, or else returns a …","Returns <code>None</code> if the pointer is null, or else returns a …","Operations on ASCII strings and characters.","Asserts that a boolean expression is <code>true</code> at runtime.","Asserts that two expressions are equal to each other …","Unstable module containing the unstable <code>assert_matches</code> …","Asserts that two expressions are not equal to each other …","Composable asynchronous iteration.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Binary searches this slice for a given element. If the …","Binary searches this slice with a comparator function.","Binary searches this slice with a key extraction functionhe boolean type.","Utilities for working with borrowed data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for overflow.","Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple …","Calculates the offset from a pointer in bytes (convenience …","Calculates the offset from a pointer in bytes (convenience …","Calculates the offset from a pointer in bytes.","Calculates the offset from a pointer in bytes.","Calculates the distance between two pointers. The returned …","Calculates the distance between two pointers. The returned …","Calculates the offset from a pointer in bytes (convenience …","Calculates the offset from a pointer in bytes (convenience …","An iterator over the bytes of a string slice.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.","Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple …","Calculates the “full multiplication” <code>self * rhs + carry</code>","Calculates the “full multiplication” <code>self * rhs + carry</code>","Calculates the “full multiplication” <code>self * rhs + carry</code>","Calculates the “full multiplication” <code>self * rhs + carry</code>","Calculates the “full multiplication” <code>self * rhs + carry</code>","Casts to a pointer of another type.","Casts to a pointer of another type.","Changes constness without changing the type.","Changes constness without changing the type.","Finds the closest <code>x</code> not below <code>index</code> where …","Shareable mutable containers.","Evaluates boolean combinations of configuration flags at …","A macro for defining <code>#[cfg]</code> match-like statements.","Utilities for the <code>char</code> primitive type.","A character type.","Returns an iterator over the <code>char</code>s of a string slice, and …","Returns an iterator over the <code>char</code>s of a string slice.","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked addition with a signed integer. Computes <code>self + rhs</code>…","Checked addition with a signed integer. Computes <code>self + rhs</code>…","Checked addition with a signed integer. Computes <code>self + rhs</code>…","Checked addition with a signed integer. Computes <code>self + rhs</code>…","Checked addition with a signed integer. Computes <code>self + rhs</code>…","Checked addition with a signed integer. Computes <code>self + rhs</code>…","Checked addition with an unsigned integer. Computes …","Checked addition with an unsigned integer. Computes …","Checked addition with an unsigned integer. Computes …","Checked addition with an unsigned integer. Computes …","Checked addition with an unsigned integer. Computes …","Checked addition with an unsigned integer. Computes …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> unless …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","If <code>rhs</code> is positive, calculates the smallest value greater …","Calculates the smallest value greater than or equal to <code>self</code>…","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer subtraction. Computes <code>self - rhs</code>, returning","Checked integer subtraction. Computes <code>self - rhs</code>, returning","Checked integer subtraction. Computes <code>self - rhs</code>, returning","Checked integer subtraction. Computes <code>self - rhs</code>, returning","Checked integer subtraction. Computes <code>self - rhs</code>, returning","Checked integer subtraction. Computes <code>self - rhs</code>, …","Checked integer subtraction. Computes <code>self - rhs</code>, returning","Checked subtraction with an unsigned integer. Computes …","Checked subtraction with an unsigned integer. Computes …","Checked subtraction with an unsigned integer. Computes …","Checked subtraction with an unsigned integer. Computes …","Checked subtraction with an unsigned integer. Computes …","Checked subtraction with an unsigned integer. Computes …","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","","Restrict a value to a certain interval unless it is NaN.","Restrict a value to a certain interval unless it is NaN.","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","The <code>Clone</code> trait for types that cannot be ‘implicitly …","","","","","","","","","","","","","","","","","","","","","","","","","Copies the elements from <code>src</code> into <code>self</code>.","Utilities for comparing and ordering values.","","","","","","","","","","","","","","","","","","","","","","","","Expands to the column number at which it was invoked.","Causes compilation to fail with the given error message …","Concatenates literals into a static string slice.","Concatenates literals into a byte slice.","Concatenates identifiers into one identifier.","Same as <code>format_args</code>, but can be used in some const …","Returns <code>true</code> if the slice contains an element with the …","Returns <code>true</code> if the given pattern matches a sub-slice of …","Traits for conversions between types.","Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …","Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …","Copies all elements from <code>src</code> into <code>self</code>, using a memcpy.","Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …","Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …","Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …","Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …","Copies elements from one part of the slice to another part …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Asserts that a boolean expression is <code>true</code> at runtime.","Asserts that two expressions are equal to each other.","Asserts that two expressions are not equal to each other.","Creates an iterator over the UTF-16 encoded code points in …","The <code>Default</code> trait for types with a default value.","Returns the default value of <code>false</code>","Returns the default value of <code>\\\\x00</code>","Returns the default value of <code>()</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty slice.","Creates a mutable empty slice.","Creates an empty str","Creates an empty mutable str","","Returns the default value of <code>0.0</code>","Returns the default value of <code>0.0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","Returns the default value of <code>0</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This operation rounds towards zero, truncating any …","","","","","This operation rounds towards zero, truncating any …","","","","This operation rounds towards zero, truncating any …","","","This operation rounds towards zero, truncating any …","","","","","","","","This operation rounds towards zero, truncating any …","","","","","","","","","","This operation rounds towards zero, truncating any …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of Euclidean division of <code>self</code> by …","Calculates the quotient of Euclidean division of <code>self</code> by …","Calculates the quotient of Euclidean division of <code>self</code> by …","Calculates the quotient of Euclidean division of <code>self</code> by …","Calculates the quotient of Euclidean division of <code>self</code> by …","Performs Euclidean division.","Performs Euclidean division.","Performs Euclidean division.","Performs Euclidean division.","Performs Euclidean division.","Calculates the quotient of Euclidean division of <code>self</code> by …","Performs Euclidean division.","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the …","Executes the destructor (if any) of the pointed-to value.","Borrows each element mutably and returns an array of …","Borrows each element and returns an array of references …","Encodes this character as UTF-16 into the provided <code>u16</code> …","Returns an iterator of <code>u16</code> over the string encoded as …","Encodes this character as UTF-8 into the provided byte …","","","Returns <code>true</code> if <code>needle</code> is a suffix of the slice.","Returns <code>true</code> if the given pattern matches a suffix of this …","Inspects an environment variable at compile time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that two values are an ASCII case-insensitive match.","Checks that two slices are an ASCII case-insensitive match.","Checks that two strings are an ASCII case-insensitive …","Checks that two values are an ASCII case-insensitive match.","Interfaces for working with Errors.","Returns an iterator that produces an escaped version of …","Returns an iterator that produces an escaped version of a …","Returns an iterator that yields the literal escape code of …","Return an iterator that escapes each char in <code>self</code> with …","Returns an iterator that yields the literal escape code of …","Return an iterator that escapes each char in <code>self</code> with …","Returns an iterator that yields the hexadecimal Unicode …","Return an iterator that escapes each char in <code>self</code> with …","Gets the “address” portion of the pointer, and ‘…","Gets the “address” portion of the pointer, and ‘…","","Allows to <code>extend</code> a tuple of collections that also …","","","","Constants for the <code>f32</code> single-precision floating point type.","A 32-bit floating point type (specifically, the “binary32…","Constants for the <code>f64</code> double-precision floating point type.","A 64-bit floating point type (specifically, the “binary64…","Platform-specific types, as defined by C.","Expands to the file name in which it was invoked.","Fills <code>self</code> with elements by cloning <code>value</code>.","Fills <code>self</code> with elements returned by calling a closure …","Returns the byte index of the first character of this …","Returns the first element of the slice, or <code>None</code> if it is …","Returns the first <code>N</code> elements of the slice, or <code>None</code> if it …","Returns a mutable reference to the first <code>N</code> elements of the …","Returns a mutable pointer to the first element of the …","Takes a <code>&amp;[[T; N]]</code>, and flattens it to a <code>&amp;[T]</code>.","Takes a <code>&amp;mut [[T; N]]</code>, and flattens it to a <code>&amp;mut [T]</code>.","Finds the closest <code>x</code> not exceeding <code>index</code> where …","Utilities for formatting and printing strings.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function pointers, like <code>fn(usize) -&gt; bool</code>.","Constructs parameters for the other string-formatting …","Same as <code>format_args</code>, but adds a newline in the end.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>u8</code> into a <code>char</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","Converts <code>i16</code> to <code>f32</code> losslessly.","Converts <code>bool</code> to <code>f32</code> losslessly. The resulting value is …","Returns the argument unchanged.","Converts <code>u16</code> to <code>f32</code> losslessly.","Converts <code>u8</code> to <code>f32</code> losslessly.","Converts <code>i8</code> to <code>f32</code> losslessly.","Converts <code>i32</code> to <code>f64</code> losslessly.","Converts <code>u8</code> to <code>f64</code> losslessly.","Converts <code>u32</code> to <code>f64</code> losslessly.","Converts <code>i8</code> to <code>f64</code> losslessly.","Converts <code>u16</code> to <code>f64</code> losslessly.","Returns the argument unchanged.","Converts <code>f32</code> to <code>f64</code> losslessly.","Converts <code>i16</code> to <code>f64</code> losslessly.","Converts <code>bool</code> to <code>f64</code> losslessly. The resulting value is …","Converts a <code>NonZeroI8</code> into an <code>i8</code>","Converts a <code>bool</code> to a <code>i8</code>. The resulting value is <code>0</code> for <code>false</code>…","Returns the argument unchanged.","Converts <code>u8</code> to <code>i16</code> losslessly.","Converts a <code>NonZeroI16</code> into an <code>i16</code>","Returns the argument unchanged.","Converts <code>i8</code> to <code>i16</code> losslessly.","Converts a <code>bool</code> to a <code>i16</code>. The resulting value is <code>0</code> for …","Converts <code>i8</code> to <code>i32</code> losslessly.","Returns the argument unchanged.","Converts a <code>NonZeroI32</code> into an <code>i32</code>","Converts <code>u16</code> to <code>i32</code> losslessly.","Converts <code>u8</code> to <code>i32</code> losslessly.","Converts a <code>bool</code> to a <code>i32</code>. The resulting value is <code>0</code> for …","Converts <code>i16</code> to <code>i32</code> losslessly.","Converts <code>i16</code> to <code>i64</code> losslessly.","Converts <code>u32</code> to <code>i64</code> losslessly.","Converts a <code>NonZeroI64</code> into an <code>i64</code>","Converts a <code>bool</code> to a <code>i64</code>. The resulting value is <code>0</code> for …","Converts <code>u8</code> to <code>i64</code> losslessly.","Converts <code>i8</code> to <code>i64</code> losslessly.","Returns the argument unchanged.","Converts <code>u16</code> to <code>i64</code> losslessly.","Converts <code>i32</code> to <code>i64</code> losslessly.","Converts <code>i64</code> to <code>i128</code> losslessly.","Converts <code>i8</code> to <code>i128</code> losslessly.","Converts <code>u32</code> to <code>i128</code> losslessly.","Converts <code>u16</code> to <code>i128</code> losslessly.","Converts <code>i32</code> to <code>i128</code> losslessly.","Converts <code>i16</code> to <code>i128</code> losslessly.","Converts a <code>bool</code> to a <code>i128</code>. The resulting value is <code>0</code> for …","Converts <code>u64</code> to <code>i128</code> losslessly.","Converts <code>u8</code> to <code>i128</code> losslessly.","Returns the argument unchanged.","Converts a <code>NonZeroI128</code> into an <code>i128</code>","Converts a <code>bool</code> to a <code>u8</code>. The resulting value is <code>0</code> for <code>false</code>…","Converts a <code>NonZeroU8</code> into an <code>u8</code>","Returns the argument unchanged.","Converts a <code>bool</code> to a <code>u16</code>. The resulting value is <code>0</code> for …","Converts <code>u8</code> to <code>u16</code> losslessly.","Returns the argument unchanged.","Converts a <code>NonZeroU16</code> into an <code>u16</code>","Converts a <code>char</code> into a <code>u32</code>.","Uses <code>Ipv4Addr::to_bits</code> to convert an IPv4 address to a …","Converts a <code>bool</code> to a <code>u32</code>. The resulting value is <code>0</code> for …","Converts <code>u16</code> to <code>u32</code> losslessly.","Converts a <code>NonZeroU32</code> into an <code>u32</code>","Returns the argument unchanged.","Converts <code>u8</code> to <code>u32</code> losslessly.","Converts a <code>NonZeroU64</code> into an <code>u64</code>","Converts a <code>char</code> into a <code>u64</code>.","Converts <code>u16</code> to <code>u64</code> losslessly.","Converts a <code>bool</code> to a <code>u64</code>. The resulting value is <code>0</code> for …","Returns the argument unchanged.","Converts <code>u8</code> to <code>u64</code> losslessly.","Converts <code>u32</code> to <code>u64</code> losslessly.","Returns the argument unchanged.","Uses <code>Ipv6Addr::to_bits</code> to convert an IPv6 address to a …","Converts <code>u32</code> to <code>u128</code> losslessly.","Converts <code>u64</code> to <code>u128</code> losslessly.","Converts <code>u8</code> to <code>u128</code> losslessly.","Converts <code>u16</code> to <code>u128</code> losslessly.","Converts a <code>bool</code> to a <code>u128</code>. The resulting value is <code>0</code> for …","Converts a <code>char</code> into a <code>u128</code>.","Converts a <code>NonZeroU128</code> into an <code>u128</code>","Converts <code>i8</code> to <code>isize</code> losslessly.","Converts a <code>NonZeroIsize</code> into an <code>isize</code>","Converts a <code>bool</code> to a <code>isize</code>. The resulting value is <code>0</code> for …","Converts <code>u8</code> to <code>isize</code> losslessly.","Returns the argument unchanged.","Converts <code>i16</code> to <code>isize</code> losslessly.","Converts <code>u8</code> to <code>usize</code> losslessly.","Converts a <code>bool</code> to a <code>usize</code>. The resulting value is <code>0</code> for …","Converts <code>u16</code> to <code>usize</code> losslessly.","","Returns the argument unchanged.","Converts a <code>NonZeroUsize</code> into an <code>usize</code>","Returns the argument unchanged.","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Create a floating point value from its representation as a …","Create a floating point value from its representation as a …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create an integer value from its representation as a byte …","Create a native endian integer value from its …","Creates a pointer from its raw bits.","Creates a pointer from its raw bits.","Raw transmutation from <code>u32</code>.","Raw transmutation from <code>u64</code>.","Converts a digit in the given radix to a <code>char</code>.","","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Create a floating point value from its representation as a …","Create a floating point value from its representation as a …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create an integer value from its representation as a byte …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create a native endian integer value from its …","Create an integer value from its representation as a byte …","Create a native endian integer value from its …","Create a floating point value from its representation as a …","Create a floating point value from its representation as a …","Create an integer value from its memory representation as …","Create an integer value from its memory representation as …","Create an integer value from its memory representation as …","Create an integer value from its memory representation as …","Create an integer value from its memory representation as …","Create a native endian integer value from its memory …","Create a native endian integer value from its memory …","Create a native endian integer value from its memory …","Create a native endian integer value from its memory …","Create a native endian integer value from its memory …","Create an integer value from its memory representation as …","Create a native endian integer value from its memory …","Parse a <code>bool</code> from a string.","","","","","","","","","","","","","","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a <code>u32</code> to a <code>char</code>.","Converts a <code>u32</code> to a <code>char</code>, ignoring validity.","Asynchronous basic functionality.","","","","","","","","","","","","","","","","","","","","Returns a reference to an element or subslice depending on …","Returns a subslice of <code>str</code>.","","","","Returns mutable references to many indices at once.","Returns mutable references to many indices at once, …","Returns a mutable reference to an element or subslice …","Returns a mutable subslice of <code>str</code>.","","","","Returns a raw pointer to an element or subslice, without …","Returns a reference to an element or subslice, without …","Returns an unchecked subslice of <code>str</code>.","","","","Returns a raw pointer to an element or subslice, without …","Returns a mutable reference to an element or subslice, …","Returns a mutable, unchecked subslice of <code>str</code>.","","","","Returns an iterator over the slice producing …","Returns an iterator over the slice producing …","","","","","","","","","","","","","","","","","","","","Returns whether two pointers are guaranteed to be equal.","Returns whether two pointers are guaranteed to be equal.","Returns whether two pointers are guaranteed to be inequal.","Returns whether two pointers are guaranteed to be inequal.","Generic hashing support.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hints to compiler that affects how code should be emitted …","Redundant constants module for the <code>i128</code> primitive type.","The 128-bit signed integer type.","Redundant constants module for the <code>i16</code> primitive type.","The 16-bit signed integer type.","Redundant constants module for the <code>i32</code> primitive type.","The 32-bit signed integer type.","Redundant constants module for the <code>i64</code> primitive type.","The 64-bit signed integer type.","Redundant constants module for the <code>i8</code> primitive type.","The 8-bit signed integer type.","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Parses a file as an expression or an item according to the …","Includes a file as a reference to a byte array.","Includes a UTF-8 encoded file as a string.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","","Compiler intrinsics.","Returns whether the pointer is properly aligned for <code>T</code>.","Returns whether the pointer is properly aligned for <code>T</code>.","Returns whether the pointer is aligned to <code>align</code>.","Returns whether the pointer is aligned to <code>align</code>.","Returns <code>true</code> if this <code>char</code> has the <code>Alphabetic</code> property.","Returns <code>true</code> if this <code>char</code> satisfies either <code>is_alphabetic()</code> …","Checks if the value is within the ASCII range.","Checks if all bytes in this slice are within the ASCII …","Checks if all characters in this string are within the …","Checks if the value is within the ASCII range.","Checks if the value is an ASCII alphabetic character:","Checks if the value is an ASCII alphabetic character:","Checks if the value is an ASCII alphanumeric character:","Checks if the value is an ASCII alphanumeric character:","Checks if the value is an ASCII control character: U+0000 …","Checks if the value is an ASCII control character: U+0000 …","Checks if the value is an ASCII decimal digit: U+0030 ‘0…","Checks if the value is an ASCII decimal digit: U+0030 ‘0…","Checks if the value is an ASCII graphic character: U+0021 …","Checks if the value is an ASCII graphic character: U+0021 …","Checks if the value is an ASCII hexadecimal digit:","Checks if the value is an ASCII hexadecimal digit:","Checks if the value is an ASCII lowercase character: …","Checks if the value is an ASCII lowercase character: …","Checks if the value is an ASCII octal digit: U+0030 ‘0’…","Checks if the value is an ASCII octal digit: U+0030 ‘0’…","Checks if the value is an ASCII punctuation character:","Checks if the value is an ASCII punctuation character:","Checks if the value is an ASCII uppercase character: …","Checks if the value is an ASCII uppercase character: …","Checks if the value is an ASCII whitespace character: …","Checks if the value is an ASCII whitespace character: …","Checks that <code>index</code>-th byte is the first byte in a UTF-8 …","","","","","Checks whether the pattern matches anywhere in the haystack","","","Returns <code>true</code> if this <code>char</code> has the general category for …","Checks if a <code>char</code> is a digit in the given radix.","Returns <code>true</code> if the raw slice has a length of 0.","Returns <code>true</code> if the slice has a length of 0.","Returns <code>true</code> if <code>self</code> has a length of zero bytes.","Returns <code>true</code> if this number is neither infinite nor NaN.","Returns <code>true</code> if this number is neither infinite nor NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this <code>char</code> has the <code>Lowercase</code> property.","Returns <code>true</code> if this value is NaN.","Returns <code>true</code> if this value is NaN.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if this <code>char</code> has one of the general …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","","","","","Checks whether the pattern matches at the front of the …","","","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Checks if the elements of this slice are sorted.","Checks if the elements of this slice are sorted using the …","Checks if the elements of this slice are sorted using the …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","","","","","Checks whether the pattern matches at the back of the …","","","Returns <code>true</code> if this <code>char</code> has the <code>Uppercase</code> property.","Checks if the value is a Unicode surrogate code point, …","Returns <code>true</code> if this <code>char</code> has the <code>White_Space</code> property.","Redundant constants module for the <code>isize</code> primitive type.","The pointer-sized signed integer type.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Returns the square root of the number, rounded down.","Composable external iteration.","Returns an iterator over the slice.","Returns an iterator that allows modifying each value.","Returns the last element of the slice, or <code>None</code> if it is …","Returns the last element of the slice, or <code>None</code> if it is …","Returns a mutable pointer to the last item in the slice.","Returns a mutable pointer to the last item in the slice.","","","","","","","","","","","","","","","","","","","","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the length of a raw slice.","Returns the length of a raw slice.","Returns the number of elements in the slice.","Returns the length of <code>self</code>.","Returns the number of 16-bit code units this <code>char</code> would …","Returns the number of bytes this <code>char</code> would need if …","Expands to the line number on which it was invoked.","An iterator over the lines of a string, as string slices.","An iterator over the lines of a string.","Prints passed tokens into the standard output.","","","","","","","","","","","","","","","","","","","","Converts this type to its ASCII lower case equivalent …","Converts this slice to its ASCII lower case equivalent …","Converts this string to its ASCII lower case equivalent …","Converts this value to its ASCII lower case equivalent …","Converts this type to its ASCII upper case equivalent …","Converts this slice to its ASCII upper case equivalent …","Converts this string to its ASCII upper case equivalent …","Converts this value to its ASCII upper case equivalent …","Returns an array of the same size as <code>self</code>, with function <code>f</code> …","Creates a new pointer by mapping <code>self</code>’s address to a new …","Creates a new pointer by mapping <code>self</code>’s address to a new …","Primitive traits and types representing basic properties …","Masks out bits of the pointer according to a mask.","Masks out bits of the pointer according to a mask.","An iterator over the disjoint matches of a pattern within …","An iterator over the disjoint matches of a pattern within …","Returns whether the given expression matches any of the …","","Returns the maximum of the two numbers, ignoring NaN.","Returns the maximum of the two numbers, ignoring NaN.","New code should prefer to use <code>i8::MAX</code> instead.","New code should prefer to use <code>i16::MAX</code> instead.","New code should prefer to use <code>i32::MAX</code> instead.","New code should prefer to use <code>i64::MAX</code> instead.","New code should prefer to use <code>i128::MAX</code> instead.","New code should prefer to use <code>u8::MAX</code> instead.","New code should prefer to use <code>u16::MAX</code> instead.","New code should prefer to use <code>u32::MAX</code> instead.","New code should prefer to use <code>u64::MAX</code> instead.","New code should prefer to use <code>u128::MAX</code> instead.","New code should prefer to use <code>isize::MAX</code> instead.","New code should prefer to use <code>usize::MAX</code> instead.","Returns the maximum of the two numbers, propagating NaN.","Returns the maximum of the two numbers, propagating NaN.","Basic functions for dealing with memory.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","","Returns the minimum of the two numbers, ignoring NaN.","Returns the minimum of the two numbers, ignoring NaN.","New code should prefer to use <code>i8::MIN</code> instead.","New code should prefer to use <code>i16::MIN</code> instead.","New code should prefer to use <code>i32::MIN</code> instead.","New code should prefer to use <code>i64::MIN</code> instead.","New code should prefer to use <code>i128::MIN</code> instead.","New code should prefer to use <code>u8::MIN</code> instead.","New code should prefer to use <code>u16::MIN</code> instead.","New code should prefer to use <code>u32::MIN</code> instead.","New code should prefer to use <code>u64::MIN</code> instead.","New code should prefer to use <code>u128::MIN</code> instead.","New code should prefer to use <code>isize::MIN</code> instead.","New code should prefer to use <code>usize::MIN</code> instead.","Returns the minimum of the two numbers, propagating NaN.","Returns the minimum of the two numbers, propagating NaN.","Expands to a string that represents the current module …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Networking primitives for IP communication.","The <code>!</code> type, also called “never”.","Returns the greatest number less than <code>self</code>.","Returns the greatest number less than <code>self</code>.","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","If <code>rhs</code> is positive, calculates the smallest value greater …","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","Calculates the smallest value greater than or equal to <code>self</code>…","If <code>rhs</code> is positive, calculates the smallest value greater …","Calculates the smallest value greater than or equal to <code>self</code>…","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the least number greater than <code>self</code>.","Returns the least number greater than <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Numeric traits and functions for the built-in numeric …","Calculates the offset from a pointer.","Calculates the offset from a pointer.","Calculates the distance between two pointers. The returned …","Calculates the distance between two pointers. The returned …","Overloadable operators.","Optional values.","Optionally inspects an environment variable at compile …","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Computes the absolute value of <code>self</code>.","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code>","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the quotient of Euclidean division …","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self in an overflowing fashion.","Negates self in an overflowing fashion.","Negates self in an overflowing fashion.","Negates self in an overflowing fashion.","Negates self in an overflowing fashion.","Negates self, overflowing if this is equal to the minimum …","Negates self in an overflowing fashion.","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Overflowing Euclidean remainder. Calculates …","Overflowing Euclidean remainder. Calculates …","Overflowing Euclidean remainder. Calculates …","Overflowing Euclidean remainder. Calculates …","Overflowing Euclidean remainder. Calculates …","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …","Overflowing Euclidean remainder. Calculates …","Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by …","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self left by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>","Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code>","Panic support in the standard library.","Panics the current thread.","Panic support for core","Parses this string slice into another type.","","","","","","","","","","","","","","","","","","","","","","","","","","Moves all consecutive repeated elements to the end of the …","Moves all but the first of consecutive elements to the end …","Moves all but the first of consecutive elements to the end …","Returns the index of the partition point according to the …","Types that pin data to its location in memory.","Raw, unsafe pointers, <code>*const T</code>, and <code>*mut T</code>.","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","The core prelude","This module reexports the primitive types to allow usage …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manually manage memory through raw pointers.","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","Returns an iterator over <code>chunk_size</code> elements of the slice …","Reads the value from <code>self</code> without moving it. This leaves …","Reads the value from <code>self</code> without moving it. This leaves …","Reads the value from <code>self</code> without moving it. This leaves …","Reads the value from <code>self</code> without moving it. This leaves …","Performs a volatile read of the value from <code>self</code> without …","Performs a volatile read of the value from <code>self</code> without …","Takes the reciprocal (inverse) of a number, <code>1/x</code>.","Takes the reciprocal (inverse) of a number, <code>1/x</code>.","References, <code>&amp;T</code> and <code>&amp;mut T</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This operation satisfies <code>n % d == n - (n / d) * d</code>, and …","","","","","","This operation satisfies <code>n % d == n - (n / d) * d</code>, and …","","","This operation satisfies <code>n % d == n - (n / d) * d</code>, and …","","","","This operation satisfies <code>n % d == n - (n / d) * d</code>, and …","","","","","","","","This operation satisfies <code>n % d == n - (n / d) * d</code>, and …","","","","","","This operation satisfies <code>n % d == n - (n / d) * d</code>, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the least nonnegative remainder of …","Calculates the least nonnegative remainder of …","Calculates the least nonnegative remainder of …","Calculates the least nonnegative remainder of …","Calculates the least nonnegative remainder of …","Calculates the least remainder of <code>self (mod rhs)</code>.","Calculates the least remainder of <code>self (mod rhs)</code>.","Calculates the least remainder of <code>self (mod rhs)</code>.","Calculates the least remainder of <code>self (mod rhs)</code>.","Calculates the least remainder of <code>self (mod rhs)</code>.","Calculates the least nonnegative remainder of …","Calculates the least remainder of <code>self (mod rhs)</code>.","Replaces the value at <code>self</code> with <code>src</code>, returning the old …","Error handling with the <code>Result</code> type.","Reverses the order of elements in the slice, in place.","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Reverses the order of bits in the integer. The least …","Returns the byte index for the first character of the last …","An iterator over the disjoint matches of a pattern within …","An iterator over the disjoint matches of a pattern within …","Rotates the slice in-place such that the first <code>mid</code> …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Rotates the slice in-place such that the first …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns an iterator over subslices separated by elements …","An iterator over substrings of the given string slice, …","Divides one mutable array reference into two at an index …","Divides one mutable slice into an array and a remainder …","Divides one array reference into two at an index from the …","Divides one slice into an array and a remainder slice at …","Returns an iterator over mutable subslices separated by …","Splits the string on the last occurrence of the specified …","An iterator over substrings of <code>self</code>, separated by …","Returns an iterator over subslices separated by elements …","An iterator over substrings of this string slice, …","Returns an iterator over subslices separated by elements …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating addition with a signed integer. Computes …","Saturating addition with a signed integer. Computes …","Saturating addition with a signed integer. Computes …","Saturating addition with a signed integer. Computes …","Saturating addition with a signed integer. Computes …","Saturating addition with a signed integer. Computes …","Saturating addition with an unsigned integer. Computes …","Saturating addition with an unsigned integer. Computes …","Saturating addition with an unsigned integer. Computes …","Saturating addition with an unsigned integer. Computes …","Saturating addition with an unsigned integer. Computes …","Saturating addition with an unsigned integer. Computes …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer division. Computes <code>self / rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …","Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating subtraction with an unsigned integer. Computes …","Saturating subtraction with an unsigned integer. Computes …","Saturating subtraction with an unsigned integer. Computes …","Saturating subtraction with an unsigned integer. Computes …","Saturating subtraction with an unsigned integer. Computes …","Saturating subtraction with an unsigned integer. Computes …","Reorder the slice such that the element at <code>index</code> is at its …","Reorder the slice with a comparator function such that the …","Reorder the slice with a key extraction function such that …eturns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Portable SIMD module.","Slice management and manipulation.","A dynamically-sized view into a contiguous sequence, <code>[T]</code>. …","Creates a string slice from another string slice, …","Creates a string slice from another string slice, …","Sorts the slice of floats.","Sorts the slice of floats.","Sorts the slice, but might not preserve the order of equal …","Sorts the slice with a comparator function, but might not …","Sorts the slice with a key extraction function, but might …","Returns an iterator over subslices separated by elements …","An iterator over substrings of this string slice, …","Divides one mutable array reference into two at an index.","Divides one mutable slice into an array and a remainder …","Divides one array reference into two at an index.","Divides one slice into an array and a remainder slice at …","Splits a string slice by ASCII whitespace.","Divides one slice into two at an index.","Divide one string slice into two at an index.","Divides one mutable raw slice into two at an index.","Divides one mutable slice into two at an index.","Divide one mutable string slice into two at an index.","Divides one mutable raw slice into two at an index, …","Divides one mutable slice into two at an index, without …","Divides one slice into two at an index, without doing …","Returns the first and all the rest of the elements of the …","Returns the first <code>N</code> elements of the slice and the …","Returns a mutable reference to the first <code>N</code> elements of the …","Returns the first and all the rest of the elements of the …","Returns an iterator over subslices separated by elements …","An iterator over substrings of this string slice, …","Returns an iterator over mutable subslices separated by …","Returns the last and all the rest of the elements of the …","Returns the last <code>N</code> elements of the slice and the remainder,","Returns the last and all the rest of the elements of the …","Returns the last and all the rest of the elements of the …","Returns an iterator over mutable subslices separated by …","Splits the string on the first occurrence of the specified …","An iterator over substrings of the given string slice, …","Splits a string slice by whitespace.","Returns an iterator over subslices separated by elements …","An iterator over substrings of the given string slice, …","Returns an iterator over mutable subslices separated by …","","","Returns <code>true</code> if <code>needle</code> is a prefix of the slice.","Returns <code>true</code> if the given pattern matches a prefix of this …","","","","","","","","","","","","","","String manipulation.","String slices.","Stringifies its arguments.","Returns a subslice with the prefix removed.","Returns a string slice with the prefix removed.","","","","","","Removes the pattern from the front of haystack, if it …","","Returns a subslice with the suffix removed.","Returns a string slice with the suffix removed.","","","","","","Removes the pattern from the back of haystack, if it …","","Calculates the offset from a pointer (convenience for …","Calculates the offset from a pointer (convenience for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the distance between two pointers, <em>where it’s </em>…","Calculates the distance between two pointers, <em>where it’s </em>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Swaps the values at two mutable locations of the same …","Swaps two elements in the slice.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Swaps two elements in the slice, without doing bounds …","Swaps all elements in <code>self</code> with those in <code>other</code>.","Synchronization primitives","Removes the subslice corresponding to the given range and …","Removes the first element of the slice and returns a …","Removes the first element of the slice and returns a …","Removes the last element of the slice and returns a …","Removes the last element of the slice and returns a mutable","Removes the subslice corresponding to the given range and …","Types and Traits for working with asynchronous tasks.","Returns <code>Some(f())</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.","Returns <code>Some(t)</code> if the <code>bool</code> is <code>true</code>, or <code>None</code> otherwise.","Temporal quantification.","Makes a copy of the value in its ASCII lower case …","Makes a copy of the value in its ASCII lower case …","Makes a copy of the value in its ASCII upper case …","Makes a copy of the value in its ASCII upper case …","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Return the memory representation of this floating point …","Return the memory representation of this floating point …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Casts a pointer to its raw bits.","Casts a pointer to its raw bits.","Raw transmutation to <code>u32</code>.","Raw transmutation to <code>u64</code>.","Converts radians to degrees.","Converts radians to degrees.","Converts a <code>char</code> to a digit in the given radix.","Rounds toward zero and converts to any primitive integer …","Rounds toward zero and converts to any primitive integer …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Return the memory representation of this floating point …","Return the memory representation of this floating point …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Returns an iterator that yields the lowercase mapping of …","Return the memory representation of this floating point …","Return the memory representation of this floating point …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Return the memory representation of this integer as a byte …","Converts degrees to radians.","Converts degrees to radians.","Decompose a (possibly wide) pointer into its address and …","Decompose a (possibly wide) pointer into its address and …","Returns an iterator that yields the uppercase mapping of …","Indicates unfinished code.","Return the ordering between <code>self</code> and <code>other</code>.","Return the ordering between <code>self</code> and <code>other</code>.","Enables or disables tracing functionality used for …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Transposes a <code>[MaybeUninit&lt;T&gt;; N]</code> into a <code>MaybeUninit&lt;[T; N]&gt;</code>…","Returns a string slice with leading and trailing …","Returns a byte slice with leading and trailing ASCII …","Returns a byte slice with trailing ASCII whitespace bytes …","Returns a byte slice with leading ASCII whitespace bytes …","Returns a string slice with trailing whitespace removed.","Returns a string slice with all suffixes that match a …","Returns a string slice with leading whitespace removed.","Returns a string slice with all prefixes that match a …","Returns a string slice with all prefixes and suffixes that …","Returns a string slice with trailing whitespace removed.","Returns a string slice with all suffixes that match a …","Returns a string slice with leading whitespace removed.","Returns a string slice with all prefixes that match a …","Unwraps a result or propagates its error.","","","","","","","","","","","","","","","","","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Tries to convert a <code>char</code> into a <code>u8</code>.","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Tries to convert a <code>char</code> into a <code>u16</code>.","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","Try to create the target number type from a source number …","Try to create the target number type from a source number …","Try to create the target number type from a source number …","","","","","","","","","","","","","","","","","","","","","","","","","","A fallible function <code>f</code> applied to each element on array <code>self</code>…","A finite heterogeneous sequence, <code>(T, U, ..)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Redundant constants module for the <code>u128</code> primitive type.","The 128-bit unsigned integer type.","Redundant constants module for the <code>u16</code> primitive type.","The 16-bit unsigned integer type.","Redundant constants module for the <code>u32</code> primitive type.","The 32-bit unsigned integer type.","Redundant constants module for the <code>u64</code> primitive type.","The 64-bit unsigned integer type.","Redundant constants module for the <code>u8</code> primitive type.","The 8-bit unsigned integer type.","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","","Indicates unimplemented code by panicking with a message …","The <code>()</code> type, also called “unit”.","Indicates unreachable code.","Computes the absolute value of <code>self</code> without any wrapping …","Computes the absolute value of <code>self</code> without any wrapping …","Computes the absolute value of <code>self</code> without any wrapping …","Computes the absolute value of <code>self</code> without any wrapping …","Computes the absolute value of <code>self</code> without any wrapping …","Computes the absolute value of <code>self</code> without any wrapping …","Redundant constants module for the <code>usize</code> primitive type.","The pointer-sized unsigned integer type.","Calculates the complete product <code>self * rhs</code> without the …","Calculates the complete product <code>self * rhs</code> without the …","Calculates the complete product <code>self * rhs</code> without the …","Calculates the complete product <code>self * rhs</code> without the …","Calculates the complete product <code>self * rhs</code> without the …","Returns an iterator over all contiguous windows of length …","Creates a new pointer with the given address.","Creates a new pointer with the given address.","Use the pointer value in a new pointer of another type.","Use the pointer value in a new pointer of another type.","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) addition with a signed integer. Computes","Wrapping (modular) addition with a signed integer. Computes","Wrapping (modular) addition with a signed integer. Computes","Wrapping (modular) addition with a signed integer. Computes","Wrapping (modular) addition with a signed integer. Computes","Wrapping (modular) addition with a signed integer. Computes","Wrapping (modular) addition with an unsigned integer. …","Wrapping (modular) addition with an unsigned integer. …","Wrapping (modular) addition with an unsigned integer. …","Wrapping (modular) addition with an unsigned integer. …","Wrapping (modular) addition with an unsigned integer. …","Wrapping (modular) addition with an unsigned integer. …","Calculates the offset from a pointer in bytes using …","Calculates the offset from a pointer in bytes using …","Calculates the offset from a pointer in bytes using …","Calculates the offset from a pointer in bytes using …","Calculates the offset from a pointer in bytes using …","Calculates the offset from a pointer in bytes using …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>. Wrapped …","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>. Wrapped …","Wrapping (modular) remainder. Computes <code>self % rhs</code>. Wrapped …","Wrapping (modular) remainder. Computes <code>self % rhs</code>. Wrapped …","Wrapping (modular) remainder. Computes <code>self % rhs</code>. Wrapped …","Wrapping (modular) remainder. Computes <code>self % rhs</code>. Wrapped …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>. Wrapped …","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>. …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …","Wrapping (modular) subtraction with an unsigned integer. …","Wrapping (modular) subtraction with an unsigned integer. …","Wrapping (modular) subtraction with an unsigned integer. …","Wrapping (modular) subtraction with an unsigned integer. …","Wrapping (modular) subtraction with an unsigned integer. …","Wrapping (modular) subtraction with an unsigned integer. …","Overwrites a memory location with the given value without …","Writes formatted data into a buffer.","Invokes memset on the specified pointer, setting …","Overwrites a memory location with the given value without …","Performs a volatile write of a memory location with the …","Write formatted data into a buffer, with a newline …","The <code>AllocError</code> error indicates an allocation failure that …","An implementation of <code>Allocator</code> can allocate, grow, shrink, …","A memory allocator that can be registered as the standard …","Layout of a block of memory.","","The parameters given to <code>Layout::from_size_align</code> or some …","The minimum byte alignment for a memory block of this …","Creates a layout describing the record that can hold a …","Allocate memory as described by the given <code>layout</code>.","Behaves like <code>alloc</code>, but also ensures that the contents are …","Behaves like <code>alloc</code>, but also ensures that the contents are …","Attempts to allocate a block of memory.","Behaves like <code>allocate</code>, but also ensures that the returned …","Creates a layout describing the record for a <code>[T; n]</code>.","","","","","","","Creates a “by reference” adapter for this instance of …","","","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …","Deallocate the block of memory at the given <code>ptr</code> pointer …","Deallocates the memory referenced by <code>ptr</code>.","","","","Creates a layout describing the record for <code>self</code> followed by","Creates a layout describing the record for <code>self</code> followed by","","","","","","Produces layout describing a record that could be used to …","Produces layout describing a record that could be used to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …","Creates a layout, bypassing all checks.","Attempts to extend the memory block.","Behaves like <code>grow</code>, but also ensures that the new contents …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.","Creates a layout by rounding the size of this layout up to …","Returns the amount of padding we must insert after <code>self</code> to …","Shrink or grow a block of memory to the given <code>new_size</code> in …","Shrink or grow a block of memory to the given <code>new_size</code> in …","Creates a layout describing the record for <code>n</code> instances of …","Creates a layout describing the record for <code>n</code> instances of …","Attempts to shrink the memory block.","The minimum size in bytes for a memory block of this …","","","","","","","","","","A trait to emulate dynamic typing.","A <code>TypeId</code> represents a globally unique identifier for a …","","","","","Returns some mutable reference to the inner value if it is …","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns a mutable reference to the inner value as type …","Returns some reference to the inner value if it is of type …","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Forwards to the method defined on the type <code>Any</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns a reference to the inner value as type <code>dyn T</code>.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Forwards to the method defined on the type <code>Any</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","Forwards to the method defined on the type <code>dyn Any</code>.","Returns the <code>TypeId</code> of the type this generic function has …","","","","Gets the <code>TypeId</code> of <code>self</code>.","","Returns the name of a type as a string slice.","Returns the name of the type of the pointed-to value as a …","Platform-specific intrinsics for the <code>aarch64</code> platform.","Platform-specific intrinsics for the <code>arm</code> platform.","Inline assembly.","Module-level inline assembly.","Platform-specific intrinsics for the <code>mips</code> platform.","Platform-specific intrinsics for the <code>mips64</code> platform.","Platform-specific intrinsics for the <code>NVPTX</code> platform.","Platform-specific intrinsics for the <code>PowerPC</code> platform.","Platform-specific intrinsics for the <code>PowerPC64</code> platform.","Platform-specific intrinsics for the <code>riscv32</code> platform.","Platform-specific intrinsics for the <code>riscv64</code> platform.","Platform-specific intrinsics for the <code>wasm</code> target family.","Platform-specific intrinsics for the <code>wasm32</code> platform.","Platform-specific intrinsics for the <code>wasm64</code> platform.","Platform-specific intrinsics for the <code>x86</code> platform.","Platform-specific intrinsics for the <code>x86_64</code> platform.","Full system is the required shareability domain, reads and …","See <code>prefetch</code>.","See <code>prefetch</code>.","See <code>prefetch</code>.","See <code>prefetch</code>.","See <code>prefetch</code>.","See <code>prefetch</code>.","Transaction executed a TCANCEL instruction","Transaction aborted due to a debug trap.","Transaction aborted because a non-permissible operation …","Fallback error type for any other reason","Transaction failed from interrupt","Transaction aborted because a conflict occurred","Transaction aborted due to transactional nesting level was …","Extraction mask for failure reason","Transaction retry is possible.","Transaction aborted due to read or write set limit was …","Indicates a TRIVIAL version of TM is available","Transaction successfully started.","CRC32 single round checksum for bytes (8 bits).","CRC32-C single round checksum for bytes (8 bits).","CRC32-C single round checksum for quad words (64 bits).","CRC32-C single round checksum for half words (16 bits).","CRC32-C single round checksum for words (32 bits).","CRC32 single round checksum for quad words (64 bits).","CRC32 single round checksum for half words (16 bits).","CRC32 single round checksum for words (32 bits).","Generates a DMB (data memory barrier) instruction or …","Generates a DSB (data synchronization barrier) instruction …","Generates an ISB (instruction synchronization barrier) …","Generates an unspecified no-op instruction.","Generates a SEV (send a global event) hint instruction.","Generates a send a local event hint instruction.","Cancels the current transaction and discards all state …","Commits the current transaction. For a nested transaction, …","Starts a new transaction. When the transaction starts …","Tests if executing inside a transaction. If no transaction …","Generates a WFE (wait for event) hint instruction, or …","Generates a WFI (wait for interrupt) hint instruction, or …","Generates a YIELD hint instruction.","Fetch the cache line that contains address <code>p</code> using the …","","","","","","","","","","","","","","","","","","","","","","","","","ARM-specific 64-bit wide vector of two packed <code>f32</code>.","ARM-specific type containing two <code>float32x2_t</code> vectors.","ARM-specific type containing three <code>float32x2_t</code> vectors.","ARM-specific type containing four <code>float32x2_t</code> vectors.","ARM-specific 128-bit wide vector of four packed <code>f32</code>.","ARM-specific type containing two <code>float32x4_t</code> vectors.","ARM-specific type containing three <code>float32x4_t</code> vectors.","ARM-specific type containing four <code>float32x4_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>f64</code>.","ARM-specific type containing two <code>float64x1_t</code> vectors.","ARM-specific type containing three <code>float64x1_t</code> vectors.","ARM-specific type containing four <code>float64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>f64</code>.","ARM-specific type containing two <code>float64x2_t</code> vectors.","ARM-specific type containing three <code>float64x2_t</code> vectors.","ARM-specific type containing four <code>float64x2_t</code> vectors.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","ARM-specific 64-bit wide vector of four packed <code>i16</code>.","ARM-specific type containing two <code>int16x4_t</code> vectors.","ARM-specific type containing three <code>int16x4_t</code> vectors.","ARM-specific type containing four <code>int16x4_t</code> vectors.","ARM-specific 128-bit wide vector of eight packed <code>i16</code>.","ARM-specific type containing two <code>int16x8_t</code> vectors.","ARM-specific type containing three <code>int16x8_t</code> vectors.","ARM-specific type containing four <code>int16x8_t</code> vectors.","ARM-specific 64-bit wide vector of two packed <code>i32</code>.","ARM-specific type containing two <code>int32x2_t</code> vectors.","ARM-specific type containing three <code>int32x2_t</code> vectors.","ARM-specific type containing four <code>int32x2_t</code> vectors.","ARM-specific 128-bit wide vector of four packed <code>i32</code>.","ARM-specific type containing two <code>int32x4_t</code> vectors.","ARM-specific type containing three <code>int32x4_t</code> vectors.","ARM-specific type containing four <code>int32x4_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>i64</code>.","ARM-specific type containing four <code>int64x1_t</code> vectors.","ARM-specific type containing four <code>int64x1_t</code> vectors.","ARM-specific type containing four <code>int64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>i64</code>.","ARM-specific type containing four <code>int64x2_t</code> vectors.","ARM-specific type containing four <code>int64x2_t</code> vectors.","ARM-specific type containing four <code>int64x2_t</code> vectors.","ARM-specific 128-bit wide vector of sixteen packed <code>i8</code>.","ARM-specific type containing two <code>int8x16_t</code> vectors.","ARM-specific type containing three <code>int8x16_t</code> vectors.","ARM-specific type containing four <code>int8x16_t</code> vectors.","ARM-specific 64-bit wide vector of eight packed <code>i8</code>.","ARM-specific type containing two <code>int8x8_t</code> vectors.","ARM-specific type containing three <code>int8x8_t</code> vectors.","ARM-specific type containing four <code>int8x8_t</code> vectors.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ARM-specific 64-bit wide vector of four packed <code>p16</code>.","ARM-specific type containing two <code>poly16x4_t</code> vectors.","ARM-specific type containing three <code>poly16x4_t</code> vectors.","ARM-specific type containing four <code>poly16x4_t</code> vectors.","ARM-specific 128-bit wide vector of eight packed <code>p16</code>.","ARM-specific type containing two <code>poly16x8_t</code> vectors.","ARM-specific type containing three <code>poly16x8_t</code> vectors.","ARM-specific type containing four <code>poly16x8_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>p64</code>.","ARM-specific type containing four <code>poly64x1_t</code> vectors.","ARM-specific type containing four <code>poly64x1_t</code> vectors.","ARM-specific type containing four <code>poly64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>p64</code>.","ARM-specific type containing four <code>poly64x2_t</code> vectors.","ARM-specific type containing four <code>poly64x2_t</code> vectors.","ARM-specific type containing four <code>poly64x2_t</code> vectors.","ARM-specific 128-bit wide vector of sixteen packed <code>p8</code>.","ARM-specific type containing two <code>poly8x16_t</code> vectors.","ARM-specific type containing three <code>poly8x16_t</code> vectors.","ARM-specific type containing four <code>poly8x16_t</code> vectors.","ARM-specific 64-bit wide polynomial vector of eight packed …","ARM-specific type containing two <code>poly8x8_t</code> vectors.","ARM-specific type containing three <code>poly8x8_t</code> vectors.","ARM-specific type containing four <code>poly8x8_t</code> vectors.","","","","","","","","","","","","","","","","","","","","","","","","","ARM-specific 64-bit wide vector of four packed <code>u16</code>.","ARM-specific type containing two <code>uint16x4_t</code> vectors.","ARM-specific type containing three <code>uint16x4_t</code> vectors.","ARM-specific type containing four <code>uint16x4_t</code> vectors.","ARM-specific 128-bit wide vector of eight packed <code>u16</code>.","ARM-specific type containing two <code>uint16x8_t</code> vectors.","ARM-specific type containing three <code>uint16x8_t</code> vectors.","ARM-specific type containing four <code>uint16x8_t</code> vectors.","ARM-specific 64-bit wide vector of two packed <code>u32</code>.","ARM-specific type containing two <code>uint32x2_t</code> vectors.","ARM-specific type containing three <code>uint32x2_t</code> vectors.","ARM-specific type containing four <code>uint32x2_t</code> vectors.","ARM-specific 128-bit wide vector of four packed <code>u32</code>.","ARM-specific type containing two <code>uint32x4_t</code> vectors.","ARM-specific type containing three <code>uint32x4_t</code> vectors.","ARM-specific type containing four <code>uint32x4_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>u64</code>.","ARM-specific type containing four <code>uint64x1_t</code> vectors.","ARM-specific type containing four <code>uint64x1_t</code> vectors.","ARM-specific type containing four <code>uint64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>u64</code>.","ARM-specific type containing four <code>uint64x2_t</code> vectors.","ARM-specific type containing four <code>uint64x2_t</code> vectors.","ARM-specific type containing four <code>uint64x2_t</code> vectors.","ARM-specific 128-bit wide vector of sixteen packed <code>u8</code>.","ARM-specific type containing two <code>uint8x16_t</code> vectors.","ARM-specific type containing three <code>uint8x16_t</code> vectors.","ARM-specific type containing four <code>uint8x16_t</code> vectors.","ARM-specific 64-bit wide vector of eight packed <code>u8</code>.","ARM-specific type containing two <code>uint8x8_t</code> vectors.","ARM-specific type containing three <code>uint8x8_t</code> vectors.","ARM-specific type containing four <code>uint8x8_t</code> vectors.","","","","","","","Signed Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","","","","","","","Absolute difference between the arguments of Floating","Absolute difference between the arguments of Floating","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Floating-point absolute difference","Signed Absolute difference Long","Signed Absolute difference Long","Signed Absolute difference Long","Unsigned Absolute difference Long","Unsigned Absolute difference Long","Unsigned Absolute difference Long","Signed Absolute difference Long","Signed Absolute difference Long","Signed Absolute difference Long","Unsigned Absolute difference Long","Unsigned Absolute difference Long","Unsigned Absolute difference Long","Absolute difference between the arguments of Floating","Absolute difference between the arguments of Floating","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Floating-point absolute difference","Floating-point absolute value","Floating-point absolute value","Absolute value (wrapping).","Absolute value (wrapping).","Absolute Value (wrapping).","Absolute value (wrapping).","Absolute Value (wrapping).","Floating-point absolute value","Floating-point absolute value","Absolute value (wrapping).","Absolute value (wrapping).","Absolute Value (wrapping).","Absolute value (wrapping).","Vector add.","Vector add.","Bitwise exclusive OR","Bitwise exclusive OR","Bitwise exclusive OR","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Signed Add Long (vector, high half).","Signed Add Long (vector, high half).","Signed Add Long (vector, high half).","Unsigned Add Long (vector, high half).","Unsigned Add Long (vector, high half).","Unsigned Add Long (vector, high half).","Signed Add Long (vector).","Signed Add Long (vector).","Signed Add Long (vector).","Unsigned Add Long (vector).","Unsigned Add Long (vector).","Unsigned Add Long (vector).","Signed Add Long across Vector","Signed Add Long across Vector","Signed Add Long across Vector","Unsigned Add Long across Vector","Unsigned Add Long across Vector","Unsigned Add Long across Vector","Signed Add Long across Vector","Signed Add Long across Vector","Signed Add Long across Vector","Unsigned Add Long across Vector","Unsigned Add Long across Vector","Unsigned Add Long across Vector","Vector add.","Vector add.","Bitwise exclusive OR","Bitwise exclusive OR","Bitwise exclusive OR","Bitwise exclusive OR","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Floating-point add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Floating-point add across vector","Floating-point add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Add across vector","Signed Add Wide (high half).","Signed Add Wide (high half).","Signed Add Wide (high half).","Unsigned Add Wide (high half).","Unsigned Add Wide (high half).","Unsigned Add Wide (high half).","Signed Add Wide.","Signed Add Wide.","Signed Add Wide.","Unsigned Add Wide.","Unsigned Add Wide.","Unsigned Add Wide.","AES single round decryption.","AES single round encryption.","AES inverse mix columns.","AES mix columns.","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Bit clear and exclusive OR","Bit clear and exclusive OR","Bit clear and exclusive OR","Bit clear and exclusive OR","Bit clear and exclusive OR","Bit clear and exclusive OR","Bit clear and exclusive OR","Bit clear and exclusive OR","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Bitwise Select.","Bitwise Select instructions. This instruction sets each …","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select instructions. This instruction sets each …","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Floating-point complex add","Floating-point complex add","Floating-point complex add","Floating-point complex add","Floating-point complex add","Floating-point complex add","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than","Floating-point absolute compare greater than","Floating-point absolute compare greater than","Floating-point absolute compare greater than","Floating-point absolute compare greater than","Floating-point absolute compare greater than","Floating-point absolute compare less than or equal","Floating-point absolute compare less than or equal","Floating-point absolute compare less than or equal","Floating-point absolute compare less than or equal","Floating-point absolute compare less than or equal","Floating-point absolute compare less than or equal","Floating-point absolute compare less than","Floating-point absolute compare less than","Floating-point absolute compare less than","Floating-point absolute compare less than","Floating-point absolute compare less than","Floating-point absolute compare less than","Floating-point compare equal","Floating-point compare equal","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Floating-point compare equal","Compare bitwise equal","Compare bitwise equal","Floating-point compare equal","Floating-point compare equal","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Floating-point compare equal","Floating-point compare bitwise equal to zero","Floating-point compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Floating-point compare bitwise equal to zero","Compare bitwise equal to zero","Compare bitwise equal to zero","Floating-point compare bitwise equal to zero","Floating-point compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Signed compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Unsigned compare bitwise equal to zero","Floating-point compare bitwise equal to zero","Floating-point compare greater than or equal","Floating-point compare greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Floating-point compare greater than or equal","Compare greater than or equal","Compare greater than or equal","Floating-point compare greater than or equal","Floating-point compare greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Floating-point compare greater than or equal","Floating-point compare greater than or equal to zero","Floating-point compare greater than or equal to zero","Compare signed greater than or equal to zero","Compare signed greater than or equal to zero","Compare signed greater than or equal to zero","Compare signed greater than or equal to zero","Floating-point compare greater than or equal to zero","Compare signed greater than or equal to zero","Floating-point compare greater than or equal to zero","Floating-point compare greater than or equal to zero","Compare signed greater than or equal to zero","Compare signed greater than or equal to zero","Compare signed greater than or equal to zero","Compare signed greater than or equal to zero","Floating-point compare greater than or equal to zero","Floating-point compare greater than","Floating-point compare greater than","Compare signed greater than","Compare signed greater than","Compare signed greater than","Compare signed greater than","Compare unsigned greater than","Compare unsigned greater than","Compare unsigned greater than","Compare unsigned greater than","Floating-point compare greater than","Compare greater than","Compare greater than","Floating-point compare greater than","Floating-point compare greater than","Compare signed greater than","Compare signed greater than","Compare signed greater than","Compare signed greater than","Compare unsigned greater than","Compare unsigned greater than","Compare unsigned greater than","Compare unsigned greater than","Floating-point compare greater than","Floating-point compare greater than zero","Floating-point compare greater than zero","Compare signed greater than zero","Compare signed greater than zero","Compare signed greater than zero","Compare signed greater than zero","Floating-point compare greater than zero","Compare signed greater than zero","Floating-point compare greater than zero","Floating-point compare greater than zero","Compare signed greater than zero","Compare signed greater than zero","Compare signed greater than zero","Compare signed greater than zero","Floating-point compare greater than zero","Floating-point compare less than or equal","Floating-point compare less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Floating-point compare less than or equal","Compare less than or equal","Compare less than or equal","Floating-point compare less than or equal","Floating-point compare less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Floating-point compare less than or equal","Floating-point compare less than or equal to zero","Floating-point compare less than or equal to zero","Compare signed less than or equal to zero","Compare signed less than or equal to zero","Compare signed less than or equal to zero","Compare signed less than or equal to zero","Floating-point compare less than or equal to zero","Compare less than or equal to zero","Floating-point compare less than or equal to zero","Floating-point compare less than or equal to zero","Compare signed less than or equal to zero","Compare signed less than or equal to zero","Compare signed less than or equal to zero","Compare signed less than or equal to zero","Floating-point compare less than or equal to zero","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Floating-point compare less than","Floating-point compare less than","Compare signed less than","Compare signed less than","Compare signed less than","Compare signed less than","Compare unsigned less than","Compare unsigned less than","Compare unsigned less than","Compare unsigned less than","Floating-point compare less than","Compare less than","Compare less than","Floating-point compare less than","Floating-point compare less than","Compare signed less than","Compare signed less than","Compare signed less than","Compare signed less than","Compare unsigned less than","Compare unsigned less than","Compare unsigned less than","Compare unsigned less than","Floating-point compare less than","Floating-point compare less than zero","Floating-point compare less than zero","Compare signed less than zero","Compare signed less than zero","Compare signed less than zero","Compare signed less than zero","Floating-point compare less than zero","Compare less than zero","Floating-point compare less than zero","Floating-point compare less than zero","Compare signed less than zero","Compare signed less than zero","Compare signed less than zero","Compare signed less than zero","Floating-point compare less than zero","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Floating-point complex multiply accumulate","Population count per byte.","Population count per byte.","Population count per byte.","Population count per byte.","Population count per byte.","Population count per byte.","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Duplicate vector element to vector or scalar","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Floating-point convert to lower precision narrow","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to higher precision long","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to lower precision narrow","Floating-point convert to higher precision long","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to signed fixed-point, rounding …","Floating-point convert to signed fixed-point, rounding …","Floating-point convert to unsigned fixed-point, rounding …","Floating-point convert to unsigned fixed-point, rounding …","Floating-point convert to signed integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to integer, rounding to nearest …","Floating-point convert to integer, rounding to nearest …","Floating-point convert to signed integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to integer, rounding to nearest …","Floating-point convert to integer, rounding to nearest …","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to signed integer, rounding toward …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to signed integer, rounding to …","Floating-point convert to unsigned integer, rounding to …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to unsigned integer, rounding …","Floating-point convert to signed integer, rounding toward …","Floating-point convert to unsigned integer, rounding …","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to signed fixed-point, rounding …","Floating-point convert to signed fixed-point, rounding …","Floating-point convert to unsigned fixed-point, rounding …","Floating-point convert to unsigned fixed-point, rounding …","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to lower precision narrow, rounding …","Floating-point convert to lower precision narrow, rounding …","Floating-point convert to lower precision narrow, rounding …","Divide","Divide","Divide","Divide","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (vector)","Dot product arithmetic (vector)","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (vector)","Dot product arithmetic (vector)","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Three-way exclusive OR","Three-way exclusive OR","Three-way exclusive OR","Three-way exclusive OR","Three-way exclusive OR","Three-way exclusive OR","Three-way exclusive OR","Three-way exclusive OR","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-add to accumulator","Floating-point fused multiply-subtract from accumulator","Floating-point fused multiply-subtract from accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused Multiply-subtract to …","Floating-point fused Multiply-subtract to …","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract from accumulator","Floating-point fused multiply-subtract from accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Floating-point fused Multiply-subtract to …","Floating-point fused Multiply-subtract to …","Floating-point fused multiply-subtract to accumulator","Floating-point fused multiply-subtract to accumulator","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Load one single-element structure and Replicate to all …","Load multiple single-element structures to one, two, …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load one single-element structure and Replicate to all …","Load multiple single-element structures to one, two, …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load SIMD&amp;FP register (immediate offset)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Floating-point Maximum Number (vector)","Floating-point Maximum Number (vector)","Floating-point Maximum Number (vector)","Floating-point Maximum Number (vector)","Floating-point maximum number across vector","Floating-point maximum number across vector","Floating-point maximum number across vector","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Horizontal vector max.","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Floating-point Minimum Number (vector)","Floating-point Minimum Number (vector)","Floating-point Minimum Number (vector)","Floating-point Minimum Number (vector)","Floating-point minimum number across vector","Floating-point minimum number across vector","Floating-point minimum number across vector","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Horizontal vector min.","Floating-point multiply-add to accumulator","Floating-point multiply-add to accumulator","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Multiply-add long","Signed multiply-add long","Signed multiply-add long","Signed multiply-add long","Unsigned multiply-add long","Unsigned multiply-add long","Unsigned multiply-add long","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Signed multiply-add long","Signed multiply-add long","Signed multiply-add long","Unsigned multiply-add long","Unsigned multiply-add long","Unsigned multiply-add long","Floating-point multiply-add to accumulator","Floating-point multiply-add to accumulator","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Floating-point multiply-subtract from accumulator","Floating-point multiply-subtract from accumulator","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Multiply-subtract long","Signed multiply-subtract long","Signed multiply-subtract long","Signed multiply-subtract long","Unsigned multiply-subtract long","Unsigned multiply-subtract long","Unsigned multiply-subtract long","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Signed multiply-subtract long","Signed multiply-subtract long","Signed multiply-subtract long","Unsigned multiply-subtract long","Unsigned multiply-subtract long","Unsigned multiply-subtract long","Floating-point multiply-subtract from accumulator","Floating-point multiply-subtract from accumulator","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","8-bit integer matrix multiply-accumulate","8-bit integer matrix multiply-accumulate","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Vector move","Vector move","Vector move","Vector move","Vector move","Vector move","Vector long move.","Vector long move.","Vector long move.","Vector long move.","Vector long move.","Vector long move.","Extract narrow","Extract narrow","Extract narrow","Extract narrow","Extract narrow","Extract narrow","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Multiply","Multiply","Floating-point multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Floating-point multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Polynomial multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Floating-point multiply","Floating-point multiply","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Multiply long","Polynomial multiply long","Polynomial multiply long","Signed multiply long","Signed multiply long","Signed multiply long","Unsigned multiply long","Unsigned multiply long","Unsigned multiply long","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply with scalar","Vector long multiply with scalar","Vector long multiply with scalar","Vector long multiply with scalar","Polynomial multiply long","Polynomial multiply long","Signed multiply long","Signed multiply long","Signed multiply long","Unsigned multiply long","Unsigned multiply long","Unsigned multiply long","Multiply","Multiply","Floating-point multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Floating-point multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Polynomial multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Floating-point multiply","Floating-point multiply","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Floating-point multiply extended","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Floating-point add pairwise","Add pairwise.","Add pairwise.","Add pairwise.","Add pairwise.","Add pairwise.","Add pairwise.","Floating-point add pairwise","Add pairwise","Add pairwise","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Floating-point add pairwise","Floating-point add pairwise","Add pairwise","Add pairwise","Add pairwise","Add pairwise","Add pairwise","Add pairwise","Add pairwise","Add pairwise","Floating-point add pairwise","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Floating-point Maximum Number Pairwise (vector).","Floating-point Maximum Number Pairwise (vector).","Floating-point Maximum Number Pairwise (vector).","Floating-point maximum number pairwise","Floating-point maximum number pairwise","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Floating-point maximum pairwise","Floating-point maximum pairwise","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Floating-point Minimum Number Pairwise (vector).","Floating-point Minimum Number Pairwise (vector).","Floating-point Minimum Number Pairwise (vector).","Floating-point minimum number pairwise","Floating-point minimum number pairwise","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Floating-point minimum pairwise","Floating-point minimum pairwise","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating absolute value","Signed saturating absolute value","Signed saturating absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating absolute value","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high with scalar","Vector saturating doubling multiply high with scalar","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high with scalar","Vector saturating doubling multiply high with scalar","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Vector saturating doubling long multiply by scalar","Vector saturating doubling long multiply by scalar","Vector saturating doubling long multiply by scalar","Vector saturating doubling long multiply by scalar","Vector saturating doubling long multiply with scalar","Vector saturating doubling long multiply with scalar","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Unsigned saturating extract narrow","Unsigned saturating extract narrow","Unsigned saturating extract narrow","Saturating extract narrow","Saturating extract narrow","Saturating extract narrow","Saturating extract narrow","Saturating extract narrow","Saturating extract narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply accumulate …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Signed saturating rounding doubling multiply subtract …","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector saturating rounding doubling multiply high with …","Vector saturating rounding doubling multiply high with …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector saturating rounding doubling multiply high with …","Vector saturating rounding doubling multiply high with …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Unsigned saturating rounded shift right narrow","Unsigned saturating rounded shift right narrow","Unsigned saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Unsigned signed saturating rounded shift right narrow","Unsigned signed saturating rounded shift right narrow","Unsigned signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Unsigned saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Unsigned saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Unsigned saturating rounded shift right narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift right narrow","Signed saturating shift right narrow","Signed saturating shift right narrow","Unsigned saturating shift right narrow","Unsigned saturating shift right narrow","Unsigned saturating shift right narrow","Signed saturating shift right narrow","Signed saturating shift right narrow","Signed saturating shift right narrow","Unsigned saturating shift right narrow","Unsigned saturating shift right narrow","Unsigned saturating shift right narrow","Signed saturating shift right narrow","Unsigned saturating shift right narrow","Signed saturating shift right narrow","Unsigned saturating shift right narrow","Signed saturating shift right narrow","Unsigned saturating shift right narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rotate and exclusive OR","Reverse bit order","Reverse bit order","Reverse bit order","Reverse bit order","Reverse bit order","Reverse bit order","Reciprocal estimate.","Reciprocal estimate.","Unsigned reciprocal estimate","Reciprocal estimate.","Reciprocal estimate.","Reciprocal estimate.","Unsigned reciprocal estimate","Reciprocal estimate.","Floating-point reciprocal step","Floating-point reciprocal step","Floating-point reciprocal step","Floating-point reciprocal step","Floating-point reciprocal step","Floating-point reciprocal step","Floating-point reciprocal exponent","Floating-point reciprocal exponent","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Floating-point round to 32-bit integer, using current …","Floating-point round to 32-bit integer, using current …","Floating-point round to 32-bit integer, using current …","Floating-point round to 32-bit integer, using current …","Floating-point round to 32-bit integer toward zero","Floating-point round to 32-bit integer toward zero","Floating-point round to 32-bit integer toward zero","Floating-point round to 32-bit integer toward zero","Floating-point round to 64-bit integer, using current …","Floating-point round to 64-bit integer, using current …","Floating-point round to 64-bit integer, using current …","Floating-point round to 64-bit integer, using current …","Floating-point round to 64-bit integer toward zero","Floating-point round to 64-bit integer toward zero","Floating-point round to 64-bit integer toward zero","Floating-point round to 64-bit integer toward zero","Floating-point round to integral, toward zero","Floating-point round to integral, toward zero","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, using current rounding …","Floating-point round to integral, using current rounding …","Floating-point round to integral, using current rounding …","Floating-point round to integral, using current rounding …","Floating-point round to integral, toward minus infinity","Floating-point round to integral, toward minus infinity","Floating-point round to integral, toward minus infinity","Floating-point round to integral, toward minus infinity","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, toward plus infinity","Floating-point round to integral, toward plus infinity","Floating-point round to integral, toward plus infinity","Floating-point round to integral, toward plus infinity","Floating-point round to integral, toward zero","Floating-point round to integral, toward zero","Floating-point round to integral exact, using current …","Floating-point round to integral exact, using current …","Floating-point round to integral exact, using current …","Floating-point round to integral exact, using current …","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Signed rounding shift left","Unsigned rounding shift left","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Signed rounding shift right","Unsigned rounding shift right","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Reciprocal square-root estimate.","Reciprocal square-root estimate.","Unsigned reciprocal square root estimate","Reciprocal square-root estimate.","Reciprocal square-root estimate.","Reciprocal square-root estimate.","Unsigned reciprocal square root estimate","Reciprocal square-root estimate.","Floating-point reciprocal square root step","Floating-point reciprocal square root step","Floating-point reciprocal square root step","Floating-point reciprocal square root step","Floating-point reciprocal square root step","Floating-point reciprocal square root step","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Signed rounding shift right and accumulate.","Unsigned rounding shift right and accumulate.","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","SHA1 hash update accelerator, choose.","SHA1 fixed rotate.","SHA1 hash update accelerator, majority.","SHA1 hash update accelerator, parity.","SHA1 schedule update accelerator, first part.","SHA1 schedule update accelerator, second part.","SHA256 hash update accelerator, upper part.","SHA256 hash update accelerator.","SHA256 schedule update accelerator, first part.","SHA256 schedule update accelerator, second part.","SHA512 hash update part 2","SHA512 hash update part 1","SHA512 schedule update 0","SHA512 schedule update 1","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Shift left","Shift left","Signed Shift left","Unsigned Shift left","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Signed shift right","Unsigned shift right","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift left and insert","Shift left and insert","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","SM3PARTW1","SM3PARTW2","SM3SS1","SM3TT1A","SM3TT1B","SM3TT2A","SM3TT2B","SM4 key","SM4 encode","Unsigned saturating Accumulate of Signed value.","Unsigned saturating Accumulate of Signed value.","Unsigned saturating Accumulate of Signed value.","Unsigned saturating Accumulate of Signed value.","Unsigned saturating accumulate of signed value","Unsigned saturating accumulate of signed value","Unsigned saturating accumulate of signed value","Unsigned saturating Accumulate of Signed value.","Unsigned saturating Accumulate of Signed value.","Unsigned saturating Accumulate of Signed value.","Unsigned saturating Accumulate of Signed value.","Unsigned saturating accumulate of signed value","Calculates the square root of each lane.","Calculates the square root of each lane.","Calculates the square root of each lane.","Calculates the square root of each lane.","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Signed shift right and accumulate","Unsigned shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift right and insert","Shift right and insert","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Arm’s documentation","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Arm’s documentation","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store SIMD&amp;FP register (immediate offset)","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Signed Subtract Long","Signed Subtract Long","Signed Subtract Long","Unsigned Subtract Long","Unsigned Subtract Long","Unsigned Subtract Long","Signed Subtract Long","Signed Subtract Long","Signed Subtract Long","Unsigned Subtract Long","Unsigned Subtract Long","Unsigned Subtract Long","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Signed Subtract Wide","Signed Subtract Wide","Signed Subtract Wide","Unsigned Subtract Wide","Unsigned Subtract Wide","Unsigned Subtract Wide","Signed Subtract Wide","Signed Subtract Wide","Signed Subtract Wide","Unsigned Subtract Wide","Unsigned Subtract Wide","Unsigned Subtract Wide","Dot product index form with signed and unsigned integers","Dot product index form with signed and unsigned integers","Dot product index form with signed and unsigned integers","Dot product index form with signed and unsigned integers","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose vectors","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Compare bitwise test bits nonzero","Compare bitwise test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Signed saturating Accumulate of Unsigned value.","Signed saturating Accumulate of Unsigned value.","Signed saturating Accumulate of Unsigned value.","Signed saturating Accumulate of Unsigned value.","Signed saturating accumulate of unsigned value","Signed saturating accumulate of unsigned value","Signed saturating accumulate of unsigned value","Signed saturating Accumulate of Unsigned value.","Signed saturating Accumulate of Unsigned value.","Signed saturating Accumulate of Unsigned value.","Signed saturating Accumulate of Unsigned value.","Signed saturating accumulate of unsigned value","Dot product index form with unsigned and signed integers","Dot product index form with unsigned and signed integers","Dot product vector form with unsigned and signed integers","Dot product index form with unsigned and signed integers","Dot product index form with unsigned and signed integers","Dot product vector form with unsigned and signed integers","Unsigned and signed 8-bit integer matrix …","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Exclusive OR and rotate","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Full system is the required shareability domain, reads and …","CRC32 single round checksum for bytes (8 bits).","CRC32-C single round checksum for bytes (8 bits).","CRC32-C single round checksum for half words (16 bits).","CRC32-C single round checksum for words (32 bits).","CRC32 single round checksum for half words (16 bits).","CRC32 single round checksum for words (32 bits).","Generates a DBG instruction.","Generates a DMB (data memory barrier) instruction or …","Generates a DSB (data synchronization barrier) instruction …","Generates an ISB (instruction synchronization barrier) …","Generates an unspecified no-op instruction.","Signed saturating addition","Saturating two 16-bit integer additions","Saturating four 8-bit integer additions","Returns the 16-bit signed saturated equivalent of","Insert a QADD instruction","Returns the 16-bit signed saturated equivalent of","Signed saturating subtraction","Saturating two 16-bit integer subtraction","Saturating two 8-bit integer subtraction","Returns the 16-bit signed saturated equivalent of","Returns the 8-bit signed saturated equivalent of","Returns the 16-bit signed equivalent of","Select bytes from each operand according to APSR GE flags","Generates a SEV (send a global event) hint instruction.","Generates a send a local event hint instruction.","Signed halving parallel halfword-wise addition.","Signed halving parallel byte-wise addition.","Signed halving parallel halfword-wise subtraction.","Signed halving parallel byte-wise subtraction.","Insert a SMLABB instruction","Insert a SMLABT instruction","Dual 16-bit Signed Multiply with Addition of products and …","Insert a SMLATB instruction","Insert a SMLATT instruction","Insert a SMLAWB instruction","Insert a SMLAWT instruction","Dual 16-bit Signed Multiply with Subtraction  of products …","Signed Dual Multiply Add.","Signed Dual Multiply Add Reversed.","Insert a SMULBB instruction","Insert a SMULTB instruction","Insert a SMULTB instruction","Insert a SMULTT instruction","Insert a SMULWB instruction","Insert a SMULWT instruction","Signed Dual Multiply Subtract.","Signed Dual Multiply Subtract Reversed.","Inserts a <code>SSUB8</code> instruction.","Sum of 8-bit absolute differences.","Sum of 8-bit absolute differences and constant.","Inserts a <code>USUB8</code> instruction.","Generates a WFE (wait for event) hint instruction, or …","Generates a WFI (wait for interrupt) hint instruction, or …","Generates a YIELD hint instructioneferences:","ARM-specific 64-bit wide vector of two packed <code>f32</code>.","ARM-specific type containing two <code>float32x2_t</code> vectors.","ARM-specific type containing three <code>float32x2_t</code> vectors.","ARM-specific type containing four <code>float32x2_t</code> vectors.","ARM-specific 128-bit wide vector of four packed <code>f32</code>.","ARM-specific type containing two <code>float32x4_t</code> vectors.","ARM-specific type containing three <code>float32x4_t</code> vectors.","ARM-specific type containing four <code>float32x4_t</code> vectors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","ARM-specific 32-bit wide vector of two packed <code>i16</code>.","ARM-specific 64-bit wide vector of four packed <code>i16</code>.","ARM-specific type containing two <code>int16x4_t</code> vectors.","ARM-specific type containing three <code>int16x4_t</code> vectors.","ARM-specific type containing four <code>int16x4_t</code> vectors.","ARM-specific 128-bit wide vector of eight packed <code>i16</code>.","ARM-specific type containing two <code>int16x8_t</code> vectors.","ARM-specific type containing three <code>int16x8_t</code> vectors.","ARM-specific type containing four <code>int16x8_t</code> vectors.","ARM-specific 64-bit wide vector of two packed <code>i32</code>.","ARM-specific type containing two <code>int32x2_t</code> vectors.","ARM-specific type containing three <code>int32x2_t</code> vectors.","ARM-specific type containing four <code>int32x2_t</code> vectors.","ARM-specific 128-bit wide vector of four packed <code>i32</code>.","ARM-specific type containing two <code>int32x4_t</code> vectors.","ARM-specific type containing three <code>int32x4_t</code> vectors.","ARM-specific type containing four <code>int32x4_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>i64</code>.","ARM-specific type containing four <code>int64x1_t</code> vectors.","ARM-specific type containing four <code>int64x1_t</code> vectors.","ARM-specific type containing four <code>int64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>i64</code>.","ARM-specific type containing four <code>int64x2_t</code> vectors.","ARM-specific type containing four <code>int64x2_t</code> vectors.","ARM-specific type containing four <code>int64x2_t</code> vectors.","ARM-specific 128-bit wide vector of sixteen packed <code>i8</code>.","ARM-specific type containing two <code>int8x16_t</code> vectors.","ARM-specific type containing three <code>int8x16_t</code> vectors.","ARM-specific type containing four <code>int8x16_t</code> vectors.","ARM-specific 32-bit wide vector of four packed <code>i8</code>.","ARM-specific 64-bit wide vector of eight packed <code>i8</code>.","ARM-specific type containing two <code>int8x8_t</code> vectors.","ARM-specific type containing three <code>int8x8_t</code> vectors.","ARM-specific type containing four <code>int8x8_t</code> vectors.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ARM-specific 64-bit wide vector of four packed <code>p16</code>.","ARM-specific type containing two <code>poly16x4_t</code> vectors.","ARM-specific type containing three <code>poly16x4_t</code> vectors.","ARM-specific type containing four <code>poly16x4_t</code> vectors.","ARM-specific 128-bit wide vector of eight packed <code>p16</code>.","ARM-specific type containing two <code>poly16x8_t</code> vectors.","ARM-specific type containing three <code>poly16x8_t</code> vectors.","ARM-specific type containing four <code>poly16x8_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>p64</code>.","ARM-specific type containing four <code>poly64x1_t</code> vectors.","ARM-specific type containing four <code>poly64x1_t</code> vectors.","ARM-specific type containing four <code>poly64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>p64</code>.","ARM-specific type containing four <code>poly64x2_t</code> vectors.","ARM-specific type containing four <code>poly64x2_t</code> vectors.","ARM-specific type containing four <code>poly64x2_t</code> vectors.","ARM-specific 128-bit wide vector of sixteen packed <code>p8</code>.","ARM-specific type containing two <code>poly8x16_t</code> vectors.","ARM-specific type containing three <code>poly8x16_t</code> vectors.","ARM-specific type containing four <code>poly8x16_t</code> vectors.","ARM-specific 64-bit wide polynomial vector of eight packed …","ARM-specific type containing two <code>poly8x8_t</code> vectors.","ARM-specific type containing three <code>poly8x8_t</code> vectors.","ARM-specific type containing four <code>poly8x8_t</code> vectorsspecific 32-bit wide vector of two packed <code>u16</code>.","ARM-specific 64-bit wide vector of four packed <code>u16</code>.","ARM-specific type containing two <code>uint16x4_t</code> vectors.","ARM-specific type containing three <code>uint16x4_t</code> vectors.","ARM-specific type containing four <code>uint16x4_t</code> vectors.","ARM-specific 128-bit wide vector of eight packed <code>u16</code>.","ARM-specific type containing two <code>uint16x8_t</code> vectors.","ARM-specific type containing three <code>uint16x8_t</code> vectors.","ARM-specific type containing four <code>uint16x8_t</code> vectors.","ARM-specific 64-bit wide vector of two packed <code>u32</code>.","ARM-specific type containing two <code>uint32x2_t</code> vectors.","ARM-specific type containing three <code>uint32x2_t</code> vectors.","ARM-specific type containing four <code>uint32x2_t</code> vectors.","ARM-specific 128-bit wide vector of four packed <code>u32</code>.","ARM-specific type containing two <code>uint32x4_t</code> vectors.","ARM-specific type containing three <code>uint32x4_t</code> vectors.","ARM-specific type containing four <code>uint32x4_t</code> vectors.","ARM-specific 64-bit wide vector of one packed <code>u64</code>.","ARM-specific type containing four <code>uint64x1_t</code> vectors.","ARM-specific type containing four <code>uint64x1_t</code> vectors.","ARM-specific type containing four <code>uint64x1_t</code> vectors.","ARM-specific 128-bit wide vector of two packed <code>u64</code>.","ARM-specific type containing four <code>uint64x2_t</code> vectors.","ARM-specific type containing four <code>uint64x2_t</code> vectors.","ARM-specific type containing four <code>uint64x2_t</code> vectors.","ARM-specific 128-bit wide vector of sixteen packed <code>u8</code>.","ARM-specific type containing two <code>uint8x16_t</code> vectors.","ARM-specific type containing three <code>uint8x16_t</code> vectors.","ARM-specific type containing four <code>uint8x16_t</code> vectors.","ARM-specific 32-bit wide vector of four packed <code>u8</code>.","ARM-specific 64-bit wide vector of eight packed <code>u8</code>.","ARM-specific type containing two <code>uint8x8_t</code> vectors.","ARM-specific type containing three <code>uint8x8_t</code> vectors.","ARM-specific type containing four <code>uint8x8_t</code> vectors.","","","","","","","Signed Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Signed Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","Unsigned Absolute difference and Accumulate Long","","","","","","","Absolute difference between the arguments of Floating","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Signed Absolute difference Long","Signed Absolute difference Long","Signed Absolute difference Long","Unsigned Absolute difference Long","Unsigned Absolute difference Long","Unsigned Absolute difference Long","Absolute difference between the arguments of Floating","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Absolute difference between the arguments","Floating-point absolute value","Absolute value (wrapping).","Absolute value (wrapping).","Absolute value (wrapping).","Floating-point absolute value","Absolute value (wrapping).","Absolute value (wrapping).","Absolute value (wrapping).","Vector add.","Bitwise exclusive OR","Bitwise exclusive OR","Bitwise exclusive OR","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow (high half).","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Add returning High Narrow.","Signed Add Long (vector, high half).","Signed Add Long (vector, high half).","Signed Add Long (vector, high half).","Unsigned Add Long (vector, high half).","Unsigned Add Long (vector, high half).","Unsigned Add Long (vector, high half).","Signed Add Long (vector).","Signed Add Long (vector).","Signed Add Long (vector).","Unsigned Add Long (vector).","Unsigned Add Long (vector).","Unsigned Add Long (vector).","Vector add.","Bitwise exclusive OR","Bitwise exclusive OR","Bitwise exclusive OR","Bitwise exclusive OR","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Vector add.","Signed Add Wide (high half).","Signed Add Wide (high half).","Signed Add Wide (high half).","Unsigned Add Wide (high half).","Unsigned Add Wide (high half).","Unsigned Add Wide (high half).","Signed Add Wide.","Signed Add Wide.","Signed Add Wide.","Unsigned Add Wide.","Unsigned Add Wide.","Unsigned Add Wide.","AES single round decryption.","AES single round encryption.","AES inverse mix columns.","AES mix columns.","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise and","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Vector bitwise bit clear","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select instructions. This instruction sets each …","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select.","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Bitwise Select. (128-bit)","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than or equal","Floating-point absolute compare greater than","Floating-point absolute compare greater than","Floating-point absolute compare less than or equal","Floating-point absolute compare less than or equal","Floating-point absolute compare less than","Floating-point absolute compare less than","Floating-point compare equal","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Floating-point compare equal","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Compare bitwise Equal (vector)","Floating-point compare greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Floating-point compare greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare signed greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Compare unsigned greater than or equal","Floating-point compare greater than","Compare signed greater than","Compare signed greater than","Compare signed greater than","Compare unsigned greater than","Compare unsigned greater than","Compare unsigned greater than","Floating-point compare greater than","Compare signed greater than","Compare signed greater than","Compare signed greater than","Compare unsigned greater than","Compare unsigned greater than","Compare unsigned greater than","Floating-point compare less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Floating-point compare less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare signed less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Compare unsigned less than or equal","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Count leading sign bits","Floating-point compare less than","Compare signed less than","Compare signed less than","Compare signed less than","Compare unsigned less than","Compare unsigned less than","Compare unsigned less than","Floating-point compare less than","Compare signed less than","Compare signed less than","Compare signed less than","Compare unsigned less than","Compare unsigned less than","Compare unsigned less than","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Count leading zero bits","Population count per byte.","Population count per byte.","Population count per byte.","Population count per byte.","Population count per byte.","Population count per byte.","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Vector combine","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to signed fixed-point, rounding …","Floating-point convert to unsigned fixed-point, rounding …","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Fixed-point convert to floating-point","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to fixed-point, rounding toward zero","Floating-point convert to signed fixed-point, rounding …","Floating-point convert to unsigned fixed-point, rounding …","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (vector)","Dot product arithmetic (vector)","Dot product arithmetic (indexed)","Dot product arithmetic (indexed)","Dot product arithmetic (vector)","Dot product arithmetic (vector)","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Set all vector lanes to the same value","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Vector bitwise exclusive or (vector)","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Extract vector from pair of vectors","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused Multiply-Add to accumulator(vector)","Floating-point fused multiply-subtract from accumulator","Floating-point fused Multiply-subtract to …","Floating-point fused multiply-subtract from accumulator","Floating-point fused Multiply-subtract to …","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Move vector element to general-purpose register","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Halving add","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Signed halving subtract","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load one single-element structure and Replicate to all …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load one single-element structure to one lane of one …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load multiple single-element structures to one, two, …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load single 2-element structure and replicate to all lanes …","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load multiple 2-element structures to two registers","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load single 3-element structure and replicate to all lanes …","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to two registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load multiple 3-element structures to three registers","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load single 4-element structure and replicate to all lanes …","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load multiple 4-element structures to four registers","Load SIMD&amp;FP register (immediate offset)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Floating-point Maximum Number (vector)","Floating-point Maximum Number (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Maximum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Floating-point Minimum Number (vector)","Floating-point Minimum Number (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Minimum (vector)","Floating-point multiply-add to accumulator","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Vector widening multiply accumulate with scalar","Signed multiply-add long","Signed multiply-add long","Signed multiply-add long","Unsigned multiply-add long","Unsigned multiply-add long","Unsigned multiply-add long","Floating-point multiply-add to accumulator","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Vector multiply accumulate with scalar","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Multiply-add to accumulator","Floating-point multiply-subtract from accumulator","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Vector widening multiply subtract with scalar","Signed multiply-subtract long","Signed multiply-subtract long","Signed multiply-subtract long","Unsigned multiply-subtract long","Unsigned multiply-subtract long","Unsigned multiply-subtract long","Floating-point multiply-subtract from accumulator","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Vector multiply subtract with scalar","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","Multiply-subtract from accumulator","8-bit integer matrix multiply-accumulate","8-bit integer matrix multiply-accumulate","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Vector long move.","Vector long move.","Vector long move.","Vector long move.","Vector long move.","Vector long move.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Vector narrow integer.","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Duplicate vector element to vector or scalar","Multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Polynomial multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply by scalar","Vector long multiply with scalar","Vector long multiply with scalar","Vector long multiply with scalar","Vector long multiply with scalar","Polynomial multiply long","Signed multiply long","Signed multiply long","Signed multiply long","Unsigned multiply long","Unsigned multiply long","Unsigned multiply long","Multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Floating-point multiply","Multiply","Multiply","Multiply","Multiply","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Vector multiply by scalar","Polynomial multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Multiply","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Vector bitwise not.","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Negate","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise inclusive OR NOT","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Vector bitwise or (immediate, inclusive)","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Signed Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Unsigned Add and Accumulate Long Pairwise.","Floating-point add pairwise","Add pairwise.","Add pairwise.","Add pairwise.","Add pairwise.","Add pairwise.","Add pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Signed Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Unsigned Add Long Pairwise.","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding maximum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Folding minimum of adjacent pairs","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Signed saturating Absolute value","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Saturating add","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Vector widening saturating doubling multiply accumulate …","Signed saturating doubling multiply-add long","Signed saturating doubling multiply-add long","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Vector widening saturating doubling multiply subtract with …","Signed saturating doubling multiply-subtract long","Signed saturating doubling multiply-subtract long","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high with scalar","Vector saturating doubling multiply high with scalar","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high by scalar","Vector saturating doubling multiply high with scalar","Vector saturating doubling multiply high with scalar","Signed saturating doubling multiply returning high half","Signed saturating doubling multiply returning high half","Vector saturating doubling long multiply by scalar","Vector saturating doubling long multiply by scalar","Vector saturating doubling long multiply with scalar","Vector saturating doubling long multiply with scalar","Signed saturating doubling multiply long","Signed saturating doubling multiply long","Signed saturating extract narrow","Signed saturating extract narrow","Signed saturating extract narrow","Unsigned saturating extract narrow","Unsigned saturating extract narrow","Unsigned saturating extract narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating extract unsigned narrow","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Signed saturating negate","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector saturating rounding doubling multiply high with …","Vector saturating rounding doubling multiply high with …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector rounding saturating doubling multiply high by scalar","Vector saturating rounding doubling multiply high with …","Vector saturating rounding doubling multiply high with …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding doubling multiply returning …","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Unsigned signed saturating rounding shift left","Signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Signed saturating rounded shift right narrow","Unsigned signed saturating rounded shift right narrow","Unsigned signed saturating rounded shift right narrow","Unsigned signed saturating rounded shift right narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating rounded shift right unsigned narrow","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Signed saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Unsigned saturating shift left","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift left unsigned","Signed saturating shift right narrow","Signed saturating shift right narrow","Signed saturating shift right narrow","Unsigned saturating shift right narrow","Unsigned saturating shift right narrow","Unsigned saturating shift right narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Signed saturating shift right unsigned narrow","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Saturating subtract","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow (high half).","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Rounding Add returning High Narrow.","Reciprocal estimate.","Unsigned reciprocal estimate","Reciprocal estimate.","Unsigned reciprocal estimate","Floating-point reciprocal step","Floating-point reciprocal step","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Vector reinterpret cast operation","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Reversing vector elements (swap endianness)","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Rounding halving add","Floating-point round to integral, to nearest with ties to …","Floating-point round to integral, to nearest with ties to …","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Signed rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Unsigned rounding shift left","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Rounding shift right narrow","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Signed rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Unsigned rounding shift right","Reciprocal square-root estimate.","Unsigned reciprocal square root estimate","Reciprocal square-root estimate.","Unsigned reciprocal square root estimate","Floating-point reciprocal square root step","Floating-point reciprocal square root step","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Signed rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Unsigned rounding shift right and accumulate","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Rounding subtract returning high narrow","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","Insert vector element from another vector element","SHA1 hash update accelerator, choose.","SHA1 fixed rotate.","SHA1 hash update accelerator, majority.","SHA1 hash update accelerator, parity.","SHA1 schedule update accelerator, first part.","SHA1 schedule update accelerator, second part.","SHA256 hash update accelerator, upper part.","SHA256 hash update accelerator.","SHA256 schedule update accelerator, first part.","SHA256 schedule update accelerator, second part.","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Signed shift left long","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Signed Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Unsigned Shift left","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right narrow","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift right","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Shift Left and Insert (immediate)","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Signed shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Unsigned shift right and accumulate","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","Shift Right and Insert (immediate)","","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures from one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple single-element structures to one, two, …","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 2-element structures from two registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 3-element structures from three registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store multiple 4-element structures from four registers","Store SIMD&amp;FP register (immediate offset)","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Subtract returning high narrow","Signed Subtract Long","Signed Subtract Long","Signed Subtract Long","Unsigned Subtract Long","Unsigned Subtract Long","Unsigned Subtract Long","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Subtract","Signed Subtract Wide","Signed Subtract Wide","Signed Subtract Wide","Unsigned Subtract Wide","Unsigned Subtract Wide","Unsigned Subtract Wide","Dot product index form with signed and unsigned integers","Dot product index form with signed and unsigned integers","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Extended table look-up","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Transpose elements","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Signed compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Unsigned compare bitwise Test bits nonzero","Dot product index form with unsigned and signed integers","Dot product vector form with unsigned and signed integers","Dot product index form with unsigned and signed integers","Dot product vector form with unsigned and signed integers","Unsigned and signed 8-bit integer matrix …","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Unzip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Zip vectors","Signed saturating addition","Insert a QADD instruction","Signed saturating subtraction","Insert a SMLABB instruction","Insert a SMLABT instruction","Insert a SMLATB instruction","Insert a SMLATT instruction","Insert a SMLAWB instruction","Insert a SMLAWT instruction","Insert a SMULBB instruction","Insert a SMULTB instruction","Insert a SMULTB instruction","Insert a SMULTT instruction","Insert a SMULWB instruction","Insert a SMULWT instruction","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","ARM-specific 32-bit wide vector of two packed <code>i16</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","ARM-specific 32-bit wide vector of two packed <code>u16</code>.","Generates the trap instruction <code>BREAK</code>","Generates the trap instruction <code>BREAK</code>","Syscall to be used whenever the <em>assert expression produces </em>…","x-th thread-block dimension.","y-th thread-block dimension.","z-th thread-block dimension.","x-th thread-block index.","y-th thread-block index.","z-th thread-block index.","x-th block-grid dimension.","y-th block-grid dimension.","z-th block-grid dimension.","Synchronizes all threads in the block.","x-th thread index.","y-th thread index.","z-th thread index.","Free previously dynamically allocated memory.","Allocate memory dynamically from a fixed-size heap in …","Generates the trap instruction <code>TRAP</code>","Print formatted output from a kernel to a host-side output …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Generates the trap instruction <code>TRAP</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Vector abs.","Vector abss.","Vector add.","Vector addc.","Vector adds.","Vector All Elements Equal","Vector All Elements Greater or Equal","Vector All Elements Greater Than","Vector All In","Vector All Elements Less Than or Equal","Vector All Elements Less Than","All Elements Not a Number","Vector All Elements Not Equal","All Elements Not Greater Than or Equal","All Elements Not Greater Than","All Elements Not Less Than or Equal","All Elements Not Less Than","All Elements Numeric","Vector and.","Vector andc.","Vector All Elements Equal","Vector Any Element Greater or Equal","Vector Any Element Greater Than","Vector Any Element Less Than or Equal","Vector Any Element Less Than","Any Elements Not a Number","Vector Any Elements Not Equal","Any Elements Not Greater Than or Equal","Any Elements Not Greater Than","Any Elements Not Less Than or Equal","Any Elements Not Less Than","Any Elements Numeric","Any Element Out of Bounds","Vector avg.","Vector ceil.","Vector cmpb.","Vector cmpeq.","Vector cmpge.","Vector cmpgt.","Vector cmple.","Vector cmplt.","Vector Convert to Floating-Point","Vector Convert to Signed Integer","Vector Convert to Signed Integer","Vector expte.","Vector floor.","Vector Load Indexed.","Vector Load Element Indexed.","Vector Load Indexed Least Recently Used.","Vector Base-2 Logarithm Estimate","Vector Multiply Add","Vector Multiply Add Saturated","Vector max.","Vector Merge High","Vector Merge Low","Move From Vector Status and Control Register.","Vector min.","Vector Multiply Low and Add Unsigned Half Word","Vector Multiply Round and Add Saturated","Vector Multiply Sum","Vector Multiply Sum Saturated","Vector Multiply Even","Vector Multiply Odd","Vector Negative Multiply Subtract","Vector nor.","Vector or.","Vector Pack","Vector Pack Saturated","Vector Pack Saturated Unsigned","Vector permute.","Vector Splat","Vector Splat to Signed Halfword","Vector Splat to Signed Word","Vector Splat to Signed Byte","Vector Splat to Unsigned Halfword","Vector Splat to Unsigned Word","Vector Splat to Unsigned Byte","Vector splats.","Vector sub.","Vector subs.","Vector Sum Across Partial (1/2) Saturated","Vector Sum Across Partial (1/4) Saturated","Vector Unpack High","Vector Unpack Low","VSX Unaligned Load","Vector xor.","Vector permute.","PowerPC-specific 128-bit wide vector mask of sixteen …","PowerPC-specific 128-bit wide vector mask of four packed …","PowerPC-specific 128-bit wide vector mask of two <code>i64</code>","PowerPC-specific 128-bit wide vector mask of eight packed …","PowerPC-specific 128-bit wide vector of two packed <code>f64</code>","PowerPC-specific 128-bit wide vector of four packed <code>f32</code>","PowerPC-specific 128-bit wide vector of sixteen packed <code>i8</code>","PowerPC-specific 128-bit wide vector of four packed <code>i32</code>","PowerPC-specific 128-bit wide vector of two packed <code>i64</code>","PowerPC-specific 128-bit wide vector of eight packed <code>i16</code>","PowerPC-specific 128-bit wide vector of sixteen packed <code>u8</code>","PowerPC-specific 128-bit wide vector of four packed <code>u32</code>","PowerPC-specific 128-bit wide vector of two packed <code>u64</code>","PowerPC-specific 128-bit wide vector of eight packed <code>u16</code>","Generates the trap instruction <code>TRAP</code>","Vector abs.","Vector abss.","Vector add.","Vector addc.","Vector adds.","Vector All Elements Equal","Vector All Elements Greater or Equal","Vector All Elements Greater Than","Vector All In","Vector All Elements Less Than or Equal","Vector All Elements Less Than","All Elements Not a Number","Vector All Elements Not Equal","All Elements Not Greater Than or Equal","All Elements Not Greater Than","All Elements Not Less Than or Equal","All Elements Not Less Than","All Elements Numeric","Vector and.","Vector andc.","Vector All Elements Equal","Vector Any Element Greater or Equal","Vector Any Element Greater Than","Vector Any Element Less Than or Equal","Vector Any Element Less Than","Any Elements Not a Number","Vector Any Elements Not Equal","Any Elements Not Greater Than or Equal","Any Elements Not Greater Than","Any Elements Not Less Than or Equal","Any Elements Not Less Than","Any Elements Numeric","Any Element Out of Bounds","Vector avg.","Vector ceil.","Vector cmpb.","Vector cmpeq.","Vector cmpge.","Vector cmpgt.","Vector cmple.","Vector cmplt.","Vector Convert to Floating-Point","Vector Convert to Signed Integer","Vector Convert to Signed Integer","Vector expte.","Vector floor.","Vector Load Indexed.","Vector Load Element Indexed.","Vector Load Indexed Least Recently Used.","Vector Base-2 Logarithm Estimate","Vector Multiply Add","Vector Multiply Add Saturated","Vector max.","Vector Merge High","Vector Merge Low","Move From Vector Status and Control Register.","Vector min.","Vector Multiply Low and Add Unsigned Half Word","Vector Multiply Round and Add Saturated","Vector Multiply Sum","Vector Multiply Sum Saturated","Vector Multiply Even","Vector Multiply Odd","Vector Negative Multiply Subtract","Vector nor.","Vector or.","Vector Pack","Vector Pack Saturated","Vector Pack Saturated Unsigned","Vector permute.","Vector Splat","Vector Splat to Signed Halfword","Vector Splat to Signed Word","Vector Splat to Signed Byte","Vector Splat to Unsigned Halfword","Vector Splat to Unsigned Word","Vector Splat to Unsigned Byte","Vector splats.","Vector sub.","Vector subs.","Vector Sum Across Partial (1/2) Saturated","Vector Sum Across Partial (1/4) Saturated","Vector Unpack High","Vector Unpack Low","VSX Unaligned Load","Vector xor.","Vector permute.","PowerPC-specific 128-bit wide vector mask of sixteen …","PowerPC-specific 128-bit wide vector mask of four packed …","PowerPC-specific 128-bit wide vector mask of two <code>i64</code>","PowerPC-specific 128-bit wide vector mask of eight packed …","PowerPC-specific 128-bit wide vector of two packed <code>f64</code>","PowerPC-specific 128-bit wide vector of four packed <code>f32</code>","PowerPC-specific 128-bit wide vector of sixteen packed <code>i8</code>","PowerPC-specific 128-bit wide vector of four packed <code>i32</code>","PowerPC-specific 128-bit wide vector of two packed <code>i64</code>","PowerPC-specific 128-bit wide vector of eight packed <code>i16</code>","PowerPC-specific 128-bit wide vector of sixteen packed <code>u8</code>","PowerPC-specific 128-bit wide vector of four packed <code>u32</code>","PowerPC-specific 128-bit wide vector of two packed <code>u64</code>","PowerPC-specific 128-bit wide vector of eight packed <code>u16</code>","Adds packed 16-bit signed numbers, discarding overflow bits","Adds packed 8-bit signed numbers, discarding overflow bits","AES final round decryption instruction for RV32.","AES middle round decryption instruction for RV32.","AES final round encryption instruction for RV32.","AES middle round encryption instruction for RV32 with.","Carry-less multiply (low-part)","Carry-less multiply (high-part)","Carry-less multiply (reversed)","Count the number of redundant sign bits of the packed …","Count the number of redundant sign bits of the packed …","Count the number of redundant sign bits of the packed …","Count the number of leading zero bits of the packed 16-bit …","Count the number of leading zero bits of the packed 32-bit …","Count the number of leading zero bits of the packed 8-bit …","Compare equality for packed 16-bit elements","Compare equality for packed 8-bit elements","Cross adds and subtracts packed 16-bit signed numbers, …","Cross subtracts and adds packed 16-bit signed numbers, …","Generates the <code>FENCE.I</code> instruction","Reads the floating-point control and status register <code>fcsr</code>","Reads the floating-point accrued exception flags register …","Reads the floating-point rounding mode register <code>frm</code>","Swaps the floating-point control and status register <code>fcsr</code>","Swaps the floating-point accrued exception flags register …","Swaps the floating-point rounding mode register <code>frm</code>","Hypervisor memory management fence for guest physical …","Hypervisor memory management fence for all virtual …","Hypervisor memory management fence for guest physical …","Hypervisor memory management fence for given virtual …","Hypervisor memory management fence for given guest virtual …","Hypervisor memory management fence for all guest address …","Hypervisor memory management fence for given guest address …","Hypervisor memory management fence for given guest virtual …","Invalidate hypervisor translation cache for guest physical …","Invalidate hypervisor translation cache for all virtual …","Invalidate hypervisor translation cache for guest physical …","Invalidate hypervisor translation cache for given virtual …","Invalidate hypervisor translation cache for given guest …","Invalidate hypervisor translation cache for all guest …","Invalidate hypervisor translation cache for given guest …","Invalidate hypervisor translation cache for given guest …","Loads virtual machine memory by signed byte integer","Loads virtual machine memory by unsigned byte integer","Loads virtual machine memory by signed half integer","Loads virtual machine memory by unsigned half integer","Loads virtual machine memory by signed word integer","Accesses virtual machine instruction by unsigned half …","Accesses virtual machine instruction by unsigned word …","Stores virtual machine memory by byte integer","Stores virtual machine memory by half integer","Stores virtual machine memory by word integer","Compute the absolute value of packed 16-bit signed integers","Compute the absolute value of packed 8-bit signed integers","Adds packed 16-bit signed numbers, saturating at the …","Adds packed 8-bit signed numbers, saturating at the …","Adds signed lower 16-bit content of two registers with Q15 …","Cross adds and subtracts packed 16-bit signed numbers, …","Cross subtracts and adds packed 16-bit signed numbers, …","Logical left shift packed 16-bit elements, saturating at …","Logical left shift packed 8-bit elements, saturating at …","Logical saturating left then arithmetic right shift packed …","Logical saturating left then arithmetic right shift packed …","Logical saturating left then arithmetic right shift packed …","Logical saturating left then arithmetic right shift packed …","Straight adds and subtracts packed 16-bit signed numbers, …","Straight subtracts and adds packed 16-bit signed numbers, …","Subtracts packed 16-bit signed numbers, saturating at the …","Subtracts packed 8-bit signed numbers, saturating at the …","Subtracts signed lower 16-bit content of two registers …","Generates the <code>NOP</code> instruction","Bitwise OR-Combine, byte granule","Generates the <code>PAUSE</code> instruction","Calculate the sum of absolute difference of unsigned 8-bit …","Calculate and accumulate the sum of absolute difference of …","Pack two 16-bit data from bottom and top half from 32-bit …","Pack two 16-bit data from top and bottom half from 32-bit …","Halves the sum of packed 16-bit signed numbers, dropping …","Halves the sum of packed 8-bit signed numbers, dropping …","Cross halves of adds and subtracts packed 16-bit signed …","Cross halves of subtracts and adds packed 16-bit signed …","Straight halves of adds and subtracts packed 16-bit signed …","Straight halves of subtracts and adds packed 16-bit signed …","Halves the subtraction result of packed 16-bit signed …","Halves the subtraction result of packed 8-bit signed …","Compare whether 16-bit packed signed integers are less …","Compare whether 8-bit packed signed integers are less than …","Compare whether 16-bit packed signed integers are less …","Compare whether 8-bit packed signed integers are less than …","Generates the <code>SFENCE.INVAL.IR</code> instruction","Supervisor memory management fence for given virtual …","Supervisor memory management fence for all address spaces …","Supervisor memory management fence for given address space","Supervisor memory management fence for given virtual …","Generates the <code>SFENCE.W.INVAL</code> instruction","Implements the Sigma0 transformation function as used in …","Implements the Sigma1 transformation function as used in …","Implements the Sum0 transformation function as used in the …","Implements the Sum1 transformation function as used in the …","Implements the high half of the Sigma0 transformation, as …","Implements the low half of the Sigma0 transformation, as …","Implements the high half of the Sigma1 transformation, as …","Implements the low half of the Sigma1 transformation, as …","Implements the Sum0 transformation, as used in the …","Implements the Sum1 transformation, as used in the …","Invalidate supervisor translation cache for given virtual …","Invalidate supervisor translation cache for all address …","Invalidate supervisor translation cache for given address …","Invalidate supervisor translation cache for given virtual …","Logical left shift packed 16-bit elements, discarding …","Logical left shift packed 8-bit elements, discarding …","Implements the P0 transformation function as used in the …","Implements the P1 transformation function as used in the …","Accelerates the block encrypt/decrypt operation of the SM4 …","Accelerates the Key Schedule operation of the SM4 block …","Multiply signed 8-bit elements and add 16-bit elements on …","Multiply signed to unsigned 8-bit and add 16-bit elements …","Get maximum values from 16-bit packed signed integers","Get maximum values from 8-bit packed signed integers","Get minimum values from 16-bit packed signed integers","Get minimum values from 8-bit packed signed integers","Arithmetic right shift packed 16-bit elements without …","Arithmetic right shift packed 16-bit elements with …","Arithmetic right shift packed 8-bit elements without …","Arithmetic right shift packed 8-bit elements with rounding …","Logical right shift packed 16-bit elements without …","Logical right shift packed 16-bit elements with rounding up","Logical right shift packed 8-bit elements without rounding …","Logical right shift packed 8-bit elements with rounding up","Straight adds and subtracts packed 16-bit signed numbers, …","Straight subtracts and adds packed 16-bit signed numbers, …","Subtracts packed 16-bit signed numbers, discarding …","Subtracts packed 8-bit signed numbers, discarding overflow …","Unpack first and zeroth into two 16-bit signed halfwords …","Unpack second and zeroth into two 16-bit signed halfwords …","Unpack third and zeroth into two 16-bit signed halfwords …","Unpack third and first into two 16-bit signed halfwords in …","Unpack third and second into two 16-bit signed halfwords …","Swap the 16-bit halfwords within each 32-bit word of a …","Swap the 8-bit bytes within each 16-bit halfword of a …","Compare whether 16-bit packed unsigned integers are less …","Compare whether 8-bit packed unsigned integers are less …","Compare whether 16-bit packed unsigned integers are less …","Compare whether 8-bit packed unsigned integers are less …","Adds packed 16-bit unsigned numbers, saturating at the …","Adds packed 8-bit unsigned numbers, saturating at the …","Adds signed lower 16-bit content of two registers with U16 …","Cross adds and subtracts packed 16-bit unsigned numbers, …","Cross subtracts and adds packed 16-bit unsigned numbers, …","Straight adds and subtracts packed 16-bit unsigned …","Straight subtracts and adds packed 16-bit unsigned …","Subtracts packed 16-bit unsigned numbers, saturating at …","Subtracts packed 8-bit unsigned numbers, saturating at the …","Subtracts signed lower 16-bit content of two registers …","Multiply unsigned 8-bit elements and add 16-bit elements …","Get maximum values from 16-bit packed unsigned integers","Get maximum values from 8-bit packed unsigned integers","Get minimum values from 16-bit packed unsigned integers","Get minimum values from 8-bit packed unsigned integers","Place odd and even bits of the source word into …","Halves the sum of packed 16-bit unsigned numbers, dropping …","Halves the sum of packed 8-bit unsigned numbers, dropping …","Cross halves of adds and subtracts packed 16-bit unsigned …","Cross halves of subtracts and adds packed 16-bit unsigned …","Straight halves of adds and subtracts packed 16-bit …","Straight halves of subtracts and adds packed 16-bit …","Halves the subtraction result of packed 16-bit unsigned …","Halves the subtraction result of packed 8-bit unsigned …","Generates the <code>WFI</code> instruction","Nibble-wise lookup of indicies into a vector.","Byte-wise lookup of indicies into a vector in registers.","Place upper/lower halves of the source register into …","Unpack first and zeroth into two 16-bit unsigned halfwords …","Unpack second and zeroth into two 16-bit unsigned …","Unpack third and zeroth into two 16-bit unsigned halfwords …","Unpack third and first into two 16-bit unsigned halfwords …","Unpack third and second into two 16-bit unsigned halfwords …","Adds packed 16-bit signed numbers, discarding overflow bits","Adds packed 8-bit signed numbers, discarding overflow bits","AES final round decryption instruction for RV64.","AES middle round decryption instruction for RV64.","AES final round encryption instruction for RV64.","AES middle round encryption instruction for RV64.","This instruction implements part of the KeySchedule …","This instruction implements part of the KeySchedule …","Carry-less multiply (low-part)","Carry-less multiply (high-part)","Carry-less multiply (reversed)","Count the number of redundant sign bits of the packed …","Count the number of redundant sign bits of the packed …","Count the number of redundant sign bits of the packed …","Count the number of leading zero bits of the packed 16-bit …","Count the number of leading zero bits of the packed 32-bit …","Count the number of leading zero bits of the packed 8-bit …","Compare equality for packed 16-bit elements","Compare equality for packed 8-bit elements","Cross adds and subtracts packed 16-bit signed numbers, …","Cross subtracts and adds packed 16-bit signed numbers, …","Generates the <code>FENCE.I</code> instruction","Reads the floating-point control and status register <code>fcsr</code>","Reads the floating-point accrued exception flags register …","Reads the floating-point rounding mode register <code>frm</code>","Swaps the floating-point control and status register <code>fcsr</code>","Swaps the floating-point accrued exception flags register …","Swaps the floating-point rounding mode register <code>frm</code>","Hypervisor memory management fence for guest physical …","Hypervisor memory management fence for all virtual …","Hypervisor memory management fence for guest physical …","Hypervisor memory management fence for given virtual …","Hypervisor memory management fence for given guest virtual …","Hypervisor memory management fence for all guest address …","Hypervisor memory management fence for given guest address …","Hypervisor memory management fence for given guest virtual …","Invalidate hypervisor translation cache for guest physical …","Invalidate hypervisor translation cache for all virtual …","Invalidate hypervisor translation cache for guest physical …","Invalidate hypervisor translation cache for given virtual …","Invalidate hypervisor translation cache for given guest …","Invalidate hypervisor translation cache for all guest …","Invalidate hypervisor translation cache for given guest …","Invalidate hypervisor translation cache for given guest …","Loads virtual machine memory by signed byte integer","Loads virtual machine memory by unsigned byte integer","Loads virtual machine memory by double integer","Loads virtual machine memory by signed half integer","Loads virtual machine memory by unsigned half integer","Loads virtual machine memory by signed word integer","Loads virtual machine memory by unsigned word integer","Accesses virtual machine instruction by unsigned half …","Accesses virtual machine instruction by unsigned word …","Stores virtual machine memory by byte integer","Stores virtual machine memory by double integer","Stores virtual machine memory by half integer","Stores virtual machine memory by word integer","Compute the absolute value of packed 16-bit signed integers","Compute the absolute value of packed 8-bit signed integers","Adds packed 16-bit signed numbers, saturating at the …","Adds packed 8-bit signed numbers, saturating at the …","Adds signed lower 16-bit content of two registers with Q15 …","Cross adds and subtracts packed 16-bit signed numbers, …","Cross subtracts and adds packed 16-bit signed numbers, …","Logical left shift packed 16-bit elements, saturating at …","Logical left shift packed 8-bit elements, saturating at …","Logical saturating left then arithmetic right shift packed …","Logical saturating left then arithmetic right shift packed …","Logical saturating left then arithmetic right shift packed …","Logical saturating left then arithmetic right shift packed …","Straight adds and subtracts packed 16-bit signed numbers, …","Straight subtracts and adds packed 16-bit signed numbers, …","Subtracts packed 16-bit signed numbers, saturating at the …","Subtracts packed 8-bit signed numbers, saturating at the …","Subtracts signed lower 16-bit content of two registers …","Generates the <code>NOP</code> instruction","Bitwise OR-Combine, byte granule","Generates the <code>PAUSE</code> instruction","Calculate the sum of absolute difference of unsigned 8-bit …","Calculate and accumulate the sum of absolute difference of …","Pack two 16-bit data from bottom and top half from 32-bit …","Pack two 16-bit data from top and bottom half from 32-bit …","Halves the sum of packed 16-bit signed numbers, dropping …","Halves the sum of packed 8-bit signed numbers, dropping …","Cross halves of adds and subtracts packed 16-bit signed …","Cross halves of subtracts and adds packed 16-bit signed …","Straight halves of adds and subtracts packed 16-bit signed …","Straight halves of subtracts and adds packed 16-bit signed …","Halves the subtraction result of packed 16-bit signed …","Halves the subtraction result of packed 8-bit signed …","Compare whether 16-bit packed signed integers are less …","Compare whether 8-bit packed signed integers are less than …","Compare whether 16-bit packed signed integers are less …","Compare whether 8-bit packed signed integers are less than …","Generates the <code>SFENCE.INVAL.IR</code> instruction","Supervisor memory management fence for given virtual …","Supervisor memory management fence for all address spaces …","Supervisor memory management fence for given address space","Supervisor memory management fence for given virtual …","Generates the <code>SFENCE.W.INVAL</code> instruction","Implements the Sigma0 transformation function as used in …","Implements the Sigma1 transformation function as used in …","Implements the Sum0 transformation function as used in the …","Implements the Sum1 transformation function as used in the …","Implements the Sigma0 transformation function as used in …","Implements the Sigma1 transformation function as used in …","Implements the Sum0 transformation function as used in the …","Implements the Sum1 transformation function as used in the …","Invalidate supervisor translation cache for given virtual …","Invalidate supervisor translation cache for all address …","Invalidate supervisor translation cache for given address …","Invalidate supervisor translation cache for given virtual …","Logical left shift packed 16-bit elements, discarding …","Logical left shift packed 8-bit elements, discarding …","Implements the P0 transformation function as used in the …","Implements the P1 transformation function as used in the …","Accelerates the block encrypt/decrypt operation of the SM4 …","Accelerates the Key Schedule operation of the SM4 block …","Multiply signed 8-bit elements and add 16-bit elements on …","Multiply signed to unsigned 8-bit and add 16-bit elements …","Get maximum values from 16-bit packed signed integers","Get maximum values from 8-bit packed signed integers","Get minimum values from 16-bit packed signed integers","Get minimum values from 8-bit packed signed integers","Arithmetic right shift packed 16-bit elements without …","Arithmetic right shift packed 16-bit elements with …","Arithmetic right shift packed 8-bit elements without …","Arithmetic right shift packed 8-bit elements with rounding …","Logical right shift packed 16-bit elements without …","Logical right shift packed 16-bit elements with rounding up","Logical right shift packed 8-bit elements without rounding …","Logical right shift packed 8-bit elements with rounding up","Straight adds and subtracts packed 16-bit signed numbers, …","Straight subtracts and adds packed 16-bit signed numbers, …","Subtracts packed 16-bit signed numbers, discarding …","Subtracts packed 8-bit signed numbers, discarding overflow …","Unpack first and zeroth into two 16-bit signed halfwords …","Unpack second and zeroth into two 16-bit signed halfwords …","Unpack third and zeroth into two 16-bit signed halfwords …","Unpack third and first into two 16-bit signed halfwords in …","Unpack third and second into two 16-bit signed halfwords …","Swap the 16-bit halfwords within each 32-bit word of a …","Swap the 8-bit bytes within each 16-bit halfword of a …","Compare whether 16-bit packed unsigned integers are less …","Compare whether 8-bit packed unsigned integers are less …","Compare whether 16-bit packed unsigned integers are less …","Compare whether 8-bit packed unsigned integers are less …","Adds packed 16-bit unsigned numbers, saturating at the …","Adds packed 8-bit unsigned numbers, saturating at the …","Adds signed lower 16-bit content of two registers with U16 …","Cross adds and subtracts packed 16-bit unsigned numbers, …","Cross subtracts and adds packed 16-bit unsigned numbers, …","Straight adds and subtracts packed 16-bit unsigned …","Straight subtracts and adds packed 16-bit unsigned …","Subtracts packed 16-bit unsigned numbers, saturating at …","Subtracts packed 8-bit unsigned numbers, saturating at the …","Subtracts signed lower 16-bit content of two registers …","Multiply unsigned 8-bit elements and add 16-bit elements …","Get maximum values from 16-bit packed unsigned integers","Get maximum values from 8-bit packed unsigned integers","Get minimum values from 16-bit packed unsigned integers","Get minimum values from 8-bit packed unsigned integers","Halves the sum of packed 16-bit unsigned numbers, dropping …","Halves the sum of packed 8-bit unsigned numbers, dropping …","Cross halves of adds and subtracts packed 16-bit unsigned …","Cross halves of subtracts and adds packed 16-bit unsigned …","Straight halves of adds and subtracts packed 16-bit …","Straight halves of subtracts and adds packed 16-bit …","Halves the subtraction result of packed 16-bit unsigned …","Halves the subtraction result of packed 8-bit unsigned …","Generates the <code>WFI</code> instruction","Nibble-wise lookup of indicies into a vector.","Byte-wise lookup of indicies into a vector in registers.","Unpack first and zeroth into two 16-bit unsigned halfwords …","Unpack second and zeroth into two 16-bit unsigned …","Unpack third and zeroth into two 16-bit unsigned halfwords …","Unpack third and first into two 16-bit unsigned halfwords …","Unpack third and second into two 16-bit unsigned halfwords …","Materializes a SIMD value from the provided operands.","Calculates the absolute value of each lane of a 128-bit …","Lane-wise addition of two 128-bit vectors interpreted as …","Lane-wise rounding to the nearest integral value not …","Converts a 128-bit vector interpreted as four 32-bit …","Converts a 128-bit vector interpreted as four 32-bit …","Conversion of the two double-precision floating point …","Lane-wise division of two 128-bit vectors interpreted as …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 4 …","Lane-wise rounding to the nearest integral value not …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Lane-wise multiplication of two 128-bit vectors …","Compares two 128-bit vectors as if they were two vectors …","Lane-wise rounding to the nearest integral value; if two …","Negates each lane of a 128-bit vector interpreted as four …","Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code>","Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code>","Computes <code>a * b + c</code> with either one rounding or two …","A relaxed version of <code>f32x4_max</code> which is either <code>f32x4_max</code> or","A relaxed version of <code>f32x4_min</code> which is either <code>f32x4_min</code> or","Computes <code>-a * b + c</code> with either one rounding or two …","Replaces a lane from a 128-bit vector interpreted as 4 …","Creates a vector with identical lanes.","Calculates the square root of each lane of a 128-bit …","Lane-wise subtraction of two 128-bit vectors interpreted …","Lane-wise rounding to the nearest integral value with the …","Materializes a SIMD value from the provided operands.","Calculates the absolute value of each lane of a 128-bit …","Lane-wise add of two 128-bit vectors interpreted as two …","Lane-wise rounding to the nearest integral value not …","Lane-wise conversion from integer to floating point.","Lane-wise conversion from integer to floating point.","Lane-wise divide of two 128-bit vectors interpreted as two …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 2 …","Lane-wise rounding to the nearest integral value not …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Calculates the lane-wise maximum of two 128-bit vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Lane-wise multiply of two 128-bit vectors interpreted as …","Compares two 128-bit vectors as if they were two vectors …","Lane-wise rounding to the nearest integral value; if two …","Negates each lane of a 128-bit vector interpreted as two …","Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code>","Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code>","Conversion of the two lower single-precision floating …","Computes <code>a * b + c</code> with either one rounding or two …","A relaxed version of <code>f64x2_max</code> which is either <code>f64x2_max</code> or","A relaxed version of <code>f64x2_min</code> which is either <code>f64x2_min</code> or","Computes <code>-a * b + c</code> with either one rounding or two …","Replaces a lane from a 128-bit vector interpreted as 2 …","Creates a vector with identical lanes.","Calculates the square root of each lane of a 128-bit …","Lane-wise subtract of two 128-bit vectors interpreted as …","Lane-wise rounding to the nearest integral value with the …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed eight …","Adds two 128-bit vectors as if they were two packed eight …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 8 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load eight 8-bit integers and sign extend each one to a …","Load eight 8-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as eight 16-bit …","Lane-wise saturating rounding multiplication in Q15 format.","A relaxed dot-product instruction.","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i16x8_relaxed_q15mulr</code> where if both …","Replaces a lane from a 128-bit vector interpreted as 8 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed four …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Lane-wise multiply signed 16-bit integers in the two input …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 4 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load four 16-bit integers and sign extend each one to a …","Load four 16-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as four 32-bit …","Similar to <code>i16x8_relaxed_dot_i8x16_i7x16</code> except that the …","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i32x4_trunc_sat_f32x4(a)</code> converts the …","A relaxed version of <code>i32x4_trunc_sat_f64x2_zero(a)</code> …","Replaces a lane from a 128-bit vector interpreted as 4 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Converts a 128-bit vector interpreted as four 32-bit …","Saturating conversion of the two double-precision floating …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed two …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 2 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load two 32-bit integers and sign extend each one to a …","Load two 32-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as two 64-bit signed …","A relaxed version of <code>v128_bitselect</code> where this either …","Replaces a lane from a 128-bit vector interpreted as 2 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed …","Adds two 128-bit vectors as if they were two packed …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 16 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as sixteen 8-bit …","Count the number of bits set to one within each lane.","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i8x16_swizzle(a, s)</code> which selects …","Replaces a lane from a 128-bit vector interpreted as 16 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Returns a new vector with lanes selected from the lanes of …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Returns a new vector with lanes selected from the lanes of …","Corresponding intrinsic to wasm’s <code>memory.atomic.notify</code> …","Corresponding intrinsic to wasm’s <code>memory.atomic.wait32</code> …","Corresponding intrinsic to wasm’s <code>memory.atomic.wait64</code> …","Corresponding intrinsic to wasm’s <code>memory.grow</code> instruction","Corresponding intrinsic to wasm’s <code>memory.size</code> instruction","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed eight …","Adds two 128-bit vectors as if they were two packed eight …","Returns true if all lanes are non-zero, false otherwise.","Lane-wise rounding average.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 8 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load eight 8-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Replaces a lane from a 128-bit vector interpreted as 8 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed four …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 4 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load four 16-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","A relaxed version of <code>u32x4_trunc_sat_f32x4(a)</code> converts the …","A relaxed version of <code>u32x4_trunc_sat_f64x2_zero(a)</code> …","Replaces a lane from a 128-bit vector interpreted as 4 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Converts a 128-bit vector interpreted as four 32-bit …","Saturating conversion of the two double-precision floating …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed two …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 2 …","Load two 32-bit integers and zero extend each one to a …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Replaces a lane from a 128-bit vector interpreted as 2 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed …","Adds two 128-bit vectors as if they were two packed …","Returns true if all lanes are non-zero, false otherwise.","Lane-wise rounding average.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 16 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Count the number of bits set to one within each lane.","Replaces a lane from a 128-bit vector interpreted as 16 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Returns a new vector with lanes selected from the lanes of …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Returns a new vector with lanes selected from the lanes of …","Generates the <code>unreachable</code> instruction, which causes an …","WASM-specific 128-bit wide SIMD vector type.","Performs a bitwise and of the two input 128-bit vectors, …","Bitwise AND of bits of <code>a</code> and the logical inverse of bits …","Returns <code>true</code> if any bit in <code>a</code> is set, or <code>false</code> otherwise.","Use the bitmask in <code>c</code> to select bits from <code>v1</code> when 1 and <code>v2</code> …","Loads a <code>v128</code> vector from the given heap address.","Loads a 16-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Loads a 32-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Load a 32-bit element into the low bits of the vector and …","Loads a 64-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Load a 64-bit element into the low bits of the vector and …","Loads an 8-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Flips each bit of the 128-bit input vector.","Performs a bitwise or of the two input 128-bit vectors, …","Stores a <code>v128</code> vector to the given heap address.","Stores the 16-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 32-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 64-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 8-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Performs a bitwise xor of the two input 128-bit vectors, …","","","","Materializes a SIMD value from the provided operands.","Calculates the absolute value of each lane of a 128-bit …","Lane-wise addition of two 128-bit vectors interpreted as …","Lane-wise rounding to the nearest integral value not …","Converts a 128-bit vector interpreted as four 32-bit …","Converts a 128-bit vector interpreted as four 32-bit …","Conversion of the two double-precision floating point …","Lane-wise division of two 128-bit vectors interpreted as …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 4 …","Lane-wise rounding to the nearest integral value not …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Lane-wise multiplication of two 128-bit vectors …","Compares two 128-bit vectors as if they were two vectors …","Lane-wise rounding to the nearest integral value; if two …","Negates each lane of a 128-bit vector interpreted as four …","Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code>","Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code>","Computes <code>a * b + c</code> with either one rounding or two …","A relaxed version of <code>f32x4_max</code> which is either <code>f32x4_max</code> or","A relaxed version of <code>f32x4_min</code> which is either <code>f32x4_min</code> or","Computes <code>-a * b + c</code> with either one rounding or two …","Replaces a lane from a 128-bit vector interpreted as 4 …","Creates a vector with identical lanes.","Calculates the square root of each lane of a 128-bit …","Lane-wise subtraction of two 128-bit vectors interpreted …","Lane-wise rounding to the nearest integral value with the …","Materializes a SIMD value from the provided operands.","Calculates the absolute value of each lane of a 128-bit …","Lane-wise add of two 128-bit vectors interpreted as two …","Lane-wise rounding to the nearest integral value not …","Lane-wise conversion from integer to floating point.","Lane-wise conversion from integer to floating point.","Lane-wise divide of two 128-bit vectors interpreted as two …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 2 …","Lane-wise rounding to the nearest integral value not …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Calculates the lane-wise maximum of two 128-bit vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Lane-wise multiply of two 128-bit vectors interpreted as …","Compares two 128-bit vectors as if they were two vectors …","Lane-wise rounding to the nearest integral value; if two …","Negates each lane of a 128-bit vector interpreted as two …","Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code>","Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code>","Conversion of the two lower single-precision floating …","Computes <code>a * b + c</code> with either one rounding or two …","A relaxed version of <code>f64x2_max</code> which is either <code>f64x2_max</code> or","A relaxed version of <code>f64x2_min</code> which is either <code>f64x2_min</code> or","Computes <code>-a * b + c</code> with either one rounding or two …","Replaces a lane from a 128-bit vector interpreted as 2 …","Creates a vector with identical lanes.","Calculates the square root of each lane of a 128-bit …","Lane-wise subtract of two 128-bit vectors interpreted as …","Lane-wise rounding to the nearest integral value with the …","","Returns the argument unchanged.","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed eight …","Adds two 128-bit vectors as if they were two packed eight …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 8 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load eight 8-bit integers and sign extend each one to a …","Load eight 8-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as eight 16-bit …","Lane-wise saturating rounding multiplication in Q15 format.","A relaxed dot-product instruction.","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i16x8_relaxed_q15mulr</code> where if both …","Replaces a lane from a 128-bit vector interpreted as 8 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed four …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Lane-wise multiply signed 16-bit integers in the two input …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 4 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load four 16-bit integers and sign extend each one to a …","Load four 16-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as four 32-bit …","Similar to <code>i16x8_relaxed_dot_i8x16_i7x16</code> except that the …","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i32x4_trunc_sat_f32x4(a)</code> converts the …","A relaxed version of <code>i32x4_trunc_sat_f64x2_zero(a)</code> …","Replaces a lane from a 128-bit vector interpreted as 4 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Converts a 128-bit vector interpreted as four 32-bit …","Saturating conversion of the two double-precision floating …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed two …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 2 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load two 32-bit integers and sign extend each one to a …","Load two 32-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as two 64-bit signed …","A relaxed version of <code>v128_bitselect</code> where this either …","Replaces a lane from a 128-bit vector interpreted as 2 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed …","Adds two 128-bit vectors as if they were two packed …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 16 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as sixteen 8-bit …","Count the number of bits set to one within each lane.","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i8x16_swizzle(a, s)</code> which selects …","Replaces a lane from a 128-bit vector interpreted as 16 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Returns a new vector with lanes selected from the lanes of …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Returns a new vector with lanes selected from the lanes of …","Calls <code>U::from(self)</code>.","Corresponding intrinsic to wasm’s <code>memory.atomic.notify</code> …","Corresponding intrinsic to wasm’s <code>memory.atomic.wait32</code> …","Corresponding intrinsic to wasm’s <code>memory.atomic.wait64</code> …","Corresponding intrinsic to wasm’s <code>memory.grow</code> instruction","Corresponding intrinsic to wasm’s <code>memory.size</code> instruction","","","","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed eight …","Adds two 128-bit vectors as if they were two packed eight …","Returns true if all lanes are non-zero, false otherwise.","Lane-wise rounding average.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 8 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load eight 8-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Replaces a lane from a 128-bit vector interpreted as 8 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed four …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 4 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load four 16-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","A relaxed version of <code>u32x4_trunc_sat_f32x4(a)</code> converts the …","A relaxed version of <code>u32x4_trunc_sat_f64x2_zero(a)</code> …","Replaces a lane from a 128-bit vector interpreted as 4 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Converts a 128-bit vector interpreted as four 32-bit …","Saturating conversion of the two double-precision floating …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed two …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 2 …","Load two 32-bit integers and zero extend each one to a …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Replaces a lane from a 128-bit vector interpreted as 2 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed …","Adds two 128-bit vectors as if they were two packed …","Returns true if all lanes are non-zero, false otherwise.","Lane-wise rounding average.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 16 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Count the number of bits set to one within each lane.","Replaces a lane from a 128-bit vector interpreted as 16 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Returns a new vector with lanes selected from the lanes of …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Returns a new vector with lanes selected from the lanes of …","Generates the <code>unreachable</code> instruction, which causes an …","WASM-specific 128-bit wide SIMD vector type.","Performs a bitwise and of the two input 128-bit vectors, …","Bitwise AND of bits of <code>a</code> and the logical inverse of bits …","Returns <code>true</code> if any bit in <code>a</code> is set, or <code>false</code> otherwise.","Use the bitmask in <code>c</code> to select bits from <code>v1</code> when 1 and <code>v2</code> …","Loads a <code>v128</code> vector from the given heap address.","Loads a 16-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Loads a 32-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Load a 32-bit element into the low bits of the vector and …","Loads a 64-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Load a 64-bit element into the low bits of the vector and …","Loads an 8-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Flips each bit of the 128-bit input vector.","Performs a bitwise or of the two input 128-bit vectors, …","Stores a <code>v128</code> vector to the given heap address.","Stores the 16-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 32-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 64-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 8-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Performs a bitwise xor of the two input 128-bit vectors, …","Materializes a SIMD value from the provided operands.","Calculates the absolute value of each lane of a 128-bit …","Lane-wise addition of two 128-bit vectors interpreted as …","Lane-wise rounding to the nearest integral value not …","Converts a 128-bit vector interpreted as four 32-bit …","Converts a 128-bit vector interpreted as four 32-bit …","Conversion of the two double-precision floating point …","Lane-wise division of two 128-bit vectors interpreted as …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 4 …","Lane-wise rounding to the nearest integral value not …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Lane-wise multiplication of two 128-bit vectors …","Compares two 128-bit vectors as if they were two vectors …","Lane-wise rounding to the nearest integral value; if two …","Negates each lane of a 128-bit vector interpreted as four …","Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code>","Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code>","Computes <code>a * b + c</code> with either one rounding or two …","A relaxed version of <code>f32x4_max</code> which is either <code>f32x4_max</code> or","A relaxed version of <code>f32x4_min</code> which is either <code>f32x4_min</code> or","Computes <code>-a * b + c</code> with either one rounding or two …","Replaces a lane from a 128-bit vector interpreted as 4 …","Creates a vector with identical lanes.","Calculates the square root of each lane of a 128-bit …","Lane-wise subtraction of two 128-bit vectors interpreted …","Lane-wise rounding to the nearest integral value with the …","Materializes a SIMD value from the provided operands.","Calculates the absolute value of each lane of a 128-bit …","Lane-wise add of two 128-bit vectors interpreted as two …","Lane-wise rounding to the nearest integral value not …","Lane-wise conversion from integer to floating point.","Lane-wise conversion from integer to floating point.","Lane-wise divide of two 128-bit vectors interpreted as two …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 2 …","Lane-wise rounding to the nearest integral value not …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Calculates the lane-wise maximum of two 128-bit vectors …","Calculates the lane-wise minimum of two 128-bit vectors …","Lane-wise multiply of two 128-bit vectors interpreted as …","Compares two 128-bit vectors as if they were two vectors …","Lane-wise rounding to the nearest integral value; if two …","Negates each lane of a 128-bit vector interpreted as two …","Lane-wise maximum value, defined as <code>a &lt; b ? b : a</code>","Lane-wise minimum value, defined as <code>b &lt; a ? b : a</code>","Conversion of the two lower single-precision floating …","Computes <code>a * b + c</code> with either one rounding or two …","A relaxed version of <code>f64x2_max</code> which is either <code>f64x2_max</code> or","A relaxed version of <code>f64x2_min</code> which is either <code>f64x2_min</code> or","Computes <code>-a * b + c</code> with either one rounding or two …","Replaces a lane from a 128-bit vector interpreted as 2 …","Creates a vector with identical lanes.","Calculates the square root of each lane of a 128-bit …","Lane-wise subtract of two 128-bit vectors interpreted as …","Lane-wise rounding to the nearest integral value with the …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed eight …","Adds two 128-bit vectors as if they were two packed eight …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 8 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load eight 8-bit integers and sign extend each one to a …","Load eight 8-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as eight 16-bit …","Lane-wise saturating rounding multiplication in Q15 format.","A relaxed dot-product instruction.","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i16x8_relaxed_q15mulr</code> where if both …","Replaces a lane from a 128-bit vector interpreted as 8 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed four …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Lane-wise multiply signed 16-bit integers in the two input …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 4 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load four 16-bit integers and sign extend each one to a …","Load four 16-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as four 32-bit …","Similar to <code>i16x8_relaxed_dot_i8x16_i7x16</code> except that the …","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i32x4_trunc_sat_f32x4(a)</code> converts the …","A relaxed version of <code>i32x4_trunc_sat_f64x2_zero(a)</code> …","Replaces a lane from a 128-bit vector interpreted as 4 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Converts a 128-bit vector interpreted as four 32-bit …","Saturating conversion of the two double-precision floating …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed two …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Converts high half of the smaller lane vector to a larger …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 2 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load two 32-bit integers and sign extend each one to a …","Load two 32-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as two 64-bit signed …","A relaxed version of <code>v128_bitselect</code> where this either …","Replaces a lane from a 128-bit vector interpreted as 2 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Lane-wise wrapping absolute value.","Adds two 128-bit vectors as if they were two packed …","Adds two 128-bit vectors as if they were two packed …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 16 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise signed integers, and returns the …","Compares lane-wise signed integers, and returns the …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Negates a 128-bit vectors interpreted as sixteen 8-bit …","Count the number of bits set to one within each lane.","A relaxed version of <code>v128_bitselect</code> where this either …","A relaxed version of <code>i8x16_swizzle(a, s)</code> which selects …","Replaces a lane from a 128-bit vector interpreted as 16 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Returns a new vector with lanes selected from the lanes of …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Returns a new vector with lanes selected from the lanes of …","Corresponding intrinsic to wasm’s <code>memory.atomic.notify</code> …","Corresponding intrinsic to wasm’s <code>memory.atomic.wait32</code> …","Corresponding intrinsic to wasm’s <code>memory.atomic.wait64</code> …","Corresponding intrinsic to wasm’s <code>memory.grow</code> instruction","Corresponding intrinsic to wasm’s <code>memory.size</code> instruction","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed eight …","Adds two 128-bit vectors as if they were two packed eight …","Returns true if all lanes are non-zero, false otherwise.","Lane-wise rounding average.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 8 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load eight 8-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Replaces a lane from a 128-bit vector interpreted as 8 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed four …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Integer extended pairwise addition producing extended …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 4 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Load four 16-bit integers and zero extend each one to a …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","A relaxed version of <code>u32x4_trunc_sat_f32x4(a)</code> converts the …","A relaxed version of <code>u32x4_trunc_sat_f64x2_zero(a)</code> …","Replaces a lane from a 128-bit vector interpreted as 4 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Converts a 128-bit vector interpreted as four 32-bit …","Saturating conversion of the two double-precision floating …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed two …","Returns true if all lanes are non-zero, false otherwise.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Converts high half of the smaller lane vector to a larger …","Converts low half of the smaller lane vector to a larger …","Lane-wise integer extended multiplication producing twice …","Lane-wise integer extended multiplication producing twice …","Extracts a lane from a 128-bit vector interpreted as 2 …","Load two 32-bit integers and zero extend each one to a …","Multiplies two 128-bit vectors as if they were two packed …","Compares two 128-bit vectors as if they were two vectors …","Replaces a lane from a 128-bit vector interpreted as 2 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Same as <code>i8x16_shuffle</code>, except operates as if the inputs …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Materializes a SIMD value from the provided operands.","Adds two 128-bit vectors as if they were two packed …","Adds two 128-bit vectors as if they were two packed …","Returns true if all lanes are non-zero, false otherwise.","Lane-wise rounding average.","Extracts the high bit for each lane in <code>a</code> and produce a …","Compares two 128-bit vectors as if they were two vectors …","Extracts a lane from a 128-bit vector interpreted as 16 …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares two 128-bit vectors as if they were two vectors …","Compares lane-wise unsigned integers, and returns the …","Compares lane-wise unsigned integers, and returns the …","Converts two input vectors into a smaller lane vector by …","Compares two 128-bit vectors as if they were two vectors …","Count the number of bits set to one within each lane.","Replaces a lane from a 128-bit vector interpreted as 16 …","Shifts each lane to the left by the specified number of …","Shifts each lane to the right by the specified number of …","Returns a new vector with lanes selected from the lanes of …","Creates a vector with identical lanes.","Subtracts two 128-bit vectors as if they were two packed …","Subtracts two 128-bit vectors as if they were two packed …","Returns a new vector with lanes selected from the lanes of …","Generates the <code>unreachable</code> instruction, which causes an …","WASM-specific 128-bit wide SIMD vector type.","Performs a bitwise and of the two input 128-bit vectors, …","Bitwise AND of bits of <code>a</code> and the logical inverse of bits …","Returns <code>true</code> if any bit in <code>a</code> is set, or <code>false</code> otherwise.","Use the bitmask in <code>c</code> to select bits from <code>v1</code> when 1 and <code>v2</code> …","Loads a <code>v128</code> vector from the given heap address.","Loads a 16-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Loads a 32-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Load a 32-bit element into the low bits of the vector and …","Loads a 64-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Load a 64-bit element into the low bits of the vector and …","Loads an 8-bit value from <code>m</code> and sets lane <code>L</code> of <code>v</code> to that …","Load a single element and splat to all lanes of a v128 …","Flips each bit of the 128-bit input vector.","Performs a bitwise or of the two input 128-bit vectors, …","Stores a <code>v128</code> vector to the given heap address.","Stores the 16-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 32-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 64-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Stores the 8-bit value from lane <code>L</code> of <code>v</code> into <code>m</code>","Performs a bitwise xor of the two input 128-bit vectors, …","Result of the <code>cpuid</code> instruction.","Equal (ordered, non-signaling)","Equal (ordered, signaling)","Equal (unordered, non-signaling)","Equal (unordered, signaling)","False (ordered, non-signaling)","False (ordered, signaling)","Greater-than-or-equal (ordered, non-signaling)","Greater-than-or-equal (ordered, signaling)","Greater-than (ordered, non-signaling)","Greater-than (ordered, signaling)","Less-than-or-equal (ordered, non-signaling)","Less-than-or-equal (ordered, signaling)","Less-than (ordered, non-signaling)","Less-than (ordered, signaling)","Not-equal (ordered, non-signaling)","Not-equal (ordered, signaling)","Not-equal (unordered, non-signaling)","Not-equal (unordered, signaling)","Not-greater-than-or-equal (unordered, non-signaling)","Not-greater-than-or-equal (unordered, signaling)","Not-greater-than (unordered, non-signaling)","Not-greater-than (unordered, signaling)","Not-less-than-or-equal (unordered, non-signaling)","Not-less-than-or-equal (unordered, signaling)","Not-less-than (unordered, non-signaling)","Not-less-than (unordered, signaling)","Ordered (non-signaling)","Ordered (signaling)","True (unordered, non-signaling)","True (unordered, signaling)","Unordered (non-signaling)","Unordered (signaling)","The <code>_MM_CMPINT_ENUM</code> type used to specify comparison …","Equal","False","Less-than-or-equal","Less-than","Not-equal","Not less-than-or-equal","Not less-than","True","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_EXCEPTION_STATE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_FLUSH_ZERO_MODE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","round up and do not suppress exceptions","use MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>","round down and do not suppress exceptions","use MXCSR.RC and suppress exceptions; see …","round to nearest and do not suppress exceptions","suppress exceptions","do not suppress exceptions","use MXCSR.RC and do not suppress exceptions; see …","round to nearest","round down","round up","truncate","truncate and do not suppress exceptions","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","The <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …","The <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …","interval [1, 2)","interval [0.5, 1)","interval [0.5, 2)","interval [0.75, 1.5)","DEST = NaN if sign(SRC) = 1","sign = sign(SRC)","sign = 0","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_EXCEPTION_MASK</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</codehe <code>MM_PERM_ENUM</code> type used to specify shuffle operations …","See <code>_mm_setcsr</code>","See <code>_MM_GET_ROUNDING_MODE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","A utility function for creating masks to use with Intel …","Transpose the 4x4 matrix formed by 4 rows of __m128 in …","<strong>Mask only</strong>: return the bit mask","For each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>","The strings defined by <code>a</code> and <code>b</code> are equal","Search for the defined substring in the target","For each character in <code>a</code>, determine if …","<strong>Index only</strong>: return the least significant bit <em>(Default)</em>","Negates results only before the end of the string","Do not negate results before the end of the string","<strong>Index only</strong>: return the most significant bit","Negates results","Do not negate results <em>(Default)</em>","String contains signed 8-bit characters","String contains unsigned 16-bit characters","String contains unsigned 8-bit characters <em>(Default)</em>","<strong>Mask only</strong>: return the byte mask","String contains unsigned 16-bit characters","Transaction abort due to the transaction using too much …","Transaction abort due to a memory conflict with another …","Transaction abort due to a debug trap.","Transaction explicitly aborted with xabort. The parameter …","Transaction abort in a inner nested transaction.","Transaction retry is possible.","Transaction successfully started.","<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>","See <code>__cpuid_count</code>.","Returns the result of the <code>cpuid</code> instruction for a given …","Returns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…","128-bit wide set of four <code>f32</code> types, x86-specific","128-bit wide set of eight <code>u16</code> types, x86-specific","128-bit wide set of two <code>f64</code> types, x86-specific","128-bit wide integer vector type, x86-specific","256-bit wide set of eight <code>f32</code> types, x86-specific","256-bit wide set of 16 <code>u16</code> types, x86-specific","256-bit wide set of four <code>f64</code> types, x86-specific","256-bit wide integer vector type, x86-specific","512-bit wide set of sixteen <code>f32</code> types, x86-specific","512-bit wide set of 32 <code>u16</code> types, x86-specific","512-bit wide set of eight <code>f64</code> types, x86-specific","512-bit wide integer vector type, x86-specific","The <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …","The <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …","The <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …","The <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …","Reads the current value of the processor’s time-stamp …","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.","Extracts bits of <code>a</code> specified by <code>control</code> into the least …","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>.","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Clears all bits below the least significant zero bit of <code>x</code>.","Clears all bits below the least significant zero bit of <code>x</code>.","Sets all bits of <code>x</code> to 1 except for the least significant …","Sets all bits of <code>x</code> to 1 except for the least significant …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code>.","Sets the least significant zero bit of <code>x</code>.","Sets all bits of <code>x</code> below the least significant one.","Sets all bits of <code>x</code> below the least significant one.","Extracts lowest set isolated bit.","Clears least significant bit and sets all other bits.","Clears least significant bit and sets all other bits.","Gets mask up to lowest set bit.","Resets the lowest set bit of <code>x</code>.","Returns an integer with the reversed byte order of x","Zeroes higher bits of <code>a</code> &gt;= <code>index</code>.","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …","Add 32-bit masks in a and b, and store the result in k.","Add 64-bit masks in a and b, and store the result in k.","Compute the bitwise AND of 16-bit masks a and b, and store …","Compute the bitwise AND of 32-bit masks a and b, and store …","Compute the bitwise AND of 64-bit masks a and b, and store …","Compute the bitwise NOT of 16-bit masks a and then AND …","Compute the bitwise NOT of 32-bit masks a and then AND …","Compute the bitwise NOT of 64-bit masks a and then AND …","Compute the bitwise NOT of 16-bit mask a, and store the …","Compute the bitwise NOT of 32-bit mask a, and store the …","Compute the bitwise NOT of 64-bit mask a, and store the …","Compute the bitwise OR of 16-bit masks a and b, and store …","Compute the bitwise OR of 32-bit masks a and b, and store …","Compute the bitwise OR of 64-bit masks a and b, and store …","Compute the bitwise XNOR of 16-bit masks a and b, and …","Compute the bitwise XNOR of 32-bit masks a and b, and …","Compute the bitwise XNOR of 64-bit masks a and b, and …","Compute the bitwise XOR of 16-bit masks a and b, and store …","Compute the bitwise XOR of 32-bit masks a and b, and store …","Compute the bitwise XOR of 64-bit masks a and b, and store …","Load 32-bit mask from memory into k.","Load 64-bit mask from memory into k.","Counts the leading most significant zero bits.","Computes the absolute values of packed 16-bit integers in <code>a</code>…","Computes the absolute values of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Computes the absolute values of packed 8-bit integers in <code>a</code>.","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.","Adds packed double-precision (64-bit) floating-point …","Adds packed single-precision (32-bit) floating-point …","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …","Alternatively adds and subtracts packed double-precision …","Alternatively adds and subtracts packed single-precision …","Performs one round of an AES decryption flow on each …","Performs the last round of an AES decryption flow on each …","Performs one round of an AES encryption flow on each …","Performs the last round of an AES encryption flow on each …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …","Computes the bitwise AND of a packed double-precision …","Computes the bitwise AND of packed single-precision …","Computes the bitwise AND of 256 bits (representing integer …","Computes the bitwise NOT of packed double-precision …","Computes the bitwise NOT of packed single-precision …","Computes the bitwise NOT of 256 bits (representing integer …","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blends packed 16-bit integers from <code>a</code> and <code>b</code> using control …","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …","Blends packed double-precision (64-bit) floating-point …","Blends packed single-precision (32-bit) floating-point …","Blends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.","Blends packed double-precision (64-bit) floating-point …","Blends packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcasts 128 bits from memory (composed of 2 packed …","Broadcasts 128 bits from memory (composed of 4 packed …","Broadcasts a double-precision (64-bit) floating-point …","Broadcasts a single-precision (32-bit) floating-point …","Broadcasts the low packed 8-bit integer from <code>a</code> to all …","Broadcasts the low packed 32-bit integer from <code>a</code> to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcasts the low packed 64-bit integer from <code>a</code> to all …","Broadcasts the low double-precision (64-bit) …","Broadcasts 128 bits of integer data from a to all 128-bit …","Broadcasts the low single-precision (32-bit) …","Broadcasts the low packed 16-bit integer from a to all …","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …","Casts vector of type __m128d to type __m256d; the upper …","Casts vector of type __m256d to type __m128d.","Cast vector of type __m256d to type __m256.","Casts vector of type __m256d to type __m256i.","Casts vector of type __m128 to type __m256; the upper 128 …","Casts vector of type __m256 to type __m128.","Cast vector of type __m256 to type __m256d.","Casts vector of type __m256 to type __m256i.","Casts vector of type __m128i to type __m256i; the upper …","Casts vector of type __m256i to type __m256d.","Casts vector of type __m256i to type __m256.","Casts vector of type __m256i to type __m128i.","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compares packed double-precision (64-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 32-bit integers in a and b for equality, …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 64-bit integers in a and b for equality, …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 32-bit integers in a and b for …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Sign-extend 16-bit integers to 32-bit integers.","Sign-extend 16-bit integers to 64-bit integers.","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign-extend 32-bit integers to 64-bit integers.","Convert packed 32-bit integers in a to packed 8-bit …","Converts packed 32-bit integers in <code>a</code> to packed …","Converts packed 32-bit integers in <code>a</code> to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign-extend 8-bit integers to 16-bit integers.","Sign-extend 8-bit integers to 32-bit integers.","Sign-extend 8-bit integers to 64-bit integers.","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zero-extend the lower four unsigned 16-bit integers in <code>a</code> …","Zero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …","Convert packed unsigned 32-bit integers in a to packed …","Zero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …","Zero-extend the lower eight unsigned 8-bit integers in <code>a</code> …","Zero-extend the lower four unsigned 8-bit integers in <code>a</code> to …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Converts the 8 x 16-bit half-precision float values in the …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Converts the 8 x 32-bit float values in the 256-bit vector …","Returns the first element of the input vector of …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Returns the first element of the input vector of <code>[8 x i32]</code>.","Returns the first element of the input vector of …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Computes the division of each of the 4 packed 64-bit …","Computes the division of each of the 8 packed 32-bit …","Conditionally multiplies the packed single-precision …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Extracts a 16-bit integer from <code>a</code>, selected with <code>INDEX</code>. …","Extracts a 32-bit integer from <code>a</code>, selected with <code>INDEX</code>.","Extracts an 8-bit integer from <code>a</code>, selected with <code>INDEX</code>. …","Extracts 128 bits (composed of 2 packed double-precision …","Extracts 128 bits (composed of 4 packed single-precision …","Extracts 128 bits (composed of integer data) from <code>a</code>, …","Extract 128 bits (composed of 4 packed single-precision …","Extracts 128 bits (of integer data) from <code>a</code> selected with …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …","Horizontally adds adjacent pairs of 32-bit integers in <code>a</code> …","Horizontal addition of adjacent pairs in the two packed …","Horizontal addition of adjacent pairs in the two packed …","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …","Horizontally subtract adjacent pairs of 16-bit integers in …","Horizontally subtract adjacent pairs of 32-bit integers in …","Horizontal subtraction of adjacent pairs in the two packed …","Horizontal subtraction of adjacent pairs in the two packed …","Horizontally subtract adjacent pairs of 16-bit integers in …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Scatter 64-bit integers from a into memory using 32-bit …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Copies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …","Copies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …","Copies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …","Copies <code>a</code> to result, then inserts 128 bits (composed of 2 …","Copies <code>a</code> to result, then inserts 128 bits (composed of 4 …","Copies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Loads 256-bits of integer data from unaligned memory into …","Load 256-bits (composed of 8 packed 32-bit integers) from …","Load 256-bits (composed of 4 packed 64-bit integers) from …","Loads 256-bits (composed of 4 packed double-precision …","Loads 256-bits (composed of 8 packed single-precision …","Loads 256-bits of integer data from memory into result. …","Loads two 128-bit values (composed of 4 packed …","Loads two 128-bit values (composed of 2 packed …","Loads two 128-bit values (composed of integer data) from …","Load 256-bits (composed of 16 packed 16-bit integers) from …","Load 256-bits (composed of 8 packed 32-bit integers) from …","Load 256-bits (composed of 4 packed 64-bit integers) from …","Load 256-bits (composed of 32 packed 8-bit integers) from …","Loads 256-bits (composed of 4 packed double-precision …","Loads 256-bits (composed of 8 packed single-precision …","Loads 256-bits of integer data from memory into result. …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …","Vertically multiplies each unsigned 8-bit integer from <code>a</code> …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 4 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 8 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Zero extend packed unsigned 8-bit integers in the low 4 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Loads packed 32-bit integers from memory pointed by …","Loads packed 64-bit integers from memory pointed by …","Loads packed double-precision (64-bit) floating-point …","Loads packed single-precision (32-bit) floating-point …","Stores packed 32-bit integers from <code>a</code> into memory pointed …","Stores packed 64-bit integers from <code>a</code> into memory pointed …","Stores packed double-precision (64-bit) floating-point …","Stores packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 4 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 8 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Zero extend packed unsigned 8-bit integers in the low 4 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Creates mask from the most significant bit of each 8-bit …","Sets each bit of the returned mask based on the most …","Sets each bit of the returned mask based on the most …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Computes the sum of absolute differences (SADs) of …","Multiplies the low 32-bit integers from each packed 64-bit …","Multiplies the low unsigned 32-bit integers from each …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, …","Multiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, producing","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Computes the bitwise OR packed double-precision (64-bit) …","Computes the bitwise OR packed single-precision (32-bit) …","Computes the bitwise OR of 256 bits (representing integer …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Shuffles 256 bits (composed of 4 packed double-precision …","Shuffles 256 bits (composed of 8 packed single-precision …","Shuffles 128-bits (composed of integer data) selected by …","Shuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …","Permutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.","Shuffles 64-bit floating-point elements in <code>a</code> across lanes …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Permutes packed 32-bit integers from <code>a</code> according to the …","Shuffles eight 32-bit floating-point elements in <code>a</code> across …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Computes the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Computes the approximate reciprocal square root of packed …","Computes the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcasts 16-bit integer <code>a</code> to all elements of returned …","Broadcasts 32-bit integer <code>a</code> to all elements of returned …","Broadcasts 64-bit integer <code>a</code> to all elements of returned …","Broadcasts 8-bit integer <code>a</code> to all elements of returned …","Broadcasts double-precision (64-bit) floating-point value <code>a</code>…","Broadcasts single-precision (32-bit) floating-point value <code>a</code>…","Sets packed 16-bit integers in returned vector with the …","Sets packed 32-bit integers in returned vector with the …","Sets packed 64-bit integers in returned vector with the …","Sets packed 8-bit integers in returned vector with the …","Sets packed __m256 returned vector with the supplied …","Sets packed __m256d returned vector with the supplied …","Sets packed __m256i returned vector with the supplied …","Sets packed double-precision (64-bit) floating-point …","Sets packed single-precision (32-bit) floating-point …","Sets packed 16-bit integers in returned vector with the …","Sets packed 32-bit integers in returned vector with the …","Sets packed 64-bit integers in returned vector with the …","Sets packed 8-bit integers in returned vector with the …","Sets packed __m256 returned vector with the supplied …","Sets packed __m256d returned vector with the supplied …","Sets packed __m256i returned vector with the supplied …","Sets packed double-precision (64-bit) floating-point …","Sets packed single-precision (32-bit) floating-point …","Returns vector of type __m256d with all elements set to …","Returns vector of type __m256 with all elements set to …","Returns vector of type __m256i with all elements set to …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffles 16-bit integers in the high 64 bits of 128-bit …","Shuffles 16-bit integers in the low 64 bits of 128-bit …","Negates packed 16-bit integers in <code>a</code> when the corresponding …","Negates packed 32-bit integers in <code>a</code> when the corresponding …","Negates packed 8-bit integers in <code>a</code> when the corresponding …","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …","Shift packed 16-bit integers in a left by the amount …","Shifts packed 32-bit integers in <code>a</code> left by the amount …","Shifts packed 64-bit integers in <code>a</code> left by the amount …","Returns the square root of packed double-precision …","Returns the square root of packed single-precision …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shift packed 64-bit integers in a right by count while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shifts packed 64-bit integers in <code>a</code> right by the amount …","Store 256-bits (composed of 8 packed 32-bit integers) from …","Store 256-bits (composed of 4 packed 64-bit integers) from …","Stores 256-bits (composed of 4 packed double-precision …","Stores 256-bits (composed of 8 packed single-precision …","Stores 256-bits of integer data from <code>a</code> into memory. …","Stores the high and low 128-bit halves (each composed of 4 …","Stores the high and low 128-bit halves (each composed of 2 …","Stores the high and low 128-bit halves (each composed of …","Store 256-bits (composed of 16 packed 16-bit integers) …","Store 256-bits (composed of 8 packed 32-bit integers) from …","Store 256-bits (composed of 4 packed 64-bit integers) from …","Store 256-bits (composed of 32 packed 8-bit integers) from …","Stores 256-bits (composed of 4 packed double-precision …","Stores 256-bits (composed of 8 packed single-precision …","Stores 256-bits of integer data from <code>a</code> into memory. …","Moves double-precision values from a 256-bit vector of …","Moves single-precision floating point values from a …","Moves integer data from a 256-bit integer vector to a …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtracts packed double-precision (64-bit) floating-point …","Subtracts packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Returns vector of type <code>__m256d</code> with indeterminate elements.","Returns vector of type <code>__m256</code> with indeterminate elements. …","Returns vector of type __m256i with with indeterminate …","Unpacks and interleave 16-bit integers from the high half …","Unpacks and interleave 32-bit integers from the high half …","Unpacks and interleave 64-bit integers from the high half …","Unpacks and interleave 8-bit integers from the high half …","Unpacks and interleave double-precision (64-bit) …","Unpacks and interleave single-precision (32-bit) …","Unpacks and interleave 16-bit integers from the low half …","Unpacks and interleave 32-bit integers from the low half …","Unpacks and interleave 64-bit integers from the low half …","Unpacks and interleave 8-bit integers from the low half of …","Unpacks and interleave double-precision (64-bit) …","Unpacks and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Computes the bitwise XOR of packed double-precision …","Computes the bitwise XOR of packed single-precision …","Computes the bitwise XOR of 256 bits (representing integer …","Zeroes the contents of all XMM or YMM registers.","Zeroes the upper 128 bits of all YMM registers; the lower …","Constructs a 256-bit floating-point vector of <code>[4 x double]</code> …","Constructs a 256-bit floating-point vector of <code>[8 x float]</code> …","Constructs a 256-bit integer vector from a 128-bit integer …","Compute the absolute value of packed signed 16-bit …","Computes the absolute values of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Finds the absolute value of each packed double-precision …","Finds the absolute value of each packed single-precision …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Performs one round of an AES decryption flow on each …","Performs the last round of an AES decryption flow on each …","Performs one round of an AES encryption flow on each …","Performs the last round of an AES encryption flow on each …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of 512 bits (composed of packed …","Compute the bitwise AND of 512 bits (representing integer …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of 512 bits (composed of packed …","Compute the bitwise NOT of 512 bits (representing integer …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Shift 128-bit lanes in a left by imm8 bytes while shifting …","Shift 128-bit lanes in a right by imm8 bytes while …","Cast vector of type __m128d to type __m512d; the upper 384 …","Cast vector of type __m256d to type __m512d; the upper 256 …","Cast vector of type __m512d to type __m128d. This …","Cast vector of type __m512d to type __m256d. This …","Cast vector of type __m512d to type __m512. This intrinsic …","Cast vector of type __m512d to type __m512i. This …","Cast vector of type __m128 to type __m512; the upper 384 …","Cast vector of type __m256 to type __m512; the upper 256 …","Cast vector of type __m512 to type __m128. This intrinsic …","Cast vector of type __m512 to type __m256. This intrinsic …","Cast vector of type __m512 to type __m512d. This intrinsic …","Cast vector of type __m512 to type __m512i. This intrinsic …","Cast vector of type __m128i to type __m512i; the upper 384 …","Cast vector of type __m256i to type __m512i; the upper 256 …","Cast vector of type __m512i to type __m512d. This …","Cast vector of type __m512i to type __m512. This intrinsic …","Cast vector of type __m512i to type __m128i. This …","Cast vector of type __m512i to type __m256i. This …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Performs an element-by-element conversion of packed …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Performs element-by-element conversion of the lower half …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Copy the lower 32-bit integer in a to dst.","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Gather 32-bit integers from memory using 32-bit indices. …","Gather 64-bit integers from memory using 32-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 32-bit …","Scatter 64-bit integers from a into memory using 32-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Gather 32-bit integers from memory using 64-bit indices. …","Gather 64-bit integers from memory using 64-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 64-bit …","Scatter 64-bit integers from a into memory using 64-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copy a to dst, then insert 256 bits (composed of 4 packed …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copy a to dst, then insert 256 bits (composed of 4 packed …","Converts integer mask into bitmask, storing the result in …","Compute the bitwise AND of 16-bit masks a and b, and store …","Compute the bitwise NOT of 16-bit masks a and then AND …","Copy 16-bit mask a to k.","Compute the bitwise NOT of 16-bit mask a, and store the …","Compute the bitwise OR of 16-bit masks a and b, and store …","Performs bitwise OR between k1 and k2, storing the result …","Unpack and interleave 8 bits from masks a and b, and store …","Compute the bitwise XNOR of 16-bit masks a and b, and …","Compute the bitwise XOR of 16-bit masks a and b, and store …","Load 512-bits (composed of 16 packed 32-bit integers) from …","Load 512-bits (composed of 8 packed 64-bit integers) from …","Load 512-bits (composed of 8 packed double-precision …","Load 512-bits (composed of 16 packed single-precision …","Load 512-bits of integer data from memory into dst. …","Load 512-bits (composed of 32 packed 16-bit integers) from …","Load 512-bits (composed of 16 packed 32-bit integers) from …","Load 512-bits (composed of 8 packed 64-bit integers) from …","Load 512-bits (composed of 64 packed 8-bit integers) from …","Loads 512-bits (composed of 8 packed double-precision …","Loads 512-bits (composed of 16 packed single-precision …","Load 512-bits of integer data from memory into dst. …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed signed 16-bit integers in a and b, …","Vertically multiply each unsigned 8-bit integer from a …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Converts bit mask k1 into an integer value, storing the …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Computes the absolute value of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Finds the absolute value of each packed double-precision …","Finds the absolute value of each packed single-precision …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Performs element-by-element conversion of the lower half …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Performs an element-by-element conversion of packed …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Performs element-by-element conversion of the lower half …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Gather 32-bit integers from memory using 32-bit indices. …","Gather 64-bit integers from memory using 32-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 32-bit …","Scatter 64-bit integers from a into memory using 32-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Gather 32-bit integers from memory using 64-bit indices. …","Gather 64-bit integers from memory using 64-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 64-bit …","Scatter 64-bit integers from a into memory using 64-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","Multiplies elements in packed 64-bit integer vectors a and …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 32-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Reduce the packed 32-bit integers in a by addition using …","Reduce the packed 64-bit integers in a by addition using …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise AND …","Reduce the packed 64-bit integers in a by addition using …","Reduce the packed signed 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed unsigned 32-bit integers in a by maximum …","Reduce the packed unsigned 64-bit integers in a by maximum …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed signed 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed unsigned 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by multiplication …","Reduce the packed 64-bit integers in a by multiplication …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise OR using …","Reduce the packed 64-bit integers in a by bitwise OR using …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compute the absolute value of packed signed 16-bit …","Computes the absolute value of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","Multiplies elements in packed 64-bit integer vectors a and …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Compute the bitwise OR of 512 bits (representing integer …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 32-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Reduce the packed 32-bit integers in a by addition. …","Reduce the packed 64-bit integers in a by addition. …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise AND. …","Reduce the packed 64-bit integers in a by bitwise AND. …","Reduce the packed signed 32-bit integers in a by maximum. …","Reduce the packed signed 64-bit integers in a by maximum. …","Reduce the packed unsigned 32-bit integers in a by …","Reduce the packed unsigned 64-bit integers in a by …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed signed 32-bit integers in a by minimum. …","Reduce the packed signed 64-bit integers in a by minimum. …","Reduce the packed unsigned 32-bit integers in a by …","Reduce the packed unsigned 64-bit integers in a by …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by multiplication. …","Reduce the packed 64-bit integers in a by multiplication. …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise OR. …","Reduce the packed 64-bit integers in a by bitwise OR. …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.","Broadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.","Broadcast 8-bit integer a to all elements of dst.","Broadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.","Broadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.","Set packed 32-bit integers in dst with the repeated 4 …","Set packed 64-bit integers in dst with the repeated 4 …","Set packed double-precision (64-bit) floating-point …","Set packed single-precision (32-bit) floating-point …","Set packed 16-bit integers in dst with the supplied values.","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 64-bit integers in dst with the supplied values.","Set packed 8-bit integers in dst with the supplied values.","Set packed double-precision (64-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 32-bit integers in dst with the repeated 4 …","Set packed 64-bit integers in dst with the repeated 4 …","Set packed double-precision (64-bit) floating-point …","Set packed single-precision (32-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 64-bit integers in dst with the supplied values …","Set packed double-precision (64-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Return vector of type __m512 with all elements set to zero.","Return vector of type __m512i with all elements set to …","Returns vector of type <code>__m512d</code> with all elements set to …","Returns vector of type <code>__m512d</code> with all elements set to …","Returns vector of type <code>__m512i</code> with all elements set to …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store 512-bits (composed of 16 packed 32-bit integers) …","Store 512-bits (composed of 8 packed 64-bit integers) from …","Store 512-bits (composed of 8 packed double-precision …","Store 512-bits of integer data from a into memory. …","Store 512-bits of integer data from a into memory. …","Store 512-bits (composed of 32 packed 16-bit integers) …","Store 512-bits (composed of 16 packed 32-bit integers) …","Store 512-bits (composed of 8 packed 64-bit integers) from …","Store 512-bits (composed of 64 packed 8-bit integers) from …","Stores 512-bits (composed of 8 packed double-precision …","Stores 512-bits (composed of 16 packed single-precision …","Store 512-bits of integer data from a into memory. …","Store 512-bits (composed of 8 packed double-precision …","Store 512-bits (composed of 16 packed single-precision …","Store 512-bits of integer data from a into memory using a …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Return vector of type __m512 with indeterminate elements. …","Return vector of type __m512i with indeterminate elements. …","Returns vector of type <code>__m512d</code> with indeterminate elements.","Returns vector of type <code>__m512</code> with indeterminate elements. …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compute the bitwise XOR of 512 bits (representing integer …","Cast vector of type __m128d to type __m512d; the upper 384 …","Cast vector of type __m256d to type __m512d; the upper 256 …","Cast vector of type __m128 to type __m512; the upper 384 …","Cast vector of type __m256 to type __m512; the upper 256 …","Cast vector of type __m128i to type __m512i; the upper 384 …","Cast vector of type __m256i to type __m512i; the upper 256 …","Computes the absolute value of each of the packed 16-bit …","Computes the absolute value of each of the packed 32-bit …","Computes the absolute value of packed 8-bit signed …","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.","Adds packed double-precision (64-bit) floating-point …","Adds __m128 vectors.","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Adds the first component of <code>a</code> and <code>b</code>, the other components …","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …","Alternatively add and subtract packed double-precision …","Alternatively add and subtract packed single-precision …","Performs one round of an AES decryption flow on data …","Performs the last round of an AES decryption flow on data …","Performs one round of an AES encryption flow on data …","Performs the last round of an AES encryption flow on data …","Performs the <code>InvMixColumns</code> transformation on <code>a</code>.","Assist in expanding the AES cipher key.","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte …","Computes the bitwise AND of packed double-precision …","Bitwise AND of packed single-precision (32-bit) …","Computes the bitwise AND of 128 bits (representing integer …","Computes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.","Bitwise AND-NOT of packed single-precision (32-bit) …","Computes the bitwise NOT of 128 bits (representing integer …","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask …","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Blend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcasts a single-precision (32-bit) floating-point …","Broadcasts the low packed 8-bit integer from <code>a</code> to all …","Broadcasts the low packed 32-bit integer from <code>a</code> to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcasts the low packed 64-bit integer from <code>a</code> to all …","Broadcasts the low double-precision (64-bit) …","Broadcasts the low single-precision (32-bit) …","Broadcasts the low packed 16-bit integer from a to all …","Shifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.","Shifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.","Casts a 128-bit floating-point vector of <code>[2 x double]</code> into …","Casts a 128-bit floating-point vector of <code>[2 x double]</code> into …","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …","Casts a 128-bit integer vector into a 128-bit …","Casts a 128-bit integer vector into a 128-bit …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Invalidates and flushes the cache line that contains <code>p</code> …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compares packed double-precision (64-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compares the lower double-precision (64-bit) …","Compare the lower double-precision (64-bit) floating-point …","Compares the lower single-precision (32-bit) …","Compare the lower single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 32-bit integers in a and b for equality, …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality","Compare packed 64-bit integers in a and b for equality, …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for equality.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for equality. The …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for greater than or …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 32-bit integers in a and b for …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for greater than. …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for less than or …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for less-than.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for less than. The …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for not-equal.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for inequality. The …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for not-less-than. …","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Checks if the lowest <code>f32</code> of both inputs are ordered. The …","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Checks if the lowest <code>f32</code> of both inputs are unordered. The …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compares the lower element of <code>a</code> and <code>b</code> for equality.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for less-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Convert the signed 32-bit integer b to a single-precision …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the signed 32-bit integer b to a single-precision …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the unsigned 32-bit integer b to a …","Alias for <code>_mm_cvtsi32_ss</code>.","Alias for <code>_mm_cvtss_si32</code>.","Sign extend packed 16-bit integers in <code>a</code> to packed 32-bit …","Sign extend packed 16-bit integers in <code>a</code> to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in <code>a</code> to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Converts the lower two packed 32-bit integers in <code>a</code> to …","Converts packed 32-bit integers in <code>a</code> to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in <code>a</code> to packed 16-bit …","Sign extend packed 8-bit integers in <code>a</code> to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of <code>a</code> …","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 32-bit integers in <code>a</code> to …","Convert packed unsigned 32-bit integers in a to packed …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Convert the signed 32-bit integer b to a double-precision …","Convert the signed 32-bit integer b to a single-precision …","Convert packed single-precision (32-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Converts the 4 x 16-bit half-precision float values in the …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Converts the 4 x 32-bit float values in the 128-bit vector …","Returns the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Converts the lower double-precision (64-bit) …","Converts the lower double-precision (64-bit) …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Returns the lowest element of <code>a</code>.","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Converts a 32 bit integer to a 32 bit float. The result …","Extracts the lowest 32 bit float from the input vector.","Convert the lower single-precision (32-bit) floating-point …","Converts the lower single-precision (32-bit) …","Converts the lowest 32 bit float in the input vector to a …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Alias for <code>_mm_cvttss_si32</code>.","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Converts the lower double-precision (64-bit) …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Converts the lowest 32 bit float in the input vector to a …","Convert the lower single-precision (32-bit) floating-point …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 32-bit integer b to a …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divides __m128 vectors.","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Divides the first component of <code>b</code> by <code>a</code>, the other …","Returns the dot product of two __m128d vectors.","Returns the dot product of two __m128 vectors.","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Returns the <code>imm8</code> element of <code>a</code>.","Extracts an 32-bit integer from <code>a</code> selected with <code>IMM8</code>","Extracts an 8-bit integer from <code>a</code>, selected with <code>IMM8</code>. …","Extracts a single-precision (32-bit) floating-point …","Extracts the bit range specified by <code>y</code> from the lower 64 …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Gets the unsigned 32-bit value of the MXCSR control and …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Horizontally adds the adjacent pairs of values contained …","Horizontally adds the adjacent pairs of values contained …","Horizontally adds adjacent pairs of double-precision …","Horizontally adds adjacent pairs of single-precision …","Horizontally adds the adjacent pairs of values contained …","Horizontally subtract the adjacent pairs of values …","Horizontally subtract the adjacent pairs of values …","Horizontally subtract adjacent pairs of double-precision …","Horizontally adds adjacent pairs of single-precision …","Horizontally subtract the adjacent pairs of values …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns a new vector where the <code>imm8</code> element of <code>a</code> is …","Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> …","Returns a copy of <code>a</code> with the 8-bit integer from <code>i</code> inserted …","Select a single value in <code>a</code> to store at some position in <code>b</code>, …","Inserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.","Loads 128-bits of integer data from unaligned memory. This …","Performs a serializing operation on all load-from-memory …","Loads a double-precision (64-bit) floating-point element …","Construct a <code>__m128</code> by duplicating the value read from <code>p</code> …","Load 128-bits (composed of 4 packed 32-bit integers) from …","Load 128-bits (composed of 2 packed 64-bit integers) from …","Loads 128-bits (composed of 2 packed double-precision …","Loads a double-precision (64-bit) floating-point element …","Loads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. …","Alias for <code>_mm_load1_ps</code>","Loads a 64-bit double-precision value to the low element …","Loads 128-bits of integer data from memory into a new …","Construct a <code>__m128</code> with the lowest element read from <code>p</code> and …","Loads a double-precision (64-bit) floating-point element …","Loads a double-precision value into the high-order bits of …","Loads 64-bit integer from memory into first element of …","Loads a double-precision value into the low-order bits of …","Loads 2 double-precision (64-bit) floating-point elements …","Loads four <code>f32</code> values from aligned memory into a <code>__m128</code> in …","Load 128-bits (composed of 8 packed 16-bit integers) from …","Load 128-bits (composed of 4 packed 32-bit integers) from …","Load 128-bits (composed of 2 packed 64-bit integers) from …","Load 128-bits (composed of 16 packed 8-bit integers) from …","Loads 128-bits (composed of 2 packed double-precision …","Loads four <code>f32</code> values from memory into a <code>__m128</code>. There are …","Loads 128-bits of integer data from memory into a new …","Loads unaligned 64-bits of integer data from memory into …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiplies and then horizontally add signed 16 bit …","Multiplies corresponding pairs of packed 8-bit unsigned …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 2 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 4 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 4 …","Zero extend packed unsigned 8-bit integers in the low 2 …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert the lower single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Move the lower double-precision (64-bit) floating-point …","Move the lower single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Loads packed 32-bit integers from memory pointed by …","Loads packed 64-bit integers from memory pointed by …","Loads packed double-precision (64-bit) floating-point …","Loads packed single-precision (32-bit) floating-point …","Conditionally store 8-bit integer elements from <code>a</code> into …","Stores packed 32-bit integers from <code>a</code> into memory pointed …","Stores packed 64-bit integers from <code>a</code> into memory pointed …","Stores packed double-precision (64-bit) floating-point …","Stores packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 2 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 4 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in th elow 4 …","Zero extend packed unsigned 8-bit integers in the low 2 …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert the lower single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Move the lower double-precision (64-bit) floating-point …","Move the lower single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Returns a new vector with the maximum values from …","Compares packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the first single-precision (32-bit) …","Performs a serializing operation on all load-from-memory …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Returns a new vector with the minimum values from …","Compares packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the first single-precision (32-bit) …","Finds the minimum unsigned 16-bit element in the 128-bit __…","Returns a vector where the low element is extracted from <code>a</code> …","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…","Returns a <code>__m128</code> with the first component from <code>b</code> and the …","Duplicate the low double-precision (64-bit) floating-point …","Duplicate odd-indexed single-precision (32-bit) …","Combine higher half of <code>a</code> and <code>b</code>. The higher half of <code>b</code> …","Duplicate even-indexed single-precision (32-bit) …","Combine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …","Returns a mask of the most significant bit of each element …","Returns a mask of the most significant bit of each element …","Returns a mask of the most significant bit of each element …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Subtracts 8-bit unsigned integer values and computes the …","Multiplies the low 32-bit integers from each packed 64-bit …","Multiplies the low unsigned 32-bit integers from each …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies __m128 vectors.","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Returns a new vector with the low element of <code>a</code> replaced by …","Multiplies the first component of <code>a</code> and <code>b</code>, the other …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies packed 16-bit signed integer values, truncate …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Computes the bitwise OR of <code>a</code> and <code>b</code>.","Bitwise OR of packed single-precision (32-bit) …","Computes the bitwise OR of 128 bits (representing integer …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Provides a hint to the processor that the code sequence is …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Fetch the cache line that contains address <code>p</code> using the …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Returns the approximate reciprocal of packed …","Returns the approximate reciprocal of the first …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Returns the approximate reciprocal square root of packed …","Returns the approximate reciprocal square root of the …","Sum the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcasts 16-bit integer <code>a</code> to all elements.","Broadcasts 32-bit integer <code>a</code> to all elements.","Broadcasts 64-bit integer <code>a</code> to all elements.","Broadcasts 8-bit integer <code>a</code> to all elements.","Broadcasts double-precision (64-bit) floating-point value …","Construct a <code>__m128</code> with all element set to <code>a</code>.","Sets packed 16-bit integers with the supplied values.","Sets packed 32-bit integers with the supplied values.","Sets packed 64-bit integers with the supplied values, from …","Sets packed 8-bit integers with the supplied values.","Sets packed double-precision (64-bit) floating-point …","Broadcasts double-precision (64-bit) floating-point value …","Construct a <code>__m128</code> from four floating point values highest …","Alias for <code>_mm_set1_ps</code>","Copies double-precision (64-bit) floating-point element <code>a</code> …","Construct a <code>__m128</code> with the lowest element set to <code>a</code> and …","Sets the MXCSR register with the 32-bit unsigned integer …","Sets packed 16-bit integers with the supplied values in …","Sets packed 32-bit integers with the supplied values in …","Sets packed 8-bit integers with the supplied values in …","Sets packed double-precision (64-bit) floating-point …","Construct a <code>__m128</code> from four floating point values lowest …","Returns packed double-precision (64-bit) floating-point …","Construct a <code>__m128</code> with all elements initialized to zero.","Returns a vector with all elements set to zero.","Performs a serializing operation on all store-to-memory …","Performs an intermediate calculation for the next four …","Performs the final calculation for the next four SHA1 …","Calculate SHA1 state variable E after four rounds of …","Performs four rounds of SHA1 operation using an initial …","Performs an intermediate calculation for the next four …","Performs the final calculation for the next four SHA256 …","Performs 2 rounds of SHA256 operation using an initial …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffles 32-bit integers in <code>a</code> using the control in <code>IMM8</code>.","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.","Constructs a 128-bit floating-point vector of <code>[2 x double]</code> …","Shuffles packed single-precision (32-bit) floating-point …","Shuffles 16-bit integers in the high 64 bits of <code>a</code> using …","Shuffles 16-bit integers in the low 64 bits of <code>a</code> using the …","Negates packed 16-bit integers in <code>a</code> when the corresponding …","Negates packed 32-bit integers in <code>a</code> when the corresponding …","Negates packed 8-bit integers in <code>a</code> when the corresponding …","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.","Shift packed 16-bit integers in a left by the amount …","Shifts packed 32-bit integers in <code>a</code> left by the amount …","Shifts packed 64-bit integers in <code>a</code> left by the amount …","Returns a new vector with the square root of each of the …","Returns the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Returns a new vector with the low element of <code>a</code> replaced by …","Returns the square root of the first single-precision …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shift packed 64-bit integers in a right by count while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shifts packed 64-bit integers in <code>a</code> right by the amount …","Stores the lower double-precision (64-bit) floating-point …","Stores the lowest 32 bit float of <code>a</code> repeated four times …","Store 128-bits (composed of 4 packed 32-bit integers) from …","Store 128-bits (composed of 2 packed 64-bit integers) from …","Stores 128-bits (composed of 2 packed double-precision …","Stores the lower double-precision (64-bit) floating-point …","Stores four 32-bit floats into <em>aligned</em> memory.","Alias for <code>_mm_store1_ps</code>","Stores the lower 64 bits of a 128-bit vector of …","Stores 128-bits of integer data from <code>a</code> into memory.","Stores the lowest 32 bit float of <code>a</code> into memory.","Stores the upper 64 bits of a 128-bit vector of …","Stores the lower 64-bit integer <code>a</code> to a memory location.","Stores the lower 64 bits of a 128-bit vector of …","Stores 2 double-precision (64-bit) floating-point elements …","Stores four 32-bit floats into <em>aligned</em> memory in reverse …","Store 128-bits (composed of 8 packed 16-bit integers) from …","Store 128-bits (composed of 4 packed 32-bit integers) from …","Store 128-bits (composed of 2 packed 64-bit integers) from …","Store 128-bits (composed of 16 packed 8-bit integers) from …","Stores 128-bits (composed of 2 packed double-precision …","Stores four 32-bit floats into memory. There are no …","Stores 128-bits of integer data from <code>a</code> into memory.","Stores a 128-bit floating point vector of <code>[2 x double]</code> to …","Stores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …","Non-temporal store of <code>a.0</code> into <code>p</code>.","Stores a 128-bit integer vector to a 128-bit aligned …","Stores a 32-bit integer value in the specified memory …","Non-temporal store of <code>a.0</code> into <code>p</code>.","Subtracts packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …","Subtracts packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtracts __m128 vectors.","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Returns a new vector with the low element of <code>a</code> replaced by …","Subtracts the first component of <code>b</code> from <code>a</code>, the other …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Tests whether the specified bits in <code>a</code> 128-bit integer …","Tests whether the specified bits in a 128-bit integer …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Tests whether the specified bits in a 128-bit integer …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Counts the number of trailing least significant zero bits.","Compares the lower element of <code>a</code> and <code>b</code> for equality.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for less-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Returns vector of type __m128d with indeterminate elements.","Returns vector of type __m128 with indeterminate elements. …","Returns vector of type __m128i with indeterminate elements.","Unpacks and interleave 16-bit integers from the high half …","Unpacks and interleave 32-bit integers from the high half …","Unpacks and interleave 64-bit integers from the high half …","Unpacks and interleave 8-bit integers from the high half …","The resulting <code>__m128d</code> element is composed by the low-order …","Unpacks and interleave single-precision (32-bit) …","Unpacks and interleave 16-bit integers from the low half …","Unpacks and interleave 32-bit integers from the low half …","Unpacks and interleave 64-bit integers from the low half …","Unpacks and interleave 8-bit integers from the low half of …","The resulting <code>__m128d</code> element is composed by the …","Unpacks and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Computes the bitwise XOR of <code>a</code> and <code>b</code>.","Bitwise exclusive OR of packed single-precision (32-bit) …","Computes the bitwise XOR of 128 bits (representing integer …","Unsigned multiply without affecting flags.","Scatter contiguous low order bits of <code>a</code> to the result at …","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …","Counts the bits that are set.","Read a hardware generated 16-bit random value and store …","Read a hardware generated 32-bit random value and store …","Read a 16-bit NIST SP800-90B and SP800-90C compliant …","Read a 32-bit NIST SP800-90B and SP800-90C compliant …","Reads the current value of the processor’s time-stamp …","Store 32-bit mask from a into memory.","Store 64-bit mask from a into memory.","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Clears all bits below the least significant zero of <code>x</code> and …","Clears all bits below the least significant zero of <code>x</code> and …","Counts the number of trailing least significant zero bits.","Sets all bits below the least significant one of <code>x</code> and …","Sets all bits below the least significant one of <code>x</code> and …","Forces a restricted transactional memory (RTM) region to …","Retrieves the parameter passed to <code>_xabort</code> when <code>_xbegin</code>’s …","Specifies the start of a restricted transactional memory …","Specifies the end of a restricted transactional memory …","Reads the contents of the extended control register <code>XCR</code> …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Copies 64-bits from <code>val</code> to the extended control register (…","Queries whether the processor is executing in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","EAX register.","EBX register.","ECX register.","EDX register.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Does the host support the <code>cpuid</code> instruction?","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Result of the <code>cpuid</code> instruction.","Equal (ordered, non-signaling)","Equal (ordered, signaling)","Equal (unordered, non-signaling)","Equal (unordered, signaling)","False (ordered, non-signaling)","False (ordered, signaling)","Greater-than-or-equal (ordered, non-signaling)","Greater-than-or-equal (ordered, signaling)","Greater-than (ordered, non-signaling)","Greater-than (ordered, signaling)","Less-than-or-equal (ordered, non-signaling)","Less-than-or-equal (ordered, signaling)","Less-than (ordered, non-signaling)","Less-than (ordered, signaling)","Not-equal (ordered, non-signaling)","Not-equal (ordered, signaling)","Not-equal (unordered, non-signaling)","Not-equal (unordered, signaling)","Not-greater-than-or-equal (unordered, non-signaling)","Not-greater-than-or-equal (unordered, signaling)","Not-greater-than (unordered, non-signaling)","Not-greater-than (unordered, signaling)","Not-less-than-or-equal (unordered, non-signaling)","Not-less-than-or-equal (unordered, signaling)","Not-less-than (unordered, non-signaling)","Not-less-than (unordered, signaling)","Ordered (non-signaling)","Ordered (signaling)","True (unordered, non-signaling)","True (unordered, signaling)","Unordered (non-signaling)","Unordered (signaling)","The <code>_MM_CMPINT_ENUM</code> type used to specify comparison …","Equal","False","Less-than-or-equal","Less-than","Not-equal","Not less-than-or-equal","Not less-than","True","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_EXCEPTION_STATE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_FLUSH_ZERO_MODE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","round up and do not suppress exceptions","use MXCSR.RC; see <code>vendor::_MM_SET_ROUNDING_MODE</code>","round down and do not suppress exceptions","use MXCSR.RC and suppress exceptions; see …","round to nearest and do not suppress exceptions","suppress exceptions","do not suppress exceptions","use MXCSR.RC and do not suppress exceptions; see …","round to nearest","round down","round up","truncate","truncate and do not suppress exceptions","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","See <code>_mm_prefetch</code>.","The <code>MM_MANTISSA_NORM_ENUM</code> type used to specify mantissa …","The <code>MM_MANTISSA_SIGN_ENUM</code> type used to specify mantissa …","interval [1, 2)","interval [0.5, 1)","interval [0.5, 2)","interval [0.75, 1.5)","DEST = NaN if sign(SRC) = 1","sign = sign(SRC)","sign = 0","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_MM_GET_EXCEPTION_MASK</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</codehe <code>MM_PERM_ENUM</code> type used to specify shuffle operations …","See <code>_mm_setcsr</code>","See <code>_MM_GET_ROUNDING_MODE</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","See <code>_mm_setcsr</code>","A utility function for creating masks to use with Intel …","Transpose the 4x4 matrix formed by 4 rows of __m128 in …","<strong>Mask only</strong>: return the bit mask","For each character in <code>a</code>, find if it is in <code>b</code> <em>(Default)</em>","The strings defined by <code>a</code> and <code>b</code> are equal","Search for the defined substring in the target","For each character in <code>a</code>, determine if …","<strong>Index only</strong>: return the least significant bit <em>(Default)</em>","Negates results only before the end of the string","Do not negate results before the end of the string","<strong>Index only</strong>: return the most significant bit","Negates results","Do not negate results <em>(Default)</em>","String contains signed 8-bit characters","String contains unsigned 16-bit characters","String contains unsigned 8-bit characters <em>(Default)</em>","<strong>Mask only</strong>: return the byte mask","String contains unsigned 16-bit characters","Transaction abort due to the transaction using too much …","Transaction abort due to a memory conflict with another …","Transaction abort due to a debug trap.","Transaction explicitly aborted with xabort. The parameter …","Transaction abort in a inner nested transaction.","Transaction retry is possible.","Transaction successfully started.","<code>XFEATURE_ENABLED_MASK</code> for <code>XCR</code>","See <code>__cpuid_count</code>.","Returns the result of the <code>cpuid</code> instruction for a given …","Returns the highest-supported <code>leaf</code> (<code>EAX</code>) and sub-leaf (<code>ECX</code>…","128-bit wide set of four <code>f32</code> types, x86-specific","128-bit wide set of eight <code>u16</code> types, x86-specific","128-bit wide set of two <code>f64</code> types, x86-specific","128-bit wide integer vector type, x86-specific","256-bit wide set of eight <code>f32</code> types, x86-specific","256-bit wide set of 16 <code>u16</code> types, x86-specific","256-bit wide set of four <code>f64</code> types, x86-specific","256-bit wide integer vector type, x86-specific","512-bit wide set of sixteen <code>f32</code> types, x86-specific","512-bit wide set of 32 <code>u16</code> types, x86-specific","512-bit wide set of eight <code>f64</code> types, x86-specific","512-bit wide integer vector type, x86-specific","The <code>__mmask16</code> type used in AVX-512 intrinsics, a 16-bit …","The <code>__mmask32</code> type used in AVX-512 intrinsics, a 32-bit …","The <code>__mmask64</code> type used in AVX-512 intrinsics, a 64-bit …","The <code>__mmask8</code> type used in AVX-512 intrinsics, a 8-bit …","Reads the current value of the processor’s time-stamp …","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.","Bitwise logical <code>AND</code> of inverted <code>a</code> with <code>b</code>.","Extracts bits of <code>a</code> specified by <code>control</code> into the least …","Extracts bits of <code>a</code> specified by <code>control</code> into the least …","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …","Extracts bits in range [<code>start</code>, <code>start</code> + <code>length</code>) from <code>a</code> into …","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>.","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>.","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Returns the bit in position <code>b</code> of the memory addressed by <code>p</code>…","Clears all bits below the least significant zero bit of <code>x</code>.","Clears all bits below the least significant zero bit of <code>x</code>.","Sets all bits of <code>x</code> to 1 except for the least significant …","Sets all bits of <code>x</code> to 1 except for the least significant …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code> and clears all …","Sets the least significant zero bit of <code>x</code>.","Sets the least significant zero bit of <code>x</code>.","Sets all bits of <code>x</code> below the least significant one.","Sets all bits of <code>x</code> below the least significant one.","Extracts lowest set isolated bit.","Extracts lowest set isolated bit.","Clears least significant bit and sets all other bits.","Clears least significant bit and sets all other bits.","Gets mask up to lowest set bit.","Gets mask up to lowest set bit.","Resets the lowest set bit of <code>x</code>.","Resets the lowest set bit of <code>x</code>.","Returns an integer with the reversed byte order of x","Returns an integer with the reversed byte order of x","Zeroes higher bits of <code>a</code> &gt;= <code>index</code>.","Zeroes higher bits of <code>a</code> &gt;= <code>index</code>.","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …","Restores the <code>XMM</code>, <code>MMX</code>, <code>MXCSR</code>, and <code>x87</code> FPU registers from …","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …","Saves the <code>x87</code> FPU, <code>MMX</code> technology, <code>XMM</code>, and <code>MXCSR</code> …","Add 32-bit masks in a and b, and store the result in k.","Add 64-bit masks in a and b, and store the result in k.","Compute the bitwise AND of 16-bit masks a and b, and store …","Compute the bitwise AND of 32-bit masks a and b, and store …","Compute the bitwise AND of 64-bit masks a and b, and store …","Compute the bitwise NOT of 16-bit masks a and then AND …","Compute the bitwise NOT of 32-bit masks a and then AND …","Compute the bitwise NOT of 64-bit masks a and then AND …","Compute the bitwise NOT of 16-bit mask a, and store the …","Compute the bitwise NOT of 32-bit mask a, and store the …","Compute the bitwise NOT of 64-bit mask a, and store the …","Compute the bitwise OR of 16-bit masks a and b, and store …","Compute the bitwise OR of 32-bit masks a and b, and store …","Compute the bitwise OR of 64-bit masks a and b, and store …","Compute the bitwise XNOR of 16-bit masks a and b, and …","Compute the bitwise XNOR of 32-bit masks a and b, and …","Compute the bitwise XNOR of 64-bit masks a and b, and …","Compute the bitwise XOR of 16-bit masks a and b, and store …","Compute the bitwise XOR of 32-bit masks a and b, and store …","Compute the bitwise XOR of 64-bit masks a and b, and store …","Load 32-bit mask from memory into k.","Load 64-bit mask from memory into k.","Counts the leading most significant zero bits.","Counts the leading most significant zero bits.","Computes the absolute values of packed 16-bit integers in <code>a</code>…","Computes the absolute values of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Computes the absolute values of packed 8-bit integers in <code>a</code>.","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.","Adds packed double-precision (64-bit) floating-point …","Adds packed single-precision (32-bit) floating-point …","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …","Alternatively adds and subtracts packed double-precision …","Alternatively adds and subtracts packed single-precision …","Performs one round of an AES decryption flow on each …","Performs the last round of an AES decryption flow on each …","Performs one round of an AES encryption flow on each …","Performs the last round of an AES encryption flow on each …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenates pairs of 16-byte blocks in <code>a</code> and <code>b</code> into a …","Computes the bitwise AND of a packed double-precision …","Computes the bitwise AND of packed single-precision …","Computes the bitwise AND of 256 bits (representing integer …","Computes the bitwise NOT of packed double-precision …","Computes the bitwise NOT of packed single-precision …","Computes the bitwise NOT of 256 bits (representing integer …","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blends packed 16-bit integers from <code>a</code> and <code>b</code> using control …","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …","Blends packed double-precision (64-bit) floating-point …","Blends packed single-precision (32-bit) floating-point …","Blends packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>.","Blends packed double-precision (64-bit) floating-point …","Blends packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcasts 128 bits from memory (composed of 2 packed …","Broadcasts 128 bits from memory (composed of 4 packed …","Broadcasts a double-precision (64-bit) floating-point …","Broadcasts a single-precision (32-bit) floating-point …","Broadcasts the low packed 8-bit integer from <code>a</code> to all …","Broadcasts the low packed 32-bit integer from <code>a</code> to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcasts the low packed 64-bit integer from <code>a</code> to all …","Broadcasts the low double-precision (64-bit) …","Broadcasts 128 bits of integer data from a to all 128-bit …","Broadcasts the low single-precision (32-bit) …","Broadcasts the low packed 16-bit integer from a to all …","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …","Casts vector of type __m128d to type __m256d; the upper …","Casts vector of type __m256d to type __m128d.","Cast vector of type __m256d to type __m256.","Casts vector of type __m256d to type __m256i.","Casts vector of type __m128 to type __m256; the upper 128 …","Casts vector of type __m256 to type __m128.","Cast vector of type __m256 to type __m256d.","Casts vector of type __m256 to type __m256i.","Casts vector of type __m128i to type __m256i; the upper …","Casts vector of type __m256i to type __m256d.","Casts vector of type __m256i to type __m256.","Casts vector of type __m256i to type __m128i.","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compares packed double-precision (64-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 32-bit integers in a and b for equality, …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 64-bit integers in a and b for equality, …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 32-bit integers in a and b for …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Sign-extend 16-bit integers to 32-bit integers.","Sign-extend 16-bit integers to 64-bit integers.","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign-extend 32-bit integers to 64-bit integers.","Convert packed 32-bit integers in a to packed 8-bit …","Converts packed 32-bit integers in <code>a</code> to packed …","Converts packed 32-bit integers in <code>a</code> to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign-extend 8-bit integers to 16-bit integers.","Sign-extend 8-bit integers to 32-bit integers.","Sign-extend 8-bit integers to 64-bit integers.","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zero-extend the lower four unsigned 16-bit integers in <code>a</code> …","Zero-extend unsigned 32-bit integers in <code>a</code> to 64-bit …","Convert packed unsigned 32-bit integers in a to packed …","Zero-extend unsigned 8-bit integers in <code>a</code> to 16-bit …","Zero-extend the lower eight unsigned 8-bit integers in <code>a</code> …","Zero-extend the lower four unsigned 8-bit integers in <code>a</code> to …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Converts the 8 x 16-bit half-precision float values in the …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Converts the 8 x 32-bit float values in the 256-bit vector …","Returns the first element of the input vector of …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Returns the first element of the input vector of <code>[8 x i32]</code>.","Returns the first element of the input vector of …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Computes the division of each of the 4 packed 64-bit …","Computes the division of each of the 8 packed 32-bit …","Conditionally multiplies the packed single-precision …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Extracts a 16-bit integer from <code>a</code>, selected with <code>INDEX</code>. …","Extracts a 32-bit integer from <code>a</code>, selected with <code>INDEX</code>.","Extracts a 64-bit integer from <code>a</code>, selected with <code>INDEX</code>.","Extracts an 8-bit integer from <code>a</code>, selected with <code>INDEX</code>. …","Extracts 128 bits (composed of 2 packed double-precision …","Extracts 128 bits (composed of 4 packed single-precision …","Extracts 128 bits (composed of integer data) from <code>a</code>, …","Extract 128 bits (composed of 4 packed single-precision …","Extracts 128 bits (of integer data) from <code>a</code> selected with …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …","Horizontally adds adjacent pairs of 32-bit integers in <code>a</code> …","Horizontal addition of adjacent pairs in the two packed …","Horizontal addition of adjacent pairs in the two packed …","Horizontally adds adjacent pairs of 16-bit integers in <code>a</code> …","Horizontally subtract adjacent pairs of 16-bit integers in …","Horizontally subtract adjacent pairs of 32-bit integers in …","Horizontal subtraction of adjacent pairs in the two packed …","Horizontal subtraction of adjacent pairs in the two packed …","Horizontally subtract adjacent pairs of 16-bit integers in …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Scatter 64-bit integers from a into memory using 32-bit …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Copies <code>a</code> to result, and inserts the 16-bit integer <code>i</code> into …","Copies <code>a</code> to result, and inserts the 32-bit integer <code>i</code> into …","Copies <code>a</code> to result, and insert the 64-bit integer <code>i</code> into …","Copies <code>a</code> to result, and inserts the 8-bit integer <code>i</code> into …","Copies <code>a</code> to result, then inserts 128 bits (composed of 2 …","Copies <code>a</code> to result, then inserts 128 bits (composed of 4 …","Copies <code>a</code> to result, then inserts 128 bits from <code>b</code> into …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copies <code>a</code> to <code>dst</code>, then insert 128 bits (of integer data) …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Loads 256-bits of integer data from unaligned memory into …","Load 256-bits (composed of 8 packed 32-bit integers) from …","Load 256-bits (composed of 4 packed 64-bit integers) from …","Loads 256-bits (composed of 4 packed double-precision …","Loads 256-bits (composed of 8 packed single-precision …","Loads 256-bits of integer data from memory into result. …","Loads two 128-bit values (composed of 4 packed …","Loads two 128-bit values (composed of 2 packed …","Loads two 128-bit values (composed of integer data) from …","Load 256-bits (composed of 16 packed 16-bit integers) from …","Load 256-bits (composed of 8 packed 32-bit integers) from …","Load 256-bits (composed of 4 packed 64-bit integers) from …","Load 256-bits (composed of 32 packed 8-bit integers) from …","Loads 256-bits (composed of 4 packed double-precision …","Loads 256-bits (composed of 8 packed single-precision …","Loads 256-bits of integer data from memory into result. …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiplies packed signed 16-bit integers in <code>a</code> and <code>b</code>, …","Vertically multiplies each unsigned 8-bit integer from <code>a</code> …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 4 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 8 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Zero extend packed unsigned 8-bit integers in the low 4 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Loads packed 32-bit integers from memory pointed by …","Loads packed 64-bit integers from memory pointed by …","Loads packed double-precision (64-bit) floating-point …","Loads packed single-precision (32-bit) floating-point …","Stores packed 32-bit integers from <code>a</code> into memory pointed …","Stores packed 64-bit integers from <code>a</code> into memory pointed …","Stores packed double-precision (64-bit) floating-point …","Stores packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate a and b into a 64-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 4 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 8 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Zero extend packed unsigned 8-bit integers in the low 4 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code>, and returns the …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Creates mask from the most significant bit of each 8-bit …","Sets each bit of the returned mask based on the most …","Sets each bit of the returned mask based on the most …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Computes the sum of absolute differences (SADs) of …","Multiplies the low 32-bit integers from each packed 64-bit …","Multiplies the low unsigned 32-bit integers from each …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, …","Multiplies packed 16-bit integers in <code>a</code> and <code>b</code>, producing …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>, producing","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, producing","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Computes the bitwise OR packed double-precision (64-bit) …","Computes the bitwise OR packed single-precision (32-bit) …","Computes the bitwise OR of 256 bits (representing integer …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Shuffles 256 bits (composed of 4 packed double-precision …","Shuffles 256 bits (composed of 8 packed single-precision …","Shuffles 128-bits (composed of integer data) selected by …","Shuffles 128-bits of integer data selected by <code>imm8</code> from <code>a</code> …","Permutes 64-bit integers from <code>a</code> using control mask <code>imm8</code>.","Shuffles 64-bit floating-point elements in <code>a</code> across lanes …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Permutes packed 32-bit integers from <code>a</code> according to the …","Shuffles eight 32-bit floating-point elements in <code>a</code> across …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Computes the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rounds packed double-precision (64-bit) floating point …","Rounds packed single-precision (32-bit) floating point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Computes the approximate reciprocal square root of packed …","Computes the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcasts 16-bit integer <code>a</code> to all elements of returned …","Broadcasts 32-bit integer <code>a</code> to all elements of returned …","Broadcasts 64-bit integer <code>a</code> to all elements of returned …","Broadcasts 8-bit integer <code>a</code> to all elements of returned …","Broadcasts double-precision (64-bit) floating-point value <code>a</code>…","Broadcasts single-precision (32-bit) floating-point value <code>a</code>…","Sets packed 16-bit integers in returned vector with the …","Sets packed 32-bit integers in returned vector with the …","Sets packed 64-bit integers in returned vector with the …","Sets packed 8-bit integers in returned vector with the …","Sets packed __m256 returned vector with the supplied …","Sets packed __m256d returned vector with the supplied …","Sets packed __m256i returned vector with the supplied …","Sets packed double-precision (64-bit) floating-point …","Sets packed single-precision (32-bit) floating-point …","Sets packed 16-bit integers in returned vector with the …","Sets packed 32-bit integers in returned vector with the …","Sets packed 64-bit integers in returned vector with the …","Sets packed 8-bit integers in returned vector with the …","Sets packed __m256 returned vector with the supplied …","Sets packed __m256d returned vector with the supplied …","Sets packed __m256i returned vector with the supplied …","Sets packed double-precision (64-bit) floating-point …","Sets packed single-precision (32-bit) floating-point …","Returns vector of type __m256d with all elements set to …","Returns vector of type __m256 with all elements set to …","Returns vector of type __m256i with all elements set to …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffles 32-bit integers in 128-bit lanes of <code>a</code> using the …","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffles 16-bit integers in the high 64 bits of 128-bit …","Shuffles 16-bit integers in the low 64 bits of 128-bit …","Negates packed 16-bit integers in <code>a</code> when the corresponding …","Negates packed 32-bit integers in <code>a</code> when the corresponding …","Negates packed 8-bit integers in <code>a</code> when the corresponding …","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts 128-bit lanes in <code>a</code> left by <code>imm8</code> bytes while …","Shift packed 16-bit integers in a left by the amount …","Shifts packed 32-bit integers in <code>a</code> left by the amount …","Shifts packed 64-bit integers in <code>a</code> left by the amount …","Returns the square root of packed double-precision …","Returns the square root of packed single-precision …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shift packed 64-bit integers in a right by count while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts 128-bit lanes in <code>a</code> right by <code>imm8</code> bytes while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shifts packed 64-bit integers in <code>a</code> right by the amount …","Store 256-bits (composed of 8 packed 32-bit integers) from …","Store 256-bits (composed of 4 packed 64-bit integers) from …","Stores 256-bits (composed of 4 packed double-precision …","Stores 256-bits (composed of 8 packed single-precision …","Stores 256-bits of integer data from <code>a</code> into memory. …","Stores the high and low 128-bit halves (each composed of 4 …","Stores the high and low 128-bit halves (each composed of 2 …","Stores the high and low 128-bit halves (each composed of …","Store 256-bits (composed of 16 packed 16-bit integers) …","Store 256-bits (composed of 8 packed 32-bit integers) from …","Store 256-bits (composed of 4 packed 64-bit integers) from …","Store 256-bits (composed of 32 packed 8-bit integers) from …","Stores 256-bits (composed of 4 packed double-precision …","Stores 256-bits (composed of 8 packed single-precision …","Stores 256-bits of integer data from <code>a</code> into memory. …","Moves double-precision values from a 256-bit vector of …","Moves single-precision floating point values from a …","Moves integer data from a 256-bit integer vector to a …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtracts packed double-precision (64-bit) floating-point …","Subtracts packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing …","Computes the bitwise AND of 256 bits (representing integer …","Returns vector of type <code>__m256d</code> with indeterminate elements.","Returns vector of type <code>__m256</code> with indeterminate elements. …","Returns vector of type __m256i with with indeterminate …","Unpacks and interleave 16-bit integers from the high half …","Unpacks and interleave 32-bit integers from the high half …","Unpacks and interleave 64-bit integers from the high half …","Unpacks and interleave 8-bit integers from the high half …","Unpacks and interleave double-precision (64-bit) …","Unpacks and interleave single-precision (32-bit) …","Unpacks and interleave 16-bit integers from the low half …","Unpacks and interleave 32-bit integers from the low half …","Unpacks and interleave 64-bit integers from the low half …","Unpacks and interleave 8-bit integers from the low half of …","Unpacks and interleave double-precision (64-bit) …","Unpacks and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Computes the bitwise XOR of packed double-precision …","Computes the bitwise XOR of packed single-precision …","Computes the bitwise XOR of 256 bits (representing integer …","Zeroes the contents of all XMM or YMM registers.","Zeroes the upper 128 bits of all YMM registers; the lower …","Constructs a 256-bit floating-point vector of <code>[4 x double]</code> …","Constructs a 256-bit floating-point vector of <code>[8 x float]</code> …","Constructs a 256-bit integer vector from a 128-bit integer …","Compute the absolute value of packed signed 16-bit …","Computes the absolute values of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Finds the absolute value of each packed double-precision …","Finds the absolute value of each packed single-precision …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Performs one round of an AES decryption flow on each …","Performs the last round of an AES decryption flow on each …","Performs one round of an AES encryption flow on each …","Performs the last round of an AES encryption flow on each …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of 512 bits (composed of packed …","Compute the bitwise AND of 512 bits (representing integer …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of 512 bits (composed of packed …","Compute the bitwise NOT of 512 bits (representing integer …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Shift 128-bit lanes in a left by imm8 bytes while shifting …","Shift 128-bit lanes in a right by imm8 bytes while …","Cast vector of type __m128d to type __m512d; the upper 384 …","Cast vector of type __m256d to type __m512d; the upper 256 …","Cast vector of type __m512d to type __m128d. This …","Cast vector of type __m512d to type __m256d. This …","Cast vector of type __m512d to type __m512. This intrinsic …","Cast vector of type __m512d to type __m512i. This …","Cast vector of type __m128 to type __m512; the upper 384 …","Cast vector of type __m256 to type __m512; the upper 256 …","Cast vector of type __m512 to type __m128. This intrinsic …","Cast vector of type __m512 to type __m256. This intrinsic …","Cast vector of type __m512 to type __m512d. This intrinsic …","Cast vector of type __m512 to type __m512i. This intrinsic …","Cast vector of type __m128i to type __m512i; the upper 384 …","Cast vector of type __m256i to type __m512i; the upper 256 …","Cast vector of type __m512i to type __m512d. This …","Cast vector of type __m512i to type __m512. This intrinsic …","Cast vector of type __m512i to type __m128i. This …","Cast vector of type __m512i to type __m256i. This …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Performs an element-by-element conversion of packed …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Performs element-by-element conversion of the lower half …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Copy the lower 32-bit integer in a to dst.","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Gather 32-bit integers from memory using 32-bit indices. …","Gather 64-bit integers from memory using 32-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 32-bit …","Scatter 64-bit integers from a into memory using 32-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Gather 32-bit integers from memory using 64-bit indices. …","Gather 64-bit integers from memory using 64-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 64-bit …","Scatter 64-bit integers from a into memory using 64-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copy a to dst, then insert 256 bits (composed of 4 packed …","Copy a to dst, then insert 128 bits (composed of 4 packed …","Copy a to dst, then insert 256 bits (composed of 4 packed …","Converts integer mask into bitmask, storing the result in …","Compute the bitwise AND of 16-bit masks a and b, and store …","Compute the bitwise NOT of 16-bit masks a and then AND …","Copy 16-bit mask a to k.","Compute the bitwise NOT of 16-bit mask a, and store the …","Compute the bitwise OR of 16-bit masks a and b, and store …","Performs bitwise OR between k1 and k2, storing the result …","Unpack and interleave 8 bits from masks a and b, and store …","Compute the bitwise XNOR of 16-bit masks a and b, and …","Compute the bitwise XOR of 16-bit masks a and b, and store …","Load 512-bits (composed of 16 packed 32-bit integers) from …","Load 512-bits (composed of 8 packed 64-bit integers) from …","Load 512-bits (composed of 8 packed double-precision …","Load 512-bits (composed of 16 packed single-precision …","Load 512-bits of integer data from memory into dst. …","Load 512-bits (composed of 32 packed 16-bit integers) from …","Load 512-bits (composed of 16 packed 32-bit integers) from …","Load 512-bits (composed of 8 packed 64-bit integers) from …","Load 512-bits (composed of 64 packed 8-bit integers) from …","Loads 512-bits (composed of 8 packed double-precision …","Loads 512-bits (composed of 16 packed single-precision …","Load 512-bits of integer data from memory into dst. …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed signed 16-bit integers in a and b, …","Vertically multiply each unsigned 8-bit integer from a …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Converts bit mask k1 into an integer value, storing the …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Computes the absolute value of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Finds the absolute value of each packed double-precision …","Finds the absolute value of each packed single-precision …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Performs element-by-element conversion of the lower half …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Performs element-by-element conversion of the lower half …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Performs an element-by-element conversion of packed …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Performs element-by-element conversion of the lower half …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Gather 32-bit integers from memory using 32-bit indices. …","Gather 64-bit integers from memory using 32-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 32-bit …","Scatter 64-bit integers from a into memory using 32-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Gather 32-bit integers from memory using 64-bit indices. …","Gather 64-bit integers from memory using 64-bit indices. …","Gather double-precision (64-bit) floating-point elements …","Gather single-precision (32-bit) floating-point elements …","Scatter 32-bit integers from a into memory using 64-bit …","Scatter 64-bit integers from a into memory using 64-bit …","Scatter double-precision (64-bit) floating-point elements …","Scatter single-precision (32-bit) floating-point elements …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","Multiplies elements in packed 64-bit integer vectors a and …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 32-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Reduce the packed 32-bit integers in a by addition using …","Reduce the packed 64-bit integers in a by addition using …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise AND …","Reduce the packed 64-bit integers in a by addition using …","Reduce the packed signed 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed unsigned 32-bit integers in a by maximum …","Reduce the packed unsigned 64-bit integers in a by maximum …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed signed 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed unsigned 32-bit integers in a by maximum …","Reduce the packed signed 64-bit integers in a by maximum …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by multiplication …","Reduce the packed 64-bit integers in a by multiplication …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise OR using …","Reduce the packed 64-bit integers in a by bitwise OR using …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compute the absolute value of packed signed 16-bit …","Computes the absolute value of packed 32-bit integers in <code>a</code>…","Compute the absolute value of packed signed 64-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 128-byte immediate result, …","Concatenate a and b into a 128-byte immediate result, …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the 4 packed single-precision (32-bit) …","Broadcast the 4 packed double-precision (64-bit) …","Broadcast the 4 packed 32-bit integers from a to all …","Broadcast the 4 packed 64-bit integers from a to all …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low double-precision (64-bit) floating-point …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed signed 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 8 …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Extract 128 bits (composed of 4 packed single-precision …","Extract 256 bits (composed of 4 packed double-precision …","Extract 128 bits (composed of 4 packed 32-bit integers) …","Extract 256 bits (composed of 4 packed 64-bit integers) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Copy a to tmp, then insert 128 bits (composed of 4 packed …","Copy a to tmp, then insert 256 bits (composed of 4 packed …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","Multiplies elements in packed 64-bit integer vectors a and …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Compute the bitwise OR of 512 bits (representing integer …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 32-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 64-bit integers in a within 256-bit lanes using …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 32-bit integers in a across lanes using the …","Shuffle 64-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Reduce the packed 32-bit integers in a by addition. …","Reduce the packed 64-bit integers in a by addition. …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise AND. …","Reduce the packed 64-bit integers in a by bitwise AND. …","Reduce the packed signed 32-bit integers in a by maximum. …","Reduce the packed signed 64-bit integers in a by maximum. …","Reduce the packed unsigned 32-bit integers in a by …","Reduce the packed unsigned 64-bit integers in a by …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed signed 32-bit integers in a by minimum. …","Reduce the packed signed 64-bit integers in a by minimum. …","Reduce the packed unsigned 32-bit integers in a by …","Reduce the packed unsigned 64-bit integers in a by …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by multiplication. …","Reduce the packed 64-bit integers in a by multiplication. …","Reduce the packed double-precision (64-bit) floating-point …","Reduce the packed single-precision (32-bit) floating-point …","Reduce the packed 32-bit integers in a by bitwise OR. …","Reduce the packed 64-bit integers in a by bitwise OR. …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer <code>a</code> to all elements of <code>dst</code>.","Broadcast 64-bit integer <code>a</code> to all elements of <code>dst</code>.","Broadcast 8-bit integer a to all elements of dst.","Broadcast 64-bit float <code>a</code> to all elements of <code>dst</code>.","Broadcast 32-bit float <code>a</code> to all elements of <code>dst</code>.","Set packed 32-bit integers in dst with the repeated 4 …","Set packed 64-bit integers in dst with the repeated 4 …","Set packed double-precision (64-bit) floating-point …","Set packed single-precision (32-bit) floating-point …","Set packed 16-bit integers in dst with the supplied values.","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 64-bit integers in dst with the supplied values.","Set packed 8-bit integers in dst with the supplied values.","Set packed double-precision (64-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 32-bit integers in dst with the repeated 4 …","Set packed 64-bit integers in dst with the repeated 4 …","Set packed double-precision (64-bit) floating-point …","Set packed single-precision (32-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Set packed 64-bit integers in dst with the supplied values …","Set packed double-precision (64-bit) floating-point …","Sets packed 32-bit integers in <code>dst</code> with the supplied …","Return vector of type __m512 with all elements set to zero.","Return vector of type __m512i with all elements set to …","Returns vector of type <code>__m512d</code> with all elements set to …","Returns vector of type <code>__m512d</code> with all elements set to …","Returns vector of type <code>__m512i</code> with all elements set to …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle 128-bits (composed of 4 single-precision (32-bit) …","Shuffle 128-bits (composed of 2 double-precision (64-bit) …","Shuffle 128-bits (composed of 4 32-bit integers) selected …","Shuffle 128-bits (composed of 2 64-bit integers) selected …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store 512-bits (composed of 16 packed 32-bit integers) …","Store 512-bits (composed of 8 packed 64-bit integers) from …","Store 512-bits (composed of 8 packed double-precision …","Store 512-bits of integer data from a into memory. …","Store 512-bits of integer data from a into memory. …","Store 512-bits (composed of 32 packed 16-bit integers) …","Store 512-bits (composed of 16 packed 32-bit integers) …","Store 512-bits (composed of 8 packed 64-bit integers) from …","Store 512-bits (composed of 64 packed 8-bit integers) from …","Stores 512-bits (composed of 8 packed double-precision …","Stores 512-bits (composed of 16 packed single-precision …","Store 512-bits of integer data from a into memory. …","Store 512-bits (composed of 8 packed double-precision …","Store 512-bits (composed of 16 packed single-precision …","Store 512-bits of integer data from a into memory using a …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Return vector of type __m512 with indeterminate elements. …","Return vector of type __m512i with indeterminate elements. …","Returns vector of type <code>__m512d</code> with indeterminate elements.","Returns vector of type <code>__m512</code> with indeterminate elements. …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compute the bitwise XOR of 512 bits (representing integer …","Cast vector of type __m128d to type __m512d; the upper 384 …","Cast vector of type __m256d to type __m512d; the upper 256 …","Cast vector of type __m128 to type __m512; the upper 384 …","Cast vector of type __m256 to type __m512; the upper 256 …","Cast vector of type __m128i to type __m512i; the upper 384 …","Cast vector of type __m256i to type __m512i; the upper 256 …","Computes the absolute value of each of the packed 16-bit …","Computes the absolute value of each of the packed 32-bit …","Computes the absolute value of packed 8-bit signed …","Adds packed 16-bit integers in <code>a</code> and <code>b</code>.","Adds packed 32-bit integers in <code>a</code> and <code>b</code>.","Adds packed 64-bit integers in <code>a</code> and <code>b</code>.","Adds packed 8-bit integers in <code>a</code> and <code>b</code>.","Adds packed double-precision (64-bit) floating-point …","Adds __m128 vectors.","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Adds the first component of <code>a</code> and <code>b</code>, the other components …","Adds packed 16-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed 8-bit integers in <code>a</code> and <code>b</code> using saturation.","Adds packed unsigned 16-bit integers in <code>a</code> and <code>b</code> using …","Adds packed unsigned 8-bit integers in <code>a</code> and <code>b</code> using …","Alternatively add and subtract packed double-precision …","Alternatively add and subtract packed single-precision …","Performs one round of an AES decryption flow on data …","Performs the last round of an AES decryption flow on data …","Performs one round of an AES encryption flow on data …","Performs the last round of an AES encryption flow on data …","Performs the <code>InvMixColumns</code> transformation on <code>a</code>.","Assist in expanding the AES cipher key.","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate 16-byte blocks in <code>a</code> and <code>b</code> into a 32-byte …","Computes the bitwise AND of packed double-precision …","Bitwise AND of packed single-precision (32-bit) …","Computes the bitwise AND of 128 bits (representing integer …","Computes the bitwise NOT of <code>a</code> and then AND with <code>b</code>.","Bitwise AND-NOT of packed single-precision (32-bit) …","Computes the bitwise NOT of 128 bits (representing integer …","Averages packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Averages packed unsigned 8-bit integers in <code>a</code> and <code>b</code>.","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from <code>a</code> and <code>b</code> using the mask …","Blends packed 32-bit integers from <code>a</code> and <code>b</code> using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Blend packed 8-bit integers from <code>a</code> and <code>b</code> using <code>mask</code>","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcasts a single-precision (32-bit) floating-point …","Broadcasts the low packed 8-bit integer from <code>a</code> to all …","Broadcasts the low packed 32-bit integer from <code>a</code> to all …","Broadcast the low 8-bits from input mask k to all 64-bit …","Broadcast the low 16-bits from input mask k to all 32-bit …","Broadcasts the low packed 64-bit integer from <code>a</code> to all …","Broadcasts the low double-precision (64-bit) …","Broadcasts the low single-precision (32-bit) …","Broadcasts the low packed 16-bit integer from a to all …","Shifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.","Shifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.","Casts a 128-bit floating-point vector of <code>[2 x double]</code> into …","Casts a 128-bit floating-point vector of <code>[2 x double]</code> into …","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …","Casts a 128-bit floating-point vector of <code>[4 x float]</code> into …","Casts a 128-bit integer vector into a 128-bit …","Casts a 128-bit integer vector into a 128-bit …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Invalidates and flushes the cache line that contains <code>p</code> …","Performs a carry-less multiplication of two 64-bit …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compares packed double-precision (64-bit) floating-point …","Compare packed double-precision (64-bit) floating-point …","Compares packed single-precision (32-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compares the lower double-precision (64-bit) …","Compare the lower double-precision (64-bit) floating-point …","Compares the lower single-precision (32-bit) …","Compare the lower single-precision (32-bit) floating-point …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed 32-bit integers in a and b for equality, …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for equality","Compare packed 64-bit integers in a and b for equality, …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for equality.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for equality.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for equality. The …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compares packed strings in <code>a</code> and <code>b</code> with lengths <code>la</code> and <code>lb</code> …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for greater than or …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 32-bit integers in a and b for …","Compares packed 64-bit integers in <code>a</code> and <code>b</code> for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for greater-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for greater than. …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compares packed strings with implicit lengths in <code>a</code> and <code>b</code> …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for less than or …","Compares packed 16-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 16-bit integers in a and b for …","Compares packed 32-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> for less-than.","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for less-than.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for less than. The …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compares corresponding elements in <code>a</code> and <code>b</code> for not-equal.","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for inequality. The …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for …","Compares corresponding elements in <code>a</code> and <code>b</code> for …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the lowest <code>f32</code> of both inputs for not-less-than. …","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Checks if the lowest <code>f32</code> of both inputs are ordered. The …","Compares corresponding elements in <code>a</code> and <code>b</code> to see if …","Compares each of the four floats in <code>a</code> to the corresponding …","Returns a new vector with the low element of <code>a</code> replaced by …","Checks if the lowest <code>f32</code> of both inputs are unordered. The …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compares the lower element of <code>a</code> and <code>b</code> for equality.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for less-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Starting with the initial value in <code>crc</code>, return the …","Convert the signed 32-bit integer b to a single-precision …","Convert the signed 64-bit integer b to a double-precision …","Convert the signed 64-bit integer b to a single-precision …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the signed 32-bit integer b to a single-precision …","Convert the signed 64-bit integer b to a double-precision …","Convert the signed 64-bit integer b to a single-precision …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Alias for <code>_mm_cvtsi32_ss</code>.","Alias for <code>_mm_cvtss_si32</code>.","Sign extend packed 16-bit integers in <code>a</code> to packed 32-bit …","Sign extend packed 16-bit integers in <code>a</code> to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in <code>a</code> to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Converts the lower two packed 32-bit integers in <code>a</code> to …","Converts packed 32-bit integers in <code>a</code> to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in <code>a</code> to packed 16-bit …","Sign extend packed 8-bit integers in <code>a</code> to packed 32-bit …","Sign extend packed 8-bit integers in the low 8 bytes of <code>a</code> …","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 16-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 32-bit integers in <code>a</code> to …","Convert packed unsigned 32-bit integers in a to packed …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Zeroes extend packed unsigned 8-bit integers in <code>a</code> to …","Convert the signed 32-bit integer b to a double-precision …","Convert the signed 32-bit integer b to a single-precision …","Convert the signed 64-bit integer b to a double-precision …","Convert the signed 64-bit integer b to a single-precision …","Convert packed single-precision (32-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed double-precision (64-bit) floating-point …","Converts the 4 x 16-bit half-precision float values in the …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Converts the 4 x 32-bit float values in the 128-bit vector …","Returns the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Converts the lower double-precision (64-bit) …","Converts the lower double-precision (64-bit) …","Alias for <code>_mm_cvtsd_si64</code>","Converts the lower double-precision (64-bit) …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Returns the lowest element of <code>a</code>.","Returns the lowest element of <code>a</code>.","Returns the lowest element of <code>a</code>.","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Converts a 32 bit integer to a 32 bit float. The result …","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Converts a 64 bit integer to a 32 bit float. The result …","Returns <code>a</code> with its lower element replaced by <code>b</code> after …","Returns a vector whose lowest element is <code>a</code> and all higher …","Extracts the lowest 32 bit float from the input vector.","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Converts the lower single-precision (32-bit) …","Converts the lowest 32 bit float in the input vector to a …","Converts the lowest 32 bit float in the input vector to a …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Alias for <code>_mm_cvttss_si32</code>.","Converts packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Converts packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Converts the lower double-precision (64-bit) …","Converts the lower double-precision (64-bit) …","Alias for <code>_mm_cvttsd_si64</code>","Convert the lower double-precision (64-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Converts the lowest 32 bit float in the input vector to a …","Converts the lowest 32 bit float in the input vector to a …","Convert the lower single-precision (32-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 32-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Convert the unsigned 64-bit integer b to a …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divides __m128 vectors.","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Divides the first component of <code>b</code> by <code>a</code>, the other …","Returns the dot product of two __m128d vectors.","Returns the dot product of two __m128 vectors.","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Returns the <code>imm8</code> element of <code>a</code>.","Extracts an 32-bit integer from <code>a</code> selected with <code>IMM8</code>","Extracts an 64-bit integer from <code>a</code> selected with <code>IMM1</code>","Extracts an 8-bit integer from <code>a</code>, selected with <code>IMM8</code>. …","Extracts a single-precision (32-bit) floating-point …","Extracts the bit range specified by <code>y</code> from the lower 64 …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiplies the lower double-precision (64-bit) …","Multiplies the lower single-precision (32-bit) …","Gets the unsigned 32-bit value of the MXCSR control and …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Horizontally adds the adjacent pairs of values contained …","Horizontally adds the adjacent pairs of values contained …","Horizontally adds adjacent pairs of double-precision …","Horizontally adds adjacent pairs of single-precision …","Horizontally adds the adjacent pairs of values contained …","Horizontally subtract the adjacent pairs of values …","Horizontally subtract the adjacent pairs of values …","Horizontally subtract adjacent pairs of double-precision …","Horizontally adds adjacent pairs of single-precision …","Horizontally subtract the adjacent pairs of values …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns a new vector where the <code>imm8</code> element of <code>a</code> is …","Returns a copy of <code>a</code> with the 32-bit integer from <code>i</code> …","Returns a copy of <code>a</code> with the 64-bit integer from <code>i</code> …","Returns a copy of <code>a</code> with the 8-bit integer from <code>i</code> inserted …","Select a single value in <code>a</code> to store at some position in <code>b</code>, …","Inserts the <code>[length:0]</code> bits of <code>y</code> into <code>x</code> at <code>index</code>.","Loads 128-bits of integer data from unaligned memory. This …","Performs a serializing operation on all load-from-memory …","Loads a double-precision (64-bit) floating-point element …","Construct a <code>__m128</code> by duplicating the value read from <code>p</code> …","Load 128-bits (composed of 4 packed 32-bit integers) from …","Load 128-bits (composed of 2 packed 64-bit integers) from …","Loads 128-bits (composed of 2 packed double-precision …","Loads a double-precision (64-bit) floating-point element …","Loads four <code>f32</code> values from <em>aligned</em> memory into a <code>__m128</code>. …","Alias for <code>_mm_load1_ps</code>","Loads a 64-bit double-precision value to the low element …","Loads 128-bits of integer data from memory into a new …","Construct a <code>__m128</code> with the lowest element read from <code>p</code> and …","Loads a double-precision (64-bit) floating-point element …","Loads a double-precision value into the high-order bits of …","Loads 64-bit integer from memory into first element of …","Loads a double-precision value into the low-order bits of …","Loads 2 double-precision (64-bit) floating-point elements …","Loads four <code>f32</code> values from aligned memory into a <code>__m128</code> in …","Load 128-bits (composed of 8 packed 16-bit integers) from …","Load 128-bits (composed of 4 packed 32-bit integers) from …","Load 128-bits (composed of 2 packed 64-bit integers) from …","Load 128-bits (composed of 16 packed 8-bit integers) from …","Loads 128-bits (composed of 2 packed double-precision …","Loads four <code>f32</code> values from memory into a <code>__m128</code>. There are …","Loads 128-bits of integer data from memory into a new …","Loads unaligned 64-bits of integer data from memory into …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiply packed unsigned 52-bit integers in each 64-bit …","Multiplies and then horizontally add signed 16 bit …","Multiplies corresponding pairs of packed 8-bit unsigned …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Performs element-by-element bitwise AND between packed …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Considers the input <code>b</code> as packed 64-bit integers and <code>c</code> as …","Blend packed 16-bit integers from a and b using control …","Blend packed 32-bit integers from a and b using control …","Blend packed 64-bit integers from a and b using control …","Blend packed 8-bit integers from a and b using control …","Blend packed double-precision (64-bit) floating-point …","Blend packed single-precision (32-bit) floating-point …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Compare packed signed 16-bit integers in a and b based on …","Compare packed signed 32-bit integers in a and b based on …","Compare packed signed 64-bit integers in a and b based on …","Compare packed signed 8-bit integers in a and b based on …","Compare packed unsigned 16-bit integers in a and b based …","Compare packed unsigned 32-bit integers in a and b based …","Compare packed unsigned 64-bit integers in a and b based …","Compare packed unsigned 8-bit integers in a and b based on …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for equality, …","Compare packed 64-bit integers in a and b for equality, …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed signed 32-bit integers in a and b for …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Compare packed signed 16-bit integers in a and b for …","Compare packed 32-bit integers in a and b for not-equal, …","Compare packed signed 64-bit integers in a and b for …","Compare packed signed 8-bit integers in a and b for …","Compare packed unsigned 16-bit integers in a and b for …","Compare packed unsigned 32-bit integers in a and b for …","Compare packed unsigned 64-bit integers in a and b for …","Compare packed unsigned 8-bit integers in a and b for …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 32-bit integers in a to packed 16-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 2 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 4 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in the low 4 …","Zero extend packed unsigned 8-bit integers in the low 2 …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert the lower single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Returns values from <code>slice</code> at offsets determined by …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using …","Move packed 32-bit integers from a to dst using writemask …","Move packed 64-bit integers from a to dst using writemask …","Move packed 8-bit integers from a into dst using writemask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Move the lower double-precision (64-bit) floating-point …","Move the lower single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast 16-bit integer a to all elements of dst using …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle 8-bit integers in a within 128-bit lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Store packed 16-bit integers from a into memory using …","Store packed 32-bit integers from a into memory using …","Store packed 64-bit integers from a into memory using …","Store packed 8-bit integers from a into memory using …","Store packed double-precision (64-bit) floating-point …","Store packed single-precision (32-bit) floating-point …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Loads packed 32-bit integers from memory pointed by …","Loads packed 64-bit integers from memory pointed by …","Loads packed double-precision (64-bit) floating-point …","Loads packed single-precision (32-bit) floating-point …","Conditionally store 8-bit integer elements from <code>a</code> into …","Stores packed 32-bit integers from <code>a</code> into memory pointed …","Stores packed 64-bit integers from <code>a</code> into memory pointed …","Stores packed double-precision (64-bit) floating-point …","Stores packed single-precision (32-bit) floating-point …","Compute the absolute value of packed signed 16-bit …","Compute the absolute value of packed signed 32-bit …","Compute the absolute value of packed signed 8-bit integers …","Add packed 16-bit integers in a and b, and store the …","Add packed 32-bit integers in a and b, and store the …","Add packed 64-bit integers in a and b, and store the …","Add packed 8-bit integers in a and b, and store the …","Add packed double-precision (64-bit) floating-point …","Add packed single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add the lower double-precision (64-bit) floating-point …","Add the lower single-precision (32-bit) floating-point …","Add packed signed 16-bit integers in a and b using …","Add packed signed 8-bit integers in a and b using …","Add packed unsigned 16-bit integers in a and b using …","Add packed unsigned 8-bit integers in a and b using …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate a and b into a 32-byte immediate result, shift …","Concatenate pairs of 16-byte blocks in a and b into a …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise NOT of packed 32-bit integers in a and …","Compute the bitwise NOT of packed 64-bit integers in a and …","Average packed unsigned 16-bit integers in a and b, and …","Average packed unsigned 8-bit integers in a and b, and …","Broadcast the low packed 8-bit integer from a to all …","Broadcast the low packed 32-bit integer from a to all …","Broadcast the low packed 64-bit integer from a to all …","Broadcast the low single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Contiguously store the active 16-bit integers in a (those …","Contiguously store the active 32-bit integers in a (those …","Contiguously store the active 64-bit integers in a (those …","Contiguously store the active 8-bit integers in a (those …","Contiguously store the active double-precision (64-bit) …","Contiguously store the active single-precision (32-bit) …","Test each 32-bit element of a for equality with all other …","Test each 64-bit element of a for equality with all other …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert the lower single-precision (32-bit) floating-point …","Sign extend packed 16-bit integers in a to packed 32-bit …","Sign extend packed 16-bit integers in a to packed 64-bit …","Convert packed 16-bit integers in a to packed 8-bit …","Convert packed 32-bit integers in a to packed 16-bit …","Sign extend packed 32-bit integers in a to packed 64-bit …","Convert packed 32-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed …","Convert packed 64-bit integers in a to packed 16-bit …","Convert packed 64-bit integers in a to packed 32-bit …","Convert packed 64-bit integers in a to packed 8-bit …","Sign extend packed 8-bit integers in a to packed 16-bit …","Sign extend packed 8-bit integers in a to packed 32-bit …","Sign extend packed 8-bit integers in the low 2 bytes of a …","Zero extend packed unsigned 16-bit integers in a to packed …","Zero extend packed unsigned 16-bit integers in the low 4 …","Zero extend packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in a to packed …","Zero extend packed unsigned 8-bit integers in th elow 4 …","Zero extend packed unsigned 8-bit integers in the low 2 …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed half-precision (16-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert the lower double-precision (64-bit) floating-point …","Convert packed signed 16-bit integers in a to packed 8-bit …","Convert packed signed 32-bit integers in a to packed …","Convert packed signed 32-bit integers in a to packed 8-bit …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed …","Convert packed signed 64-bit integers in a to packed 8-bit …","Convert the lower single-precision (32-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed double-precision (64-bit) floating-point …","Convert packed single-precision (32-bit) floating-point …","Convert packed double-precision (32-bit) floating-point …","Convert packed unsigned 16-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 32-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Convert packed unsigned 64-bit integers in a to packed …","Compute the sum of absolute differences (SADs) of …","Divide packed double-precision (64-bit) floating-point …","Divide packed single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Divide the lower double-precision (64-bit) floating-point …","Divide the lower single-precision (32-bit) floating-point …","Compute dot-product of BF16 (16-bit) floating-point pairs …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 4 adjacent pairs of unsigned 8-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Multiply groups of 2 adjacent pairs of signed 16-bit …","Load contiguous active 16-bit integers from a (those with …","Load contiguous active 32-bit integers from a (those with …","Load contiguous active 64-bit integers from a (those with …","Load contiguous active 8-bit integers from a (those with …","Load contiguous active double-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Load contiguous active 16-bit integers from unaligned …","Load contiguous active 32-bit integers from unaligned …","Load contiguous active 64-bit integers from unaligned …","Load contiguous active 8-bit integers from unaligned …","Load contiguous active single-precision (64-bit) …","Load contiguous active single-precision (32-bit) …","Fix up packed double-precision (64-bit) floating-point …","Fix up packed single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Fix up the lower double-precision (64-bit) floating-point …","Fix up the lower single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Convert the exponent of each packed double-precision …","Convert the exponent of each packed single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Convert the exponent of the lower double-precision …","Convert the exponent of the lower single-precision …","Normalize the mantissas of packed double-precision …","Normalize the mantissas of packed single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Normalize the mantissas of the lower double-precision …","Normalize the mantissas of the lower single-precision …","Performs an affine transformation on the packed bytes in x.","Performs an affine transformation on the inverted packed …","Performs a multiplication in GF(2^8) on the packed bytes. …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Load packed 16-bit integers from memory into dst using …","Load packed 32-bit integers from memory into dst using …","Load packed 64-bit integers from memory into dst using …","Load packed 8-bit integers from memory into dst using …","Load packed double-precision (64-bit) floating-point …","Load packed single-precision (32-bit) floating-point …","Counts the number of leading zero bits in each packed …","Counts the number of leading zero bits in each packed …","Multiply packed signed 16-bit integers in a and b, …","Multiply packed unsigned 8-bit integers in a by packed …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 64-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare packed signed 16-bit integers in a and b, and …","Compare packed signed 32-bit integers in a and b, and …","Compare packed signed 8-bit integers in a and b, and store …","Compare packed unsigned 16-bit integers in a and b, and …","Compare packed unsigned 32-bit integers in a and b, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compare packed unsigned 8-bit integers in a and b, and …","Compare packed double-precision (64-bit) floating-point …","Compare packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Move packed 16-bit integers from a into dst using zeromask …","Move packed 32-bit integers from a into dst using zeromask …","Move packed 64-bit integers from a into dst using zeromask …","Move packed 8-bit integers from a into dst using zeromask …","Move packed double-precision (64-bit) floating-point …","Move packed single-precision (32-bit) floating-point …","Move the lower double-precision (64-bit) floating-point …","Move the lower single-precision (32-bit) floating-point …","Duplicate even-indexed double-precision (64-bit) …","Duplicate odd-indexed single-precision (32-bit) …","Duplicate even-indexed single-precision (32-bit) …","Multiply the low signed 32-bit integers from each packed …","Multiply the low unsigned 32-bit integers from each packed …","Multiply packed double-precision (64-bit) floating-point …","Multiply packed single-precision (32-bit) floating-point …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Multiply the packed signed 16-bit integers in a and b, …","Multiply the packed unsigned 16-bit integers in a and b, …","Multiply packed signed 16-bit integers in a and b, …","Multiply the packed 16-bit integers in a and b, producing …","Multiply the packed 32-bit integers in a and b, producing …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Convert packed signed 16-bit integers from a and b to …","Convert packed signed 32-bit integers from a and b to …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of packed …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcast the low packed 16-bit integer from a to all …","Broadcast 32-bit integer a to all elements of dst using …","Broadcast 64-bit integer a to all elements of dst using …","Broadcast 8-bit integer a to all elements of dst using …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffle 32-bit integers in a within 128-bit lanes using …","Shuffle packed 8-bit integers in a according to shuffle …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in the high 64 bits of 128-bit …","Shuffle 16-bit integers in the low 64 bits of 128-bit …","Shift packed 16-bit integers in a left by count while …","Shift packed 32-bit integers in a left by count while …","Shift packed 64-bit integers in a left by count while …","Shift packed 16-bit integers in a left by imm8 while …","Shift packed 32-bit integers in a left by imm8 while …","Shift packed 64-bit integers in a left by imm8 while …","Shift packed 16-bit integers in a left by the amount …","Shift packed 32-bit integers in a left by the amount …","Shift packed 64-bit integers in a left by the amount …","Compute the square root of packed double-precision …","Compute the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shift packed 16-bit integers in a right by count while …","Shift packed 32-bit integers in a right by count while …","Shift packed 64-bit integers in a right by count while …","Shift packed 16-bit integers in a right by imm8 while …","Shift packed 32-bit integers in a right by imm8 while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shift packed 32-bit integers in a right by the amount …","Shift packed 64-bit integers in a right by the amount …","Subtract packed 16-bit integers in b from packed 16-bit …","Subtract packed 32-bit integers in b from packed 32-bit …","Subtract packed 64-bit integers in b from packed 64-bit …","Subtract packed 8-bit integers in b from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtract packed single-precision (32-bit) floating-point …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Subtract packed signed 16-bit integers in b from packed …","Subtract packed signed 8-bit integers in b from packed …","Subtract packed unsigned 16-bit integers in b from packed …","Subtract packed unsigned 8-bit integers in b from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Unpack and interleave 16-bit integers from the high half …","Unpack and interleave 32-bit integers from the high half …","Unpack and interleave 64-bit integers from the high half …","Unpack and interleave 8-bit integers from the high half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Unpack and interleave 16-bit integers from the low half of …","Unpack and interleave 32-bit integers from the low half of …","Unpack and interleave 64-bit integers from the low half of …","Unpack and interleave 8-bit integers from the low half of …","Unpack and interleave double-precision (64-bit) …","Unpack and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compare packed signed 64-bit integers in a and b, and …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Returns a new vector with the maximum values from …","Compares packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the first single-precision (32-bit) …","Performs a serializing operation on all load-from-memory …","Compares packed 16-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 32-bit integers in <code>a</code> and <code>b</code>, and returns …","Compares packed 8-bit integers in <code>a</code> and <code>b</code> and returns …","Compares packed unsigned 16-bit integers in <code>a</code> and <code>b</code>, and …","Compares packed unsigned 32-bit integers in <code>a</code> and <code>b</code>, and …","Compare packed unsigned 64-bit integers in a and b, and …","Compares packed unsigned 8-bit integers in <code>a</code> and <code>b</code>, and …","Returns a new vector with the minimum values from …","Compares packed single-precision (32-bit) floating-point …","Compare the lower double-precision (64-bit) floating-point …","Compare the lower single-precision (32-bit) floating-point …","Returns a new vector with the low element of <code>a</code> replaced by …","Compares the first single-precision (32-bit) …","Finds the minimum unsigned 16-bit element in the 128-bit __…","Returns a vector where the low element is extracted from <code>a</code> …","Constructs a 128-bit floating-point vector of <code>[2 x double]</code>…","Returns a <code>__m128</code> with the first component from <code>b</code> and the …","Duplicate the low double-precision (64-bit) floating-point …","Duplicate odd-indexed single-precision (32-bit) …","Combine higher half of <code>a</code> and <code>b</code>. The higher half of <code>b</code> …","Duplicate even-indexed single-precision (32-bit) …","Combine lower half of <code>a</code> and <code>b</code>. The lower half of <code>b</code> …","Returns a mask of the most significant bit of each element …","Returns a mask of the most significant bit of each element …","Returns a mask of the most significant bit of each element …","Set each bit of mask register k based on the most …","Set each bit of mask register k based on the most …","Set each packed 16-bit integer in dst to all ones or all …","Set each packed 8-bit integer in dst to all ones or all …","Subtracts 8-bit unsigned integer values and computes the …","Multiplies the low 32-bit integers from each packed 64-bit …","Multiplies the low unsigned 32-bit integers from each …","Multiplies packed double-precision (64-bit) floating-point …","Multiplies __m128 vectors.","Multiply the lower double-precision (64-bit) …","Multiply the lower single-precision (32-bit) …","Returns a new vector with the low element of <code>a</code> replaced by …","Multiplies the first component of <code>a</code> and <code>b</code>, the other …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies the packed unsigned 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies packed 16-bit signed integer values, truncate …","Multiplies the packed 16-bit integers in <code>a</code> and <code>b</code>.","Multiplies the packed 32-bit integers in <code>a</code> and <code>b</code>, …","For each 64-bit element in b, select 8 unaligned bytes …","Compute the bitwise OR of packed 32-bit integers in a and …","Compute the bitwise OR of packed 64-bit integers in a and …","Computes the bitwise OR of <code>a</code> and <code>b</code>.","Bitwise OR of packed single-precision (32-bit) …","Computes the bitwise OR of 128 bits (representing integer …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 16-bit integers from <code>a</code> and <code>b</code> to packed …","Converts packed 32-bit integers from <code>a</code> and <code>b</code> to packed …","Provides a hint to the processor that the code sequence is …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffles double-precision (64-bit) floating-point elements …","Shuffles single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a and b across lanes using the …","Shuffle 32-bit integers in a and b across lanes using the …","Shuffle 64-bit integers in a and b across lanes using the …","Shuffle 8-bit integers in a and b across lanes using the …","Shuffle double-precision (64-bit) floating-point elements …","Shuffle single-precision (32-bit) floating-point elements …","Shuffle 16-bit integers in a across lanes using the …","Shuffle 8-bit integers in a across lanes using the …","For each packed 16-bit integer maps the value to the …","For each packed 32-bit integer maps the value to the …","For each packed 64-bit integer maps the value to the …","For each packed 8-bit integer maps the value to the number …","Fetch the cache line that contains address <code>p</code> using the …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of packed …","Compute the approximate reciprocal of the lower …","Compute the approximate reciprocal of the lower …","Returns the approximate reciprocal of packed …","Returns the approximate reciprocal of the first …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Rotate the bits in each packed 32-bit integer in a to the …","Rotate the bits in each packed 64-bit integer in a to the …","Round the packed double-precision (64-bit) floating-point …","Round the packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round packed double-precision (64-bit) floating-point …","Round packed single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Round the lower double-precision (64-bit) floating-point …","Round the lower single-precision (32-bit) floating-point …","Compute the approximate reciprocal square root of the …","Compute the approximate reciprocal square root of the …","Returns the approximate reciprocal square root of packed …","Returns the approximate reciprocal square root of the …","Sum the absolute differences of packed unsigned 8-bit …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Scale the packed double-precision (64-bit) floating-point …","Scale the packed single-precision (32-bit) floating-point …","Broadcasts 16-bit integer <code>a</code> to all elements.","Broadcasts 32-bit integer <code>a</code> to all elements.","Broadcasts 64-bit integer <code>a</code> to all elements.","Broadcasts 8-bit integer <code>a</code> to all elements.","Broadcasts double-precision (64-bit) floating-point value …","Construct a <code>__m128</code> with all element set to <code>a</code>.","Sets packed 16-bit integers with the supplied values.","Sets packed 32-bit integers with the supplied values.","Sets packed 64-bit integers with the supplied values, from …","Sets packed 8-bit integers with the supplied values.","Sets packed double-precision (64-bit) floating-point …","Broadcasts double-precision (64-bit) floating-point value …","Construct a <code>__m128</code> from four floating point values highest …","Alias for <code>_mm_set1_ps</code>","Copies double-precision (64-bit) floating-point element <code>a</code> …","Construct a <code>__m128</code> with the lowest element set to <code>a</code> and …","Sets the MXCSR register with the 32-bit unsigned integer …","Sets packed 16-bit integers with the supplied values in …","Sets packed 32-bit integers with the supplied values in …","Sets packed 8-bit integers with the supplied values in …","Sets packed double-precision (64-bit) floating-point …","Construct a <code>__m128</code> from four floating point values lowest …","Returns packed double-precision (64-bit) floating-point …","Construct a <code>__m128</code> with all elements initialized to zero.","Returns a vector with all elements set to zero.","Performs a serializing operation on all store-to-memory …","Performs an intermediate calculation for the next four …","Performs the final calculation for the next four SHA1 …","Calculate SHA1 state variable E after four rounds of …","Performs four rounds of SHA1 operation using an initial …","Performs an intermediate calculation for the next four …","Performs the final calculation for the next four SHA256 …","Performs 2 rounds of SHA256 operation using an initial …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in a and b producing an …","Concatenate packed 32-bit integers in a and b producing an …","Concatenate packed 64-bit integers in a and b producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Concatenate packed 16-bit integers in b and a producing an …","Concatenate packed 32-bit integers in b and a producing an …","Concatenate packed 64-bit integers in b and a producing an …","Shuffles 32-bit integers in <code>a</code> using the control in <code>IMM8</code>.","Shuffles bytes from <code>a</code> according to the content of <code>b</code>.","Constructs a 128-bit floating-point vector of <code>[2 x double]</code> …","Shuffles packed single-precision (32-bit) floating-point …","Shuffles 16-bit integers in the high 64 bits of <code>a</code> using …","Shuffles 16-bit integers in the low 64 bits of <code>a</code> using the …","Negates packed 16-bit integers in <code>a</code> when the corresponding …","Negates packed 32-bit integers in <code>a</code> when the corresponding …","Negates packed 8-bit integers in <code>a</code> when the corresponding …","Shifts packed 16-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> left by <code>IMM8</code> while …","Shifts <code>a</code> left by <code>IMM8</code> bytes while shifting in zeros.","Shift packed 16-bit integers in a left by the amount …","Shifts packed 32-bit integers in <code>a</code> left by the amount …","Shifts packed 64-bit integers in <code>a</code> left by the amount …","Returns a new vector with the square root of each of the …","Returns the square root of packed single-precision …","Compute the square root of the lower double-precision …","Compute the square root of the lower single-precision …","Returns a new vector with the low element of <code>a</code> replaced by …","Returns the square root of the first single-precision …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shift packed 64-bit integers in a right by count while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shift packed 64-bit integers in a right by imm8 while …","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shift packed 64-bit integers in a right by the amount …","Shifts packed 16-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>count</code> while …","Shifts packed 16-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 32-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts packed 64-bit integers in <code>a</code> right by <code>IMM8</code> while …","Shifts <code>a</code> right by <code>IMM8</code> bytes while shifting in zeros.","Shift packed 16-bit integers in a right by the amount …","Shifts packed 32-bit integers in <code>a</code> right by the amount …","Shifts packed 64-bit integers in <code>a</code> right by the amount …","Stores the lower double-precision (64-bit) floating-point …","Stores the lowest 32 bit float of <code>a</code> repeated four times …","Store 128-bits (composed of 4 packed 32-bit integers) from …","Store 128-bits (composed of 2 packed 64-bit integers) from …","Stores 128-bits (composed of 2 packed double-precision …","Stores the lower double-precision (64-bit) floating-point …","Stores four 32-bit floats into <em>aligned</em> memory.","Alias for <code>_mm_store1_ps</code>","Stores the lower 64 bits of a 128-bit vector of …","Stores 128-bits of integer data from <code>a</code> into memory.","Stores the lowest 32 bit float of <code>a</code> into memory.","Stores the upper 64 bits of a 128-bit vector of …","Stores the lower 64-bit integer <code>a</code> to a memory location.","Stores the lower 64 bits of a 128-bit vector of …","Stores 2 double-precision (64-bit) floating-point elements …","Stores four 32-bit floats into <em>aligned</em> memory in reverse …","Store 128-bits (composed of 8 packed 16-bit integers) from …","Store 128-bits (composed of 4 packed 32-bit integers) from …","Store 128-bits (composed of 2 packed 64-bit integers) from …","Store 128-bits (composed of 16 packed 8-bit integers) from …","Stores 128-bits (composed of 2 packed double-precision …","Stores four 32-bit floats into memory. There are no …","Stores 128-bits of integer data from <code>a</code> into memory.","Stores a 128-bit floating point vector of <code>[2 x double]</code> to …","Stores <code>a</code> into the memory at <code>mem_addr</code> using a non-temporal …","Non-temporal store of <code>a.0</code> into <code>p</code>.","Stores a 128-bit integer vector to a 128-bit aligned …","Stores a 32-bit integer value in the specified memory …","Stores a 64-bit integer value in the specified memory …","Non-temporal store of <code>a.0</code> into <code>p</code>.","Subtracts packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 32-bit integers in <code>b</code> from packed 32-bit …","Subtract packed 64-bit integers in <code>b</code> from packed 64-bit …","Subtracts packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed double-precision (64-bit) floating-point …","Subtracts __m128 vectors.","Subtract the lower double-precision (64-bit) …","Subtract the lower single-precision (32-bit) …","Returns a new vector with the low element of <code>a</code> replaced by …","Subtracts the first component of <code>b</code> from <code>a</code>, the other …","Subtract packed 16-bit integers in <code>b</code> from packed 16-bit …","Subtract packed 8-bit integers in <code>b</code> from packed 8-bit …","Subtract packed unsigned 16-bit integers in <code>b</code> from packed …","Subtract packed unsigned 8-bit integers in <code>b</code> from packed …","Bitwise ternary logic that provides the capability to …","Bitwise ternary logic that provides the capability to …","Tests whether the specified bits in <code>a</code> 128-bit integer …","Tests whether the specified bits in a 128-bit integer …","Compute the bitwise AND of packed 16-bit integers in a and …","Compute the bitwise AND of packed 32-bit integers in a and …","Compute the bitwise AND of packed 64-bit integers in a and …","Compute the bitwise AND of packed 8-bit integers in a and …","Tests whether the specified bits in a 128-bit integer …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Compute the bitwise NAND of packed 16-bit integers in a …","Compute the bitwise NAND of packed 32-bit integers in a …","Compute the bitwise NAND of packed 64-bit integers in a …","Compute the bitwise NAND of packed 8-bit integers in a and …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Computes the bitwise AND of 128 bits (representing …","Computes the bitwise AND of 128 bits (representing …","Tests whether the specified bits in a 128-bit integer …","Counts the number of trailing least significant zero bits.","Counts the number of trailing least significant zero bits.","Compares the lower element of <code>a</code> and <code>b</code> for equality.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for greater-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for …","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for less-than.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Compares the lower element of <code>a</code> and <code>b</code> for not-equal.","Compares two 32-bit floats from the low-order bits of <code>a</code> …","Returns vector of type __m128d with indeterminate elements.","Returns vector of type __m128 with indeterminate elements. …","Returns vector of type __m128i with indeterminate elements.","Unpacks and interleave 16-bit integers from the high half …","Unpacks and interleave 32-bit integers from the high half …","Unpacks and interleave 64-bit integers from the high half …","Unpacks and interleave 8-bit integers from the high half …","The resulting <code>__m128d</code> element is composed by the low-order …","Unpacks and interleave single-precision (32-bit) …","Unpacks and interleave 16-bit integers from the low half …","Unpacks and interleave 32-bit integers from the low half …","Unpacks and interleave 64-bit integers from the low half …","Unpacks and interleave 8-bit integers from the low half of …","The resulting <code>__m128d</code> element is composed by the …","Unpacks and interleave single-precision (32-bit) …","Compute the bitwise XOR of packed 32-bit integers in a and …","Compute the bitwise XOR of packed 64-bit integers in a and …","Computes the bitwise XOR of <code>a</code> and <code>b</code>.","Bitwise exclusive OR of packed single-precision (32-bit) …","Computes the bitwise XOR of 128 bits (representing integer …","Unsigned multiply without affecting flags.","Unsigned multiply without affecting flags.","Scatter contiguous low order bits of <code>a</code> to the result at …","Scatter contiguous low order bits of <code>a</code> to the result at …","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …","Gathers the bits of <code>x</code> specified by the <code>mask</code> into the …","Counts the bits that are set.","Counts the bits that are set.","Read a hardware generated 16-bit random value and store …","Read a hardware generated 32-bit random value and store …","Read a hardware generated 64-bit random value and store …","Read a 16-bit NIST SP800-90B and SP800-90C compliant …","Read a 32-bit NIST SP800-90B and SP800-90C compliant …","Read a 64-bit NIST SP800-90B and SP800-90C compliant …","Reads the current value of the processor’s time-stamp …","Store 32-bit mask from a into memory.","Store 64-bit mask from a into memory.","Adds unsigned 32-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Adds unsigned 64-bit integers <code>a</code> and <code>b</code> with unsigned 8-bit …","Clears all bits below the least significant zero of <code>x</code> and …","Clears all bits below the least significant zero of <code>x</code> and …","Counts the number of trailing least significant zero bits.","Counts the number of trailing least significant zero bits.","Sets all bits below the least significant one of <code>x</code> and …","Sets all bits below the least significant one of <code>x</code> and …","Forces a restricted transactional memory (RTM) region to …","Retrieves the parameter passed to <code>_xabort</code> when <code>_xbegin</code>’s …","Specifies the start of a restricted transactional memory …","Specifies the end of a restricted transactional memory …","Reads the contents of the extended control register <code>XCR</code> …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial restore of the enabled …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Performs a full or partial save of the enabled processor …","Copies 64-bits from <code>val</code> to the extended control register (…","Queries whether the processor is executing in a …","Compares and exchange 16 bytes (128 bits) of data …","EAX register.","EBX register.","ECX register.","EDX register.","Does the host support the <code>cpuid</code> instruction?","A by-value array iterator.","The error type returned when a conversion from a slice to …","","","Returns a mutable slice of all elements that have not been …","Returns an immutable slice of all elements that have not …","","","","","","","","","","Creates an iterator over <code>T</code> which returns no elements.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates an array of type [T; N], where each element <code>T</code> is …","Converts a mutable reference to <code>T</code> into a mutable reference …","Converts a reference to <code>T</code> into a reference to an array of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new iterator over the given <code>array</code>.","Creates an iterator over the elements in a …","","","","","","","Creates an array <code>[T; N]</code> where each fallible array element <code>T</code>…","","","","","U+0006","U+0026","U+0027","U+002A","U+0008","U+0007","U+0018","U+0041","U+0042","U+0043","U+0044","U+0045","U+0046","U+0047","U+0048","U+0049","U+004A","U+004B","U+004C","U+004D","U+004E","U+004F","U+0050","U+0051","U+0052","U+0053","U+0054","U+0055","U+0056","U+0057","U+0058","U+0059","U+005A","U+000D","One of the 128 Unicode characters from U+0000 through …","U+0009","U+005E","U+003A","U+002C","U+0040","U+0010","U+007F","U+0014","U+0011","U+0013","U+0012","U+0030","U+0031","U+0032","U+0033","U+0034","U+0035","U+0036","U+0037","U+0038","U+0039","U+0024","U+0019","U+0003","U+0004","U+0017","U+0005","U+003D","U+001B","An iterator over the escaped version of a byte.","U+0021","U+000C","U+002E","U+0060","U+003E","U+002D","U+001C","U+001F","U+001D","U+001E","U+007B","U+0028","U+005B","U+003C","U+000A","U+000B","U+005F","U+0015","U+0000","U+0023","U+0025","U+002B","U+003F","U+0022","U+005C","U+007D","U+0029","U+005D","U+003B","U+000F","U+000E","U+0061","U+0062","U+0063","U+0064","U+0065","U+0066","U+0067","U+0068","U+0069","U+006A","U+006B","U+006C","U+006D","U+006E","U+006F","U+0070","U+0071","U+0072","U+0073","U+0074","U+0075","U+0076","U+0077","U+0078","U+0079","U+007A","U+002F","U+0020","U+0001","U+0002","U+001A","U+0016","U+007E","U+007C","","","Views this ASCII character as a one-code-unit UTF-8 <code>str</code>.","","","","","","","","","","","When passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …","When passed the <em>number</em> <code>0</code>, <code>1</code>, …, <code>9</code>, returns the <em>character</em> …","","Returns an iterator that produces an escaped version of a …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates an ascii character from the byte <code>b</code>, or returns <code>None</code>…","Creates an ASCII character from the byte <code>b</code>, without …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Gets this ASCII character as a <code>char</code> Unicode Scalar Value.","Gets this ASCII character as a byte.","","","","","","","Asserts that an expression matches any of the given …","Asserts that an expression matches any of the given …","A trait for dealing with asynchronous iterators.","An async iterator that was created from iterator.","The type of items yielded by the async iterator.","","","","","Returns the argument unchanged.","Converts an iterator into an async iterator.","Calls <code>U::from(self)</code>.","Attempt to pull out the next value of this async iterator, …","","Returns the bounds on the remaining length of the async …","Returns the bounds on the remaining length of the async …","","","","","A trait for borrowing data.","A trait for mutably borrowing data.","Immutably borrows from an owned value.","Mutably borrows from an owned value.","An error returned by <code>RefCell::try_borrow</code>.","An error returned by <code>RefCell::try_borrow_mut</code>.","A mutable memory location.","A value which is initialized on the first access.","A cell which can be written to only once.","Wraps a borrowed reference to a value in a <code>RefCell</code> box. A …","A mutable memory location with dynamically checked borrow …","A wrapper type for a mutably borrowed value from a …","<code>UnsafeCell</code>, but <code>Sync</code>.","The core primitive for interior mutability in Rust.","Returns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>","Returns a raw pointer to the underlying data in this cell.","Returns a raw pointer to the underlying data in this cell.","Returns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>","","","","Immutably borrows the wrapped value.","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","Panics","Copies a <code>Ref</code>.","Panics","","Panics","Creates a new lazy value using <code>Default</code> as the initializing …","","Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.","Creates an <code>SyncUnsafeCell</code>, with the <code>Default</code> value for T.","","","","","","","","","Panics","Makes a new <code>Ref</code> for an optional component of the borrowed …","Makes a new <code>RefMut</code> for an optional component of the …","","","","","","","","","","","","","","","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new <code>OnceCell&lt;T&gt;</code> which already contains the given …","","Creates a new <code>Cell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","","Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.","","Returns the argument unchanged.","","Creates a new <code>SyncUnsafeCell&lt;T&gt;</code> containing the given value.","Returns the argument unchanged.","Returns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>","Converts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.","","Panics","Gets the reference to the underlying value.","Returns a copy of the contained value.","Gets a mutable pointer to the wrapped value.","Gets a mutable pointer to the wrapped value.","Gets the mutable reference to the underlying value.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","Panics","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>LazyCell</code> returning the stored value.","Consumes the cell, returning the wrapped value.","Unwraps the value, consuming the cell.","Consumes the <code>RefCell</code>, returning the wrapped value.","Unwraps the value, consuming the cell.","Unwraps the value, consuming the cell.","","Panics","Convert into a reference to the underlying data.","Convert into a mutable reference to the underlying data.","","Panics","Makes a new <code>Ref</code> for a component of the borrowed data.","Makes a new <code>RefMut</code> for a component of the borrowed data, …","Splits a <code>Ref</code> into multiple <code>Ref</code>s for different components …","Splits a <code>RefMut</code> into multiple <code>RefMut</code>s for different …","Creates a new lazy value with the given initializing …","Creates a new empty cell.","Creates a new <code>Cell</code> containing the given value.","Creates a new <code>RefCell</code> containing <code>value</code>.","Constructs a new instance of <code>UnsafeCell</code> which will wrap …","Constructs a new instance of <code>SyncUnsafeCell</code> which will …","","Panics","Gets a mutable pointer to the wrapped value. The …","Gets a mutable pointer to the wrapped value.","Replaces the contained value with <code>val</code>, and returns the old …","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>, …","Sets the contents of the cell to <code>value</code>.","Sets the contained value.","Swaps the values of two <code>Cell</code>s. Difference with …","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Takes the value out of this <code>OnceCell</code>, moving it back to an …","Takes the value of the cell, leaving <code>Default::default()</code> in …","Takes the wrapped value, leaving <code>Default::default()</code> in its …","Immutably borrows the wrapped value, returning an error if …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo the effect of leaked guards on the borrow state of …","Updates the contained value using a function and returns …","The error type returned when a conversion from <code>u32</code> to <code>char</code> …","An iterator that decodes UTF-16 encoded code points from …","An error that can be returned when decoding UTF-16 code …","An iterator that yields the literal escape code of a <code>char</code>.","An iterator that yields the literal escape code of a <code>char</code>.","Returns an iterator that yields the hexadecimal Unicode …","The highest valid code point a <code>char</code> can have, <code>&#39;\\\\u{10FFFF}&#39;</code>…","An error which can be returned when parsing a char.","<code>U+FFFD REPLACEMENT CHARACTER</code> (�) is used in Unicode to …","Returns an iterator that yields the lowercase equivalent …","Returns an iterator that yields the uppercase equivalent …","The error type returned when a checked char conversion …","The version of Unicode that the Unicode parts of <code>char</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator over the UTF-16 encoded code points in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a digit in the given radix to a <code>char</code>. Use …","Converts a <code>u32</code> to a <code>char</code>. Use <code>char::from_u32</code> instead.","Converts a <code>u32</code> to a <code>char</code>, ignoring validity. Use …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the unpaired surrogate which caused this error.","A common trait for the ability to explicitly duplicate an …","Derive macro generating an impl of the trait <code>Clone</code>.","Returns a copy of the value.","Performs copy-assignment from <code>source</code>.","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","An ordering where a compared value is equal to another.","An ordering where a compared value is greater than another.","An ordering where a compared value is less than another.","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>. The …","An <code>Ordering</code> is the result of a comparison between two …","Trait for equality comparisons.","Derive macro generating an impl of the trait <code>PartialEq</code>. …","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>. …","A helper struct for reverse ordering.","","","","","Restrict a value to a certain interval.","","","","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This method tests greater than or equal to (for <code>self</code> and …","","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","","This method tests less than (for <code>self</code> and <code>other</code>) and is …","","Compares and returns the maximum of two values.","Compares and returns the maximum of two values.","Returns the maximum of two values with respect to the …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Compares and returns the minimum of two values.","Returns the minimum of two values with respect to the …","Returns the element that gives the minimum value from the …","Compares and sorts two values, returning minimum and …","Returns minimum and maximum values with respect to the …","Returns minimum and maximum values with respect to the …","This method tests for <code>!=</code>. The default implementation is …","This method returns an ordering between <code>self</code> and <code>other</code> …","","","Reverses the <code>Ordering</code>.","Chains two orderings.","Chains the ordering with the given function.","","","","","","","Used to do a cheap mutable-to-mutable reference conversion.","Used to do a cheap reference-to-reference conversion.","The type returned in the event of a conversion error.","The type returned in the event of a conversion error.","Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such …","Used to do value-to-value conversions while consuming the …","The error type for errors that can never happen.","A value-to-value conversion that consumes the input value. …","Simple and safe type conversions that may fail in a …","An attempted conversion that consumes <code>self</code>, which may or …","Converts this type into a mutable reference of the …","Converts this type into a shared reference of the (usually …","","","","","","","","","Converts to this type from the input type.","Returns the argument unchanged.","","","","The identity function.","Converts this type into the (usually inferred) input type.","Calls <code>U::from(self)</code>.","","Performs the conversion.","","Performs the conversion.","","","A trait for giving a type a useful default value.","Derive macro generating an impl of the trait <code>Default</code>.","Returns the “default value” for a type.","<code>Error</code> is a trait representing the basic expectations for …","<code>Request</code> supports generic, type-driven access to data. It’…","An iterator over an <code>Error</code> and its sources.","","","","","","","","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some mutable reference to the inner value if it is …","Returns some reference to the inner value if it is of type …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","","Provides type based access to context intended for error …","Provide a reference. The referee type must be bounded by …","Provide a reference computed using a closure. The referee …","Provide a value or other type with only static lifetimes.","Provide a value or other type with only static lifetimes …","Request a reference of type <code>T</code> from the given <code>impl Error</code>.","Request a value of type <code>T</code> from the given <code>impl Error</code>.","The lower-level source of this error, if any.","Returns an iterator starting with the current error and …","","","","","Check if the <code>Request</code> would be satisfied if provided with a …","Check if the <code>Request</code> would be satisfied if provided with a …","Approximate number of significant digits in base 10. Use …","Machine epsilon value for <code>f32</code>. Use <code>f32::EPSILON</code> instead.","Infinity (∞). Use <code>f32::INFINITY</code> instead.","Number of significant digits in base 2. Use …","Largest finite <code>f32</code> value. Use <code>f32::MAX</code> instead.","Maximum possible power of 10 exponent. Use <code>f32::MAX_10_EXP</code> …","Maximum possible power of 2 exponent. Use <code>f32::MAX_EXP</code> …","Smallest finite <code>f32</code> value. Use <code>f32::MIN</code> instead.","Minimum possible normal power of 10 exponent. Use …","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value. Use <code>f32::MIN_POSITIVE</code> …","Not a Number (NaN). Use <code>f32::NAN</code> instead.","Negative infinity (−∞). Use <code>f32::NEG_INFINITY</code> instead.","The radix or base of the internal representation of <code>f32</code>. …","Basic mathematical constants.","Euler’s number (e)","The Euler-Mascheroni constant (γ)","1/π","1/sqrt(2)","1/sqrt(3)","1/sqrt(π)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","ln(10)","ln(2)","log10(2)","log10(e)","log2(10)","log2(e)","The golden ratio (φ)","Archimedes’ constant (π)","sqrt(2)","sqrt(3)","The full circle constant (τ)","Approximate number of significant digits in base 10. Use …","Machine epsilon value for <code>f64</code>. Use <code>f64::EPSILON</code> instead.","Infinity (∞). Use <code>f64::INFINITY</code> instead.","Number of significant digits in base 2. Use …","Largest finite <code>f64</code> value. Use <code>f64::MAX</code> instead.","Maximum possible power of 10 exponent. Use <code>f64::MAX_10_EXP</code> …","Maximum possible power of 2 exponent. Use <code>f64::MAX_EXP</code> …","Smallest finite <code>f64</code> value. Use <code>f64::MIN</code> instead.","Minimum possible normal power of 10 exponent. Use …","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f64</code> value. Use <code>f64::MIN_POSITIVE</code> …","Not a Number (NaN). Use <code>f64::NAN</code> instead.","Negative infinity (−∞). Use <code>f64::NEG_INFINITY</code> instead.","The radix or base of the internal representation of <code>f64</code>. …","Basic mathematical constants.","Euler’s number (e)","The Euler-Mascheroni constant (γ)","1/π","1/sqrt(2)","1/sqrt(3)","1/sqrt(π)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","ln(10)","ln(2)","log10(2)","log10(e)","log2(10)","log2(e)","The golden ratio (φ)","Archimedes’ constant (π)","sqrt(2)","sqrt(3)","The full circle constant (τ)","Representation of a borrowed C string.","An error indicating that no nul byte was present.","An error indicating that a nul byte was not in the …","Type alias for <code>NonZero</code> version of <code>c_char</code>","Type alias for <code>NonZero</code> version of <code>c_int</code>","Type alias for <code>NonZero</code> version of <code>c_long</code>","Type alias for <code>NonZero</code> version of <code>c_longlong</code>","Type alias for <code>NonZero</code> version of <code>c_schar</code>","Type alias for <code>NonZero</code> version of <code>c_short</code>","Type alias for <code>NonZero</code> version of <code>c_uchar</code>","Type alias for <code>NonZero</code> version of <code>c_uint</code>","Type alias for <code>NonZero</code> version of <code>c_ulong</code>","Type alias for <code>NonZero</code> version of <code>c_ulonglong</code>","Type alias for <code>NonZero</code> version of <code>c_ushort</code>","A wrapper for a <code>va_list</code>","x86_64 ABI implementation of a <code>va_list</code>.","Advance to the next arg.","Returns the inner pointer to this C string.","","Convert a <code>VaListImpl</code> into a <code>VaList</code> that is …","","","","","","","","","","","","","Equivalent to C’s <code>char</code> type.","Equivalent to C’s <code>double</code> type.","Equivalent to C’s <code>float</code> type.","Equivalent to C’s <code>signed int</code> (<code>int</code>) type.","Equivalent to C’s <code>signed long</code> (<code>long</code>) type.","Equivalent to C’s <code>signed long long</code> (<code>long long</code>) type.","Equivalent to C’s <code>ptrdiff_t</code> type, from <code>stddef.h</code> (or …","Equivalent to C’s <code>signed char</code> type.","Equivalent to C’s <code>signed short</code> (<code>short</code>) type.","Equivalent to C’s <code>size_t</code> type, from <code>stddef.h</code> (or <code>cstddef</code> …","Equivalent to C’s <code>ssize_t</code> (on POSIX) or <code>SSIZE_T</code> (on …","Equivalent to C’s <code>unsigned char</code> type.","Equivalent to C’s <code>unsigned int</code> type.","Equivalent to C’s <code>unsigned long</code> type.","Equivalent to C’s <code>unsigned long long</code> type.","Equivalent to C’s <code>unsigned short</code> type.","Equivalent to C’s <code>void</code> type when used as a pointer.","","","","","Returns the length of <code>self</code>. Like C’s <code>strlen</code>, this does …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a C string wrapper from a byte slice with any …","Creates a C string wrapper from a byte slice with exactly …","Unsafely creates a C string wrapper from a byte slice.","Wraps a raw C string with a safe C string wrapper.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.","","Converts this C string to a byte slice.","Converts this C string to a byte slice containing the …","Yields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.","","","","","","","","","","","","","","","","","Copies the <code>va_list</code> at the current location.","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","Contains the error value","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","Contains the success value","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …","","A future represents an asynchronous computation obtained …","Conversion into a <code>Future</code>.","Which kind of future are we turning this into?","The type of value produced on completion.","The output that the future will produce on completion.","Creates a future which never resolves, representing a …","A Future that wraps a function returning <code>Poll</code>.","A future that is immediately ready with a value.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a future from a value.","","","","Consumes the <code>Ready</code>, returning the wrapped value.","Polls multiple futures simultaneously, returning a tuple …","Creates a future which never resolves, representing a …","Attempt to resolve the future to a final value, registering","","","","Creates a future that wraps a function returning <code>Poll</code>.","Creates a future that is immediately ready with a value.","","","","","","","","","","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","An implementation of SipHash 2-4.","","","","","Creates a new hasher.","","","","","","","Returns the hash value for the values written so far.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","Writes some data into this <code>Hasher</code>.","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","Writes a single <code>str</code> into this hasher.","","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","An identity function that <em><strong>hints</strong></em> to the compiler to be …","An identity function that causes an <code>unused_must_use</code> …","Emits a machine instruction to signal the processor that …","Informs the compiler that the site which is calling this …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","Aborts the execution of the process.","Performs checked integer addition.","Calculates the offset from a pointer, potentially wrapping.","A guard for unsafe functions that cannot ever be executed …","A guard for <code>std::mem::uninitialized</code>. This will statically …","A guard for unsafe functions that cannot ever be executed …","Informs the optimizer that a condition is always true. If …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Bitwise and with the current value, returning the previous …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","Stores a value if the current value is the same as the <code>old</code> …","An atomic fence.","An atomic fence.","An atomic fence.","An atomic fence.","Loads the current value of the pointer.","Loads the current value of the pointer.","Loads the current value of the pointer.","","Maximum with the current value using a signed comparison.","Maximum with the current value using a signed comparison.","Maximum with the current value.","Maximum with the current value using a signed comparison.","Maximum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Minimum with the current value using a signed comparison.","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise nand with the current value, returning the …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","Bitwise or with the current value, returning the previous …","A compiler-only memory barrier.","A compiler-only memory barrier.","A compiler-only memory barrier.","A compiler-only memory barrier.","Stores the value at the specified memory location.","Stores the value at the specified memory location.","Stores the value at the specified memory location.","","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Maximum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Minimum with the current value using an unsigned …","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Stores the value at the specified memory location, …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Bitwise xor with the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Subtract from the current value, returning the previous …","Reverses the bits in an integer type <code>T</code>.","See documentation of <code>std::hint::black_box</code> for details.","Executes a breakpoint trap, for inspection by a debugger.","Reverses the bytes in an integer type <code>T</code>.","Gets a reference to a static <code>Location</code> indicating where it …","Returns the smallest integer greater than or equal to an …","Returns the smallest integer greater than or equal to an …","Lexicographically compare <code>[left, left + bytes)</code> and …","Allocates a block of memory at compile time. At runtime, …","Deallocates a memory which allocated by …","Selects which function to call depending on the context.","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies the sign from <code>y</code> to <code>x</code> for <code>f32</code> values.","Copies the sign from <code>y</code> to <code>x</code> for <code>f64</code> values.","Returns the cosine of an <code>f32</code>.","Returns the cosine of an <code>f64</code>.","Returns the number of leading unset bits (zeroes) in an …","Like <code>ctlz</code>, but extra-unsafe as it returns <code>undef</code> when given …","Returns the number of bits set in an integer type <code>T</code>","Returns the number of trailing unset bits (zeroes) in an …","Like <code>cttz</code>, but extra-unsafe as it returns <code>undef</code> when given …","Returns the value of the discriminant for the variant in …","","Performs an exact division, resulting in undefined …","Returns 2 raised to the power of an <code>f32</code>.","Returns 2 raised to the power of an <code>f64</code>.","Returns the exponential of an <code>f32</code>.","Returns the exponential of an <code>f64</code>.","Returns the absolute value of an <code>f32</code>.","Returns the absolute value of an <code>f64</code>.","Float addition that allows optimizations based on …","Float division that allows optimizations based on …","Convert with LLVM’s fptoui/fptosi, which may return …","Returns the largest integer less than or equal to an <code>f32</code>.","Returns the largest integer less than or equal to an <code>f64</code>.","Returns <code>a * b + c</code> for <code>f32</code> values.","Returns <code>a * b + c</code> for <code>f64</code> values.","Float multiplication that allows optimizations based on …","Moves a value out of scope without running drop glue.","Float remainder that allows optimizations based on …","Float subtraction that allows optimizations based on …","Hints to the compiler that branch condition is likely to …","Returns the base 10 logarithm of an <code>f32</code>.","Returns the base 10 logarithm of an <code>f64</code>.","Returns the base 2 logarithm of an <code>f32</code>.","Returns the base 2 logarithm of an <code>f64</code>.","Returns the natural logarithm of an <code>f32</code>.","Returns the natural logarithm of an <code>f64</code>.","Returns the maximum of two <code>f32</code> values.","Returns the maximum of two <code>f64</code> values.","The minimum alignment of a type.","The required alignment of the referenced value.","Returns the minimum of two <code>f32</code> values.","Returns the minimum of two <code>f64</code> values.","Rustc internal tooling for hand-writing MIR.","Performs checked integer multiplication","Returns the nearest integer to an <code>f32</code>.","Returns the nearest integer to an <code>f64</code>.","Returns <code>true</code> if the actual type given as <code>T</code> requires drop …","Emits a <code>!nontemporal</code> store according to LLVM (see their …","Calculates the offset from a pointer.","This method creates a pointer to any <code>Some</code> value. If the …","Raises an <code>f32</code> to an <code>f32</code> power.","Raises an <code>f64</code> to an <code>f64</code> power.","Raises an <code>f32</code> to an integer power.","Raises an <code>f64</code> to an integer power.","The preferred alignment of a type.","The <code>prefetch</code> intrinsic is a hint to the code generator to …","The <code>prefetch</code> intrinsic is a hint to the code generator to …","The <code>prefetch</code> intrinsic is a hint to the code generator to …","The <code>prefetch</code> intrinsic is a hint to the code generator to …","See documentation of <code>&lt;*const T&gt;::guaranteed_eq</code> for details.","Masks out bits of the pointer according to a mask.","See documentation of <code>&lt;*const T&gt;::offset_from</code> for details.","See documentation of <code>&lt;*const T&gt;::sub_ptr</code> for details.","Determines whether the raw bytes of the two values are …","This is an implementation detail of <code>crate::ptr::read</code> and …","Returns the nearest integer to an <code>f32</code>. May raise an …","Returns the nearest integer to an <code>f64</code>. May raise an …","Performs rotate left.","Performs rotate right.","Returns the nearest integer to an <code>f32</code>. Rounds half-way …","Returns the nearest integer to an <code>f64</code>. Rounds half-way …","Returns the nearest integer to an <code>f32</code>. Rounds half-way …","Returns the nearest integer to an <code>f64</code>. Rounds half-way …","Magic intrinsic that derives its meaning from attributes …","Computes <code>a + b</code>, saturating at numeric bounds.","Computes <code>a - b</code>, saturating at numeric bounds.","Returns the sine of an <code>f32</code>.","Returns the sine of an <code>f64</code>.","The size of a type in bytes.","The size of the referenced value in bytes.","Returns the square root of an <code>f32</code>","Returns the square root of an <code>f64</code>","Performs checked integer subtraction","Reinterprets the bits of a value of one type as another …","Like <code>transmute</code>, but even less checked at compile-time: …","Returns the integer part of an <code>f32</code>.","Returns the integer part of an <code>f64</code>.","Rust’s “try catch” construct which invokes the …","Gets an identifier which is globally unique to the …","Gets a static string slice containing the name of a type.","Performs a volatile load from the <code>src</code> pointer The pointer …","Performs a volatile store to the <code>dst</code> pointer. The pointer …","Returns the result of an unchecked addition, resulting in …","Performs an unchecked division, resulting in undefined …","Returns the result of an unchecked multiplication, …","Returns the remainder of an unchecked division, resulting …","Performs an unchecked left shift, resulting in undefined …","Performs an unchecked right shift, resulting in undefined …","Returns the result of an unchecked subtraction, resulting …","Hints to the compiler that branch condition is likely to …","Informs the optimizer that this point in the code is not …","Returns the number of variants of the type <code>T</code> cast to a …","Equivalent to the appropriate <code>llvm.memmove.p0i8.0i8.*</code> …","Equivalent to the appropriate <code>llvm.memcpy.p0i8.0i8.*</code> …","Performs a volatile load from the <code>src</code> pointer.","Equivalent to the appropriate <code>llvm.memset.p0i8.*</code> …","Performs a volatile store to the <code>dst</code> pointer.","<code>ptr</code> must point to a vtable. The intrinsic will return the …","<code>ptr</code> must point to a vtable. The intrinsic will return the …","Returns (a + b) mod 2N, where N is the width of T in bits.","Returns (a * b) mod 2N, where N is the width of T in bits.","Returns (a - b) mod 2N, where N is the width of T in bits.","Sets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…","This is an implementation detail of <code>crate::ptr::write</code> and …","Type representing basic blocks.","","Emits a <code>CastKind::Transmute</code> cast.","","","","Gets the discriminant of a place.","","Access the field with the given index of some place.","","","","","","","","","","","","","Adds a variant projection with the given index to the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Macro for generating custom MIR.","Helper macro that allows you to treat a value expression …","","","","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","An iterator over <code>N</code> elements of the iterator at a time.","Like <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …","An iterator that links two iterators together, in a chain.","An iterator that clones the elements of an underlying …","An iterator that copies the elements of an underlying …","An iterator that repeats endlessly.","An iterator able to yield elements from both ends.","An iterator that yields nothing.","An iterator that yields the current count and the element …","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","An iterator that filters the elements of <code>iter</code> with …","An iterator that uses <code>f</code> to both filter and map elements …","An iterator that maps each element to an iterator, and …","An iterator that flattens one level of nesting in an …","An iterator where each iteration calls the provided …","Conversion from an <code>Iterator</code>.","An iterator that yields <code>None</code> forever after the underlying …","An iterator that always continues to yield <code>None</code> when …","","An iterator that calls a function with a reference to each …","An iterator adapter that places a separator between all …","An iterator adapter that places a separator between all …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","An iterator that maps the values of <code>iter</code> with <code>f</code>.","An iterator that only accepts elements while <code>predicate</code> …","An iterator over the mapped windows of another iterator.","An iterator that yields an element exactly once.","An iterator that yields a single element of type <code>A</code> by …","An iterator with a <code>peek()</code> that returns an optional …","Trait to represent types that can be created by …","An iterator that repeats an element endlessly.","","An iterator that repeats elements of type <code>A</code> endlessly by …","A double-ended iterator with the direction inverted.","An iterator to maintain state while iterating another …","An iterator that skips over <code>n</code> elements of <code>iter</code>.","An iterator that rejects elements while <code>predicate</code> returns …","","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …","An iterator for stepping iterators by a custom amount.","A new iterator where each successive item is computed …","Trait to represent types that can be created by summing up …","An iterator that only iterates over the first <code>n</code> iterations …","An iterator that only accepts elements while <code>predicate</code> …","An iterator that reports an accurate length using …","","","A type that upholds all invariants of <code>Step</code>.","An iterator that iterates two other iterators …","","","Advances the iterator from the back by <code>n</code> elements.","Advances the iterator from the back by <code>n</code> elements.","","","","","","","","","","","Advances the iterator by <code>n</code> elements.","Advances the iterator by <code>n</code> elements.","","","","","","","","","","Tests if every element of the iterator matches a predicate.","Tests if every element of the iterator matches a predicate.","Tests if any element of the iterator matches a predicate.","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Returns an iterator over <code>N</code> elements of the iterator at a …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Borrows an iterator, rather than consuming it.","Takes two iterators and creates a new iterator over both …","Takes two iterators and creates a new iterator over both …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which <code>clone</code>s all of its elements.","Creates an iterator which <code>clone</code>s all of its elements.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Collects all the items from an iterator into a collection.","Creates an iterator which copies all of its elements.","Creates an iterator which copies all of its elements.","","","Consumes the iterator, counting the number of iterations …","Consumes the iterator, counting the number of iterations …","","","","","","","","","","Repeats an iterator endlessly.","Repeats an iterator endlessly.","Creates a <code>Flatten</code> iterator from the default value of <code>I</code>.","","Creates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.","Creates a <code>Cloned</code> iterator from the default value of <code>I</code>","Creates a <code>Copied</code> iterator from the default value of <code>I</code>","Creates an <code>Enumerate</code> iterator from the default value of <code>I</code>","Creates a <code>Fuse</code> iterator from the default value of <code>I</code>.","Creates a <code>Rev</code> iterator from the default value of <code>I</code>","Creates an iterator that yields nothing.","Creates an iterator which gives the current iteration …","Creates an iterator which gives the current iteration …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Reserves capacity in a collection for the given number of …","Creates an iterator which uses a closure to determine if …","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","Searches for an element of an iterator that satisfies a …","","","","Applies function to the elements of iterator and returns …","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","Creates an iterator that flattens nested structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds every element into an accumulator by applying an …","Folds every element into an accumulator by applying an …","","","","","","","","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","Calls a closure on each element of an iterator.","","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new iterator where each iteration calls the …","Creates a new iterator where each iteration calls the …","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","Creates an iterator which ends after the first <code>None</code>.","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Does something with each element of an iterator, passing …","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Creates a new iterator which places an item generated by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator from a value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the remaining elements of the …","Returns <code>true</code> if the iterator is empty.","Returns <code>true</code> if the iterator is empty.","","","","","","","","","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","","","Consumes the iterator, returning the last element.","Consumes the iterator, returning the last element.","","","","","","","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","","Returns the exact remaining length of the iterator.","Returns the exact remaining length of the iterator.","","","","","","","","","","","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Creates an iterator that both yields elements based on a …","Calls the given function <code>f</code> for each contiguous window of …","Calls the given function <code>f</code> for each contiguous window of …","Returns the maximum element of an iterator.","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Returns the element that gives the minimum value from the …","Determines if the elements of this <code>Iterator</code> are not equal …","Determines if the elements of this <code>Iterator</code> are not equal …","Advances the iterator and returns the next value.","","","","","","","","","","","","Overflow Behavior","","","","","","","","","","","","","","","","","","","","","","","Removes and returns an element from the end of the …","","","","","","","","","","","","","","","","","","","","","","","","Advances the iterator and returns an array containing the …","Advances the iterator and returns an array containing the …","","","","Consume and return the next value of this iterator if a …","Consume and return the next item if it is equal to <code>expected</code>…","Returns the <code>n</code>th element of the iterator.","Returns the <code>n</code>th element of the iterator.","","","","","","","","","","","","","Returns the <code>n</code>th element from the end of the iterator.","Returns the <code>n</code>th element from the end of the iterator.","","","","","","","","","","Creates an iterator that yields an element exactly once.","Creates an iterator that lazily generates a value exactly …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the <code>PartialOrd</code> elements of this …","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Reorders the elements of this iterator <em>in-place</em> according …","Returns a reference to the next() value without advancing …","Returns a mutable reference to the next() value without …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Searches for an element in an iterator, returning its …","Method which takes an iterator and generates <code>Self</code> from the …","Iterates over the entire iterator, multiplying all the …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Reduces the elements to a single one, by repeatedly …","Creates a new iterator that endlessly repeats a single …","","Creates a new iterator that repeats elements of type <code>A</code> …","Reverses an iterator’s direction.","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","Searches for an element of an iterator from the back that …","","","","","","An iterator method that reduces the iterator’s elements …","An iterator method that reduces the iterator’s elements …","","","","","","","","","","","","","","","","","Searches for an element in an iterator from the right, …","Searches for an element in an iterator from the right, …","An iterator adapter which, like <code>fold</code>, holds internal …","An iterator adapter which, like <code>fold</code>, holds internal …","","","","","","Returns the bounds on the remaining length of the iterator.","Returns the bounds on the remaining length of the iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Creates an iterator starting at the same point, but …","Returns the number of <em>successor</em> steps required to get from …","Creates a new iterator where each successive item is …","Method which takes an iterator and generates <code>Self</code> from the …","Sums the elements of an iterator.","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","Creates an iterator that yields elements based on a …","Fallibly transforms an iterator into a collection, short …","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","Applies function to the elements of iterator and returns …","","","An iterator method that applies a function as long as it …","An iterator method that applies a function as long as it …","","","","","","","","","","","","","","","","","","","","","","","An iterator method that applies a fallible function to …","An iterator method that applies a fallible function to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the elements to a single one by repeatedly …","Reduces the elements to a single one by repeatedly …","","","This is the reverse version of <code>Iterator::try_fold()</code>: it …","This is the reverse version of <code>Iterator::try_fold()</code>: it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an iterator of pairs into a pair of containers.","Converts an iterator of pairs into a pair of containers.","Converts the arguments to iterators and zips them.","‘Zips up’ two iterators into a single iterator of …","‘Zips up’ two iterators into a single iterator of …","A marker for types which can be used as types of <code>const</code> …","Derive macro generating an impl of the trait <code>ConstParamTy</code>.","Types whose values can be duplicated simply by copying …","Derive macro generating an impl of the trait <code>Copy</code>.","A marker for types that can be dropped.","The type of the discriminant, which must satisfy the trait …","Compiler-internal trait used to indicate the type of enum …","A common trait implemented by all function pointers.","Zero-sized type used to mark things that “act like” …","A marker type which does not implement <code>Unpin</code>.","A marker for pointer-like types.","Types that can be transferred across thread boundaries.","Types with a constant size known at compile time.","Required trait for constants used in pattern matches.","Required trait for constants used in pattern matches.","Types for which it is safe to share references between …","A marker for tuple types.","Types that can be safely moved after being pinned.","Types that can be “unsized” to a dynamically-sized …","Returns the address of the function pointer.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Assume only that alignment conditions are met.","What transmutation safety conditions shall the compiler …","Are values of a type transmutable into values of another …","Opaque type representing the discriminant of an enum.","Assume only that lifetime conditions are met.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Do not assume that <em>you</em> have ensured any safety properties …","Assume only that safety conditions are met.","Assume only that dynamically-satisfiable validity …","","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring …","Assume both <code>self</code> and <code>other_assumptions</code>.","Extracts the values from an array of <code>MaybeUninit</code> …","Returns the contents of this <code>MaybeUninit</code> as a slice of …","Returns the contents of this <code>MaybeUninit</code> as a mutable …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","Assume <code>self</code>, excepting <code>other_assumptions</code>.","","","","","","Bitwise-copies a value.","","","","Returns a value uniquely identifying the enum variant in <code>v</code>.","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","","","Takes ownership and “forgets” about the value <strong>without </strong>…","Like <code>forget</code>, but also accepts unsized values.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the value from the <code>ManuallyDrop</code> container.","When <code>true</code>, the compiler assume that <em>you</em> are ensuring that …","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …","Expands to the offset in bytes of a field from the …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","When <code>true</code>, the compiler assumes that <em>you</em> have ensured that …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Returns the contents of this slice of <code>MaybeUninit</code> as a …","Returns the contents of this mutable slice of <code>MaybeUninit</code> …","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …","Transposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…","","","","","","","","","","","","","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.","Create a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …","Returns the number of variants in the enum type <code>T</code>.","Sets the value of the <code>MaybeUninit&lt;T&gt;</code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …","An error which can be returned when parsing an IP address …","Admin-Local scope.","The size of an IPv4 address in bits.","The size of an IPv6 address in bits.","An IPv4 address representing the broadcast address: …","Global scope.","Interface-Local scope.","An IP address, either IPv4 or IPv6.","An IPv4 address.","An IPv6 address.","Scope of an IPv6 multicast address as defined in IETF RFC …","An IPv4 address with the address pointing to localhost: …","An IPv6 address representing localhost: <code>::1</code>.","Link-Local scope.","Organization-Local scope.","Realm-Local scope.","Site-Local scope.","An internet socket address, either IPv4 or IPv6.","An IPv4 socket address.","An IPv6 socket address.","An IPv4 address representing an unspecified address: …","An IPv6 address representing the unspecified address: <code>::</code>","An IPv4 address.","An IPv4 socket address.","An IPv6 address.","An IPv6 socket address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the flow information associated with this address.","","","","","","","","","","","","","","","","","","","","Copies this address to a new <code>IpAddr::V4</code>.","Creates an <code>IpAddr::V4</code> from a four element byte array.","Creates an <code>IpAddr::V6</code> from an eight element 16-bit array.","Returns the argument unchanged.","Copies this address to a new <code>IpAddr::V6</code>.","Creates an <code>IpAddr::V6</code> from a sixteen element byte array.","Returns the argument unchanged.","Uses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …","Creates an <code>Ipv4Addr</code> from a four element byte array.","Creates an <code>Ipv6Addr</code> from a sixteen element byte array.","Creates an <code>Ipv6Addr</code> from an eight element 16-bit array.","Returns the argument unchanged.","Uses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …","Converts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.","Converts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a host byte order <code>u32</code> into an IPv4 address.","Converts a host byte order <code>u128</code> into an IPv6 address.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the IP address associated with this socket address.","Returns the IP address associated with this socket address.","Returns the IP address associated with this socket address.","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …","Returns <code>true</code> if this is an address reserved for …","Returns <code>true</code> if this is a broadcast address (…","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this address is in a range designated for …","Returns <code>true</code> if this is an address reserved for …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if the address appears to be globally …","Returns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …","Returns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …","Returns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).","Returns <code>true</code> if this is a loopback address.","Returns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).","Returns <code>true</code> if this is the loopback address (<code>::1</code>), as …","Returns <code>true</code> if this is a multicast address.","Returns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).","Returns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).","Returns <code>true</code> if this is a private address.","Returns <code>true</code> if this address is reserved by IANA for …","Returns <code>true</code> if this address is part of the Shared Address …","Returns <code>true</code> if this is a unicast address, as defined by …","Returns <code>true</code> if the address is a globally routable unicast …","Returns <code>true</code> if the address is a unicast address with …","Returns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).","Returns <code>true</code> for the special ‘unspecified’ address.","Returns <code>true</code> for the special ‘unspecified’ address (…","Returns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…","Returns the address’s multicast scope if the address is …","Creates a new IPv4 address from four eight-bit octets.","Creates a new IPv6 address from eight 16-bit segments.","Creates a new socket address from an IP address and a port …","Creates a new socket address from an <code>IPv4</code> address and a …","Creates a new socket address from an <code>IPv6</code> address, a …","Returns the four eight-bit integers that make up this …","Returns the sixteen eight-bit integers the IPv6 address …","Parse an IP address from a slice of bytes.","Parse an IPv4 address from a slice of bytes.","Parse an IPv6 address from a slice of bytes.","Parse a socket address from a slice of bytes.","Parse an IPv4 socket address from a slice of bytes.","Parse an IPv6 socket address from a slice of bytes.","","","","","","","","","","","Returns the port number associated with this socket …","Returns the port number associated with this socket …","Returns the port number associated with this socket …","Returns the scope ID associated with this address.","Returns the eight 16-bit segments that make up this …","Changes the flow information associated with this socket …","Changes the IP address associated with this socket address.","Changes the IP address associated with this socket address.","Changes the IP address associated with this socket address.","Changes the port number associated with this socket …","Changes the port number associated with this socket …","Changes the port number associated with this socket …","Changes the scope ID associated with this socket address.","","","Converts an IPv4 address into host byte order <code>u32</code>.","Converts an IPv6 address into host byte order <code>u128</code>.","Converts this address to an <code>IpAddr::V4</code> if it is an …","Converts this address to an <code>IpAddr::V4</code> if it is an …","Converts this address to an <code>IPv4</code> address if it is either …","Converts this address to an <code>IPv4</code> address if it’s an …","Converts this address to an IPv4-compatible <code>IPv6</code> address.","Converts this address to an IPv4-mapped <code>IPv6</code> address.","","","","","","","","","","","","","","","","","","","","","","","","","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","The size of this non-zero integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Returns the size of this integer type in bits.","Value being parsed is empty.","A classification of floating point numbers.","Positive or negative infinity, which often results from …","Enum to store the various types of errors that can cause …","Contains an invalid digit in its context.","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","The largest value that can be represented by this non-zero …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","Returns the largest value that can be represented by this …","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","The smallest value that can be represented by this non-zero","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","Returns the smallest value that can be represented by this …","NaN (not a number): this value results from calculations …","Integer is too small to store in target integer type.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","An integer that is known not to equal zero.","A regular floating point number, not any of the …","An error which can be returned when parsing an integer.","Integer is too large to store in target integer type.","Provides intentionally-saturating arithmetic on <code>T</code>.","“Subnormal” or “denormal” floating point …","The error type returned when a checked integral type …","Provides intentionally-wrapped arithmetic on <code>T</code>.","Value was Zero","Positive or negative zero.","Computes the absolute value of self. See <code>i8::abs</code> for …","Computes the absolute value of self. See <code>i16::abs</code> for …","Computes the absolute value of self. See <code>i32::abs</code> for …","Computes the absolute value of self. See <code>i64::abs</code> for …","Computes the absolute value of self. See <code>i128::abs</code> for …","Computes the absolute value of self. See <code>isize::abs</code> for …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Saturating absolute value. Computes <code>self.abs()</code>, returning …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …","Computes the absolute value of <code>self</code>, wrapping around at …hecked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Checked absolute value. Checks for overflow and returns …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Adds an unsigned integer to a non-zero value. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Multiplies two non-zero integers together. Checks for …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","Raises non-zero value to an integer power. Checks for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of zeros in the binary representation …eturns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroU16</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU16</code> to <code>NonZeroU32</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroU32</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroU64</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU16</code> to <code>NonZeroU64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU32</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroU128</code> losslessly.","Converts <code>NonZeroU64</code> to <code>NonZeroU128</code> losslessly.","","Converts <code>NonZeroU8</code> to <code>NonZeroUsize</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroUsize</code> losslessly.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts <code>NonZeroI8</code> to <code>NonZeroI16</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI16</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI32</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroI8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI32</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI64</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI64</code> losslessly.","Converts <code>NonZeroI32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU32</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI64</code> to <code>NonZeroI128</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU64</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU8</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroU16</code> to <code>NonZeroI128</code> losslessly.","Converts <code>NonZeroI16</code> to <code>NonZeroIsize</code> losslessly.","Returns the argument unchanged.","Converts <code>NonZeroU8</code> to <code>NonZeroIsize</code> losslessly.","Converts <code>NonZeroI8</code> to <code>NonZeroIsize</code> losslessly.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from big endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","Converts an integer from little endian to the target’s …","","","","","","","","","","","","","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","Returns the value as a primitive type.","","","","","","","","","","","","","","","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 10 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Returns the base 2 logarithm of the number, rounded down.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == (1 &lt;&lt; k)</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Outputs the detailed cause of parsing an integer failing.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</code>.","Calculates the middle point of <code>self</code> and <code>rhs</codereates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero if the given value is not zero.","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Creates a non-zero without checking whether the value is …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","Returns the smallest power of two greater than or equal to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Computes the absolute value of self, with overflow …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","Negates self, overflowing if this is equal to the minimum …","","","","","","","","","","","","","","","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating absolute value, see <code>i8::saturating_abs</code>.","Saturating absolute value, see <code>i16::saturating_abs</code>.","Saturating absolute value, see <code>i32::saturating_abs</code>.","Saturating absolute value, see <code>i64::saturating_abs</code>.","Saturating absolute value, see <code>i128::saturating_abs</code>.","Saturating absolute value, see <code>isize::saturating_abs</code>.","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Adds an unsigned integer to a non-zero value. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Multiplies two non-zero integers together. Return …","Saturating negation. Computes <code>-self</code>, returning …","Saturating negation. Computes <code>-self</code>, returning …","Saturating negation. Computes <code>-self</code>, returning …","Saturating negation. Computes <code>-self</code>, returning …","Saturating negation. Computes <code>-self</code>, returning …","Saturating negation. Computes <code>-self</code>, returning …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","Raise non-zero value to an integer power. Return …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</code>.","Returns a number representing sign of <code>self</codeeverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to big endian from the target’s endianness.","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Converts <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","","","","","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU8</code>.","Attempts to convert <code>u8</code> to <code>NonZeroU8</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>u16</code> to <code>NonZeroU16</code>.","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU32</code>.","Attempts to convert <code>u32</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU32</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU32</code>.","","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU64</code>.","Attempts to convert <code>u64</code> to <code>NonZeroU64</code>.","","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroU64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>u128</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroU128</code>.","","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroU128</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI8</code> to <code>NonZeroUsize</code>.","","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>usize</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroUsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI8</code>.","","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>i8</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroI16</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroU8</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI8</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>i16</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI16</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI16</code>.","","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroI16</code>.","","Attempts to convert <code>i32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI32</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI64</code>.","","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>i64</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI64</code>.","Attempts to convert <code>NonZeroIsize</code> to <code>NonZeroI128</code>.","","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>i128</code> to <code>NonZeroI128</code>.","Attempts to convert <code>NonZeroU64</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>isize</code> to <code>NonZeroIsize</code>.","","Attempts to convert <code>NonZeroU16</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI32</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU128</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroU32</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroUsize</code> to <code>NonZeroIsize</code>.","Attempts to convert <code>NonZeroI64</code> to <code>NonZeroIsize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Adds an unsigned integer to a non-zero value, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Multiplies two non-zero integers together, assuming …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Computes the absolute value of self without any wrapping …","Wrapping absolute value, see <code>i8::wrapping_abs</code>.","Wrapping absolute value, see <code>i16::wrapping_abs</code>.","Wrapping absolute value, see <code>i32::wrapping_abs</code>.","Wrapping absolute value, see <code>i64::wrapping_abs</code>.","Wrapping absolute value, see <code>i128::wrapping_abs</code>.","Wrapping absolute value, see <code>isize::wrapping_abs</code>.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","The unary logical negation operator <code>!</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","The “return” type of this meta-function.","An infinite endpoint. Indicates that there is no bound in …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","","","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Performs the <code>&amp;</code> operation.","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Performs the <code>|=</code> operation.","Performs the <code>^</code> operation.","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","","","","","Dereferences the value.","Mutably dereferences the value.","Performs the <code>/</code> operation.","Performs the <code>/=</code> operation.","Executes the destructor for this type.","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs the type from its <code>Output</code> type.","","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","","","","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","","","","","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","","","","","Performs the <code>*</code> operation.","Performs the <code>*=</code> operation.","Performs the unary <code>-</code> operation.","Creates a new inclusive range. Equivalent to writing …","","","","","","Performs the unary <code>!</code> operation.","","","","","","","Performs the <code>%</code> operation.","Performs the <code>%=</code> operation.","Resumes the execution of this generator.","","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","","","","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","","","","","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the value in <code>Some</code> variant of an <code>Option</code>.","An iterator over a reference to the <code>Some</code> variant of an …","An iterator over a mutable reference to the <code>Some</code> variant …","No value.","The <code>Option</code> type. See the module level documentation for …","Some value of type <code>T</code>.","Returns <code>None</code> if the option is <code>None</code>, otherwise returns <code>optb</code>.","Returns <code>None</code> if the option is <code>None</code>, otherwise calls <code>f</code> with …","Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;Option&lt;T&gt;</code>) to …","Converts from <code>Option&lt;T&gt;</code> (or <code>&amp;mut Option&lt;T&gt;</code>) to …","Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>.","Returns a mutable slice of the contained value, if any. If …","Converts from Pin&lt;&amp;mut Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;mut T&gt;&gt;.","Converts from Pin&lt;&amp;Option&lt;T&gt;&gt; to Option&lt;Pin&lt;&amp;T&gt;&gt;.","Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","Returns a slice of the contained value, if any. If this is …","","","","","","","","","","","","","","Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the contents …","Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by cloning the …","","Maps an <code>Option&lt;&amp;mut T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the …","Maps an <code>Option&lt;&amp;T&gt;</code> to an <code>Option&lt;T&gt;</code> by copying the contents …","Returns <code>None</code>.","","Returns the contained <code>Some</code> value, consuming the <code>self</code> value.","Returns <code>None</code> if the option is <code>None</code>, otherwise calls …","Converts from <code>Option&lt;Option&lt;T&gt;&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","Returns the argument unchanged.","Converts from <code>&amp;mut Option&lt;T&gt;</code> to <code>Option&lt;&amp;mut T&gt;</code>","Converts from <code>&amp;Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.","Moves <code>val</code> into a new <code>Some</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is <code>None</code>, no …","","","","Inserts <code>value</code> into the option if it is <code>None</code>, then returns …","Inserts the default value into the option if it is <code>None</code>, …","Inserts a value computed from <code>f</code> into the option if it is …","","Inserts <code>value</code> into the option, then returns a mutable …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a consuming iterator over the possibly contained …","","","","","","Returns <code>true</code> if the option is a <code>None</code> value.","Returns <code>true</code> if the option is a <code>Some</code> value.","Returns <code>true</code> if the option is a <code>Some</code> and the value inside …","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps an <code>Option&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function to a …","Returns the provided default result (if none), or applies …","Computes a default function result (if none), or applies a …","","","","","","","Transforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …","Transforms the <code>Option&lt;T&gt;</code> into a <code>Result&lt;T, E&gt;</code>, mapping …","Returns the option if it contains a value, otherwise …","Returns the option if it contains a value, otherwise calls …","","Takes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …","Replaces the actual value in the option by the value given …","","","","Takes each element in the <code>Iterator</code>: if it is a <code>None</code>, no …","Takes the value out of the option, leaving a <code>None</code> in its …","Takes the value out of the option, but only if the …","Transposes an <code>Option</code> of a <code>Result</code> into a <code>Result</code> of an <code>Option</code>…","","","","","","","","","","","","","Returns the contained <code>Some</code> value, consuming the <code>self</code> value.","Returns the contained <code>Some</code> value or a provided default.","Returns the contained <code>Some</code> value or a default.","Returns the contained <code>Some</code> value or computes it from a …","Returns the contained <code>Some</code> value, consuming the <code>self</code> value,","Unzips an option containing a tuple of two options.","Returns <code>Some</code> if exactly one of <code>self</code>, <code>optb</code> is <code>Some</code>, …","Zips <code>self</code> with another <code>Option</code>.","Zips <code>self</code> and another <code>Option</code> with function <code>f</code>.","A simple wrapper around a type to assert that it is unwind …","A struct containing information about the location of a …","A struct providing information about a panic.","A marker trait representing types where a shared reference …","A marker trait which represents “panic safe” types in …","","","","","","","","Returns the source location of the caller of this …","Returns whether the panic handler is allowed to unwind the …","","","Returns the column from which the panic originated.","","","","","Returns the name of the source file from which the panic …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the line number from which the panic originated.","Returns information about the location from which the …","If the <code>panic!</code> macro from the <code>core</code> crate (not from <code>std</code>) was …","","Returns the payload associated with the panic.","","","","","","","","","","","","","This function is used instead of panic_fmt in const eval.","The underlying implementation of core’s <code>panic!</code> macro …","","The entry point for panicking with a formatted message.","Like <code>panic</code>, but without unwinding and track_caller to …","Like <code>panic_fmt</code>, but for non-unwinding panics.","Like <code>panic_nounwind</code>, but also inhibits showing a backtrace.","","","A pinned pointer.","Gets a pinned mutable reference from this nested pinned …","Gets a pinned mutable reference from this pinned pointer.","Gets a pinned shared reference from this pinned pointer.","","","","","","","","","","","Returns the argument unchanged.","","Gets a mutable reference to the data inside of this <code>Pin</code>.","Gets a shared reference out of a pin.","Gets a mutable reference to the data inside of this <code>Pin</code>.","","","Calls <code>U::from(self)</code>.","","Unwraps this <code>Pin&lt;P&gt;</code> returning the underlying pointer.","Unwraps this <code>Pin&lt;P&gt;</code> returning the underlying pointer.","Converts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same …","","","Constructs a new pin by mapping the interior value.","Construct a new pin by mapping the interior value.","","Construct a new <code>Pin&lt;P&gt;</code> around a pointer to some data of a …","Construct a new <code>Pin&lt;P&gt;</code> around a reference to some data of …","","Constructs a Pin&lt;&amp;mut T&gt;, by pinning a <code>value: T</code> locally.","","","","Assigns a new value to the memory behind the pinned …","","Get a pinned mutable reference from a static mutable …","Get a pinned reference from a static reference.","","","","The 2015 version of the core prelude.","The 2018 version of the core prelude.","The 2021 version of the core prelude.","The 2024 edition of the core prelude.","The first version of the core prelude.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attribute macro applied to a function to register it as a …","","Attribute macro applied to a function to turn it into a …","","Keeps the item it’s applied to if the passed path is …","Expands all <code>#[cfg]</code> and <code>#[cfg_attr]</code> attributes in the code …","","","","","","Attribute macro used to apply derive macros.","Attribute macro used to apply derive macros for …","","","","","","Attribute macro applied to a static to register it as a …","","","","","","","","","Attribute macro applied to a function to turn it into a …","An implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …","","Unstable placeholder for type ascription.","","","","","","","","","","","","","","","","","","A type storing a <code>usize</code> which is a power of two, and thus …","The metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.","The smallest possible alignment, 1.","The type for metadata in pointers and references to <code>Self</code>.","<code>*mut T</code> but non-zero and covariant.","Provides the pointer metadata type of any pointed-to type.","Pointers to types implementing this trait alias are …","","Gets the “address” portion of the pointer.","Create a <code>const</code> raw pointer to a place, without creating an …","Create a <code>mut</code> raw pointer to a place, without creating an …","Returns the alignment of the type associated with this …","Returns a unique reference to the value. If the value may …","Returns a raw pointer to the slice’s buffer.","Returns a non-null pointer to the slice’s buffer.","Returns the alignment as a <code>NonZeroUsize</code>","Acquires the underlying <code>*mut</code> pointer.","Returns a shared reference to the value. If the value may …","Returns a unique references to the value. In contrast to …","Returns a shared references to the value. In contrast to …","Returns a shared reference to a slice of possibly …","Returns a unique reference to a slice of possibly …","Returns the alignment as a <code>usize</code>","","","","","","","Casts to a pointer of another type.","","","","","","","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Copies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …","Creates a new <code>NonNull</code> that is dangling, but well-aligned.","Executes the destructor (if any) of the pointed-to value.","Compares raw pointers for equality.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.","Converts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.","Returns the argument unchanged.","Convert an address back to a pointer, picking up a …","Convert an address back to a mutable pointer, picking up a …","Convert a mutable reference to a raw pointer.","Forms a (possibly-wide) raw pointer from a data address …","Performs the same functionality as <code>std::ptr::from_raw_parts</code>…","Performs the same functionality as <code>from_raw_parts</code>, except …","Convert a reference to a raw pointer.","Returns a raw pointer to an element or subslice, without …","Hash a raw pointer.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an invalid pointer with the given address.","Creates an invalid mutable pointer with the given address.","Returns the size and alignment together as a <code>Layout</code>","Returns the length of a non-null raw slice.","Returns the base-2 logarithm of the alignment.","Creates a new pointer by mapping <code>self</code>’s address to a new …","Extract the metadata component of a pointer.","Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.","Creates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…","Creates a new <code>NonNull</code>.","Creates an <code>Alignment</code> from a power-of-two <code>usize</code>.","Creates a null raw pointer.","Creates a null mutable raw pointer.","Returns the alignment for a type.","","","","Reads the value from <code>src</code> without moving it. This leaves the","Reads the value from <code>src</code> without moving it. This leaves the","Performs a volatile read of the value from <code>src</code> without …","Moves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …","Returns the size of the type associated with this vtable.","Forms a raw slice from a pointer and a length.","Creates a non-null raw slice from a thin pointer and a …","Performs the same functionality as <code>slice_from_raw_parts</code>, …","Swaps the values at two mutable locations of the same …","Swaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …","Decompose a (possibly wide) pointer into its address and …","","","","","","","","","","","","Creates a new pointer with the given address.","Overwrites a memory location with the given value without …","Sets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…","Overwrites a memory location with the given value without …","Performs a volatile write of a memory location with the …","Contains the error value","An iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.","An iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.","An iterator over a mutable reference to the <code>Ok</code> variant of …","Contains the success value","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","","","","","","","","","","","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","","Calls the provided closure with a reference to the …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contained <code>Err</code> value, but never panics.","","","Returns a consuming iterator over the possibly contained …","","","","Returns the contained <code>Ok</code> value, but never panics.","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Err</code> and the value inside of …","Returns <code>true</code> if the result is <code>Ok</code>.","Returns <code>true</code> if the result is <code>Ok</code> and the value inside of …","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …","","","","","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","","","","","","","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","The number of bytes in a bitmask with this many lanes.","The integer bitmask type.","Bit representation of this SIMD vector type.","A SIMD vector with a different element type.","A SIMD vector with a different element type.","A SIMD vector with a different element type.","Vector of const pointers with the same number of lanes.","Vector of const pointers with the same number of lanes.","Vector of constant pointers to the same type.","Index of a lane in the first input SIMD vector.","Map from the lanes of the input vector to the output …","Map from the lanes of the input vectors to the output …","Vector of <code>isize</code> with the same number of lanes.","Vector of <code>isize</code> with the same number of lanes.","Number of elements in this vector.","Specifies the number of lanes in a SIMD vector as a type.","A SIMD vector mask for <code>LANES</code> elements of width specified …","Mask type used for manipulating this SIMD vector type.","Mask type used for manipulating this SIMD vector type.","Mask type used for manipulating this SIMD vector type.","Mask type used for manipulating this SIMD vector type.","The mask type returned by each comparison.","The mask element type corresponding to this element type.","Marker trait for types that may be used as SIMD mask …","Vector of mutable pointers to the same type.","Scalar type contained by this SIMD vector type.","Scalar type contained by this SIMD vector type.","Scalar type contained by this SIMD vector type.","Index of a lane in the second input SIMD vector.","A SIMD vector with the shape of <code>[T; N]</code> but the operations …","Supporting trait for <code>Simd::cast</code>.  Typically doesn’t need …","Operations on SIMD vectors of constant pointers.","Marker trait for types that may be used as SIMD vector …","Operations on SIMD vectors of floats.","Operations on SIMD vectors of signed integers.","Operations on SIMD vectors of mutable pointers.","Parallel <code>Ord</code>.","Parallel <code>PartialEq</code>.","Parallel <code>PartialOrd</code>.","Operations on SIMD vectors of unsigned integers.","Statically guarantees that a lane count is marked as …","Create a vector from the elements of another vector.","Create a vector from the elements of two other vectors.","Converts masks to and from integer bitmasks.","Vector of <code>usize</code> with the same number of lanes.","Vector of <code>usize</code> with the same number of lanes.","Specifies a lane index into one of two SIMD vectors.","Produces a vector where every lane has the absolute value …","Lanewise absolute value, implemented in Rust. Every lane …","","","","","","","","","","","","","","","","","","","","","","","","Gets the “address” portion of the pointer.","Gets the “address” portion of the pointer.","","","Returns true if all lanes are set, or false otherwise.","Returns true if any lane is set, or false otherwise.","Returns an array reference containing the entire SIMD …","","","Returns a mutable array reference containing the entire …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Casts to a pointer of another type.","Performs elementwise conversion of this vector’s …","Performs elementwise conversion of this vector’s …","Casts to a pointer of another type.","Performs elementwise conversion of this vector’s …","Converts the mask to a mask of any other lane size.","","","","","","","","","","","","","","","Changes constness without changing the type.","","Changes constness without changing the type.","","","","","","","Writes a SIMD vector to the first <code>N</code> elements of a slice.","Returns each lane with the magnitude of <code>self</code> and the sign …","","","","","Deinterleave two vectors.","","","","","","","","","","","","","","","","","","","","Gets the “address” portion of the pointer, and “…","Gets the “address” portion of the pointer, and “…","","","A SIMD vector with one element of type <code>f32</code>.","A SIMD vector with 16 elements of type <code>f32</code>.","A SIMD vector with two elements of type <code>f32</code>.","A SIMD vector with 32 elements of type <code>f32</code>.","A SIMD vector with four elements of type <code>f32</code>.","A SIMD vector with 64 elements of type <code>f32</code>.","A SIMD vector with eight elements of type <code>f32</code>.","A SIMD vector with one element of type <code>f64</code>.","A SIMD vector with 16 elements of type <code>f64</code>.","A SIMD vector with two elements of type <code>f64</code>.","A SIMD vector with 32 elements of type <code>f64</code>.","A SIMD vector with four elements of type <code>f64</code>.","A SIMD vector with 64 elements of type <code>f64</code>.","A SIMD vector with eight elements of type <code>f64</code>.","","A <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an array of bools to a SIMD mask.","Converts an array to a SIMD vector.","Converts a bitmask to a mask.","","","","","","","","Raw transmutation from an unsigned integer vector type …","","","Convert an address back to a pointer, picking up a …","Convert an address back to a pointer, picking up a …","","","Converts a vector of integers to a mask, where 0 …","Converts a vector of integers to a mask, where 0 …","Converts a slice to a SIMD vector containing <code>slice[..N]</code>.","Reads from potentially discontiguous indices in <code>slice</code> to …","Reads from indices in <code>slice</code> to construct a SIMD vector. If …","Read elementwise from pointers into a SIMD vector.","Reads from indices in <code>slice</code> to construct a SIMD vector. …","Conditionally read elementwise from pointers into a SIMD …","Reads from indices in <code>slice</code> to construct a SIMD vector. …","","","A SIMD vector with one element of type <code>i16</code>.","A SIMD vector with 16 elements of type <code>i16</code>.","A SIMD vector with two elements of type <code>i16</code>.","A SIMD vector with 32 elements of type <code>i16</code>.","A SIMD vector with four elements of type <code>i16</code>.","A SIMD vector with 64 elements of type <code>i16</code>.","A SIMD vector with eight elements of type <code>i16</code>.","A SIMD vector with one element of type <code>i32</code>.","A SIMD vector with 16 elements of type <code>i32</code>.","A SIMD vector with two elements of type <code>i32</code>.","A SIMD vector with 32 elements of type <code>i32</code>.","A SIMD vector with four elements of type <code>i32</code>.","A SIMD vector with 64 elements of type <code>i32</code>.","A SIMD vector with eight elements of type <code>i32</code>.","A SIMD vector with one element of type <code>i64</code>.","A SIMD vector with 16 elements of type <code>i64</code>.","A SIMD vector with two elements of type <code>i64</code>.","A SIMD vector with 32 elements of type <code>i64</code>.","A SIMD vector with four elements of type <code>i64</code>.","A SIMD vector with 64 elements of type <code>i64</code>.","A SIMD vector with eight elements of type <code>i64</code>.","A SIMD vector with one element of type <code>i8</code>.","A SIMD vector with 16 elements of type <code>i8</code>.","A SIMD vector with two elements of type <code>i8</code>.","A SIMD vector with 32 elements of type <code>i8</code>.","A SIMD vector with four elements of type <code>i8</code>.","A SIMD vector with 64 elements of type <code>i8</code>.","A SIMD vector with eight elements of type <code>i8</code>.","","","Interleave two vectors.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true for each lane if its value is neither …","","","Returns true for each lane if its value is positive …","","","Returns true for each lane if its value is <code>NaN</code>.","","","Returns true for each negative lane and false if it is …","","","","","","Returns true for each lane if its value is neither zero, …","","","Returns <code>true</code> for each lane that is null.","Returns <code>true</code> for each lane that is null.","","","Returns true for each positive lane and false if it is …","","","","","","Returns true for each lane if it has a negative sign, …","","","Returns true for each lane if it has a positive sign, …","","","Returns true for each lane if its value is subnormal.","","","A SIMD vector with one element of type <code>isize</code>.","A SIMD vector with 16 elements of type <code>isize</code>.","A SIMD vector with two elements of type <code>isize</code>.","A SIMD vector with 32 elements of type <code>isize</code>.","A SIMD vector with four elements of type <code>isize</code>.","A SIMD vector with 64 elements of type <code>isize</code>.","A SIMD vector with eight elements of type <code>isize</code>.","Returns the number of elements in this SIMD vector.","A SIMD mask with one element for vectors with 16-bit …","A SIMD mask with 16 elements for vectors with 16-bit …","A SIMD mask with two elements for vectors with 16-bit …","A SIMD mask with 32 elements for vectors with 16-bit …","A SIMD mask with four elements for vectors with 16-bit …","A SIMD mask with 64 elements for vectors with 16-bit …","A SIMD mask with eight elements for vectors with 16-bit …","A SIMD mask with one element for vectors with 32-bit …","A SIMD mask with 16 elements for vectors with 32-bit …","A SIMD mask with two elements for vectors with 32-bit …","A SIMD mask with 32 elements for vectors with 32-bit …","A SIMD mask with four elements for vectors with 32-bit …","A SIMD mask with 64 elements for vectors with 32-bit …","A SIMD mask with eight elements for vectors with 32-bit …","A SIMD mask with one element for vectors with 64-bit …","A SIMD mask with 16 elements for vectors with 64-bit …","A SIMD mask with two elements for vectors with 64-bit …","A SIMD mask with 32 elements for vectors with 64-bit …","A SIMD mask with four elements for vectors with 64-bit …","A SIMD mask with 64 elements for vectors with 64-bit …","A SIMD mask with eight elements for vectors with 64-bit …","A SIMD mask with one element for vectors with 8-bit …","A SIMD mask with 16 elements for vectors with 8-bit …","A SIMD mask with two elements for vectors with 8-bit …","A SIMD mask with 32 elements for vectors with 8-bit …","A SIMD mask with four elements for vectors with 8-bit …","A SIMD mask with 64 elements for vectors with 8-bit …","A SIMD mask with eight elements for vectors with 8-bit …","A SIMD mask with one element for vectors with …","A SIMD mask with 16 elements for vectors with …","A SIMD mask with two elements for vectors with …","A SIMD mask with 32 elements for vectors with …","A SIMD mask with four elements for vectors with …","A SIMD mask with 64 elements for vectors with …","A SIMD mask with eight elements for vectors with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The portable SIMD prelude.","","","","","","","","","","","","","","","","","","","","","","","","","Takes the reciprocal (inverse) of each lane, <code>1/x</code>.","","","Returns the cumulative bitwise “and” across the lanes …","Returns the cumulative bitwise “and” across the lanes …","","","","","","","","","","","Returns the maximum lane in the vector.","Returns the maximum lane in the vector.","Returns the maximum lane in the vector.","","","","","","","","","","","","","Returns the minimum lane in the vector.","Returns the minimum lane in the vector.","Returns the minimum lane in the vector.","","","","","","","","","","","","","Returns the cumulative bitwise “or” across the lanes …","Returns the cumulative bitwise “or” across the lanes …","","","","","","","","","","","Reducing multiply.  Returns the product of the lanes of …","Returns the product of the lanes of the vector, with …","Returns the product of the lanes of the vector, with …","","","","","","","","","","","","","Returns the sum of the lanes of the vector.","Returns the sum of the lanes of the vector, with wrapping …","Returns the sum of the lanes of the vector, with wrapping …","","","","","","","","","","","","","Returns the cumulative bitwise “xor” across the lanes …","Returns the cumulative bitwise “xor” across the lanes …","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverse the order of the lanes in the vector.","Rotates the vector such that the first <code>OFFSET</code> elements of …","Rotates the vector such that the first <code>LANES - OFFSET</code> …","Lanewise saturating absolute value, implemented in Rust. …","","","","","","Lanewise saturating add.","Lanewise saturating add.","","","","","","","","","","","Lanewise saturating negation, implemented in Rust. As …","","","","","","Lanewise saturating subtract.","Lanewise saturating subtract.","","","","","","","","","","","Writes the values in a SIMD vector to potentially …","Write pointers elementwise into a SIMD vector.","Writes values from a SIMD vector to multiple potentially …","Conditionally write pointers elementwise into a SIMD …","Writes values from a SIMD vector to multiple potentially …","Choose lanes from two vectors.","Choose lanes from two masks.","Sets the value of the specified lane.","Sets the value of the specified lane.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces each lane with a number that represents its sign.","Returns numbers representing the sign of each lane.","","","","","","","","Restrict each lane to a certain interval unless it is NaN.","Restrict each lane to a certain interval.","","","","","","","","","","","","","","","","","","","","Test if each lane is equal to the corresponding lane in …","","","","","","","","","","","","","","","","","","","","Test if each lane is greater than or equal to the …","","","","","","","","","","","","","","","","","","","","Test if each lane is greater than the corresponding lane …","","","","","","","","","","","","","","","","","","","","Test if each lane is less than or equal to the …","","","","","","","","","","","","","","","","","","","","Test if each lane is less than the corresponding lane in …","","","","","","","","","","","","","","","","","","","","Returns the maximum of each lane.","Returns the lane-wise maximum with <code>other</code>.","","","","","","","","","","","","","","","","","","","","Returns the minimum of each lane.","Returns the lane-wise minimum with <code>other</code>.","","","","","","","","","","","","","","","","","","","","Test if each lane is equal to the corresponding lane in …","","","","","","","","","","","","","","","","","","","","Constructs a new SIMD vector by copying elements from …","Construct a mask by setting all lanes to the given value.","Constructs a new SIMD vector with all elements set to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new vector from the lanes of <code>vector</code>.","Create a new vector from the lanes of <code>vector</code>.","Create a new vector from the lanes of <code>first</code> and <code>second</code>.","Create a new vector from the lanes of <code>first</code> and <code>second</code>.","Swizzle a vector of bytes according to the index vector. …","Tests the value of the specified lane.","Tests the value of the specified lane.","Converts a SIMD mask to an array of bools.","Converts a SIMD vector to an array.","Converts a mask to a bitmask.","","","","","","","","Raw transmutation to an unsigned integer vector type with …","","","Converts each lane from radians to degrees.","","","Converts the mask to a vector of integers, where 0 …","Rounds toward zero and converts to the same-width integer …","","","Converts each lane from degrees to radians.","","","","","","","","","","","","","","","","","A SIMD vector with one element of type <code>u16</code>.","A SIMD vector with 16 elements of type <code>u16</code>.","A SIMD vector with two elements of type <code>u16</code>.","A SIMD vector with 32 elements of type <code>u16</code>.","A SIMD vector with four elements of type <code>u16</code>.","A SIMD vector with 64 elements of type <code>u16</code>.","A SIMD vector with eight elements of type <code>u16</code>.","A SIMD vector with one element of type <code>u32</code>.","A SIMD vector with 16 elements of type <code>u32</code>.","A SIMD vector with two elements of type <code>u32</code>.","A SIMD vector with 32 elements of type <code>u32</code>.","A SIMD vector with four elements of type <code>u32</code>.","A SIMD vector with 64 elements of type <code>u32</code>.","A SIMD vector with eight elements of type <code>u32</code>.","A SIMD vector with one element of type <code>u64</code>.","A SIMD vector with 16 elements of type <code>u64</code>.","A SIMD vector with two elements of type <code>u64</code>.","A SIMD vector with 32 elements of type <code>u64</code>.","A SIMD vector with four elements of type <code>u64</code>.","A SIMD vector with 64 elements of type <code>u64</code>.","A SIMD vector with eight elements of type <code>u64</code>.","A SIMD vector with one element of type <code>u8</code>.","A SIMD vector with 16 elements of type <code>u8</code>.","A SIMD vector with two elements of type <code>u8</code>.","A SIMD vector with 32 elements of type <code>u8</code>.","A SIMD vector with four elements of type <code>u8</code>.","A SIMD vector with 64 elements of type <code>u8</code>.","A SIMD vector with eight elements of type <code>u8</code>.","A SIMD vector with one element of type <code>usize</code>.","A SIMD vector with 16 elements of type <code>usize</code>.","A SIMD vector with two elements of type <code>usize</code>.","A SIMD vector with 32 elements of type <code>usize</code>.","A SIMD vector with four elements of type <code>usize</code>.","A SIMD vector with 64 elements of type <code>usize</code>.","A SIMD vector with eight elements of type <code>usize</code>.","Creates a new pointer with the given address.","Creates a new pointer with the given address.","","","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","","","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","","","Calculates the offset from a pointer using wrapping …","Calculates the offset from a pointer using wrapping …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over the escaped version of a byte slice.","The error type returned by <code>get_many_mut&lt;N&gt;</code>.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable chunks …","The element type of the slice being matched on.","Immutable slice iterator","Mutable slice iterator.","The output type returned by methods.","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","Patterns in slices - currently, only used by <code>strip_prefix</code> …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector which …","An iterator over the mutable subslices of the vector which …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","","","","","","","","","Views the underlying data as a mutable subslice of the …","","","Currently, the consumers of <code>SlicePattern</code> need a slice.","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns a slice which contains items not yet handled by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty slice iterator.","Creates an empty slice iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a reference to T into a slice of length 1 …","Forms a mutable slice from a pointer range.","Forms a slice from a pointer range.","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Views the underlying data as a subslice of the original …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pure rust memchr implementation, taken from rust-memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Slice sorting","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the first index matching the byte <code>x</code> in <code>text</code>.","Returns the last index matching the byte <code>x</code> in <code>text</code>.","Internal type used by merge_sort.","","","","","Returns the argument unchanged.","Sorts <code>v</code> using heapsort, which guarantees <em>O</em>(<em>n</em> * log(<em>n</em>)) …","Calls <code>U::from(self)</code>.","This merge sort borrows some (but not all) ideas from …","Sorts <code>v</code> using pattern-defeating quicksort, which is <em>O</em>(<em>n</em> * …","","","","An iterator over the bytes of a string slice.","An iterator over the <code>char</code>s of a string slice, and their …","An iterator over the <code>char</code>s of a string slice.","An iterator of <code>u16</code> over the string encoded as UTF-16.","The associated error which can be returned from parsing.","The return type of <code>str::escape_debug</code>.","The return type of <code>str::escape_default</code>.","The return type of <code>str::escape_unicode</code>.","Parse a value from a string","An iterator over the lines of a string, as string slices.","Created with the method <code>lines_any</code>.","Created with the method <code>match_indices</code>.","Created with the method <code>matches</code>.","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails","Created with the method <code>rmatch_indices</code>.","Created with the method <code>rmatches</code>.","Created with the method <code>rsplit</code>.","Created with the method <code>rsplitn</code>.","Created with the method <code>rsplit_terminator</code>.","Created with the method <code>split</code>.","An iterator over the non-ASCII-whitespace substrings of a …","An iterator over the substrings of a string, terminated by …","Created with the method <code>splitn</code>.","Created with the method <code>split_terminator</code>.","An iterator over the non-whitespace substrings of a string,","An item returned by the <code>Utf8Chunks</code> iterator.","An iterator used to decode a slice of mostly UTF-8 bytes …","Errors which can occur when attempting to interpret a …","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides more information about the failure:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses a string <code>s</code> to return a value of this type.","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the invalid sequence that caused a failure.","","","","","","","","","Creates a new iterator to decode the bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reads the next code point out of a byte iterator (assuming …","","","Returns the byte position of the next character, or the …","The string Pattern API.","","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string","Returns remainder of the split string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Given a first byte, determines how many bytes are in this …","Returns the next validated UTF-8 substring.","Returns the index in the given string up to which valid …","Associated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Expresses that every byte of the haystack has been …","A marker trait to express that a <code>ReverseSearcher</code> can be …","Expresses that a match of the pattern has been found at …","A string pattern.","Expresses that <code>haystack[a..b]</code> has been rejected as a …","A reverse searcher for a string pattern.","Result of calling <code>Searcher::next()</code> or …","A searcher for a string pattern.","Associated searcher for this pattern","Associated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getter for the underlying string to be searched in","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the associated searcher from <code>self</code> and the …","Checks whether the pattern matches anywhere in the haystack","Checks whether the pattern matches at the front of the …","Checks whether the pattern matches at the back of the …","Performs the next search step starting from the front.","","","","","","","Performs the next search step starting from the back.","","","","","","","Finds the next <code>Match</code> result. See <code>next()</code>.","","","","","","","Finds the next <code>Match</code> result. See <code>next_back()</code>.","","","","","","","Finds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.","","","","","Finds the next <code>Reject</code> result. See <code>next_back()</code>.","","","","","Removes the pattern from the front of haystack, if it …","Removes the pattern from the back of haystack, if it …","","","","","","","","","","","","","","","","","","","","","","<code>Exclusive</code> provides only <em>mutable</em> access, also referred to …","Atomic types","","","","","","","Returns the argument unchanged.","","","Build a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>…","Build a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a …","Get exclusive access to the underlying value.","Get pinned exclusive access to the underlying value.","Calls <code>U::from(self)</code>.","","Unwrap the value contained in the <code>Exclusive</code>","","","","","Wrap a value in an <code>Exclusive</code>","","","","","","","","An <code>AtomicBool</code> initialized to <code>false</code>.","An <code>AtomicIsize</code> initialized to <code>0</code>.","An <code>AtomicUsize</code> initialized to <code>0</code>.","Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","A boolean type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","A raw pointer type which can be safely shared between …","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","An integer type which can be safely shared between threads.","Atomic memory orderings","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","Returns a mutable pointer to the underlying <code>bool</code>.","Returns a mutable pointer to the underlying pointer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","Returns a mutable pointer to the underlying integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the <code>bool</code> if the current value is the …","Stores a value into the pointer if the current value is …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","A compiler memory fence.","Creates an <code>AtomicBool</code> initialized to <code>false</code>.","Creates a null <code>AtomicPtr&lt;T&gt;</code>.","","","","","","","","","","","","An atomic fence.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Adds to the current value, returning the previous value.","Logical “and” with a boolean value.","Performs a bitwise “and” operation on the address of …","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Bitwise “and” with the current value.","Offsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …","Offsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Maximum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Minimum with the current value.","Logical “nand” with a boolean value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Bitwise “nand” with the current value.","Logical “not” with a boolean value.","Logical “or” with a boolean value.","Performs a bitwise “or” operation on the address of …","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Bitwise “or” with the current value.","Offsets the pointer’s address by adding <code>val</code> (in units of …","Offsets the pointer’s address by subtracting <code>val</code> (in …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Subtracts from the current value, returning the previous …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Fetches the value, and applies a function to it that …","Logical “xor” with a boolean value.","Performs a bitwise “xor” operation on the address of …","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","Bitwise “xor” with the current value.","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>bool</code> into an <code>AtomicBool</code>.","Returns the argument unchanged.","Converts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.","Returns the argument unchanged.","Converts an <code>i8</code> into an <code>AtomicI8</code>.","Returns the argument unchanged.","Converts an <code>u8</code> into an <code>AtomicU8</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i16</code> into an <code>AtomicI16</code>.","Returns the argument unchanged.","Converts an <code>u16</code> into an <code>AtomicU16</code>.","Returns the argument unchanged.","Converts an <code>i32</code> into an <code>AtomicI32</code>.","Converts an <code>u32</code> into an <code>AtomicU32</code>.","Returns the argument unchanged.","Converts an <code>i64</code> into an <code>AtomicI64</code>.","Returns the argument unchanged.","Converts an <code>u64</code> into an <code>AtomicU64</code>.","Returns the argument unchanged.","Converts an <code>isize</code> into an <code>AtomicIsize</code>.","Returns the argument unchanged.","Converts an <code>usize</code> into an <code>AtomicUsize</code>.","Returns the argument unchanged.","Get atomic access to a <code>&amp;mut bool</code>.","Get atomic access to a pointer.","Get atomic access to a <code>&amp;mut i8</code>.","Get atomic access to a <code>&amp;mut u8</code>.","Get atomic access to a <code>&amp;mut i16</code>.","Get atomic access to a <code>&amp;mut u16</code>.","Get atomic access to a <code>&amp;mut i32</code>.","Get atomic access to a <code>&amp;mut u32</code>.","Get atomic access to a <code>&amp;mut i64</code>.","Get atomic access to a <code>&amp;mut u64</code>.","Get atomic access to a <code>&amp;mut isize</code>.","Get atomic access to a <code>&amp;mut usize</code>.","Get atomic access to a <code>&amp;mut [bool]</code> slice.","Get atomic access to a slice of pointers.","Get atomic access to a <code>&amp;mut [i8]</code> slice.","Get atomic access to a <code>&amp;mut [u8]</code> slice.","Get atomic access to a <code>&amp;mut [i16]</code> slice.","Get atomic access to a <code>&amp;mut [u16]</code> slice.","Get atomic access to a <code>&amp;mut [i32]</code> slice.","Get atomic access to a <code>&amp;mut [u32]</code> slice.","Get atomic access to a <code>&amp;mut [i64]</code> slice.","Get atomic access to a <code>&amp;mut [u64]</code> slice.","Get atomic access to a <code>&amp;mut [isize]</code> slice.","Get atomic access to a <code>&amp;mut [usize]</code> slice.","Creates a new <code>AtomicBool</code> from a pointer.","Creates a new <code>AtomicPtr</code> from a pointer.","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Creates a new reference to an atomic integer from a …","Returns a mutable reference to the underlying <code>bool</code>.","Returns a mutable reference to the underlying pointer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Returns a mutable reference to the underlying integer.","Get non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.","Get non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.","Get non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice","Get non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Consumes the atomic and returns the contained value.","Loads a value from the bool.","Loads a value from the pointer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Loads a value from the atomic integer.","Creates a new <code>AtomicBool</code>.","Creates a new <code>AtomicPtr</code>.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Creates a new atomic integer.","Signals the processor that it is inside a busy-wait …","Stores a value into the bool.","Stores a value into the pointer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the atomic integer.","Stores a value into the bool, returning the previous value.","Stores a value into the pointer, returning the previous …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","Stores a value into the atomic integer, returning the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context of an asynchronous task.","Represents that a value is not ready yet.","Indicates whether a value is available or if the current …","A <code>RawWaker</code> allows the implementor of a task executor to …","A virtual function pointer table (vtable) that specifies …","Represents that a value is immediately ready.","A <code>Waker</code> is a handle for waking up a task by notifying its …","Get a reference to the underlying <code>RawWaker</code>.","","","","","","","","","","","","","","","","","Get the <code>data</code> pointer used to create this <code>RawWaker</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Moves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Creates a new <code>Waker</code> from <code>RawWaker</code>.","","","Create a new <code>Context</code> from a <code>&amp;Waker</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the poll is a <code>Pending</code> value.","Returns <code>true</code> if the poll is a <code>Poll::Ready</code> value.","Maps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …","Maps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …","Maps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …","Maps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …","Maps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …","Creates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …","Creates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,","Creates a new <code>Waker</code> that does nothing when <code>wake</code> is called.","","Extracts the successful type of a <code>Poll&lt;T&gt;</code>.","","","","","","","","","","","","","","","","Get the <code>vtable</code> pointer used to create this <code>RawWaker</code>.","Wake up the task associated with this <code>Waker</code>.","Wake up the task associated with this <code>Waker</code> without …","Returns a reference to the <code>Waker</code> for the current task.","Returns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake …","A <code>Duration</code> type to represent a span of time, typically …","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","An error which can be returned when converting a …","A duration of zero time.","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","","","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this <code>Duration</code> spans no time.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","Creates a new <code>Duration</code> from the specified number of whole …","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","","","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …","","","The version of Unicode that the Unicode parts of <code>char</code> and …","","","","The largest value that can be represented by this integer …","The smallest value that can be represented by this integer …"],"i":[485,486,487,488,489,490,491,492,493,494,495,496,497,498,497,498,497,498,497,498,499,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,497,498,499,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,497,498,497,498,497,498,497,498,497,498,499,499,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,500,500,497,497,497,497,498,498,498,498,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,491,491,491,491,492,492,492,492,493,493,493,493,494,494,494,494,495,495,495,495,496,496,496,496,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,500,500,500,500,501,501,0,0,0,0,0,501,501,501,499,502,501,503,490,502,501,501,503,503,501,501,501,501,500,502,501,503,500,501,503,501,502,500,501,503,501,501,501,500,500,502,501,503,503,501,501,502,502,501,501,500,500,500,500,500,500,0,0,0,0,0,0,485,486,487,488,489,490,491,492,493,494,495,496,499,485,486,487,488,489,490,491,492,493,494,495,496,499,485,486,487,488,489,490,491,492,493,494,495,496,501,501,501,504,504,504,504,504,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,491,491,491,491,492,492,492,492,493,493,493,493,494,494,494,494,495,495,495,495,496,496,496,496,504,504,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,504,504,504,504,504,485,485,485,485,485,486,486,486,486,486,487,487,487,487,487,488,488,488,488,488,489,489,489,489,489,490,490,490,490,490,491,491,491,491,491,492,492,492,492,492,493,493,493,493,493,494,494,494,494,494,495,495,495,495,495,496,496,496,496,496,504,504,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,504,504,504,504,504,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,491,491,491,491,492,492,492,492,493,493,493,493,494,494,494,494,495,495,495,495,496,496,496,496,504,504,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,0,0,504,499,505,500,500,502,502,502,502,501,503,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,504,499,505,500,500,502,502,502,502,501,503,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,485,486,487,488,489,490,491,492,493,494,495,496,500,500,500,500,500,500,500,500,503,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,496,500,500,500,500,503,0,0,0,0,0,503,503,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,495,501,501,501,501,504,497,498,497,498,0,504,508,499,505,500,500,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,502,501,0,504,508,499,505,500,500,502,501,503,506,485,486,487,488,489,490,491,492,493,494,495,496,507,0,0,0,0,0,0,501,503,0,500,500,501,500,500,500,500,501,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,0,0,0,499,0,504,499,505,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,501,501,503,503,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,497,497,497,498,498,498,498,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,490,491,491,491,491,491,492,492,492,492,492,493,493,493,493,493,494,494,494,494,494,495,495,495,495,496,496,496,496,496,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,500,502,502,499,503,499,506,506,501,503,0,504,508,499,505,500,500,502,502,502,502,501,501,501,501,503,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,499,501,503,490,0,501,490,499,503,499,503,499,503,500,500,505,506,505,506,506,0,0,0,0,0,0,501,501,503,501,501,501,501,501,501,503,0,504,504,508,508,499,499,505,500,500,500,500,502,501,503,503,506,497,498,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,507,507,0,0,0,485,486,487,488,489,490,491,492,493,494,495,496,499,485,486,487,488,489,490,491,492,493,494,495,496,499,485,486,487,488,489,490,491,492,493,494,495,496,504,499,499,505,500,500,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,502,506,506,506,506,506,506,506,506,506,506,506,506,506,497,497,497,497,497,497,498,498,498,498,498,498,498,498,498,485,485,485,486,486,486,486,486,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,489,490,490,490,491,491,491,491,492,492,492,492,492,492,492,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,496,496,496,496,496,496,507,485,486,487,488,489,490,491,492,493,494,495,496,497,498,485,486,487,488,489,490,491,492,493,494,495,496,500,500,497,498,499,505,485,486,487,488,489,490,491,492,493,494,495,496,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,485,486,487,488,489,490,491,492,493,494,495,496,504,499,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,499,499,0,499,500,500,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,501,503,506,506,496,501,501,501,503,506,506,496,500,501,503,506,506,496,500,501,503,506,506,496,501,501,499,500,500,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,500,500,500,500,0,504,508,499,505,500,500,502,501,503,506,485,486,487,488,489,490,491,492,493,494,495,496,507,485,486,487,488,489,490,491,492,493,494,495,496,0,0,0,0,0,0,0,0,0,0,0,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,0,0,0,502,501,503,506,506,496,502,501,503,506,506,496,504,499,505,500,500,502,502,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,502,502,502,501,501,499,502,502,501,503,503,507,0,500,500,500,500,499,499,499,501,503,490,499,490,499,490,499,490,499,490,499,490,499,490,499,490,499,490,499,490,499,490,499,490,503,499,502,502,501,503,503,507,499,499,500,501,503,497,498,497,498,499,497,498,485,486,487,488,489,495,497,498,500,500,499,485,486,487,488,489,495,490,491,492,493,494,496,499,502,502,501,503,503,507,497,498,497,498,501,501,501,497,498,499,502,502,501,503,503,507,499,491,499,0,0,485,486,487,488,489,490,491,492,493,494,495,496,0,501,501,501,501,501,501,499,500,500,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,500,500,501,503,499,499,0,503,503,0,499,500,500,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,499,501,503,490,499,501,503,490,502,500,500,0,500,500,503,503,0,504,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,0,497,498,485,486,487,488,489,490,491,492,493,494,495,496,504,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,0,497,497,497,497,498,498,498,498,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,491,491,491,491,492,492,492,492,492,493,493,493,493,494,494,494,494,495,495,495,495,496,496,496,496,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,504,499,505,502,502,502,502,501,501,501,501,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,497,498,498,485,485,486,486,487,487,488,488,489,489,495,495,0,0,497,498,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,497,498,504,504,508,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,0,500,500,500,500,0,0,0,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,495,0,0,0,503,504,508,499,505,500,500,502,501,503,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,501,501,501,501,0,0,485,486,487,488,489,490,491,492,493,494,495,496,0,0,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,0,501,501,501,501,500,500,500,500,500,500,497,498,0,497,497,497,497,498,498,498,498,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,490,491,491,491,491,491,492,492,492,492,492,493,493,493,493,493,494,494,494,494,494,495,495,495,495,496,496,496,496,496,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,485,486,487,488,489,490,491,492,493,494,495,496,500,0,501,485,486,487,488,489,490,491,492,493,494,495,496,503,503,503,501,485,486,487,488,489,490,491,492,493,494,495,496,501,485,486,487,488,489,490,491,492,493,494,495,496,501,503,502,501,502,501,501,503,503,501,503,501,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,495,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,495,501,501,501,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,488,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,489,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,496,485,486,487,488,489,495,0,0,0,503,503,501,501,501,501,501,501,503,502,501,502,501,503,501,503,500,501,503,500,501,501,501,501,501,501,501,503,501,501,501,501,501,501,503,503,503,501,503,501,506,506,501,503,499,485,486,487,488,489,490,491,492,493,494,495,496,0,0,0,501,503,499,502,502,501,503,503,507,501,503,499,502,502,501,503,503,507,500,500,497,497,497,497,498,498,498,498,485,485,485,485,486,486,486,486,487,487,487,487,488,488,488,488,489,489,489,489,490,490,490,490,491,491,491,491,492,492,492,492,493,493,493,493,494,494,494,494,495,495,495,495,496,496,496,496,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,500,500,497,497,498,498,485,485,486,486,487,487,488,488,489,489,490,490,491,491,492,492,493,493,494,494,495,495,496,496,500,501,485,486,487,488,489,490,491,492,493,494,495,496,501,501,0,501,501,501,501,501,501,0,504,504,0,499,490,499,490,485,486,487,488,489,490,491,492,493,494,495,496,497,498,485,486,487,488,489,490,491,492,493,494,495,496,500,500,497,498,497,498,499,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,485,486,487,488,489,490,491,492,493,494,495,496,499,497,498,485,486,487,488,489,490,491,492,493,494,495,496,497,498,500,500,499,0,497,498,0,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,502,503,501,501,501,503,503,503,503,503,503,503,503,503,0,504,499,499,505,500,500,502,502,502,502,502,502,502,506,497,498,485,485,485,485,485,485,485,485,485,485,485,485,486,486,486,486,486,486,486,486,486,486,487,487,487,487,487,487,487,487,488,488,488,488,488,488,489,489,489,489,490,490,490,490,490,490,490,490,490,490,490,490,490,491,491,491,491,491,491,491,491,491,491,491,491,492,492,492,492,492,492,492,492,492,492,493,493,493,493,493,493,493,493,493,494,494,494,494,494,494,494,494,495,495,495,495,495,495,495,495,495,496,496,496,496,496,496,496,496,496,496,507,504,499,505,500,500,502,502,502,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,502,0,504,499,505,500,500,502,502,502,501,503,506,497,498,485,486,487,488,489,490,491,492,493,494,495,496,507,0,0,0,0,0,0,0,0,0,0,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,0,0,0,0,485,486,487,488,489,495,0,0,490,491,492,493,496,501,500,500,500,500,485,486,487,488,489,495,500,500,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,485,486,487,488,489,495,500,500,500,500,500,500,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,490,491,492,493,494,496,500,500,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,490,491,492,493,494,495,496,500,500,485,486,487,488,489,490,491,492,493,494,495,496,485,486,487,488,489,495,500,0,500,500,500,0,0,0,0,0,0,0,140,140,509,509,509,510,510,140,140,141,143,140,141,143,510,140,141,143,140,509,510,140,141,143,140,140,140,141,141,143,143,140,140,140,141,143,140,140,510,510,140,140,141,143,140,140,140,509,509,140,140,510,140,140,141,143,140,141,143,140,141,143,0,0,138,138,138,138,144,144,144,144,144,144,144,144,144,144,144,144,138,144,144,144,138,138,138,138,144,144,144,138,138,138,138,144,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,146,147,148,149,150,151,152,145,146,147,148,149,150,151,152,145,146,147,148,149,150,151,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,146,147,148,149,150,151,152,145,146,147,148,149,150,151,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,146,147,148,149,150,151,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,146,147,148,149,150,151,152,145,146,147,148,149,150,151,152,145,146,147,148,149,150,151,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,0,0,0,0,0,0,0,0,0,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,511,155,158,172,153,156,170,154,157,167,169,173,171,162,166,176,160,164,174,159,163,168,161,165,175,198,199,200,234,235,236,210,211,212,246,247,248,186,187,188,222,223,224,189,190,191,225,226,227,201,202,203,237,238,239,180,181,182,216,217,218,192,193,194,228,229,230,204,205,206,240,241,242,177,178,179,213,214,215,195,196,197,231,232,233,207,208,209,243,244,245,183,184,185,219,220,221,250,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,252,249,252,249,252,249,252,249,252,0,249,252,249,252,249,252,249,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,256,259,262,0,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,253,254,255,256,257,258,259,260,261,262,263,264,265,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,267,267,267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,267,267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,267,0,0,0,0,0,267,267,267,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,276,268,277,273,275,274,285,287,286,281,280,288,269,276,268,277,273,275,274,285,287,286,281,280,288,269,276,268,277,273,275,274,285,287,286,281,280,288,269,269,269,269,269,269,269,276,268,277,273,275,274,285,287,286,281,280,288,269,276,276,276,276,276,276,276,276,276,276,276,268,268,277,277,273,273,273,273,273,273,273,273,273,273,273,275,275,274,274,285,285,285,285,285,285,285,285,285,285,285,287,287,286,286,281,280,288,269,0,276,268,277,273,275,274,285,287,286,281,280,288,269,269,276,268,277,273,275,274,285,287,286,281,280,288,269,276,268,277,273,275,274,285,287,286,281,280,288,269,276,268,277,273,275,274,285,287,286,281,280,288,269,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,269,269,269,269,0,0,0,326,326,326,326,326,137,326,137,326,137,326,137,326,326,326,137,137,326,326,137,137,0,0,0,326,137,326,326,326,326,326,326,326,326,326,326,326,137,0,326,137,326,137,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,69,69,21,21,21,21,69,21,69,21,69,21,69,21,21,21,0,21,21,69,69,21,21,21,69,21,21,21,21,69,69,69,69,69,69,21,69,21,21,21,21,69,21,69,21,69,0,0,0,0,453,328,328,328,328,328,0,328,453,328,453,453,328,328,328,328,0,0,512,513,0,0,0,0,0,0,0,0,0,0,332,332,333,332,337,336,332,333,333,340,341,334,335,338,339,337,336,332,333,333,340,341,334,335,338,339,336,332,333,334,333,332,333,337,336,332,333,338,339,337,334,335,335,340,341,336,332,333,334,335,337,336,332,333,340,340,341,341,334,334,335,335,338,339,337,337,336,336,336,332,332,332,333,333,333,340,341,334,335,338,338,338,339,339,339,332,338,332,333,336,332,338,339,336,332,333,338,339,336,336,332,333,337,336,332,333,340,341,334,335,338,339,337,336,332,333,338,339,332,333,334,335,332,333,334,335,334,335,337,336,332,333,338,339,332,333,338,339,332,333,333,336,332,332,333,336,332,333,333,333,333,337,336,332,333,340,341,334,335,338,339,337,336,332,333,340,341,334,335,338,339,337,336,332,333,340,341,334,335,338,339,333,332,0,0,0,0,0,0,0,0,0,0,0,0,0,74,72,343,344,63,345,74,72,70,135,136,346,343,344,63,345,74,72,70,135,136,346,343,344,63,345,74,72,70,135,136,346,74,72,70,0,343,344,345,0,0,343,344,345,346,343,343,344,344,63,345,345,74,74,72,72,70,70,135,135,136,136,346,346,343,344,63,345,74,72,70,135,136,346,0,0,0,343,344,63,345,74,72,70,135,136,346,63,74,72,70,135,136,74,72,74,72,70,63,74,72,70,135,136,135,136,63,74,72,70,135,136,343,344,63,345,74,72,70,135,136,346,343,344,63,345,74,72,70,135,136,346,343,344,63,345,74,72,70,135,136,346,345,0,0,57,57,0,0,58,58,58,0,0,0,0,0,0,0,0,58,347,58,347,31,58,347,347,31,58,347,347,59,58,347,58,347,58,347,86,347,86,347,58,347,58,347,58,58,58,58,58,58,86,347,86,347,0,31,0,0,0,31,0,0,0,0,0,59,86,58,347,58,58,58,58,347,58,347,58,347,0,0,514,515,0,0,0,0,0,0,516,517,327,327,327,327,327,327,327,327,459,327,327,327,327,0,427,327,327,515,327,514,327,327,0,0,65,0,0,0,350,349,350,349,348,349,348,348,348,348,348,348,348,350,349,349,349,349,348,348,348,349,348,350,350,350,350,0,0,348,348,349,349,350,349,350,350,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,351,352,352,351,357,352,355,356,351,354,357,352,355,356,351,354,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,355,356,351,352,352,352,354,354,355,351,352,355,356,357,352,355,355,356,356,351,354,357,355,356,351,354,352,352,352,352,352,352,357,355,356,351,354,352,352,352,352,352,357,355,356,351,354,357,355,356,351,354,357,352,355,356,351,354,351,0,0,0,360,0,0,0,0,0,0,0,0,78,0,0,360,0,0,0,78,0,0,360,0,0,0,77,77,361,365,366,364,362,363,77,360,80,361,365,366,364,362,363,77,360,80,361,360,80,361,80,77,77,77,77,77,80,80,364,362,363,364,362,363,360,80,365,366,77,365,366,364,362,363,365,77,79,342,434,433,432,435,454,518,519,360,80,80,361,361,365,366,364,362,363,77,360,80,361,80,365,366,364,362,363,77,360,80,361,363,77,77,80,77,77,77,77,365,366,364,362,363,77,360,80,361,365,366,364,362,363,77,360,80,361,365,366,364,362,363,77,360,80,361,363,77,0,367,77,367,77,77,367,77,77,0,0,520,452,520,0,0,0,368,370,369,368,370,369,368,369,368,370,369,368,370,369,368,370,369,520,368,370,369,369,0,0,452,368,370,369,0,0,368,370,369,368,370,369,368,370,369,0,0,0,0,0,521,0,371,372,371,372,521,371,371,372,371,372,371,91,372,371,372,371,372,92,521,92,371,372,372,372,371,372,371,372,371,372,91,372,91,91,91,91,91,91,91,91,372,91,91,91,91,91,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,373,373,373,373,0,0,373,373,373,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,374,376,375,375,377,378,379,380,382,383,384,385,374,376,107,107,377,378,379,386,380,382,383,384,385,107,107,107,107,107,107,436,436,436,436,436,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,107,107,107,107,374,376,388,389,390,387,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,107,107,107,107,107,107,107,107,107,107,107,107,374,376,107,107,387,378,379,380,392,394,399,383,385,107,107,376,390,378,391,379,380,394,382,0,107,107,107,107,107,107,76,76,76,76,76,107,107,107,107,107,107,378,394,382,107,107,107,107,107,107,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,374,376,388,107,107,387,377,378,391,379,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,107,107,384,436,436,436,436,436,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,0,0,410,107,107,107,107,107,107,107,107,107,107,107,107,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,64,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,387,381,381,387,391,379,380,394,395,397,382,107,107,107,107,107,107,107,107,374,376,107,107,378,379,394,399,383,385,107,107,390,381,381,387,391,379,380,394,395,397,382,406,407,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,375,374,376,390,387,377,378,391,379,380,392,393,394,395,397,399,382,383,402,384,404,406,407,385,107,107,379,392,393,399,399,107,107,377,378,379,380,394,399,382,383,402,384,404,385,375,375,377,378,380,394,382,383,402,384,385,0,0,107,107,107,107,107,107,107,107,399,399,107,107,107,107,413,107,107,107,107,0,0,0,107,107,375,375,378,394,382,374,376,375,375,387,377,378,391,379,380,392,393,394,395,397,399,382,383,402,384,107,107,107,107,374,376,388,389,390,107,107,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,406,407,385,408,409,107,107,107,107,107,107,436,0,414,107,107,107,107,107,107,107,107,107,107,374,376,107,107,387,377,378,391,379,386,380,392,393,394,395,397,398,399,382,400,383,401,402,384,403,408,107,107,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,107,107,374,376,375,375,387,377,378,391,379,380,392,393,394,395,397,399,382,383,402,384,374,376,388,389,390,387,377,378,391,379,386,380,392,393,394,395,396,397,398,399,382,400,383,401,402,384,403,404,405,406,407,385,408,409,107,107,0,107,107,0,0,0,0,0,522,0,0,0,0,0,0,0,0,0,0,0,0,0,523,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,416,417,418,0,0,0,418,0,0,418,418,418,418,0,0,0,418,418,29,29,29,29,29,29,29,29,29,29,419,420,29,418,419,420,29,418,418,419,420,29,418,420,0,420,420,420,0,0,420,419,420,418,419,420,29,418,0,0,419,420,29,418,419,420,419,420,29,418,420,418,0,0,0,420,29,0,420,0,418,0,0,0,29,29,29,29,29,29,418,0,0,420,0,0,29,419,420,29,418,419,420,29,418,419,420,29,418,29,29,0,418,0,29,29,29,0,29,0,422,81,82,81,422,422,0,0,0,0,81,82,422,422,422,422,0,0,0,81,82,421,424,421,424,81,82,81,82,421,81,82,422,423,424,425,426,421,81,82,422,423,424,425,426,421,81,82,422,423,424,425,426,421,81,82,424,425,426,423,421,421,421,81,81,82,82,422,423,424,425,426,426,421,421,81,81,82,82,422,423,423,424,424,425,425,426,426,81,82,81,82,421,421,421,421,421,421,81,81,81,82,82,82,82,422,423,424,424,424,424,425,426,81,82,421,81,82,424,425,426,421,81,82,422,424,425,426,421,81,82,422,423,424,425,426,424,425,426,421,81,82,81,421,81,82,421,81,82,421,424,421,424,81,421,81,82,421,81,82,81,81,81,82,82,82,82,421,81,82,82,81,82,424,425,426,81,82,421,81,82,424,425,426,421,421,421,81,81,82,82,424,425,426,424,425,426,426,82,426,424,425,426,424,425,426,426,81,82,81,82,421,82,82,82,81,81,421,81,82,422,423,424,425,426,421,81,82,422,423,424,425,426,421,81,82,422,423,424,425,426,41,42,43,44,45,47,36,37,38,39,40,46,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,431,0,55,0,431,41,42,43,44,45,47,36,37,38,39,40,46,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,41,42,43,44,45,47,36,37,38,39,40,46,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,55,431,0,0,0,0,0,0,0,0,0,0,0,0,55,0,431,0,55,0,0,431,55,36,37,38,39,40,46,428,428,428,428,428,428,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,41,41,42,42,43,43,44,44,45,45,47,47,36,36,37,37,38,38,39,39,40,40,46,46,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,41,41,42,42,43,43,44,44,45,45,47,47,36,36,37,37,38,38,39,39,40,40,46,46,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,36,37,38,39,40,46,41,42,43,44,45,47,41,42,43,44,45,47,36,37,38,39,40,46,36,37,38,39,40,46,41,42,43,44,45,47,41,42,43,44,45,47,36,37,38,39,40,46,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,41,42,43,44,45,47,36,37,38,39,40,46,428,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,429,430,85,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,430,430,85,85,431,41,41,41,41,41,41,42,42,42,42,42,42,43,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,45,47,47,47,47,47,47,36,36,36,36,36,36,37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,46,46,46,46,46,46,428,428,428,428,428,428,429,429,429,429,429,429,55,430,430,430,430,85,431,41,42,42,43,43,43,44,44,44,44,45,45,45,45,45,47,47,47,47,36,37,37,37,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,46,46,46,46,428,429,55,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,41,42,43,44,45,47,36,37,38,39,40,46,41,42,43,44,45,47,36,37,38,39,40,46,41,42,43,44,45,47,36,37,38,39,40,46,428,429,41,42,43,44,45,47,41,42,43,44,45,47,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,36,37,38,39,40,46,428,428,428,428,428,428,429,429,429,429,429,429,36,37,38,39,40,46,428,428,428,428,428,428,429,429,429,429,429,429,41,42,43,44,45,47,428,428,428,428,428,428,429,429,429,429,429,429,85,41,42,43,44,45,47,36,37,38,39,40,46,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,41,42,43,44,45,47,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,36,36,37,37,38,38,39,39,40,40,46,46,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,41,42,43,44,45,47,36,37,38,39,40,46,41,42,43,44,45,47,36,37,38,39,40,46,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,36,37,38,39,40,46,36,37,38,39,40,46,41,42,43,44,45,47,36,37,38,39,40,46,428,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,36,37,38,39,40,46,41,42,43,44,45,47,41,42,43,44,45,47,36,37,38,39,40,46,36,37,38,39,40,46,41,42,43,44,45,47,36,37,38,39,40,46,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,41,42,43,44,45,47,36,37,38,39,40,46,428,428,428,428,428,428,428,428,428,428,428,428,429,429,429,429,429,429,429,429,429,429,429,429,430,85,431,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,47,47,47,47,47,47,47,47,47,47,47,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,46,46,46,46,46,46,46,46,46,46,428,429,55,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,430,85,431,41,42,43,44,45,47,36,37,38,39,40,46,428,429,55,41,42,43,44,45,47,41,42,43,44,45,47,36,37,38,39,40,46,36,37,38,39,40,46,36,37,38,39,40,46,36,37,38,39,40,46,0,0,0,0,0,0,0,0,0,437,0,438,437,0,0,0,0,0,0,0,67,0,0,0,0,0,0,67,0,0,0,0,0,0,0,524,525,526,527,528,529,530,531,532,533,534,535,102,536,415,0,0,0,0,0,0,0,0,0,0,0,415,411,0,0,0,0,0,0,444,0,537,67,0,411,438,524,538,26,26,67,67,531,539,532,540,533,541,437,438,439,26,358,440,441,442,67,443,437,438,439,26,358,440,441,442,67,443,415,437,437,462,32,102,437,438,439,26,358,440,441,442,67,67,438,62,62,26,358,440,441,442,437,26,441,439,26,444,445,527,542,543,441,26,440,442,62,439,26,26,358,358,440,440,441,441,442,442,437,438,439,26,358,440,441,442,67,437,438,439,26,358,440,441,442,67,443,441,437,438,439,26,358,440,441,442,67,443,415,437,544,437,439,439,26,26,358,358,440,440,441,441,442,442,439,439,26,26,358,358,440,440,441,441,442,442,439,439,26,26,358,358,440,440,441,441,442,442,439,439,26,26,358,358,440,440,441,441,442,442,437,438,439,26,358,440,441,442,67,536,439,439,26,26,358,358,440,440,441,441,442,442,545,439,439,26,26,358,358,440,440,441,441,442,442,437,438,439,26,358,440,441,442,67,443,441,26,358,441,437,437,26,441,26,441,26,441,67,437,437,26,441,26,441,526,546,529,441,26,358,441,26,441,530,26,358,441,26,441,438,528,547,411,441,534,548,535,549,26,358,441,441,26,358,62,439,26,26,358,358,440,440,441,441,442,442,525,550,441,437,438,439,26,358,440,441,442,67,443,437,438,439,26,358,440,441,442,67,443,441,437,438,439,26,358,440,441,442,67,443,0,0,0,22,0,22,22,22,22,22,22,22,22,22,22,22,22,446,448,447,22,446,448,447,22,22,446,447,22,22,22,22,22,22,22,22,22,22,22,22,446,448,447,22,22,22,22,22,446,448,447,22,22,22,22,22,22,22,22,22,22,22,446,448,447,22,22,22,446,448,447,22,22,22,22,22,22,22,22,446,448,447,446,448,447,22,22,22,22,22,22,22,446,448,447,22,22,22,22,22,446,448,447,22,446,448,447,22,446,448,447,22,22,22,22,22,22,22,22,22,0,0,0,0,0,449,450,451,449,450,451,449,450,451,450,450,450,449,449,449,450,450,449,450,450,451,451,449,450,451,450,449,450,451,449,450,451,451,450,451,449,449,449,449,450,451,449,450,451,449,450,451,0,0,0,0,0,0,0,0,0,0,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,329,0,329,329,329,329,329,329,329,329,329,329,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,551,0,0,0,0,142,0,0,455,142,142,142,83,142,142,142,142,142,142,83,455,142,83,455,142,83,142,455,142,83,455,142,83,0,0,142,0,0,455,142,83,455,142,142,83,455,142,142,142,83,0,0,0,0,142,0,0,142,0,455,142,83,455,142,83,0,0,455,142,83,142,0,142,83,142,83,0,0,83,455,142,83,0,0,0,0,455,0,142,0,0,0,142,455,142,83,83,83,455,142,83,455,142,83,142,0,0,0,0,30,0,0,0,30,0,30,30,30,30,30,30,30,456,458,457,30,456,458,457,30,30,456,457,30,30,30,30,30,30,30,30,30,30,30,30,456,458,457,30,456,458,457,30,30,30,30,30,30,30,30,456,458,457,30,30,30,30,456,458,457,30,30,30,30,30,30,30,30,30,30,30,456,458,457,456,458,457,30,30,30,30,30,456,458,457,30,30,30,456,458,457,30,456,458,457,30,456,458,457,30,30,30,30,30,30,30,552,553,554,554,555,556,557,558,558,460,559,560,557,558,27,0,0,557,554,555,558,561,28,0,557,554,555,556,460,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,557,558,0,554,555,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,557,558,27,27,34,34,27,27,27,27,27,27,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,34,34,27,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,34,34,27,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,34,34,27,552,34,27,460,552,34,27,460,557,554,555,558,556,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,558,27,557,27,34,27,460,27,460,27,554,27,27,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,34,27,460,557,558,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,27,460,552,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,27,27,460,294,302,321,293,310,314,290,307,313,291,305,320,292,304,316,296,306,315,289,301,319,298,303,317,297,309,318,295,308,322,299,311,323,300,312,324,34,27,553,34,34,34,34,34,34,34,554,27,27,557,558,27,27,34,34,27,27,27,27,27,27,27,27,460,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,552,34,27,460,554,27,27,554,27,27,554,27,27,555,27,27,27,27,27,554,27,27,557,558,27,27,555,27,27,27,27,27,554,27,27,554,27,27,554,27,27,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,34,27,27,27,27,27,27,27,27,27,27,34,27,460,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,554,27,27,555,556,27,27,27,27,27,27,27,27,27,27,554,555,556,27,27,27,27,27,27,27,27,27,27,27,27,554,555,556,27,27,27,27,27,27,27,27,27,27,27,27,555,556,27,27,27,27,27,27,27,27,27,27,554,555,556,27,27,27,27,27,27,27,27,27,27,27,27,554,555,556,27,27,27,27,27,27,27,27,27,27,27,27,555,556,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,555,27,27,27,27,27,555,556,27,27,27,27,27,27,27,27,27,27,555,27,27,27,27,27,555,556,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,554,555,27,27,27,27,27,27,27,554,562,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,561,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,563,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,563,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,563,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,563,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,554,562,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,554,562,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,561,34,34,34,34,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,559,559,560,560,27,34,34,34,27,553,34,34,34,34,34,34,34,554,27,27,554,27,27,34,554,27,27,554,27,27,552,34,27,27,27,460,552,34,27,460,552,34,27,460,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,557,558,27,27,557,558,27,27,557,558,27,27,557,558,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,0,0,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,94,93,94,93,94,93,94,94,93,94,133,93,94,121,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,93,121,124,114,68,139,51,52,19,17,108,109,93,94,139,51,54,52,53,19,17,18,108,111,109,110,93,94,93,94,93,94,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,88,68,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,68,93,94,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,0,0,0,0,0,0,87,87,87,87,0,87,87,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,121,124,127,126,114,116,130,118,132,120,89,90,68,139,51,54,52,53,19,17,18,108,111,109,110,53,18,110,94,93,94,52,53,19,17,18,109,110,93,93,94,89,90,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,0,93,94,121,124,127,126,114,116,130,118,132,120,89,90,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,121,124,127,126,114,116,89,90,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,139,51,54,52,53,19,17,18,108,111,109,110,93,94,139,51,54,52,53,19,17,18,108,111,109,110,93,94,0,52,17,109,93,94,93,94,121,124,127,126,114,116,130,118,132,120,89,90,68,139,51,54,52,53,19,17,18,108,111,109,110,0,68,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,93,94,121,124,127,126,114,116,130,118,132,120,89,90,88,68,139,51,54,52,53,19,17,18,108,111,109,110,0,0,0,461,461,461,461,461,0,461,0,0,461,461,461,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,50,49,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,50,49,48,359,84,359,84,463,359,48,125,359,359,84,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,71,73,73,75,75,463,464,71,73,75,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,106,0,0,0,0,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,125,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,464,463,48,50,49,48,100,129,123,48,464,125,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,464,125,50,49,48,122,115,128,117,103,112,104,113,100,101,129,123,0,48,48,49,0,48,125,122,115,128,117,131,119,129,123,48,48,50,49,48,100,101,129,123,66,71,73,75,71,73,75,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,125,359,84,50,49,48,122,115,128,117,131,119,103,112,104,113,100,101,129,123,66,71,73,75,463,464,0,463,359,0,0,0,0,0,465,0,465,0,465,0,0,0,60,0,465,466,95,96,97,99,98,465,466,95,96,97,99,98,465,466,95,96,97,99,98,465,465,466,95,96,97,99,98,465,466,95,96,97,99,98,564,466,95,96,97,99,98,465,466,95,96,97,99,98,60,60,60,60,564,466,95,96,97,99,98,565,466,95,96,97,99,98,564,466,95,96,97,99,98,565,466,95,96,97,99,98,564,95,96,97,99,565,95,96,97,99,60,60,465,466,95,96,97,99,98,465,466,95,96,97,99,98,465,466,95,96,97,99,98,0,0,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,467,0,0,0,325,325,0,0,0,0,0,0,0,0,0,0,0,0,0,325,325,325,469,470,471,472,473,474,475,476,477,478,479,480,469,470,325,471,472,473,474,475,476,477,478,479,480,469,470,325,471,472,473,474,475,476,477,478,479,480,325,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,0,469,470,471,472,473,474,475,476,477,478,479,480,325,0,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,470,470,471,472,473,474,475,476,477,478,479,480,471,472,473,474,475,476,477,478,479,480,469,471,472,473,474,475,476,477,478,479,480,469,469,470,471,472,473,474,475,476,477,478,479,480,470,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,470,325,471,472,473,474,475,476,477,478,479,480,469,469,470,470,325,471,471,472,472,473,473,474,474,475,475,476,476,477,477,478,478,479,479,480,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,325,469,470,325,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,0,469,470,471,472,473,474,475,476,477,478,479,480,469,470,471,472,473,474,475,476,477,478,479,480,469,470,325,471,472,473,474,475,476,477,478,479,480,469,470,325,471,472,473,474,475,476,477,478,479,480,469,470,325,471,472,473,474,475,476,477,478,479,480,0,331,0,0,0,331,0,481,330,481,331,482,483,330,481,331,482,483,331,331,481,331,483,331,482,481,331,482,483,330,481,331,482,483,330,481,331,331,331,482,483,331,331,481,331,331,330,331,330,481,331,482,483,331,331,331,331,331,331,331,482,483,481,331,0,330,481,331,482,483,330,481,331,482,483,330,481,331,482,483,482,481,481,330,481,0,105,105,105,105,105,0,105,105,105,105,105,105,105,105,105,105,484,105,484,105,105,105,105,105,484,105,105,105,105,105,105,105,105,105,484,105,484,484,105,484,105,105,105,105,105,105,105,105,484,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,484,105,105,105,484,105,484,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],7],[[2,2],8],[[3,3],9],[[4,4],10],[[5,5],11],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],12],[[12,12],12],[12],[12],[[13,13]],[[13,13]],[[13,13]],[[13,13],13],[[14,14],14],[[14,14]],[[14,14]],[[14,14]],[[1,1]],[[1,1],1],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2],2],[[2,2]],[[3,3]],[[3,3],3],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[4,4],4],[[4,4]],[[5,5]],[[5,5]],[[5,5]],[[5,5],5],[[7,7],7],[[7,7]],[[7,7]],[[7,7]],[[8,8]],[[8,8],8],[[8,8]],[[8,8]],[[9,9]],[[9,9],9],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[10,10]],[[10,10],10],[[11,11]],[[11,11]],[[11,11],11],[[11,11]],[[6,6]],[[6,6]],[[6,6],6],[[6,6]],[[12,12],12],[[12,12]],[[12,12]],[[12,12]],[[13,13],15],[[13,13],15],[[14,14],15],[[14,14],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[],12],[[],12],[12,12],[12,12],[[[16,[-1]]],[[15,[[16,[-1]],[16,[-2]],[16,[-1]]]]],[],[]],[[[16,[-1]]],[[15,[[16,[-1]],[16,[-2]],[16,[-1]]]]],[],[]],0,0,0,0,0,[[[16,[-1]]],[[17,[-1]]],[]],[[[16,[-1]]],[[18,[-1]]],[]],[[[16,[-1]]],[[19,[-1]]],[]],[20,[[22,[21]]]],[[[23,[7]]],[[22,[[23,[21]]]]]],[[[16,[7]]],[[22,[[16,[21]]]]]],[24,[[22,[[16,[21]]]]]],[7,[[22,[21]]]],[[[23,[7]]],[[23,[21]]]],[[[16,[7]]],[[16,[21]]]],[[[16,[21]]],[[16,[7]]]],[24,[[16,[7]]]],[24,[[16,[7]]]],[[[16,[-1]]],[[15,[[16,[[23,[-1]]]],[16,[-1]]]]],[]],[[[16,[-1]]],[[15,[[16,[[23,[-1]]]],[16,[-1]]]]],[]],[[[16,[-1]]],[[16,[[23,[-1]]]]],[]],[[[16,[-1]]],[[16,[[23,[-1]]]]],[]],[[],[[22,[-1]]],25],[[[23,[-1]]],[[16,[-1]]],[]],[[[16,[-1]]],[[16,[-1]]],[]],[24,24],[16],[[[16,[-1]]],[],[]],[24,7],[[[16,[-1]]],26,[]],[[[23,[-1]]],[[16,[-1]]],[]],[16],[[[16,[-1]]],[],[]],[24,7],[[[16,[-1]]],26,[]],[[[16,[-1]]],[[15,[[16,[-1]],[16,[[23,[-1]]]]]]],[]],[[[16,[-1]]],[[15,[[16,[-1]],[16,[[23,[-1]]]]]]],[]],[[],[[22,[-1]]],25],[[],[[22,[-1]]],25],[[[23,[-1]]],[[16,[-1]]],[]],[[[16,[-1]]],[[16,[-1]]],[]],[24,24],[24,[[16,[7]]]],[[[16,[-1]]],[[15,[[16,[-1]],[16,[[27,[-1]]]],[16,[-1]]]]],28],[[[16,[-1]]],[[15,[[16,[-1]],[16,[[27,[-1]]]],[16,[-1]]]]],28],[[[23,[-1]]],16,[]],[[[23,[-1]]],[[16,[-1]]],[]],[[[16,[-1]]],16,[]],[[[16,[21]]],24],[[],[[22,[[29,[-1]]]]],[25,25]],[[],[[22,[[29,[-1]]]]],[25,25]],[[],[[22,[[29,[-1]]]]],[25,25]],[16,[[22,[[16,[[29,[-1]]]]]]],[]],[16,[[22,[[16,[[29,[-1]]]]]]],[]],[16,[[22,[[16,[[29,[-1]]]]]]],[]],0,0,0,0,0,0,[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[7,12],7],[[8,12],8],[[9,12],9],[[10,12],10],[[11,12],11],[[6,12],6],[[12,12],12],[[20,12],[[22,[20]]]],[[1,12],[[22,[1]]]],[[2,12],[[22,[2]]]],[[3,12],[[22,[3]]]],[[4,12],[[22,[4]]]],[[5,12],[[22,[5]]]],[[7,12],[[22,[7]]]],[[8,12],[[22,[8]]]],[[9,12],[[22,[9]]]],[[10,12],[[22,[10]]]],[[11,12],[[22,[11]]]],[[6,12],[[22,[6]]]],[[12,12],[[22,[12]]]],[[20,12],20],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[7,12],7],[[8,12],8],[[9,12],9],[[10,12],10],[[11,12],11],[[6,12],6],[[12,12],12],[[[16,[-1]],-1],[[30,[12,12]]],31],[[[16,[-1]],-2],[[30,[12,12]]],[],32],[[[16,[-1]],-2,-3],[[30,[12,12]]],[],31,32],[[33,[34,[-1]]],[[34,[-1]]],35],[[33,33],33],[[33,33]],[[33,33]],[[33,33]],[[1,1]],[[1,1],1],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2],2],[[2,2]],[[3,3]],[[3,3]],[[3,3]],[[3,3],3],[[4,4]],[[4,4]],[[4,4]],[[4,4],4],[[5,5]],[[5,5]],[[5,5],5],[[5,5]],[[7,7]],[[7,7]],[[7,7],7],[[7,7]],[[8,8]],[[8,8]],[[8,8]],[[8,8],8],[[9,9]],[[9,9]],[[9,9]],[[9,9],9],[[10,10]],[[10,10]],[[10,10]],[[10,10],10],[[11,11],11],[[11,11]],[[11,11]],[[11,11]],[[6,6],6],[[6,6]],[[6,6]],[[6,6]],[[12,12]],[[12,12],12],[[12,12]],[[12,12]],[[33,33],15],[[33,33],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[33,33],33],[[33,33]],[[33,33]],[[33,[34,[-1]]],[[34,[-1]]],35],[[33,33]],[[1,1],1],[[1,1]],[[1,36]],[[1,1]],[[1,1]],[[2,2]],[[2,2],2],[[2,2]],[[2,37]],[[2,2]],[[3,3]],[[3,3]],[[3,38]],[[3,3]],[[3,3],3],[[4,39]],[[4,4]],[[4,4]],[[4,4]],[[4,4],4],[[5,40]],[[5,5],5],[[5,5]],[[5,5]],[[5,5]],[[7,7]],[[7,7]],[[7,7],7],[[7,41]],[[7,7]],[[8,42]],[[8,8]],[[8,8]],[[8,8]],[[8,8],8],[[9,9],9],[[9,9]],[[9,43]],[[9,9]],[[9,9]],[[10,10]],[[10,10]],[[10,10]],[[10,44]],[[10,10],10],[[11,11]],[[11,11]],[[11,11]],[[11,11],11],[[11,45]],[[6,6]],[[6,6]],[[6,6]],[[6,6],6],[[6,46]],[[12,12]],[[12,12]],[[12,12]],[[12,47]],[[12,12],12],[[33,33],15],[[33,33],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[33,33],33],[[33,33]],[[33,33]],[[33,33]],[[33,[34,[-1]]],[],35],[[1,1],1],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2],2],[[2,2]],[[2,2]],[[3,3],3],[[3,3]],[[3,3]],[[3,3]],[[4,4]],[[4,4]],[[4,4]],[[4,4],4],[[5,5]],[[5,5],5],[[5,5]],[[5,5]],[[7,7]],[[7,7]],[[7,7],7],[[7,7]],[[8,8]],[[8,8]],[[8,8]],[[8,8],8],[[9,9]],[[9,9]],[[9,9],9],[[9,9]],[[10,10],10],[[10,10]],[[10,10]],[[10,10]],[[11,11],11],[[11,11]],[[11,11]],[[11,11]],[[6,6]],[[6,6]],[[6,6]],[[6,6],6],[[12,12]],[[12,12],12],[[12,12]],[[12,12]],[[33,33],15],[[33,33],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[16,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[16,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1,33],[[15,[1,33]]]],[[2,2,33],[[15,[2,33]]]],[[3,3,33],[[15,[3,33]]]],[[4,4,33],[[15,[4,33]]]],[[5,5,33],[[15,[5,33]]]],[[7,7,33],[[15,[7,33]]]],[[8,8,33],[[15,[8,33]]]],[[9,9,33],[[15,[9,33]]]],[[10,10,33],[[15,[10,33]]]],[[11,11,33],[[15,[11,33]]]],[[6,6,33],[[15,[6,33]]]],[[12,12,33],[[15,[12,33]]]],[12],[12],[6],[6],[[],6],[[],6],[12],[12],[24,48],[[1,1,33],[[15,[1,33]]]],[[2,2,33],[[15,[2,33]]]],[[3,3,33],[[15,[3,33]]]],[[4,4,33],[[15,[4,33]]]],[[5,5,33],[[15,[5,33]]]],[[7,7,33],[[15,[7,33]]]],[[8,8,33],[[15,[8,33]]]],[[9,9,33],[[15,[9,33]]]],[[10,10,33],[[15,[10,33]]]],[[11,11,33],[[15,[11,33]]]],[[6,6,33],[[15,[6,33]]]],[[12,12,33],[[15,[12,33]]]],[[7,7,7],[[15,[7,7]]]],[[8,8,8],[[15,[8,8]]]],[[9,9,9],[[15,[9,9]]]],[[10,10,10],[[15,[10,10]]]],[[12,12,12],[[15,[12,12]]]],[[]],[[]],[[]],[[]],[[24,12],12],0,0,0,0,0,[24,49],[24,50],[1,[[22,[1]]]],[2,[[22,[2]]]],[3,[[22,[3]]]],[4,[[22,[4]]]],[5,[[22,[5]]]],[6,[[22,[6]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[[7,1],[[22,[7]]]],[[8,2],[[22,[8]]]],[[9,3],[[22,[9]]]],[[10,4],[[22,[10]]]],[[11,5],[[22,[11]]]],[[12,6],[[22,[12]]]],[[1,7],[[22,[1]]]],[[2,8],[[22,[2]]]],[[3,9],[[22,[3]]]],[[4,10],[[22,[4]]]],[[5,11],[[22,[5]]]],[[6,12],[[22,[6]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[[1,1],[[22,[9]]]],[[2,2],[[22,[9]]]],[[3,3],[[22,[9]]]],[[4,4],[[22,[9]]]],[[5,5],[[22,[9]]]],[[7,7],[[22,[9]]]],[[8,8],[[22,[9]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[9]]]],[[11,11],[[22,[9]]]],[[6,6],[[22,[9]]]],[[12,12],[[22,[9]]]],[1,[[22,[9]]]],[2,[[22,[9]]]],[3,[[22,[9]]]],[4,[[22,[9]]]],[5,[[22,[9]]]],[7,[[22,[9]]]],[8,[[22,[9]]]],[9,[[22,[9]]]],[10,[[22,[9]]]],[11,[[22,[9]]]],[6,[[22,[9]]]],[12,[[22,[9]]]],[1,[[22,[9]]]],[2,[[22,[9]]]],[3,[[22,[9]]]],[4,[[22,[9]]]],[5,[[22,[9]]]],[7,[[22,[9]]]],[8,[[22,[9]]]],[9,[[22,[9]]]],[10,[[22,[9]]]],[11,[[22,[9]]]],[6,[[22,[9]]]],[12,[[22,[9]]]],[1,[[22,[1]]]],[2,[[22,[2]]]],[3,[[22,[3]]]],[4,[[22,[4]]]],[5,[[22,[5]]]],[6,[[22,[6]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[1,[[22,[1]]]],[2,[[22,[2]]]],[3,[[22,[3]]]],[4,[[22,[4]]]],[5,[[22,[5]]]],[7,[[22,[7]]]],[8,[[22,[8]]]],[9,[[22,[9]]]],[10,[[22,[10]]]],[11,[[22,[11]]]],[6,[[22,[6]]]],[12,[[22,[12]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[7,[[22,[7]]]],[8,[[22,[8]]]],[9,[[22,[9]]]],[10,[[22,[10]]]],[11,[[22,[11]]]],[12,[[22,[12]]]],[[1,9],[[22,[1]]]],[[2,9],[[22,[2]]]],[[3,9],[[22,[3]]]],[[4,9],[[22,[4]]]],[[5,9],[[22,[5]]]],[[7,9],[[22,[7]]]],[[8,9],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,9],[[22,[10]]]],[[11,9],[[22,[11]]]],[[6,9],[[22,[6]]]],[[12,9],[[22,[12]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[[1,9],[[22,[1]]]],[[2,9],[[22,[2]]]],[[3,9],[[22,[3]]]],[[4,9],[[22,[4]]]],[[5,9],[[22,[5]]]],[[7,9],[[22,[7]]]],[[8,9],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,9],[[22,[10]]]],[[11,9],[[22,[11]]]],[[6,9],[[22,[6]]]],[[12,9],[[22,[12]]]],[[1,9],[[22,[1]]]],[[2,9],[[22,[2]]]],[[3,9],[[22,[3]]]],[[4,9],[[22,[4]]]],[[5,9],[[22,[5]]]],[[7,9],[[22,[7]]]],[[8,9],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,9],[[22,[10]]]],[[11,9],[[22,[11]]]],[[6,9],[[22,[6]]]],[[12,9],[[22,[12]]]],[[1,1],[[22,[1]]]],[[2,2],[[22,[2]]]],[[3,3],[[22,[3]]]],[[4,4],[[22,[4]]]],[[5,5],[[22,[5]]]],[[7,7],[[22,[7]]]],[[8,8],[[22,[8]]]],[[9,9],[[22,[9]]]],[[10,10],[[22,[10]]]],[[11,11],[[22,[11]]]],[[6,6],[[22,[6]]]],[[12,12],[[22,[12]]]],[[1,7],[[22,[1]]]],[[2,8],[[22,[2]]]],[[3,9],[[22,[3]]]],[[4,10],[[22,[4]]]],[[5,11],[[22,[5]]]],[[6,12],[[22,[6]]]],[[[16,[-1]],12],[[51,[-1]]],[]],[[[16,[-1]],12],[[52,[-1]]],[]],[[[16,[-1]],12],[[53,[-1]]],[]],[[[16,[-1]],12],[[54,[-1]]],[]],[[33,33,33],33],[[13,13,13],13],[[14,14,14],14],[13,55],[14,55],0,[33,33],[56,56],[20,20],[15,15],[[]],[[]],[[[23,[-1]]],[[23,[-1]]],57],[-1,-1,[]],[13,13],[14,14],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[-1,-1,[]],[[[23,[-1]],[23,[-1]]],15,57],[[[16,[-1]],[16,[-1]]],15,57],0,[[33,33],58],[[56,56],58],[[20,20],58],[[15,15],58],[[],58],[[],58],[[[23,[-1]],[23,[-1]]],58,31],[[[16,[-1]],[16,[-1]]],58,31],[[24,24],58],[[-1,[15,[-2]]],58,[],[]],[[1,1],58],[[2,2],58],[[3,3],58],[[4,4],58],[[5,5],58],[[7,7],58],[[8,8],58],[[9,9],58],[[10,10],58],[[11,11],58],[[6,6],58],[[12,12],58],[[-1,-2],58,[],[]],0,0,0,0,0,0,[[[16,[-1]],-1],33,59],[[24,-1],33,60],0,[12,15],[12,15],[[[16,[-1]],[16,[-1]]],15,61],[12,15],[12,15],[12,15],[12,15],[[[16,[-1]],-2,12],15,61,[[62,[12]]]],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],0,0,0,[-1,63,64],0,[[],33],[[],20],[[],15],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],[]],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[23,[-1]]],65],[[],[[16,[-1]]],[]],[[],[[16,[-1]]],[]],[[],24],[[],24],[[],[[15,[-1]]],[]],[[],13],[[],14],[[],1],[[],2],[[],3],[[],4],[[],5],[[],7],[[],8],[[],9],[[],10],[[],11],[[],6],[[],12],[[13,13]],[[13,13]],[[13,13],13],[[13,13]],[[14,14]],[[14,14]],[[14,14],14],[[14,14]],[[1,1]],[[1,1],1],[[1,1]],[[1,1]],[[2,2],2],[[2,2]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[3,3],3],[[3,3]],[[4,4]],[[4,4]],[[4,4],4],[[4,4]],[[5,5]],[[5,5]],[[5,5]],[[5,5],5],[[7,7]],[[7,7]],[[7,7]],[[7,41],7],[[7,7],7],[[8,8]],[[8,8]],[[8,8],8],[[8,42],8],[[8,8]],[[9,9]],[[9,9]],[[9,43],9],[[9,9],9],[[9,9]],[[10,44],10],[[10,10],10],[[10,10]],[[10,10]],[[10,10]],[[11,11],11],[[11,11]],[[11,11]],[[11,45],11],[[11,11]],[[6,6]],[[6,6],6],[[6,6]],[[6,6]],[[12,12],12],[[12,12]],[[12,12]],[[12,12]],[[12,47],12],[[13,13],15],[[13,13],15],[[14,14],15],[[14,14],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[],15],[[[23,[-1]]],[[23,[-1]]],[]],[[[23,[-1]]],[[23,[-1]]],[]],[[20,[16,[8]]],[[16,[8]]]],[24,66],[[20,[16,[7]]],24],[[[15,[[67,[-1]],[67,[-1]]]]],[[67,[-1]]],[]],[[[15,[[67,[-1]],[67,[-1]]]]],[[67,[-1]]],25],[[[16,[-1]],[16,[-1]]],33,59],[[24,-1],33,60],0,[[33,33],33],[[56,56],33],[[20,20],33],[[15,15],33],[[],33],[[],33],[[[23,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[23,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[23,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[23,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[24,24],33],[[-1,[15,[-2]]],33,[],[]],[[13,13],33],[[14,14],33],[[1,1],33],[[2,2],33],[[3,3],33],[[4,4],33],[[5,5],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[6,6],33],[[12,12],33],[[-1,-2],33,[],[]],[[20,20],33],[[[16,[7]],[16,[7]]],33],[[24,24],33],[[7,7],33],0,[[[16,[7]]],68],[7,69],[20,70],[24,71],[20,72],[24,73],[20,74],[24,75],[[],12],[[],12],[[15,-1],15,64],[[[15,[-2,-4]],-5],15,[],[[76,[-1]]],[],[[76,[-3]]],64],[[15,15],15],[[[15,[-2,-4]],[15,[-1,-3]]],15,[],[[76,[-1]]],[],[[76,[-3]]]],[[[15,[-2,-4]],12],15,[],[[76,[-1]]],[],[[76,[-3]]]],0,0,0,0,0,0,[[[16,[-1]],-1],15,57],[[[16,[-1]],-2],15,[],32],[[24,-1],[[22,[12]]],60],[[[16,[-1]]],[[22,[-1]]],[]],[[[16,[-1]]],[[22,[[23,[-1]]]]],[]],[[[16,[-1]]],[[22,[[23,[-1]]]]],[]],[[[16,[-1]]],[[22,[-1]]],[]],[[[16,[[23,[-1]]]]],[[16,[-1]]],[]],[[[16,[[23,[-1]]]]],[[16,[-1]]],[]],[[24,12],12],0,[[33,77],78],[[33,77],78],[[56,77],78],[[56,77],78],[[20,77],78],[[20,77],78],[[15,77],78],[77,78],[77,78],[77,78],[77,78],[[[23,[-1]],77],78,79],[[[16,[-1]],77],78,79],[[24,77],78],[[24,77],78],[[-1,77],78,[]],[[13,77],78],[[14,77],78],[[1,77],78],[[1,77],78],[[1,77],78],[[1,77],78],[[1,77],78],[[1,77],78],[[1,77],78],[[1,77],78],[[2,77],78],[[2,77],78],[[2,77],78],[[2,77],78],[[2,77],78],[[2,77],78],[[2,77],78],[[2,77],78],[[3,77],78],[[3,77],78],[[3,77],78],[[3,77],78],[[3,77],78],[[3,77],78],[[3,77],78],[[3,77],78],[[4,77],78],[[4,77],78],[[4,77],78],[[4,77],78],[[4,77],78],[[4,77],78],[[4,77],78],[[4,77],78],[[5,77],78],[[5,77],78],[[5,77],78],[[5,77],78],[[5,77],78],[[5,77],78],[[5,77],78],[[5,77],78],[[7,77],78],[[7,77],78],[[7,77],78],[[7,77],78],[[7,77],78],[[7,77],78],[[7,77],78],[[7,77],78],[[8,77],78],[[8,77],78],[[8,77],78],[[8,77],78],[[8,77],78],[[8,77],78],[[8,77],78],[[8,77],78],[[9,77],78],[[9,77],78],[[9,77],78],[[9,77],78],[[9,77],78],[[9,77],78],[[9,77],78],[[9,77],78],[[10,77],78],[[10,77],78],[[10,77],78],[[10,77],78],[[10,77],78],[[10,77],78],[[10,77],78],[[10,77],78],[[11,77],78],[[11,77],78],[[11,77],78],[[11,77],78],[[11,77],78],[[11,77],78],[[11,77],78],[[11,77],78],[[6,77],78],[[6,77],78],[[6,77],78],[[6,77],78],[[6,77],78],[[6,77],78],[[6,77],78],[[6,77],78],[[12,77],78],[[12,77],78],[[12,77],78],[[12,77],78],[[12,77],78],[[12,77],78],[[12,77],78],[[12,77],78],[[-1,77],[[30,[15,80]]],[]],[[-1,77],[[30,[15,80]]],[]],0,0,0,[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[7,12],7],[[8,12],8],[[9,12],9],[[10,12],10],[[11,12],11],[[6,12],6],[[12,12],12],[[20,12],[[22,[20]]]],[[1,12],[[22,[1]]]],[[2,12],[[22,[2]]]],[[3,12],[[22,[3]]]],[[4,12],[[22,[4]]]],[[5,12],[[22,[5]]]],[[7,12],[[22,[7]]]],[[8,12],[[22,[8]]]],[[9,12],[[22,[9]]]],[[10,12],[[22,[10]]]],[[11,12],[[22,[11]]]],[[6,12],[[22,[6]]]],[[12,12],[[22,[12]]]],[[20,12],20],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[7,12],7],[[8,12],8],[[9,12],9],[[10,12],10],[[11,12],11],[[6,12],6],[[12,12],12],[-1,-1,[]],[7,20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[15,[-1,-1]]],[[23,[-1]]],[]],[[[27,[-1]]],[[23,[-1]]],28],[[[15,[-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1]]],[[23,[-1]]],[]],[-1,-1,[]],[[[34,[-1]]],[[23,[33]]],35],[[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1,-1]]],[[23,[-1]]],[]],[-1,-1,[]],[[[15,[-1,-1,-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[-1,-1,[]],[[[15,[-1,-1,-1,-1,-1,-1]]],[[23,[-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1]]],[]],[-1,-1,[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1,-1]]],[]],[[[23,[-1]]],[[15,[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]],[]],[2,13],[33,13],[-1,-1,[]],[8,13],[7,13],[1,13],[3,14],[7,14],[9,14],[1,14],[8,14],[-1,-1,[]],[13,14],[2,14],[33,14],[36,1],[33,1],[-1,-1,[]],[7,2],[37,2],[-1,-1,[]],[1,2],[33,2],[1,3],[-1,-1,[]],[38,3],[8,3],[7,3],[33,3],[2,3],[2,4],[9,4],[39,4],[33,4],[7,4],[1,4],[-1,-1,[]],[8,4],[3,4],[4,5],[1,5],[9,5],[8,5],[3,5],[2,5],[33,5],[10,5],[7,5],[-1,-1,[]],[40,5],[33,7],[41,7],[-1,-1,[]],[33,8],[7,8],[-1,-1,[]],[42,8],[20,9],[81,9],[33,9],[8,9],[43,9],[-1,-1,[]],[7,9],[44,10],[20,10],[8,10],[33,10],[-1,-1,[]],[7,10],[9,10],[-1,-1,[]],[82,11],[9,11],[10,11],[7,11],[8,11],[33,11],[20,11],[45,11],[1,6],[46,6],[33,6],[7,6],[-1,-1,[]],[2,6],[7,12],[33,12],[8,12],[83,12],[-1,-1,[]],[47,12],[-1,-1,[]],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[[[23,[7]]],13],[[[23,[7]]],14],[[[23,[7]]],1],[[[23,[7]]],2],[[[23,[7]]],3],[[[23,[7]]],4],[[[23,[7]]],5],[[[23,[7]]],7],[[[23,[7]]],8],[[[23,[7]]],9],[[[23,[7]]],10],[[[23,[7]]],11],[[[23,[7]]],6],[[[23,[7]]],12],[12],[12],[9,13],[10,14],[[9,9],[[22,[20]]]],[-1,15,64],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[[[23,[7]]],13],[[[23,[7]]],14],[[[23,[7]]],1],[[[23,[7]]],2],[[[23,[7]]],3],[[[23,[7]]],4],[[[23,[7]]],5],[[[23,[7]]],7],[[[23,[7]]],8],[[[23,[7]]],9],[[[23,[7]]],10],[[[23,[7]]],11],[[[23,[7]]],6],[[[23,[7]]],12],[[[23,[7]]],13],[[[23,[7]]],14],[[[23,[7]]],1],[[[23,[7]]],2],[[[23,[7]]],3],[[[23,[7]]],4],[[[23,[7]]],5],[[[23,[7]]],7],[[[23,[7]]],8],[[[23,[7]]],9],[[[23,[7]]],10],[[[23,[7]]],11],[[[23,[7]]],6],[[[23,[7]]],12],[24,[[30,[33,84]]]],[24,[[30,[20]]]],[24,[[30,[1,85]]]],[24,[[30,[2,85]]]],[24,[[30,[3,85]]]],[24,[[30,[4,85]]]],[24,[[30,[5,85]]]],[24,[[30,[7,85]]]],[24,[[30,[8,85]]]],[24,[[30,[9,85]]]],[24,[[30,[10,85]]]],[24,[[30,[11,85]]]],[24,[[30,[6,85]]]],[24,[[30,[12,85]]]],[[24,9],[[30,[1,85]]]],[[24,9],[[30,[2,85]]]],[[24,9],[[30,[3,85]]]],[[24,9],[[30,[4,85]]]],[[24,9],[[30,[5,85]]]],[[24,9],[[30,[7,85]]]],[[24,9],[[30,[8,85]]]],[[24,9],[[30,[9,85]]]],[[24,9],[[30,[10,85]]]],[[24,9],[[30,[11,85]]]],[[24,9],[[30,[6,85]]]],[[24,9],[[30,[12,85]]]],[9,[[22,[20]]]],[9,20],0,[[20,20],33],[[],33],[[],33],[[[23,[-1]],[23,[-1]]],33,86],[[-1,[15,[-2]]],33,[],[]],[[13,13],33],[[14,14],33],[[1,1],33],[[2,2],33],[[3,3],33],[[4,4],33],[[5,5],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[6,6],33],[[12,12],33],[[[16,[-1]],-2],22,[],[[87,[[16,[-1]]]]]],[[24,-1],22,[[87,[24]]]],[[[15,[[67,[12]],[67,[12]]]],[16,[-1]]],22,[]],[[[15,[[67,[12]],[67,[12]]]],24],[[22,[24]]]],[[12,[16,[-1]]],[[22,[-1]]],[]],[[[16,[-1]],[23,[12]]],[[30,[[23,[-1]],88]]],[]],[[[16,[-1]],[23,[12]]],[[23,[-1]]],[]],[[[16,[-1]],-2],22,[],[[87,[[16,[-1]]]]]],[[24,-1],22,[[87,[24]]]],[[[15,[[67,[12]],[67,[12]]]],[16,[-1]]],22,[]],[[[15,[[67,[12]],[67,[12]]]],24],[[22,[24]]]],[[12,[16,[-1]]],[[22,[-1]]],[]],[[16,-2],[],[],[[87,[[16,[-1]]]]]],[[[16,[-1]],-2],[],[],[[87,[[16,[-1]]]]]],[[24,-1],[],[[87,[24]]]],[[[15,[[67,[12]],[67,[12]]]],24],24],[[[15,[[67,[12]],[67,[12]]]],16]],[[12,16]],[[16,-2],[],[],[[87,[[16,[-1]]]]]],[[[16,[-1]],-2],[],[],[[87,[[16,[-1]]]]]],[[24,-1],[],[[87,[24]]]],[[[15,[[67,[12]],[67,[12]]]],24],24],[[[15,[[67,[12]],[67,[12]]]],16]],[[12,16]],[[[16,[-1]],-2],[[89,[-1,-2]]],[],32],[[[16,[-1]],-2],[[90,[-1,-2]]],[],32],[[20,20],33],[[],33],[[],33],[[[23,[-1]],[23,[-1]]],33,86],[[-1,[15,[-2]]],33,[],[]],[[13,13],33],[[14,14],33],[[1,1],33],[[2,2],33],[[3,3],33],[[4,4],33],[[5,5],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[6,6],33],[[12,12],33],[[],[[22,[33]]]],[[],[[22,[33]]]],[[],[[22,[33]]]],[[],[[22,[33]]]],0,[[33,-1],15,91],[[56,-1],15,91],[[20,-1],15,91],[[15,-1],15,91],[-1,15,91],[-1,15,91],[[[23,[-1]],-2],15,92,91],[[[16,[-1]],-2],15,92,91],[[24,-1],15,91],[[-1,-2],15,[],91],[[1,-1],15,91],[[2,-1],15,91],[[3,-1],15,91],[[4,-1],15,91],[[5,-1],15,91],[[7,-1],15,91],[[8,-1],15,91],[[9,-1],15,91],[[10,-1],15,91],[[11,-1],15,91],[[6,-1],15,91],[[12,-1],15,91],[[-1,-2],15,[],91],[[[16,[1]],-1],15,91],[[[16,[2]],-1],15,91],[[[16,[3]],-1],15,91],[[[16,[4]],-1],15,91],[[[16,[5]],-1],15,91],[[[16,[7]],-1],15,91],[[[16,[8]],-1],15,91],[[[16,[9]],-1],15,91],[[[16,[10]],-1],15,91],[[[16,[11]],-1],15,91],[[[16,[6]],-1],15,91],[[[16,[12]],-1],15,91],0,0,0,0,0,0,0,0,0,0,0,[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[5,5],9],[[7,7],9],[[8,8],9],[[9,9],9],[[10,10],9],[[11,11],9],[[6,6],9],[[12,12],9],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],0,0,0,[[[23,[-1]],-2],[],[],[]],[[[16,[-1]],-2],[],[],[[87,[[16,[-1]]]]]],[[24,-1],[],[[87,[24]]]],[[[15,[[67,[12]],[67,[12]]]],[16,[-1]]],[],[]],[[[15,[[67,[12]],[67,[12]]]],24],24],[[12,[16,[-1]]],-1,[]],[[[23,[-1]],-2],[],[],[]],[[[16,[-1]],-2],[],[],[[87,[[16,[-1]]]]]],[[24,-1],[],[[87,[24]]]],[[[15,[[67,[12]],[67,[12]]]],[16,[-1]]],[],[]],[[[15,[[67,[12]],[67,[12]]]],24],24],[[12,[16,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[93,[-1]]],[]],[[[23,[-1]]],[],[]],[[[23,[-1]]],[[94,[-1]]],[]],[[[16,[-1]]],[[93,[-1]]],[]],[[[16,[-1]]],[[94,[-1]]],[]],[[20,24]],[[[23,[20]],24],95],[[[23,[20]],24],96],[[[16,[20]],24],97],[[24,24],98],[[24,24],98],[[-1,24],[[99,[-2]]],[],[]],0,[[],33],[[],33],[12,33],[12,33],[20,33],[20,33],[20,33],[[[16,[7]]],33],[24,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[20,33],[7,33],[[24,12],33],[[20,24],33],[[[23,[20]],24],33],[[[23,[20]],24],33],[[[16,[20]],24],33],[[24,24],33],[[24,24],33],[[-1,24],33,[]],[20,33],[[20,9],33],[16,33],[[[16,[-1]]],33,[]],[24,33],[13,33],[14,33],[13,33],[14,33],[20,33],[13,33],[14,33],[1,33],[2,33],[3,33],[4,33],[5,33],[6,33],[13,33],[14,33],[[],33],[[],33],[20,33],[1,33],[2,33],[3,33],[4,33],[5,33],[6,33],[7,33],[8,33],[9,33],[10,33],[11,33],[12,33],[[20,24],33],[[[23,[20]],24],33],[[[23,[20]],24],33],[[[16,[20]],24],33],[[24,24],33],[[24,24],33],[[-1,24],33,[]],[13,33],[14,33],[13,33],[14,33],[[[16,[-1]]],33,86],[[[16,[-1]],-2],33,[],32],[[[16,[-1]],-2],33,[],32],[13,33],[14,33],[[20,24],33],[[[23,[20]],24],33],[[[23,[20]],24],33],[[[16,[20]],24],33],[[24,24],33],[[24,24],33],[[-1,24],33,[]],[20,33],[8,33],[20,33],0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],0,[[[16,[-1]]],[[93,[-1]]],[]],[[[16,[-1]]],[[94,[-1]]],[]],[[[16,[-1]]],[[22,[-1]]],[]],[[[16,[-1]]],[[22,[[23,[-1]]]]],[]],[[[16,[-1]]],[[22,[[23,[-1]]]]],[]],[[[16,[-1]]],[[22,[-1]]],[]],[[20,20],33],[[],33],[[],33],[[[23,[-1]],[23,[-1]]],33,86],[[-1,[15,[-2]]],33,[],[]],[[13,13],33],[[14,14],33],[[1,1],33],[[2,2],33],[[3,3],33],[[4,4],33],[[5,5],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[6,6],33],[[12,12],33],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],[16,12],[16,12],[[[16,[-1]]],12,[]],[24,12],[20,12],[20,12],0,[24,100],[24,101],0,[[20,20],33],[[],33],[[],33],[[[23,[-1]],[23,[-1]]],33,86],[[-1,[15,[-2]]],33,[],[]],[[13,13],33],[[14,14],33],[[1,1],33],[[2,2],33],[[3,3],33],[[4,4],33],[[5,5],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[6,6],33],[[12,12],33],[20,15],[[[16,[7]]],15],[24,15],[7,15],[20,15],[[[16,[7]]],15],[24,15],[7,15],[[[23,[-1]],-2],[[23,[-3]]],[],32,[]],[-1,[],102],[-1,[],102],0,[12],[12],[[24,-1],[[103,[-1]]],60],[[24,-1],[[104,[-1]]],60],0,[[33,33],33],[[13,13],13],[[14,14],14],[[],1],[[],2],[[],3],[[],4],[[],5],[[],7],[[],8],[[],9],[[],10],[[],11],[[],6],[[],12],[[13,13],13],[[14,14],14],0,[[13,13],13],[[14,14],14],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[33,33],33],[[13,13],13],[[14,14],14],[[],1],[[],2],[[],3],[[],4],[[],5],[[],7],[[],8],[[],9],[[],10],[[],11],[[],6],[[],12],[[13,13],13],[[14,14],14],0,[[13,13]],[[13,13]],[[13,13],13],[[13,13]],[[14,14],14],[[14,14]],[[14,14]],[[14,14]],[[1,1],1],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2],2],[[2,2]],[[3,3]],[[3,3]],[[3,3],3],[[3,3]],[[4,4]],[[4,4]],[[4,4],4],[[4,4]],[[5,5],5],[[5,5]],[[5,5]],[[5,5]],[[7,7]],[[7,7],7],[[7,7]],[[7,7]],[[8,8]],[[8,8]],[[8,8],8],[[8,8]],[[9,9]],[[9,9]],[[9,9]],[[9,9],9],[[9,105],105],[[10,10]],[[10,10],10],[[10,10]],[[10,10]],[[11,11],11],[[11,11]],[[11,11]],[[11,11]],[[6,6]],[[6,6],6],[[6,6]],[[6,6]],[[12,12],12],[[12,12]],[[12,12]],[[12,12]],[[13,13],15],[[13,13],15],[[14,14],15],[[14,14],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[33,33],33],[[20,20],33],[[15,15],33],[[[23,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[23,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[23,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[23,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[16,[-1]]],33,[],[[59,[-1]]]],[[[16,[-2]],[23,[-1]]],33,[],[[59,[-1]]]],[[-1,[15,[-2]]],33,[],[]],[[13,13],33],[[14,14],33],[[1,1],33],[[2,2],33],[[3,3],33],[[4,4],33],[[5,5],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[6,6],33],[[12,12],33],[13,13],[13],[14],[14,14],[1,1],[1],[2],[2,2],[3,3],[3],[4,4],[4],[5],[5,5],[6],[6,6],0,0,[13,13],[14,14],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[33,33],[33],[56,56],[1,1],[1],[2],[2,2],[3,3],[3],[4],[4,4],[5],[5,5],[7,7],[7],[8],[8,8],[9,9],[9],[10,10],[10],[11],[11,11],[6,6],[6],[12,12],[12],0,[6],[6],[[],6],[[],6],0,0,0,[1,[[15,[1,33]]]],[2,[[15,[2,33]]]],[3,[[15,[3,33]]]],[4,[[15,[4,33]]]],[5,[[15,[5,33]]]],[6,[[15,[6,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[[7,1],[[15,[7,33]]]],[[8,2],[[15,[8,33]]]],[[9,3],[[15,[9,33]]]],[[10,4],[[15,[10,33]]]],[[11,5],[[15,[11,33]]]],[[12,6],[[15,[12,33]]]],[[1,7],[[15,[1,33]]]],[[2,8],[[15,[2,33]]]],[[3,9],[[15,[3,33]]]],[[4,10],[[15,[4,33]]]],[[5,11],[[15,[5,33]]]],[[6,12],[[15,[6,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[1,[[15,[1,33]]]],[2,[[15,[2,33]]]],[3,[[15,[3,33]]]],[4,[[15,[4,33]]]],[5,[[15,[5,33]]]],[7,[[15,[7,33]]]],[8,[[15,[8,33]]]],[9,[[15,[9,33]]]],[10,[[15,[10,33]]]],[11,[[15,[11,33]]]],[6,[[15,[6,33]]]],[12,[[15,[12,33]]]],[[1,9],[[15,[1,33]]]],[[2,9],[[15,[2,33]]]],[[3,9],[[15,[3,33]]]],[[4,9],[[15,[4,33]]]],[[5,9],[[15,[5,33]]]],[[7,9],[[15,[7,33]]]],[[8,9],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,9],[[15,[10,33]]]],[[11,9],[[15,[11,33]]]],[[6,9],[[15,[6,33]]]],[[12,9],[[15,[12,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[[1,9],[[15,[1,33]]]],[[2,9],[[15,[2,33]]]],[[3,9],[[15,[3,33]]]],[[4,9],[[15,[4,33]]]],[[5,9],[[15,[5,33]]]],[[7,9],[[15,[7,33]]]],[[8,9],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,9],[[15,[10,33]]]],[[11,9],[[15,[11,33]]]],[[6,9],[[15,[6,33]]]],[[12,9],[[15,[12,33]]]],[[1,9],[[15,[1,33]]]],[[2,9],[[15,[2,33]]]],[[3,9],[[15,[3,33]]]],[[4,9],[[15,[4,33]]]],[[5,9],[[15,[5,33]]]],[[7,9],[[15,[7,33]]]],[[8,9],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,9],[[15,[10,33]]]],[[11,9],[[15,[11,33]]]],[[6,9],[[15,[6,33]]]],[[12,9],[[15,[12,33]]]],[[1,1],[[15,[1,33]]]],[[2,2],[[15,[2,33]]]],[[3,3],[[15,[3,33]]]],[[4,4],[[15,[4,33]]]],[[5,5],[[15,[5,33]]]],[[7,7],[[15,[7,33]]]],[[8,8],[[15,[8,33]]]],[[9,9],[[15,[9,33]]]],[[10,10],[[15,[10,33]]]],[[11,11],[[15,[11,33]]]],[[6,6],[[15,[6,33]]]],[[12,12],[[15,[12,33]]]],[[1,7],[[15,[1,33]]]],[[2,8],[[15,[2,33]]]],[[3,9],[[15,[3,33]]]],[[4,10],[[15,[4,33]]]],[[5,11],[[15,[5,33]]]],[[6,12],[[15,[6,33]]]],0,0,0,[24,[[30,[-1]]],106],[[33,33],[[22,[58]]]],[[56,56],[[22,[58]]]],[[20,20],[[22,[58]]]],[[15,15],[[22,[58]]]],[[],[[22,[58]]]],[[],[[22,[58]]]],[[[23,[-1]],[23,[-1]]],[[22,[58]]],86],[[[16,[-1]],[16,[-1]]],[[22,[58]]],86],[[24,24],[[22,[58]]]],[[-1,[15,[-2]]],[[22,[58]]],[],[]],[[13,13],[[22,[58]]]],[[14,14],[[22,[58]]]],[[1,1],[[22,[58]]]],[[2,2],[[22,[58]]]],[[3,3],[[22,[58]]]],[[4,4],[[22,[58]]]],[[5,5],[[22,[58]]]],[[7,7],[[22,[58]]]],[[8,8],[[22,[58]]]],[[9,9],[[22,[58]]]],[[10,10],[[22,[58]]]],[[11,11],[[22,[58]]]],[[6,6],[[22,[58]]]],[[12,12],[[22,[58]]]],[[-1,-2],[[22,[58]]],[],[]],[[[16,[-1]]],[[15,[[16,[-1]],[16,[-1]]]]],59],[[[16,[-1]],-2],[[15,[[16,[-1]],[16,[-1]]]]],[],32],[[[16,[-1]],-2],[[15,[[16,[-1]],[16,[-1]]]]],[],32],[[[16,[-1]],-2],12,[],32],0,0,[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],0,0,[-1,13,107],[-1,13,107],[-1,14,107],[-1,14,107],[-1,1,107],[-1,1,107],[-1,2,107],[-1,2,107],[-1,3,107],[-1,3,107],[-1,4,107],[-1,4,107],[-1,5,107],[-1,5,107],[-1,7,107],[-1,7,107],[-1,8,107],[-1,8,107],[-1,9,107],[-1,9,107],[-1,10,107],[-1,10,107],[-1,11,107],[-1,11,107],[-1,6,107],[-1,6,107],[-1,12,107],[-1,12,107],0,[[[16,[-1]],12],[[108,[-1]]],[]],[[[16,[-1]],12],[[109,[-1]]],[]],[[[16,[-1]],12],[[110,[-1]]],[]],[[[16,[-1]],12],[[111,[-1]]],[]],[[],-1,[25,25]],[[],-1,[25,25]],[[],-1,[25,25]],[[],-1,[25,25]],[[],-1,[25,25]],[[],-1,[25,25]],[13,13],[14,14],0,[[13,13],13],[[13,13]],[[13,13]],[[13,13]],[[14,14]],[[14,14]],[[14,14]],[[14,14],14],[[1,1]],[[1,1]],[[1,1],1],[[1,1]],[[2,2],2],[[2,2]],[[2,2]],[[2,2]],[[3,3]],[[3,3]],[[3,3],3],[[3,3]],[[4,4],4],[[4,4]],[[4,4]],[[4,4]],[[5,5]],[[5,5],5],[[5,5]],[[5,5]],[[7,7]],[[7,7]],[[7,7],7],[[7,41],7],[[7,7]],[[8,8],8],[[8,8]],[[8,8]],[[8,8]],[[8,42],8],[[9,9],9],[[9,9]],[[9,43],9],[[9,9]],[[9,9]],[[10,10]],[[10,44],10],[[10,10]],[[10,10]],[[10,10],10],[[11,11]],[[11,11]],[[11,11]],[[11,11],11],[[11,45],11],[[6,6],6],[[6,6]],[[6,6]],[[6,6]],[[12,12],12],[[12,47],12],[[12,12]],[[12,12]],[[12,12]],[[13,13],15],[[13,13],15],[[14,14],15],[[14,14],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[-1,-1,[25,25]],0,[[[16,[-1]]],15,[]],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[[24,-1],[[22,[12]]],60],[[24,-1],[[112,[-1]]],60],[[24,-1],[[113,[-1]]],60],[[[16,[-1]],12],15,[]],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[[16,[-1]],12],15,[]],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[[16,[-1]],-2],[[114,[-1,-2]]],[],32],[[24,-1],[[115,[-1]]],60],[[[23,[-1]]],[[15,[[16,[-1]],[23,[-1]]]]],[]],[[[16,[-1]]],[[15,[[16,[-1]],[23,[-1]]]]],[]],[[[23,[-1]]],[[15,[[16,[-1]],[23,[-1]]]]],[]],[[[16,[-1]]],[[15,[[16,[-1]],[23,[-1]]]]],[]],[[[16,[-1]],-2],[[116,[-1,-2]]],[],32],[[24,-1],[[22,[[15,[24,24]]]]],60],[[24,-1],[[117,[-1]]],60],[[[16,[-1]],12,-2],[[118,[-1,-2]]],[],32],[[24,12,-1],[[119,[-1]]],60],[[[16,[-1]],12,-2],[[120,[-1,-2]]],[],32],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[7,1],7],[[8,2],8],[[9,3],9],[[10,4],10],[[11,5],11],[[12,6],12],[[1,7],1],[[2,8],2],[[3,9],3],[[4,10],4],[[5,11],5],[[6,12],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,7],1],[[2,8],2],[[3,9],3],[[4,10],4],[[5,11],5],[[6,12],6],[[[16,[-1]],12],[[15,[[16,[-1]],-1,[16,[-1]]]]],31],[[[16,[-1]],12,-2],[[15,[[16,[-1]],-1,[16,[-1]]]]],[],32],[[[16,[-1]],12,-2],[[15,[[16,[-1]],-1,[16,[-1]]]]],[],32],[[1,6],1],[[1,3],1],[[1,1]],[[1,8]],[[1,6]],[[1,6]],[[1,12]],[[1,7]],[[1,2]],[[1,2],1],[[1,11],1],[[1,4]],[[1,8],1],[[1,10],1],[[1,7],1],[[1,9]],[[1,5]],[[1,11]],[[1,2]],[[1,10]],[[1,11]],[[1,12],1],[[1,10]],[[1,1],1],[[1,11]],[[1,3]],[[1,5]],[[1,3]],[[1,2]],[[1,7]],[[1,8]],[[1,4],1],[[1,1]],[[1,4]],[[1,1]],[[1,3]],[[1,6]],[[1,5],1],[[1,10]],[[1,9]],[[1,8]],[[1,4]],[[1,9]],[[1,7]],[[1,12]],[[1,5]],[[1,9],1],[[1,12]],[[2,6],2],[[2,7]],[[2,8],2],[[2,1]],[[2,10]],[[2,11]],[[2,7],2],[[2,9]],[[2,2]],[[2,12]],[[2,1]],[[2,8]],[[2,4]],[[2,6]],[[2,12]],[[2,1],2],[[2,7]],[[2,8]],[[2,10]],[[2,4],2],[[2,5]],[[2,11],2],[[2,5]],[[2,3],2],[[2,3]],[[2,4]],[[2,9],2],[[2,11]],[[2,5]],[[2,10],2],[[2,11]],[[2,2]],[[2,1]],[[2,12],2],[[2,5],2],[[2,3]],[[2,10]],[[2,3]],[[2,4]],[[2,6]],[[2,7]],[[2,2]],[[2,8]],[[2,9]],[[2,9]],[[2,2],2],[[2,12]],[[2,6]],[[3,3]],[[3,7]],[[3,5],3],[[3,9]],[[3,6],3],[[3,10]],[[3,8]],[[3,4]],[[3,8]],[[3,11]],[[3,10]],[[3,2]],[[3,7]],[[3,1]],[[3,1]],[[3,12],3],[[3,7],3],[[3,8]],[[3,12]],[[3,2]],[[3,2]],[[3,5]],[[3,6]],[[3,11]],[[3,7]],[[3,12]],[[3,6]],[[3,9],3],[[3,2],3],[[3,5]],[[3,11],3],[[3,12]],[[3,6]],[[3,8],3],[[3,10]],[[3,10],3],[[3,1],3],[[3,1]],[[3,3],3],[[3,4]],[[3,9]],[[3,4]],[[3,9]],[[3,4],3],[[3,5]],[[3,11]],[[3,3]],[[3,3]],[[4,2]],[[4,11]],[[4,4]],[[4,3]],[[4,2],4],[[4,10]],[[4,5]],[[4,5],4],[[4,9]],[[4,11]],[[4,10]],[[4,5]],[[4,2]],[[4,9],4],[[4,5]],[[4,12]],[[4,6]],[[4,3]],[[4,9]],[[4,7],4],[[4,6]],[[4,3],4],[[4,8]],[[4,6],4],[[4,4],4],[[4,2]],[[4,6]],[[4,8]],[[4,1]],[[4,7]],[[4,7]],[[4,12],4],[[4,12]],[[4,4]],[[4,10]],[[4,4]],[[4,1]],[[4,9]],[[4,8],4],[[4,7]],[[4,1]],[[4,10],4],[[4,11],4],[[4,8]],[[4,12]],[[4,1],4],[[4,11]],[[4,3]],[[5,12],5],[[5,1],5],[[5,9],5],[[5,2]],[[5,8]],[[5,10]],[[5,8]],[[5,7],5],[[5,7]],[[5,10]],[[5,3]],[[5,2]],[[5,7]],[[5,6],5],[[5,4]],[[5,9]],[[5,6]],[[5,5]],[[5,8]],[[5,12]],[[5,5]],[[5,11]],[[5,6]],[[5,1]],[[5,11]],[[5,4]],[[5,3]],[[5,2]],[[5,11]],[[5,3]],[[5,5]],[[5,7]],[[5,4]],[[5,6]],[[5,1]],[[5,4],5],[[5,9]],[[5,5],5],[[5,1]],[[5,11],5],[[5,12]],[[5,8],5],[[5,2],5],[[5,3],5],[[5,9]],[[5,12]],[[5,10],5],[[5,10]],[[7,11]],[[7,4]],[[7,11]],[[7,1]],[[7,12]],[[7,9]],[[7,12]],[[7,6]],[[7,10]],[[7,1]],[[7,5]],[[7,6],7],[[7,2]],[[7,3]],[[7,5]],[[7,8]],[[7,7],7],[[7,9],7],[[7,3],7],[[7,7]],[[7,10],7],[[7,10]],[[7,8],7],[[7,9]],[[7,2]],[[7,2]],[[7,12],7],[[7,11]],[[7,5]],[[7,2],7],[[7,11],7],[[7,12]],[[7,10]],[[7,9]],[[7,8]],[[7,5],7],[[7,8]],[[7,3]],[[7,4],7],[[7,4]],[[7,7]],[[7,3]],[[7,4]],[[7,1]],[[7,1],7],[[7,6]],[[7,7]],[[7,6]],[[8,5]],[[8,1]],[[8,1],8],[[8,6]],[[8,5],8],[[8,10]],[[8,5]],[[8,7]],[[8,9],8],[[8,4]],[[8,3],8],[[8,11],8],[[8,10]],[[8,5]],[[8,6]],[[8,1]],[[8,3]],[[8,12]],[[8,6]],[[8,8]],[[8,12],8],[[8,10],8],[[8,11]],[[8,10]],[[8,2]],[[8,2],8],[[8,3]],[[8,2]],[[8,3]],[[8,7]],[[8,9]],[[8,4],8],[[8,11]],[[8,8]],[[8,7],8],[[8,8]],[[8,4]],[[8,8],8],[[8,7]],[[8,11]],[[8,4]],[[8,12]],[[8,9]],[[8,6],8],[[8,9]],[[8,12]],[[8,1]],[[8,2]],[[9,6]],[[9,8],9],[[9,4]],[[9,8]],[[9,12]],[[9,5]],[[9,2]],[[9,7],9],[[9,1]],[[9,10]],[[9,7]],[[9,9]],[[9,3]],[[9,5],9],[[9,12]],[[9,9],9],[[9,6]],[[9,10]],[[9,1],9],[[9,5]],[[9,9]],[[9,10],9],[[9,12]],[[9,8]],[[9,11],9],[[9,12],9],[[9,11]],[[9,9]],[[9,1]],[[9,5]],[[9,4],9],[[9,3]],[[9,2]],[[9,3]],[[9,1]],[[9,6]],[[9,3],9],[[9,11]],[[9,6],9],[[9,10]],[[9,2],9],[[9,11]],[[9,4]],[[9,2]],[[9,7]],[[9,7]],[[9,4]],[[9,8]],[[10,6],10],[[10,12]],[[10,5]],[[10,10]],[[10,6]],[[10,2]],[[10,10],10],[[10,3],10],[[10,3]],[[10,12]],[[10,5]],[[10,11]],[[10,8],10],[[10,11],10],[[10,8]],[[10,2]],[[10,7]],[[10,12]],[[10,2],10],[[10,4]],[[10,9]],[[10,1]],[[10,7]],[[10,2]],[[10,3]],[[10,4]],[[10,3]],[[10,9],10],[[10,5],10],[[10,10]],[[10,11]],[[10,6]],[[10,12],10],[[10,1]],[[10,7]],[[10,11]],[[10,7],10],[[10,4]],[[10,10]],[[10,9]],[[10,9]],[[10,8]],[[10,1],10],[[10,1]],[[10,6]],[[10,5]],[[10,8]],[[10,4],10],[[11,5],11],[[11,10]],[[11,4]],[[11,3]],[[11,3]],[[11,6]],[[11,3],11],[[11,7],11],[[11,1]],[[11,4],11],[[11,12]],[[11,7]],[[11,4]],[[11,2],11],[[11,12]],[[11,8]],[[11,11]],[[11,10],11],[[11,6]],[[11,1]],[[11,2]],[[11,1]],[[11,8]],[[11,2]],[[11,1],11],[[11,12]],[[11,9]],[[11,11]],[[11,10]],[[11,2]],[[11,6]],[[11,3]],[[11,5]],[[11,7]],[[11,11]],[[11,4]],[[11,8],11],[[11,8]],[[11,12],11],[[11,11],11],[[11,6],11],[[11,5]],[[11,9]],[[11,7]],[[11,5]],[[11,9]],[[11,9],11],[[11,10]],[[6,7]],[[6,2],6],[[6,12],6],[[6,6]],[[6,9],6],[[6,5]],[[6,6],6],[[6,4]],[[6,9]],[[6,11]],[[6,3]],[[6,8]],[[6,7],6],[[6,1]],[[6,5],6],[[6,1]],[[6,11]],[[6,10]],[[6,6]],[[6,2]],[[6,8]],[[6,3]],[[6,9]],[[6,8]],[[6,7]],[[6,11]],[[6,5]],[[6,8],6],[[6,11],6],[[6,12]],[[6,2]],[[6,9]],[[6,10]],[[6,3],6],[[6,7]],[[6,10],6],[[6,6]],[[6,12]],[[6,5]],[[6,10]],[[6,4],6],[[6,1]],[[6,4]],[[6,1],6],[[6,4]],[[6,3]],[[6,2]],[[6,12]],[[12,5]],[[12,1]],[[12,10],12],[[12,3]],[[12,11]],[[12,8],12],[[12,11]],[[12,11]],[[12,12],12],[[12,10]],[[12,6]],[[12,3]],[[12,1]],[[12,3],12],[[12,2]],[[12,11],12],[[12,4],12],[[12,9]],[[12,9]],[[12,4]],[[12,12]],[[12,12]],[[12,6],12],[[12,7]],[[12,5]],[[12,3]],[[12,8]],[[12,2],12],[[12,6]],[[12,9]],[[12,2]],[[12,7],12],[[12,6]],[[12,1]],[[12,5],12],[[12,8]],[[12,4]],[[12,2]],[[12,7]],[[12,8]],[[12,10]],[[12,7]],[[12,4]],[[12,9],12],[[12,5]],[[12,12]],[[12,10]],[[12,1],12],[[1,4],15],[[1,10],15],[[1,11],15],[[1,3],15],[[1,1],15],[[1,12],15],[[1,8],15],[[1,9],15],[[1,6],15],[[1,11],15],[[1,5],15],[[1,8],15],[[1,3],15],[[1,1],15],[[1,2],15],[[1,4],15],[[1,2],15],[[1,10],15],[[1,12],15],[[1,9],15],[[1,5],15],[[1,7],15],[[1,7],15],[[1,6],15],[[2,3],15],[[2,7],15],[[2,4],15],[[2,5],15],[[2,2],15],[[2,8],15],[[2,2],15],[[2,12],15],[[2,5],15],[[2,1],15],[[2,4],15],[[2,7],15],[[2,3],15],[[2,1],15],[[2,10],15],[[2,9],15],[[2,6],15],[[2,12],15],[[2,9],15],[[2,6],15],[[2,11],15],[[2,10],15],[[2,11],15],[[2,8],15],[[3,4],15],[[3,10],15],[[3,3],15],[[3,9],15],[[3,12],15],[[3,5],15],[[3,2],15],[[3,10],15],[[3,8],15],[[3,7],15],[[3,3],15],[[3,11],15],[[3,9],15],[[3,4],15],[[3,7],15],[[3,8],15],[[3,11],15],[[3,6],15],[[3,12],15],[[3,5],15],[[3,1],15],[[3,2],15],[[3,6],15],[[3,1],15],[[4,10],15],[[4,6],15],[[4,8],15],[[4,9],15],[[4,9],15],[[4,7],15],[[4,7],15],[[4,1],15],[[4,6],15],[[4,10],15],[[4,12],15],[[4,8],15],[[4,3],15],[[4,5],15],[[4,11],15],[[4,4],15],[[4,1],15],[[4,12],15],[[4,2],15],[[4,11],15],[[4,3],15],[[4,5],15],[[4,2],15],[[4,4],15],[[5,12],15],[[5,1],15],[[5,7],15],[[5,8],15],[[5,1],15],[[5,7],15],[[5,6],15],[[5,3],15],[[5,9],15],[[5,5],15],[[5,6],15],[[5,11],15],[[5,11],15],[[5,5],15],[[5,8],15],[[5,12],15],[[5,3],15],[[5,4],15],[[5,4],15],[[5,9],15],[[5,10],15],[[5,2],15],[[5,10],15],[[5,2],15],[[7,11],15],[[7,8],15],[[7,4],15],[[7,6],15],[[7,12],15],[[7,7],15],[[7,2],15],[[7,3],15],[[7,10],15],[[7,9],15],[[7,8],15],[[7,10],15],[[7,1],15],[[7,3],15],[[7,7],15],[[7,12],15],[[7,6],15],[[7,4],15],[[7,5],15],[[7,9],15],[[7,2],15],[[7,1],15],[[7,11],15],[[7,5],15],[[8,11],15],[[8,9],15],[[8,7],15],[[8,6],15],[[8,8],15],[[8,5],15],[[8,2],15],[[8,5],15],[[8,11],15],[[8,4],15],[[8,12],15],[[8,7],15],[[8,8],15],[[8,6],15],[[8,12],15],[[8,10],15],[[8,3],15],[[8,4],15],[[8,3],15],[[8,1],15],[[8,1],15],[[8,9],15],[[8,10],15],[[8,2],15],[[9,10],15],[[9,7],15],[[9,8],15],[[9,3],15],[[9,1],15],[[9,2],15],[[9,9],15],[[9,8],15],[[9,3],15],[[9,4],15],[[9,11],15],[[9,12],15],[[9,11],15],[[9,10],15],[[9,12],15],[[9,6],15],[[9,6],15],[[9,5],15],[[9,1],15],[[9,9],15],[[9,2],15],[[9,5],15],[[9,7],15],[[9,4],15],[[10,11],15],[[10,9],15],[[10,7],15],[[10,10],15],[[10,8],15],[[10,4],15],[[10,2],15],[[10,10],15],[[10,3],15],[[10,7],15],[[10,11],15],[[10,3],15],[[10,12],15],[[10,4],15],[[10,1],15],[[10,6],15],[[10,5],15],[[10,1],15],[[10,6],15],[[10,9],15],[[10,5],15],[[10,8],15],[[10,12],15],[[10,2],15],[[11,3],15],[[11,10],15],[[11,9],15],[[11,6],15],[[11,6],15],[[11,1],15],[[11,5],15],[[11,1],15],[[11,11],15],[[11,8],15],[[11,12],15],[[11,4],15],[[11,9],15],[[11,4],15],[[11,12],15],[[11,8],15],[[11,2],15],[[11,5],15],[[11,3],15],[[11,11],15],[[11,7],15],[[11,2],15],[[11,7],15],[[11,10],15],[[6,4],15],[[6,1],15],[[6,7],15],[[6,7],15],[[6,5],15],[[6,1],15],[[6,8],15],[[6,6],15],[[6,3],15],[[6,8],15],[[6,4],15],[[6,12],15],[[6,3],15],[[6,11],15],[[6,10],15],[[6,11],15],[[6,2],15],[[6,2],15],[[6,6],15],[[6,9],15],[[6,9],15],[[6,10],15],[[6,5],15],[[6,12],15],[[12,5],15],[[12,7],15],[[12,2],15],[[12,9],15],[[12,10],15],[[12,1],15],[[12,4],15],[[12,6],15],[[12,12],15],[[12,7],15],[[12,1],15],[[12,11],15],[[12,12],15],[[12,5],15],[[12,8],15],[[12,3],15],[[12,8],15],[[12,11],15],[[12,3],15],[[12,10],15],[[12,4],15],[[12,6],15],[[12,2],15],[[12,9],15],[[1,6]],[[1,6],1],[[1,4],1],[[1,7]],[[1,7]],[[1,10]],[[1,4]],[[1,3]],[[1,8]],[[1,4]],[[1,3],1],[[1,10],1],[[1,7],1],[[1,2]],[[1,12]],[[1,5],1],[[1,1]],[[1,2]],[[1,9],1],[[1,8]],[[1,1]],[[1,8]],[[1,3]],[[1,1],1],[[1,6]],[[1,2]],[[1,12],1],[[1,11],1],[[1,6]],[[1,4]],[[1,5]],[[1,11]],[[1,11]],[[1,9]],[[1,11]],[[1,5]],[[1,9]],[[1,3]],[[1,8],1],[[1,10]],[[1,7]],[[1,9]],[[1,12]],[[1,2],1],[[1,10]],[[1,12]],[[1,5]],[[1,1]],[[2,11],2],[[2,2]],[[2,11]],[[2,11]],[[2,3],2],[[2,10]],[[2,6]],[[2,5],2],[[2,8],2],[[2,4],2],[[2,7]],[[2,9],2],[[2,3]],[[2,9]],[[2,1]],[[2,5]],[[2,10],2],[[2,2]],[[2,10]],[[2,4]],[[2,3]],[[2,1]],[[2,12]],[[2,2]],[[2,5]],[[2,8]],[[2,7],2],[[2,4]],[[2,2],2],[[2,9]],[[2,12],2],[[2,7]],[[2,4]],[[2,1]],[[2,6]],[[2,6]],[[2,7]],[[2,6],2],[[2,1],2],[[2,12]],[[2,8]],[[2,12]],[[2,10]],[[2,8]],[[2,9]],[[2,3]],[[2,5]],[[2,11]],[[3,1]],[[3,1]],[[3,11]],[[3,10],3],[[3,10]],[[3,6],3],[[3,7],3],[[3,10]],[[3,1]],[[3,12],3],[[3,3]],[[3,8]],[[3,5],3],[[3,9],3],[[3,12]],[[3,11]],[[3,9]],[[3,3]],[[3,7]],[[3,8],3],[[3,2]],[[3,7]],[[3,8]],[[3,12]],[[3,12]],[[3,4]],[[3,3]],[[3,5]],[[3,11]],[[3,3],3],[[3,9]],[[3,4]],[[3,8]],[[3,2]],[[3,6]],[[3,9]],[[3,2],3],[[3,6]],[[3,4]],[[3,11],3],[[3,1],3],[[3,5]],[[3,4],3],[[3,6]],[[3,2]],[[3,7]],[[3,10]],[[3,5]],[[4,5]],[[4,8]],[[4,4]],[[4,2]],[[4,12]],[[4,12]],[[4,9]],[[4,1]],[[4,8],4],[[4,11],4],[[4,1]],[[4,11]],[[4,8]],[[4,2],4],[[4,6],4],[[4,3]],[[4,9],4],[[4,12],4],[[4,3]],[[4,7],4],[[4,2]],[[4,5],4],[[4,7]],[[4,4],4],[[4,11]],[[4,8]],[[4,10],4],[[4,1],4],[[4,6]],[[4,9]],[[4,6]],[[4,10]],[[4,4]],[[4,4]],[[4,6]],[[4,7]],[[4,11]],[[4,2]],[[4,10]],[[4,3]],[[4,3],4],[[4,10]],[[4,5]],[[4,1]],[[4,7]],[[4,9]],[[4,5]],[[4,12]],[[5,9],5],[[5,4]],[[5,6],5],[[5,3]],[[5,4]],[[5,2]],[[5,2]],[[5,10]],[[5,2]],[[5,3]],[[5,1]],[[5,1],5],[[5,10]],[[5,9]],[[5,4]],[[5,1]],[[5,5]],[[5,8]],[[5,4],5],[[5,9]],[[5,10],5],[[5,8],5],[[5,11]],[[5,10]],[[5,5],5],[[5,7],5],[[5,12],5],[[5,11]],[[5,3]],[[5,6]],[[5,6]],[[5,6]],[[5,8]],[[5,11]],[[5,9]],[[5,7]],[[5,5]],[[5,12]],[[5,3],5],[[5,5]],[[5,1]],[[5,12]],[[5,12]],[[5,11],5],[[5,7]],[[5,7]],[[5,2],5],[[5,8]],[[7,3]],[[7,2]],[[7,9]],[[7,4]],[[7,5]],[[7,11]],[[7,5]],[[7,9]],[[7,7]],[[7,3],7],[[7,10],7],[[7,7],7],[[7,12]],[[7,4]],[[7,1]],[[7,3]],[[7,2]],[[7,8]],[[7,10]],[[7,11],7],[[7,12]],[[7,5],7],[[7,8]],[[7,8],7],[[7,7]],[[7,4],7],[[7,4]],[[7,5]],[[7,11]],[[7,6],7],[[7,10]],[[7,8]],[[7,1]],[[7,1]],[[7,11]],[[7,1],7],[[7,3]],[[7,12]],[[7,7]],[[7,6]],[[7,9]],[[7,6]],[[7,2],7],[[7,9],7],[[7,12],7],[[7,6]],[[7,10]],[[7,2]],[[8,5]],[[8,11]],[[8,10],8],[[8,2]],[[8,9]],[[8,8]],[[8,12]],[[8,10]],[[8,4],8],[[8,4]],[[8,8]],[[8,5]],[[8,6],8],[[8,3],8],[[8,9]],[[8,7]],[[8,12]],[[8,5],8],[[8,2]],[[8,2],8],[[8,10]],[[8,7],8],[[8,6]],[[8,5]],[[8,9]],[[8,3]],[[8,7]],[[8,8],8],[[8,6]],[[8,3]],[[8,1]],[[8,4]],[[8,6]],[[8,9],8],[[8,8]],[[8,11]],[[8,3]],[[8,4]],[[8,1],8],[[8,11]],[[8,12],8],[[8,10]],[[8,11],8],[[8,1]],[[8,1]],[[8,12]],[[8,2]],[[8,7]],[[9,2]],[[9,6]],[[9,9]],[[9,1]],[[9,6],9],[[9,3],9],[[9,5],9],[[9,11]],[[9,7]],[[9,8]],[[9,4]],[[9,7]],[[9,7]],[[9,11]],[[9,2],9],[[9,4]],[[9,10]],[[9,7],9],[[9,3]],[[9,6]],[[9,5]],[[9,1]],[[9,8],9],[[9,10]],[[9,9]],[[9,2]],[[9,8]],[[9,1],9],[[9,8]],[[9,9]],[[9,11],9],[[9,6]],[[9,5]],[[9,11]],[[9,4]],[[9,5]],[[9,3]],[[9,12]],[[9,3]],[[9,12],9],[[9,1]],[[9,12]],[[9,12]],[[9,9],9],[[9,2]],[[9,10]],[[9,10],9],[[9,4],9],[[10,3],10],[[10,9]],[[10,4],10],[[10,3]],[[10,5],10],[[10,12]],[[10,11],10],[[10,1]],[[10,2],10],[[10,5]],[[10,8],10],[[10,5]],[[10,3]],[[10,4]],[[10,8]],[[10,1]],[[10,9]],[[10,2]],[[10,10],10],[[10,4]],[[10,9]],[[10,6]],[[10,11]],[[10,10]],[[10,11]],[[10,2]],[[10,8]],[[10,6],10],[[10,7]],[[10,8]],[[10,5]],[[10,1],10],[[10,12]],[[10,11]],[[10,2]],[[10,10]],[[10,7]],[[10,6]],[[10,6]],[[10,7],10],[[10,10]],[[10,4]],[[10,1]],[[10,12],10],[[10,3]],[[10,12]],[[10,9],10],[[10,7]],[[11,9]],[[11,2]],[[11,2]],[[11,12]],[[11,11]],[[11,12]],[[11,5],11],[[11,1]],[[11,6]],[[11,1]],[[11,4]],[[11,11]],[[11,11],11],[[11,5]],[[11,9]],[[11,3]],[[11,11]],[[11,2]],[[11,7]],[[11,6]],[[11,9],11],[[11,5]],[[11,5]],[[11,1]],[[11,4]],[[11,6]],[[11,4]],[[11,8],11],[[11,3],11],[[11,10]],[[11,10]],[[11,8]],[[11,9]],[[11,10],11],[[11,12],11],[[11,2],11],[[11,8]],[[11,8]],[[11,12]],[[11,7]],[[11,1],11],[[11,3]],[[11,10]],[[11,3]],[[11,4],11],[[11,7]],[[11,6],11],[[11,7],11],[[6,3]],[[6,11]],[[6,10]],[[6,3]],[[6,3]],[[6,11],6],[[6,1]],[[6,9]],[[6,5]],[[6,6]],[[6,1]],[[6,2]],[[6,7]],[[6,4]],[[6,7]],[[6,5]],[[6,9]],[[6,7],6],[[6,6],6],[[6,8]],[[6,2],6],[[6,7]],[[6,12]],[[6,6]],[[6,8]],[[6,4]],[[6,4],6],[[6,10]],[[6,10],6],[[6,8]],[[6,12]],[[6,12],6],[[6,6]],[[6,8],6],[[6,11]],[[6,2]],[[6,12]],[[6,11]],[[6,9]],[[6,9],6],[[6,10]],[[6,3],6],[[6,4]],[[6,2]],[[6,1]],[[6,5]],[[6,5],6],[[6,1],6],[[12,5]],[[12,12],12],[[12,6]],[[12,5]],[[12,7],12],[[12,8]],[[12,9]],[[12,7]],[[12,2],12],[[12,5],12],[[12,4]],[[12,4],12],[[12,7]],[[12,11]],[[12,1]],[[12,5]],[[12,8]],[[12,10]],[[12,1],12],[[12,12]],[[12,7]],[[12,4]],[[12,3]],[[12,4]],[[12,2]],[[12,8],12],[[12,2]],[[12,6],12],[[12,6]],[[12,3]],[[12,11],12],[[12,11]],[[12,8]],[[12,9]],[[12,9],12],[[12,1]],[[12,3],12],[[12,12]],[[12,10],12],[[12,3]],[[12,10]],[[12,9]],[[12,11]],[[12,12]],[[12,6]],[[12,1]],[[12,10]],[[12,2]],[[1,9],15],[[1,2],15],[[1,4],15],[[1,12],15],[[1,11],15],[[1,1],15],[[1,4],15],[[1,1],15],[[1,7],15],[[1,9],15],[[1,10],15],[[1,2],15],[[1,3],15],[[1,6],15],[[1,3],15],[[1,7],15],[[1,5],15],[[1,10],15],[[1,11],15],[[1,8],15],[[1,8],15],[[1,6],15],[[1,12],15],[[1,5],15],[[2,4],15],[[2,7],15],[[2,6],15],[[2,2],15],[[2,9],15],[[2,8],15],[[2,11],15],[[2,8],15],[[2,4],15],[[2,6],15],[[2,12],15],[[2,9],15],[[2,5],15],[[2,5],15],[[2,2],15],[[2,10],15],[[2,7],15],[[2,3],15],[[2,1],15],[[2,3],15],[[2,1],15],[[2,11],15],[[2,12],15],[[2,10],15],[[3,5],15],[[3,1],15],[[3,12],15],[[3,7],15],[[3,5],15],[[3,7],15],[[3,2],15],[[3,2],15],[[3,9],15],[[3,3],15],[[3,4],15],[[3,8],15],[[3,8],15],[[3,12],15],[[3,6],15],[[3,11],15],[[3,9],15],[[3,10],15],[[3,6],15],[[3,11],15],[[3,4],15],[[3,3],15],[[3,1],15],[[3,10],15],[[4,2],15],[[4,5],15],[[4,1],15],[[4,12],15],[[4,5],15],[[4,2],15],[[4,9],15],[[4,11],15],[[4,4],15],[[4,6],15],[[4,3],15],[[4,10],15],[[4,8],15],[[4,6],15],[[4,10],15],[[4,3],15],[[4,7],15],[[4,1],15],[[4,7],15],[[4,12],15],[[4,9],15],[[4,11],15],[[4,4],15],[[4,8],15],[[5,1],15],[[5,8],15],[[5,7],15],[[5,3],15],[[5,9],15],[[5,2],15],[[5,6],15],[[5,5],15],[[5,12],15],[[5,4],15],[[5,12],15],[[5,10],15],[[5,4],15],[[5,2],15],[[5,11],15],[[5,7],15],[[5,5],15],[[5,10],15],[[5,6],15],[[5,8],15],[[5,9],15],[[5,1],15],[[5,3],15],[[5,11],15],[[7,10],15],[[7,10],15],[[7,6],15],[[7,3],15],[[7,2],15],[[7,12],15],[[7,3],15],[[7,5],15],[[7,9],15],[[7,1],15],[[7,12],15],[[7,8],15],[[7,7],15],[[7,4],15],[[7,9],15],[[7,6],15],[[7,5],15],[[7,7],15],[[7,1],15],[[7,4],15],[[7,11],15],[[7,11],15],[[7,8],15],[[7,2],15],[[8,5],15],[[8,2],15],[[8,10],15],[[8,7],15],[[8,3],15],[[8,11],15],[[8,6],15],[[8,4],15],[[8,11],15],[[8,9],15],[[8,10],15],[[8,2],15],[[8,4],15],[[8,7],15],[[8,6],15],[[8,12],15],[[8,1],15],[[8,9],15],[[8,8],15],[[8,8],15],[[8,3],15],[[8,1],15],[[8,12],15],[[8,5],15],[[9,1],15],[[9,3],15],[[9,4],15],[[9,11],15],[[9,9],15],[[9,10],15],[[9,5],15],[[9,2],15],[[9,1],15],[[9,2],15],[[9,9],15],[[9,4],15],[[9,11],15],[[9,12],15],[[9,7],15],[[9,12],15],[[9,6],15],[[9,8],15],[[9,10],15],[[9,6],15],[[9,5],15],[[9,3],15],[[9,7],15],[[9,8],15],[[10,11],15],[[10,7],15],[[10,11],15],[[10,6],15],[[10,5],15],[[10,10],15],[[10,9],15],[[10,2],15],[[10,6],15],[[10,8],15],[[10,2],15],[[10,1],15],[[10,9],15],[[10,3],15],[[10,10],15],[[10,1],15],[[10,12],15],[[10,8],15],[[10,7],15],[[10,5],15],[[10,4],15],[[10,4],15],[[10,12],15],[[10,3],15],[[11,7],15],[[11,9],15],[[11,3],15],[[11,2],15],[[11,10],15],[[11,6],15],[[11,1],15],[[11,11],15],[[11,4],15],[[11,1],15],[[11,7],15],[[11,6],15],[[11,8],15],[[11,9],15],[[11,4],15],[[11,12],15],[[11,2],15],[[11,3],15],[[11,5],15],[[11,11],15],[[11,8],15],[[11,10],15],[[11,12],15],[[11,5],15],[[6,2],15],[[6,4],15],[[6,6],15],[[6,8],15],[[6,9],15],[[6,10],15],[[6,9],15],[[6,7],15],[[6,4],15],[[6,5],15],[[6,1],15],[[6,3],15],[[6,12],15],[[6,6],15],[[6,1],15],[[6,11],15],[[6,12],15],[[6,10],15],[[6,8],15],[[6,11],15],[[6,7],15],[[6,2],15],[[6,5],15],[[6,3],15],[[12,4],15],[[12,12],15],[[12,8],15],[[12,9],15],[[12,5],15],[[12,6],15],[[12,1],15],[[12,11],15],[[12,5],15],[[12,11],15],[[12,9],15],[[12,12],15],[[12,4],15],[[12,3],15],[[12,1],15],[[12,8],15],[[12,10],15],[[12,2],15],[[12,7],15],[[12,6],15],[[12,7],15],[[12,3],15],[[12,10],15],[[12,2],15],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],0,0,0,[[24,12,12],24],[[24,12,12],24],[[[16,[13]]],15],[[[16,[14]]],15],[[[16,[-1]]],15,31],[[[16,[-1]],-2],15,[],32],[[[16,[-1]],-2],15,[],32],[[[16,[-1]],-2],[[121,[-1,-2]]],[],32],[[24,-1],[[122,[-1]]],60],[[[23,[-1]]],[[15,[[23,[-1]],[16,[-1]]]]],[]],[[[16,[-1]]],[[15,[[23,[-1]],[16,[-1]]]]],[]],[[[23,[-1]]],[[15,[[23,[-1]],[16,[-1]]]]],[]],[[[16,[-1]]],[[15,[[23,[-1]],[16,[-1]]]]],[]],[24,123],[[[16,[-1]],12],[[15,[[16,[-1]],[16,[-1]]]]],[]],[[24,12],[[15,[24,24]]]],[[16,12],[[15,[16,16]]]],[[[16,[-1]],12],[[15,[[16,[-1]],[16,[-1]]]]],[]],[[24,12],[[15,[24,24]]]],[[16,12],[[15,[16,16]]]],[[[16,[-1]],12],[[15,[[16,[-1]],[16,[-1]]]]],[]],[[[16,[-1]],12],[[15,[[16,[-1]],[16,[-1]]]]],[]],[[[16,[-1]]],[[22,[[15,[-1,[16,[-1]]]]]]],[]],[[[16,[-1]]],[[22,[[15,[[23,[-1]],[16,[-1]]]]]]],[]],[[[16,[-1]]],[[22,[[15,[[23,[-1]],[16,[-1]]]]]]],[]],[[[16,[-1]]],[[22,[[15,[-1,[16,[-1]]]]]]],[]],[[[16,[-1]],-2],[[124,[-1,-2]]],[],32],[[24,-1],[[125,[-1]]],60],[[[16,[-1]],-2],[[126,[-1,-2]]],[],32],[[[16,[-1]]],[[22,[[15,[-1,[16,[-1]]]]]]],[]],[[[16,[-1]]],[[22,[[15,[[23,[-1]],[16,[-1]]]]]]],[]],[[[16,[-1]]],[[22,[[15,[[23,[-1]],[16,[-1]]]]]]],[]],[[[16,[-1]]],[[22,[[15,[-1,[16,[-1]]]]]]],[]],[[[16,[-1]],-2],[[127,[-1,-2]]],[],32],[[24,-1],[[22,[[15,[24,24]]]]],60],[[24,-1],[[128,[-1]]],60],[24,129],[[[16,[-1]],12,-2],[[130,[-1,-2]]],[],32],[[24,12,-1],[[131,[-1]]],60],[[[16,[-1]],12,-2],[[132,[-1,-2]]],[],32],[[[15,[[67,[-1]],[67,[-1]]]]],[[67,[-1]]],[]],[[[15,[[67,[-1]],[67,[-1]]]]],[[67,[-1]]],25],[[[16,[-1]],[16,[-1]]],33,59],[[24,-1],33,60],[[20,20],[[22,[12]]]],[[1,1],[[22,[12]]]],[[2,2],[[22,[12]]]],[[3,3],[[22,[12]]]],[[4,4],[[22,[12]]]],[[5,5],[[22,[12]]]],[[7,7],[[22,[12]]]],[[8,8],[[22,[12]]]],[[9,9],[[22,[12]]]],[[10,10],[[22,[12]]]],[[11,11],[[22,[12]]]],[[6,6],[[22,[12]]]],[[12,12],[[22,[12]]]],0,0,0,[[[16,[-1]],-2],[[22,[[16,[-1]]]]],59,[133,25]],[[24,-1],[[22,[24]]],60],[[20,24],[[22,[24]]]],[[[23,[20]],24],[[22,[24]]]],[[[23,[20]],24],[[22,[24]]]],[[[16,[20]],24],[[22,[24]]]],[[24,24],[[22,[24]]]],[[24,24],[[22,[24]]]],[[-1,24],[[22,[24]]],[]],[[[16,[-1]],-2],[[22,[[16,[-1]]]]],59,[133,25]],[[24,-1],[[22,[24]]],60],[[20,24],[[22,[24]]]],[[[23,[20]],24],[[22,[24]]]],[[[23,[20]],24],[[22,[24]]]],[[[16,[20]],24],[[22,[24]]]],[[24,24],[[22,[24]]]],[[24,24],[[22,[24]]]],[[-1,24],[[22,[24]]],[]],[12],[12],[[13,13],13],[[13,13]],[[13,13]],[[13,13]],[[14,14]],[[14,14],14],[[14,14]],[[14,14]],[[1,1],1],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2],2],[[2,2]],[[3,3]],[[3,3]],[[3,3],3],[[3,3]],[[4,4]],[[4,4]],[[4,4],4],[[4,4]],[[5,5]],[[5,5]],[[5,5]],[[5,5],5],[[7,7],7],[[7,7]],[[7,7]],[[7,7]],[[8,8],8],[[8,8]],[[8,8]],[[8,8]],[[9,9]],[[9,9]],[[9,9]],[[9,9],9],[[10,10]],[[10,10]],[[10,10]],[[10,10],10],[[11,11]],[[11,11],11],[[11,11]],[[11,11]],[[6,6]],[[6,6]],[[6,6],6],[[6,6]],[[12,12]],[[12,12]],[[12,12]],[[12,12],12],[[13,13],15],[[13,13],15],[[14,14],15],[[14,14],15],[[1,1],15],[[1,1],15],[[2,2],15],[[2,2],15],[[3,3],15],[[3,3],15],[[4,4],15],[[4,4],15],[[5,5],15],[[5,5],15],[[7,7],15],[[7,7],15],[[8,8],15],[[8,8],15],[[9,9],15],[[9,9],15],[[10,10],15],[[10,10],15],[[11,11],15],[[11,11],15],[[6,6],15],[[6,6],15],[[12,12],15],[[12,12],15],[[],12],[[],12],[-1,13,107],[-1,13,107],[-1,14,107],[-1,14,107],[-1,1,107],[-1,1,107],[-1,2,107],[-1,2,107],[-1,3,107],[-1,3,107],[-1,4,107],[-1,4,107],[-1,5,107],[-1,5,107],[-1,7,107],[-1,7,107],[-1,8,107],[-1,8,107],[-1,9,107],[-1,9,107],[-1,10,107],[-1,10,107],[-1,11,107],[-1,11,107],[-1,6,107],[-1,6,107],[-1,12,107],[-1,12,107],[[],15],[[[16,[-1]],12,12],15,[]],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[[[16,[-1]],12,12],15,[]],[[[16,[-1]],[16,[-1]]],15,[]],0,[[-1,-2],[[22,[[16,[-3]]]]],[],[[134,[12]]],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[[-1,-2],[[22,[[16,[-3]]]]],[],[[134,[12]]],[]],0,[[33,-1],[[22,[-2]]],102,[]],[[33,-1],[[22,[-1]]],[]],0,[20,20],[7,7],[20,20],[7,7],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[13,[[23,[7]]]],[14,[[23,[7]]]],[1,[[23,[7]]]],[2,[[23,[7]]]],[3,[[23,[7]]]],[4,[[23,[7]]]],[5,[[23,[7]]]],[7,[[23,[7]]]],[8,[[23,[7]]]],[9,[[23,[7]]]],[10,[[23,[7]]]],[11,[[23,[7]]]],[6,[[23,[7]]]],[12,[[23,[7]]]],[[],12],[[],12],[13,9],[14,10],[13,13],[14,14],[[20,9],[[22,[9]]]],[13,-1,[]],[14,-1,[]],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[13,[[23,[7]]]],[14,[[23,[7]]]],[1,[[23,[7]]]],[2,[[23,[7]]]],[3,[[23,[7]]]],[4,[[23,[7]]]],[5,[[23,[7]]]],[7,[[23,[7]]]],[8,[[23,[7]]]],[9,[[23,[7]]]],[10,[[23,[7]]]],[11,[[23,[7]]]],[6,[[23,[7]]]],[12,[[23,[7]]]],[20,135],[13,[[23,[7]]]],[14,[[23,[7]]]],[1,[[23,[7]]]],[2,[[23,[7]]]],[3,[[23,[7]]]],[4,[[23,[7]]]],[5,[[23,[7]]]],[7,[[23,[7]]]],[8,[[23,[7]]]],[9,[[23,[7]]]],[10,[[23,[7]]]],[11,[[23,[7]]]],[6,[[23,[7]]]],[12,[[23,[7]]]],[13,13],[14,14],[[],[[15,[15]]]],[[],[[15,[15]]]],[20,136],0,[[13,13],58],[[14,14],58],0,[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],[1,9],[2,9],[3,9],[4,9],[5,9],[7,9],[8,9],[9,9],[10,9],[11,9],[6,9],[12,9],[[[23,[[29,[-1]]]]],[[29,[[23,[-1]]]]],[]],[24,24],[[[16,[7]]],[[16,[7]]]],[[[16,[7]]],[[16,[7]]]],[[[16,[7]]],[[16,[7]]]],[24,24],[[24,-1],24,60],[24,24],[[24,-1],24,60],[[24,-1],24,60],[24,24],[[24,-1],24,60],[24,24],[[24,-1],24,60],0,[-1,[[30,[-2]]],[],[]],[9,[[30,[20]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[16,[-1]]],[[30,[[23,[-1]],137]]],[]],[[[16,[-1]]],[[30,[[23,[-1]],137]]],[]],[[[16,[-1]]],[[30,[[23,[-1]],137]]],61],[-1,[[30,[-2]]],[],[]],[[[16,[-1]]],[[30,[[23,[-1]],137]]],61],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[8,[[30,[1]]]],[-1,[[30,[-2]]],[],[]],[3,[[30,[1]]]],[5,[[30,[1]]]],[7,[[30,[1]]]],[12,[[30,[1]]]],[6,[[30,[1]]]],[10,[[30,[1]]]],[4,[[30,[1]]]],[11,[[30,[1]]]],[9,[[30,[1]]]],[2,[[30,[1]]]],[8,[[30,[2]]]],[3,[[30,[2]]]],[6,[[30,[2]]]],[5,[[30,[2]]]],[12,[[30,[2]]]],[4,[[30,[2]]]],[9,[[30,[2]]]],[-1,[[30,[-2]]],[],[]],[11,[[30,[2]]]],[10,[[30,[2]]]],[10,[[30,[3]]]],[6,[[30,[3]]]],[-1,[[30,[-2]]],[],[]],[4,[[30,[3]]]],[12,[[30,[3]]]],[11,[[30,[3]]]],[5,[[30,[3]]]],[9,[[30,[3]]]],[-1,[[30,[-2]]],[],[]],[12,[[30,[4]]]],[6,[[30,[4]]]],[11,[[30,[4]]]],[5,[[30,[4]]]],[10,[[30,[4]]]],[6,[[30,[5]]]],[12,[[30,[5]]]],[-1,[[30,[-2]]],[],[]],[11,[[30,[5]]]],[2,[[30,[7]]]],[-1,[[30,[-2]]],[],[]],[6,[[30,[7]]]],[9,[[30,[7]]]],[3,[[30,[7]]]],[12,[[30,[7]]]],[20,[[30,[7]]]],[8,[[30,[7]]]],[11,[[30,[7]]]],[5,[[30,[7]]]],[4,[[30,[7]]]],[1,[[30,[7]]]],[10,[[30,[7]]]],[-1,[[30,[-2]]],[],[]],[6,[[30,[8]]]],[1,[[30,[8]]]],[4,[[30,[8]]]],[5,[[30,[8]]]],[11,[[30,[8]]]],[20,[[30,[8]]]],[2,[[30,[8]]]],[12,[[30,[8]]]],[3,[[30,[8]]]],[10,[[30,[8]]]],[9,[[30,[8]]]],[3,[[30,[9]]]],[-1,[[30,[-2]]],[],[]],[11,[[30,[9]]]],[5,[[30,[9]]]],[12,[[30,[9]]]],[2,[[30,[9]]]],[6,[[30,[9]]]],[1,[[30,[9]]]],[4,[[30,[9]]]],[10,[[30,[9]]]],[2,[[30,[10]]]],[12,[[30,[10]]]],[6,[[30,[10]]]],[5,[[30,[10]]]],[1,[[30,[10]]]],[3,[[30,[10]]]],[11,[[30,[10]]]],[-1,[[30,[-2]]],[],[]],[4,[[30,[10]]]],[4,[[30,[11]]]],[2,[[30,[11]]]],[1,[[30,[11]]]],[12,[[30,[11]]]],[3,[[30,[11]]]],[5,[[30,[11]]]],[-1,[[30,[-2]]],[],[]],[6,[[30,[11]]]],[10,[[30,[6]]]],[4,[[30,[6]]]],[5,[[30,[6]]]],[3,[[30,[6]]]],[12,[[30,[6]]]],[11,[[30,[6]]]],[8,[[30,[6]]]],[9,[[30,[6]]]],[-1,[[30,[-2]]],[],[]],[3,[[30,[12]]]],[9,[[30,[12]]]],[5,[[30,[12]]]],[1,[[30,[12]]]],[10,[[30,[12]]]],[6,[[30,[12]]]],[-1,[[30,[-2]]],[],[]],[11,[[30,[12]]]],[2,[[30,[12]]]],[4,[[30,[12]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[23,[-1]],-2],[],[],32],0,[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],0,0,0,0,[1,7],[2,8],[3,9],[4,10],[5,11],[6,12],0,0,[[7,7],[[15,[7,7]]]],[[8,8],[[15,[8,8]]]],[[9,9],[[15,[9,9]]]],[[10,10],[[15,[10,10]]]],[[12,12],[[15,[12,12]]]],[[[16,[-1]],12],[[139,[-1]]],[]],[12],[12],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[12],[12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[7,1],7],[[8,2],8],[[9,3],9],[[10,4],10],[[11,5],11],[[12,6],12],[[1,7],1],[[2,8],2],[[3,9],3],[[4,10],4],[[5,11],5],[[6,12],6],[12],[12],[6],[6],[12],[12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[1,1],[2,2],[3,3],[4,4],[5,5],[7,7],[8,8],[9,9],[10,10],[11,11],[6,6],[12,12],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[6],[6],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[5,9],5],[[7,9],7],[[8,9],8],[[9,9],9],[[10,9],10],[[11,9],11],[[6,9],6],[[12,9],12],[12],[12],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[6,6],6],[[12,12],12],[[1,7],1],[[2,8],2],[[3,9],3],[[4,10],4],[[5,11],5],[[6,12],6],[-1,15,[25,25]],0,[[7,12],15],[-1,15,[25,25]],[-1,15,[25,25]],0,0,0,0,0,0,0,[140,12],[[140,12],[[30,[140,141]]]],[[-1,140],7,[]],[[-1,140],7,[]],[[-1,140],7,[]],[[-1,140],[[30,[[142,[[16,[7]]]],143]]],[]],[[-1,140],[[30,[[142,[[16,[7]]]],143]]],[]],[12,[[30,[140,141]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,25],[140,140],[141,141],[143,143],[140,[[142,[7]]]],[[-1,7,140],15,[]],[[-1,[142,[7]],140],15,[]],[[140,140],33],[[141,141],33],[[143,143],33],[[140,140],[[30,[[15,[140,12]],141]]]],[[140,140],[[30,[140,141]]]],[[140,77],78],[[141,77],78],[[141,77],78],[[143,77],78],[[143,77],78],[-1,140,25],[[],140],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[12,12],[[30,[140,141]]]],[[12,12],140],[[-1,[142,[7]],140,140],[[30,[[142,[[16,[7]]]],143]]],[]],[[-1,[142,[7]],140,140],[[30,[[142,[[16,[7]]]],143]]],[]],[[140,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],140],[140,140],[[140,12],12],[[-1,7,140,12],7,[]],[[-1,7,140,12],7,[]],[[140,12],[[30,[[15,[140,12]],141]]]],[[140,12],[[30,[140,141]]]],[[-1,[142,[7]],140,140],[[30,[[142,[[16,[7]]]],143]]],[]],[140,12],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[138,138],[[138,138],58],[144,[[22,[-1]]],144],[144,[[22,[-1]]],144],[144,[[22,[-1]]],144],[144,-1,144],[144,-1,144],[144,-1,144],[144,[[22,[-1]]],144],[144,[[22,[-1]]],144],[144,[[22,[-1]]],144],[144,-1,144],[144,-1,144],[144,-1,144],[[138,138],33],[[144,77],78],[[144,77],78],[[144,77],78],[[138,77],78],[-1,-1,[]],[[138,-1],15,91],[-1,-2,[],[]],[144,33],[144,33],[144,33],[[],138],[[138,138],[[22,[58]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[[],24],[-1,24,25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,7],9],[[9,7],9],[[9,10],9],[[9,8],9],[[9,9],9],[[9,10],9],[[9,8],9],[[9,9],9],[-1,15,0],[-1,15,0],[-1,15,0],[[],15],[[],15],[[],15],[10,15],[[],15],[[],10],[[],10],[[],15],[[],15],[[],15],[[1,3,3],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[145,77],78],[[146,77],78],[[147,77],78],[[148,77],78],[[149,77],78],[[150,77],78],[[151,77],78],[[152,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[153,153,153],153],[[154,154,154],154],[[155,155,155],155],[[156,156,156],156],[[157,157,157],157],[[158,158,158],158],[[159,160,160],159],[[161,159,159],161],[[160,162,162],160],[[163,164,164],163],[[165,163,163],165],[[164,166,166],164],[[159,153,153],159],[[161,154,154],161],[[160,155,155],160],[[163,156,156],163],[[165,157,157],165],[[164,158,158],164],[[160,160,160],160],[[159,159,159],159],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[166,166,166],166],[[167,167],167],[[145,145],145],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[14,14],14],[[160,160],159],[[159,159],161],[[162,162],160],[[164,164],163],[[163,163],165],[[166,166],164],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[[13,13],13],[167,167],[145,145],[153,153],[154,154],[169,169],[155,155],[4,4],[168,168],[146,146],[160,160],[159,159],[161,161],[162,162],[[167,167],167],[[145,145],145],[[170,170],170],[[171,171],171],[[172,172],172],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[4,4],4],[[10,10],10],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[160,160],159],[[159,159],161],[[162,162],160],[[164,164],163],[[163,163],165],[[166,166],164],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[153,3],[154,4],[155,2],[156,9],[157,10],[158,8],[160,3],[159,4],[162,2],[164,9],[163,10],[166,8],[[168,168],168],[[146,146],146],[[11,11],11],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[167,13],[153,2],[154,3],[155,1],[156,8],[157,9],[158,7],[168,13],[146,14],[160,2],[159,3],[161,4],[162,1],[164,8],[163,9],[165,10],[166,7],[[159,160],159],[[161,159],161],[[160,162],160],[[163,164],163],[[165,163],165],[[164,166],164],[[159,153],159],[[161,154],161],[[160,155],160],[[163,156],163],[[165,157],165],[[164,158],164],[[166,166],166],[[166,166],166],[166,166],[166,166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[160,160,160],160],[[159,159,159],159],[[161,161,161],161],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[165,165,165],165],[[166,166,166],166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[157,167,167],167],[[173,145,145],145],[[156,170,170],170],[[171,171,171],171],[[158,172,172],172],[[156,153,153],153],[[157,154,154],154],[[173,169,169],169],[[158,155,155],155],[[156,156,156],156],[[157,157,157],157],[[173,173,173],173],[[158,158,158],158],[[163,168,168],168],[[165,146,146],146],[[164,174,174],174],[[175,175,175],175],[[166,176,176],176],[[164,160,160],160],[[163,159,159],159],[[165,161,161],161],[[166,162,162],162],[[164,164,164],164],[[163,163,163],163],[[165,165,165],165],[[166,166,166],166],[[167,167],167],[[167,167],167],[[168,168],168],[[146,146],146],[[168,168],168],[[146,146],146],[[167,167],157],[[145,145],173],[[14,14],10],[[168,168],163],[[146,146],165],[[13,13],9],[[167,167],157],[[145,145],173],[[14,14],10],[[168,168],163],[[146,146],165],[[13,13],9],[[167,167],157],[[145,145],173],[[14,14],10],[[168,168],163],[[146,146],165],[[13,13],9],[[167,167],157],[[145,145],173],[[14,14],10],[[168,168],163],[[146,146],165],[[13,13],9],[[167,167],157],[[145,145],173],[[171,171],173],[[172,172],158],[[153,153],156],[[154,154],157],[[169,169],173],[[155,155],158],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[14,14],10],[[4,4],10],[[10,10],10],[[168,168],163],[[146,146],165],[[175,175],165],[[176,176],166],[[160,160],164],[[159,159],163],[[161,161],165],[[162,162],166],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[13,13],9],[167,157],[145,173],[171,173],[172,158],[153,156],[154,157],[169,173],[155,158],[156,156],[157,157],[173,173],[158,158],[14,10],[4,10],[10,10],[168,163],[146,165],[175,165],[176,166],[160,164],[159,163],[161,165],[162,166],[164,164],[163,163],[165,165],[166,166],[13,9],[[167,167],157],[[145,145],173],[[153,153],156],[[154,154],157],[[169,169],173],[[155,155],158],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[14,14],10],[[4,4],10],[[10,10],10],[[168,168],163],[[146,146],165],[[160,160],164],[[159,159],163],[[161,161],165],[[162,162],166],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[13,13],9],[167,157],[145,173],[153,156],[154,157],[169,173],[155,158],[14,10],[4,10],[168,163],[146,165],[160,164],[159,163],[161,165],[162,166],[13,9],[[167,167],157],[[145,145],173],[[153,153],156],[[154,154],157],[[169,169],173],[[155,155],158],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[14,14],10],[[4,4],10],[[10,10],10],[[168,168],163],[[146,146],165],[[160,160],164],[[159,159],163],[[161,161],165],[[162,162],166],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[13,13],9],[167,157],[145,173],[153,156],[154,157],[169,173],[155,158],[14,10],[4,10],[168,163],[146,165],[160,164],[159,163],[161,165],[162,166],[13,9],[[167,167],157],[[145,145],173],[[153,153],156],[[154,154],157],[[169,169],173],[[155,155],158],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[14,14],10],[[4,4],10],[[10,10],10],[[168,168],163],[[146,146],165],[[160,160],164],[[159,159],163],[[161,161],165],[[162,162],166],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[13,13],9],[167,157],[145,173],[153,156],[154,157],[169,173],[155,158],[14,10],[4,10],[168,163],[146,165],[160,164],[159,163],[161,165],[162,166],[13,9],[153,153],[154,154],[155,155],[156,153],[157,154],[158,155],[160,160],[159,159],[162,162],[164,160],[163,159],[166,162],[[167,167],157],[[145,145],173],[[153,153],156],[[154,154],157],[[169,169],173],[[155,155],158],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[14,14],10],[[4,4],10],[[10,10],10],[[168,168],163],[[146,146],165],[[160,160],164],[[159,159],163],[[161,161],165],[[162,162],166],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[13,13],9],[167,157],[145,173],[153,156],[154,157],[169,173],[155,158],[14,10],[4,10],[168,163],[146,165],[160,164],[159,163],[161,165],[162,166],[13,9],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[160,160],[159,159],[162,162],[164,164],[163,163],[166,166],[[167,167,167],167],[[167,167,167,3],167],[[167,167,168,3],167],[[167,167,167],167],[[167,167,167,3],167],[[167,167,168,3],167],[[167,167,167],167],[[167,167,167,3],167],[[167,167,168,3],167],[[167,167,167],167],[[167,167,167,3],167],[[167,167,168,3],167],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[168,168,168,3],168],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[168,168,168,3],168],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[168,168,168,3],168],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[168,168,168,3],168],[172,172],[155,155],[158,158],[176,176],[162,162],[166,166],[[167,167],168],[[145,145],146],[[170,170],174],[[171,171],175],[[172,172],176],[[153,153],160],[[154,154],159],[[169,169],161],[[155,155],162],[[156,156],164],[[157,157],163],[[173,173],165],[[158,158],166],[[167,3,167,3],167],[[145,3,145,3],145],[[170,3,170,3],170],[[171,3,171,3],171],[[172,3,172,3],172],[[153,3,153,3],153],[[154,3,154,3],154],[[169,3,169,3],169],[[155,3,155,3],155],[[156,3,156,3],156],[[157,3,157,3],157],[[173,3,173,3],173],[[158,3,158,3],158],[[167,3,168,3],167],[[145,3,146,3],145],[[170,3,174,3],170],[[171,3,175,3],171],[[172,3,176,3],172],[[153,3,160,3],153],[[154,3,159,3],154],[[169,3,161,3],169],[[155,3,162,3],155],[[156,3,164,3],156],[[157,3,163,3],157],[[173,3,165,3],173],[[158,3,166,3],158],[[168,3,167,3],168],[[146,3,145,3],146],[[174,3,170,3],174],[[175,3,171,3],175],[[176,3,172,3],176],[[160,3,153,3],160],[[159,3,154,3],159],[[161,3,169,3],161],[[162,3,155,3],162],[[164,3,156,3],164],[[163,3,157,3],163],[[165,3,173,3],165],[[166,3,158,3],166],[[168,3,168,3],168],[[146,3,146,3],146],[[174,3,174,3],174],[[175,3,175,3],175],[[176,3,176,3],176],[[160,3,160,3],160],[[159,3,159,3],159],[[161,3,161,3],161],[[162,3,162,3],162],[[164,3,164,3],164],[[163,3,163,3],163],[[165,3,165,3],165],[[166,3,166,3],166],[10,167],[10,145],[10,170],[10,171],[10,172],[10,153],[10,154],[10,169],[10,155],[10,156],[10,157],[10,173],[10,158],[146,167],[154,167],[157,167],[167,146],[169,145],[173,145],[[167,146],168],[168,146],[[154,3],167],[[157,3],167],[[169,3],145],[[173,3],145],[[167,3],154],[[145,3],169],[[167,3],157],[[145,3],173],[167,154],[145,169],[167,157],[145,173],[167,154],[145,169],[167,157],[145,173],[14,4],[14,10],[168,159],[146,161],[168,163],[146,165],[13,3],[13,9],[4,14],[10,14],[[4,3],14],[[10,3],14],[[14,3],4],[[14,3],10],[14,4],[14,10],[167,154],[145,169],[167,157],[145,173],[14,4],[14,10],[168,159],[146,161],[168,163],[146,165],[13,3],[13,9],[167,154],[145,169],[167,157],[145,173],[14,4],[14,10],[168,159],[146,161],[168,163],[146,165],[13,3],[13,9],[167,154],[145,169],[167,157],[145,173],[14,4],[14,10],[168,159],[146,161],[168,163],[146,165],[13,3],[13,9],[159,168],[163,168],[161,146],[165,146],[[159,3],168],[[163,3],168],[[161,3],146],[[165,3],146],[[168,3],159],[[146,3],161],[[168,3],163],[[146,3],165],[168,159],[146,161],[168,163],[146,165],[3,13],[9,13],[[3,3],13],[[9,3],13],[[13,3],3],[[13,3],9],[13,3],[13,9],[146,167],[[167,146],168],[14,13],[[167,167],167],[[145,145],145],[[168,168],168],[[146,146],146],[[154,155,155,3],154],[[157,158,158,3],157],[[154,155,162,3],154],[[157,158,166,3],157],[[154,155,155],154],[[157,158,158],157],[[159,162,155,3],159],[[163,166,158,3],163],[[159,162,162,3],159],[[163,166,166,3],163],[[159,162,162],159],[[163,166,166],163],[[167,3],167],[[145,3],145],[[170,3],170],[[171,3],171],[[172,3],172],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[168,3],167],[[146,3],145],[[174,3],170],[[175,3],171],[[176,3],172],[[160,3],153],[[159,3],154],[[161,3],169],[[162,3],155],[[164,3],156],[[163,3],157],[[165,3],173],[[166,3],158],[13,167],[14,145],[8,170],[10,171],[7,172],[2,153],[3,154],[4,169],[1,155],[8,156],[9,157],[10,173],[7,158],[[172,3],7],[[155,3],1],[[158,3],7],[[176,3],7],[[162,3],1],[[166,3],7],[[145,3],14],[[169,3],4],[[173,3],10],[[146,3],14],[[161,3],4],[[165,3],10],[[170,3],8],[[153,3],2],[[156,3],8],[[174,3],8],[[160,3],2],[[164,3],8],[[167,3],168],[[145,3],146],[[170,3],174],[[171,3],175],[[172,3],176],[[153,3],160],[[154,3],159],[[169,3],161],[[155,3],162],[[156,3],164],[[157,3],163],[[173,3],165],[[158,3],166],[[168,3],168],[[146,3],146],[[174,3],174],[[175,3],175],[[176,3],176],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[13,168],[14,146],[8,174],[10,175],[7,176],[2,160],[3,159],[4,161],[1,162],[8,164],[9,163],[10,165],[7,166],[[167,3],13],[[154,3],3],[[157,3],9],[[168,3],13],[[159,3],3],[[163,3],9],[[160,160,160],160],[[159,159,159],159],[[161,161,161],161],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[165,165,165],165],[[166,166,166],166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167,3],167],[[145,145,3],145],[[170,170,3],170],[[171,171,3],171],[[172,172,3],172],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[168,168,3],168],[[146,146,3],146],[[174,174,3],174],[[175,175,3],175],[[176,176,3],176],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[167,167,167],167],[[145,145,145],145],[[167,167,167,3],167],[[145,145,145,3],145],[[167,167,168,3],167],[[145,145,146,3],145],[[167,167,13],167],[[145,145,14],145],[[14,14,145,3],14],[[14,14,146,3],14],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[146,146,145,3],146],[[168,168,168,3],168],[[146,146,146,3],146],[[168,168,13],168],[[146,146,14],146],[[13,13,167,3],13],[[13,13,168,3],13],[[167,167,167],167],[[145,145,145],145],[[167,167,167,3],167],[[145,145,145,3],145],[[167,167,168,3],167],[[145,145,146,3],145],[[167,167,13],167],[[145,145,14],145],[[14,14,145,3],14],[[14,14,146,3],14],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[146,146,145,3],146],[[168,168,168,3],168],[[146,146,146,3],146],[[168,168,13],168],[[146,146,14],146],[[13,13,167,3],13],[[13,13,168,3],13],[168,167],[146,145],[174,170],[175,171],[176,172],[160,153],[159,154],[161,169],[162,155],[164,156],[163,157],[165,173],[166,158],[[167,3],13],[[145,3],14],[[170,3],8],[[171,3],10],[[172,3],7],[[153,3],2],[[154,3],3],[[169,3],4],[[155,3],1],[[156,3],8],[[157,3],9],[[173,3],10],[[158,3],7],[168,167],[146,145],[174,170],[175,171],[176,172],[160,153],[159,154],[161,169],[162,155],[164,156],[163,157],[165,173],[166,158],[[168,3],13],[[146,3],14],[[174,3],8],[[175,3],10],[[176,3],7],[[160,3],2],[[159,3],3],[[161,3],4],[[162,3],1],[[164,3],8],[[163,3],9],[[165,3],10],[[166,3],7],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[13,167],[14,145],[8,170],[10,171],[7,172],[2,153],[3,154],[4,169],[1,155],[8,156],[9,157],[10,173],[7,158],[13,167],[13,177],[13,178],[13,179],[14,145],[14,147],[14,148],[14,149],[[13,167,3],167],[[14,145,3],145],[[8,170,3],170],[[10,171,3],171],[[7,172,3],172],[[2,153,3],153],[[3,154,3],154],[[4,169,3],169],[[1,155,3],155],[[8,156,3],156],[[9,157,3],157],[[10,173,3],173],[[7,158,3],158],[8,170],[8,180],[8,181],[8,182],[10,171],[10,183],[10,184],[10,185],[7,172],[7,186],[7,187],[7,188],[2,153],[2,189],[2,190],[2,191],[3,154],[3,192],[3,193],[3,194],[4,169],[4,195],[4,196],[4,197],[1,155],[1,198],[1,199],[1,200],[8,156],[8,201],[8,202],[8,203],[9,157],[9,204],[9,205],[9,206],[10,173],[10,207],[10,208],[10,209],[7,158],[7,210],[7,211],[7,212],[13,168],[14,146],[8,174],[10,175],[7,176],[2,160],[3,159],[4,161],[1,162],[8,164],[9,163],[10,165],[7,166],[13,168],[13,213],[13,214],[13,215],[14,146],[14,150],[14,151],[14,152],[[13,168,3],168],[[14,146,3],146],[[8,174,3],174],[[10,175,3],175],[[7,176,3],176],[[2,160,3],160],[[3,159,3],159],[[4,161,3],161],[[1,162,3],162],[[8,164,3],164],[[9,163,3],163],[[10,165,3],165],[[7,166,3],166],[8,174],[8,216],[8,217],[8,218],[10,175],[10,219],[10,220],[10,221],[7,176],[7,222],[7,223],[7,224],[2,160],[2,225],[2,226],[2,227],[3,159],[3,228],[3,229],[3,230],[4,161],[4,231],[4,232],[4,233],[1,162],[1,234],[1,235],[1,236],[8,164],[8,237],[8,238],[8,239],[9,163],[9,240],[9,241],[9,242],[10,165],[10,243],[10,244],[10,245],[7,166],[7,246],[7,247],[7,248],[13,177],[14,147],[8,180],[10,183],[7,186],[2,189],[3,192],[4,195],[1,198],[8,201],[9,204],[10,207],[7,210],[13,177],[14,147],[[13,177,3],177],[[14,147,3],147],[[8,180,3],180],[[10,183,3],183],[[7,186,3],186],[[2,189,3],189],[[3,192,3],192],[[4,195,3],195],[[1,198,3],198],[[8,201,3],201],[[9,204,3],204],[[10,207,3],207],[[7,210,3],210],[8,180],[10,183],[7,186],[2,189],[3,192],[4,195],[1,198],[8,201],[9,204],[10,207],[7,210],[13,213],[14,150],[8,216],[10,219],[7,222],[2,225],[3,228],[4,231],[1,234],[8,237],[9,240],[10,243],[7,246],[13,213],[14,150],[[13,213,3],213],[[14,150,3],150],[[8,216,3],216],[[10,219,3],219],[[7,222,3],222],[[2,225,3],225],[[3,228,3],228],[[4,231,3],231],[[1,234,3],234],[[8,237,3],237],[[9,240,3],240],[[10,243,3],243],[[7,246,3],246],[8,216],[10,219],[7,222],[2,225],[3,228],[4,231],[1,234],[8,237],[9,240],[10,243],[7,246],[13,178],[14,148],[8,181],[10,184],[7,187],[2,190],[3,193],[4,196],[1,199],[8,202],[9,205],[10,208],[7,211],[13,178],[14,148],[[13,178,3],178],[[14,148,3],148],[[8,181,3],181],[[10,184,3],184],[[7,187,3],187],[[2,190,3],190],[[3,193,3],193],[[4,196,3],196],[[1,199,3],199],[[8,202,3],202],[[9,205,3],205],[[10,208,3],208],[[7,211,3],211],[8,181],[10,184],[7,187],[2,190],[3,193],[4,196],[1,199],[8,202],[9,205],[10,208],[7,211],[13,214],[14,151],[8,217],[10,220],[7,223],[2,226],[3,229],[4,232],[1,235],[8,238],[9,241],[10,244],[7,247],[13,214],[14,151],[[13,214,3],214],[[14,151,3],151],[[8,217,3],217],[[10,220,3],220],[[7,223,3],223],[[2,226,3],226],[[3,229,3],229],[[4,232,3],232],[[1,235,3],235],[[8,238,3],238],[[9,241,3],241],[[10,244,3],244],[[7,247,3],247],[8,217],[10,220],[7,223],[2,226],[3,229],[4,232],[1,235],[8,238],[9,241],[10,244],[7,247],[13,179],[14,149],[8,182],[10,185],[7,188],[2,191],[3,194],[4,197],[1,200],[8,203],[9,206],[10,209],[7,212],[13,179],[14,149],[[13,179,3],179],[[14,149,3],149],[[8,182,3],182],[[10,185,3],185],[[7,188,3],188],[[2,191,3],191],[[3,194,3],194],[[4,197,3],197],[[1,200,3],200],[[8,203,3],203],[[9,206,3],206],[[10,209,3],209],[[7,212,3],212],[8,182],[10,185],[7,188],[2,191],[3,194],[4,197],[1,200],[8,203],[9,206],[10,209],[7,212],[13,215],[14,152],[8,218],[10,221],[7,224],[2,227],[3,230],[4,233],[1,236],[8,239],[9,242],[10,245],[7,248],[13,215],[14,152],[[13,215,3],215],[[14,152,3],152],[[8,218,3],218],[[10,221,3],221],[[7,224,3],224],[[2,227,3],227],[[3,230,3],230],[[4,233,3],233],[[1,236,3],236],[[8,239,3],239],[[9,242,3],242],[[10,245,3],245],[[7,248,3],248],[8,218],[10,221],[7,224],[2,227],[3,230],[4,233],[1,236],[8,239],[9,242],[10,245],[7,248],[11,11],[[167,167],167],[[145,145],145],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[145,145],145],[[168,168],168],[[146,146],146],[167,13],[168,13],[146,14],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[167,13],[153,2],[154,3],[155,1],[156,8],[157,9],[158,7],[168,13],[146,14],[160,2],[159,3],[162,1],[164,8],[163,9],[166,7],[[167,167],167],[[145,145],145],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[145,145],145],[[168,168],168],[[146,146],146],[167,13],[168,13],[146,14],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[167,13],[153,2],[154,3],[155,1],[156,8],[157,9],[158,7],[168,13],[146,14],[160,2],[159,3],[162,1],[164,8],[163,9],[166,7],[[167,167,167],167],[[145,145,145],145],[[167,167,167,3],167],[[153,153,153,3],153],[[154,154,154,3],154],[[156,156,156,3],156],[[157,157,157,3],157],[[167,167,168,3],167],[[153,153,160,3],153],[[154,154,159,3],154],[[156,156,164,3],156],[[157,157,163,3],157],[[167,167,13],167],[[153,153,2],153],[[154,154,3],154],[[156,156,8],156],[[157,157,9],157],[[153,153,153],153],[[154,154,154],154],[[155,155,155],155],[[156,156,156],156],[[157,157,157],157],[[158,158,158],158],[[159,160,153,3],159],[[161,159,154,3],161],[[163,164,156,3],163],[[165,163,157,3],165],[[159,160,160,3],159],[[161,159,159,3],161],[[163,164,164,3],163],[[165,163,163,3],165],[[159,160,2],159],[[161,159,3],161],[[163,164,8],163],[[165,163,9],165],[[159,160,160],159],[[161,159,159],161],[[160,162,162],160],[[163,164,164],163],[[165,163,163],165],[[164,166,166],164],[[159,153,153,3],159],[[161,154,154,3],161],[[163,156,156,3],163],[[165,157,157,3],165],[[159,153,160,3],159],[[161,154,159,3],161],[[163,156,164,3],163],[[165,157,163,3],165],[[159,153,2],159],[[161,154,3],161],[[163,156,8],163],[[165,157,9],165],[[159,153,153],159],[[161,154,154],161],[[160,155,155],160],[[163,156,156],163],[[165,157,157],165],[[164,158,158],164],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[160,160,153,3],160],[[159,159,154,3],159],[[164,164,156,3],164],[[163,163,157,3],163],[[168,168,168,3],168],[[160,160,160,3],160],[[159,159,159,3],159],[[164,164,164,3],164],[[163,163,163,3],163],[[168,168,13],168],[[160,160,2],160],[[159,159,3],159],[[164,164,8],164],[[163,163,9],163],[[160,160,160],160],[[159,159,159],159],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[166,166,166],166],[[167,167,167],167],[[145,145,145],145],[[167,167,167,3],167],[[153,153,153,3],153],[[154,154,154,3],154],[[156,156,156,3],156],[[157,157,157,3],157],[[167,167,168,3],167],[[153,153,160,3],153],[[154,154,159,3],154],[[156,156,164,3],156],[[157,157,163,3],157],[[167,167,13],167],[[153,153,2],153],[[154,154,3],154],[[156,156,8],156],[[157,157,9],157],[[153,153,153],153],[[154,154,154],154],[[155,155,155],155],[[156,156,156],156],[[157,157,157],157],[[158,158,158],158],[[159,160,153,3],159],[[161,159,154,3],161],[[163,164,156,3],163],[[165,163,157,3],165],[[159,160,160,3],159],[[161,159,159,3],161],[[163,164,164,3],163],[[165,163,163,3],165],[[159,160,2],159],[[161,159,3],161],[[163,164,8],163],[[165,163,9],165],[[159,160,160],159],[[161,159,159],161],[[160,162,162],160],[[163,164,164],163],[[165,163,163],165],[[164,166,166],164],[[159,153,153,3],159],[[161,154,154,3],161],[[163,156,156,3],163],[[165,157,157,3],165],[[159,153,160,3],159],[[161,154,159,3],161],[[163,156,164,3],163],[[165,157,163,3],165],[[159,153,2],159],[[161,154,3],161],[[163,156,8],163],[[165,157,9],165],[[159,153,153],159],[[161,154,154],161],[[160,155,155],160],[[163,156,156],163],[[165,157,157],165],[[164,158,158],164],[[168,168,168],168],[[146,146,146],146],[[168,168,167,3],168],[[160,160,153,3],160],[[159,159,154,3],159],[[164,164,156,3],164],[[163,163,157,3],163],[[168,168,168,3],168],[[160,160,160,3],160],[[159,159,159,3],159],[[164,164,164,3],164],[[163,163,163,3],163],[[168,168,13],168],[[160,160,2],160],[[159,159,3],159],[[164,164,8],164],[[163,163,9],163],[[160,160,160],160],[[159,159,159],159],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[166,166,166],166],[[159,162,162],159],[[163,166,166],163],[13,167],[14,145],[8,170],[10,171],[7,172],[2,153],[3,154],[4,169],[1,155],[8,156],[9,157],[10,173],[7,158],[160,159],[159,161],[162,160],[164,163],[163,165],[166,164],[153,159],[154,161],[155,160],[156,163],[157,165],[158,164],[[155,160],162],[[153,159],160],[[154,161],159],[[158,164],166],[[156,163],164],[[157,165],163],[160,155],[159,153],[161,154],[164,158],[163,156],[165,157],[13,168],[14,146],[8,174],[10,175],[7,176],[2,160],[3,159],[4,161],[1,162],[8,164],[9,163],[10,165],[7,166],[[167,167],167],[[145,145],145],[[167,167,3],167],[[145,145,3],145],[[153,153,3],153],[[154,154,3],154],[[156,156,3],156],[[157,157,3],157],[[167,168,3],167],[[145,146,3],145],[[153,160,3],153],[[154,159,3],154],[[156,164,3],156],[[157,163,3],157],[[167,13],167],[[145,14],145],[[153,2],153],[[154,3],154],[[156,8],156],[[157,9],157],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[14,145,3],14],[[14,146,3],14],[[160,153,3],159],[[159,154,3],161],[[164,156,3],163],[[163,157,3],165],[[160,160,3],159],[[159,159,3],161],[[164,164,3],163],[[163,163,3],165],[[160,2],159],[[159,3],161],[[164,8],163],[[163,9],165],[[175,175],11],[[176,176],174],[[160,160],159],[[159,159],161],[[162,162],160],[[164,164],163],[[163,163],165],[[166,166],164],[[153,153,3],159],[[154,154,3],161],[[156,156,3],163],[[157,157,3],165],[[153,160,3],159],[[154,159,3],161],[[156,164,3],163],[[157,163,3],165],[[153,2],159],[[154,3],161],[[156,8],163],[[157,9],165],[[10,10],11],[[172,172],174],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[146,146],146],[[168,167,3],168],[[146,145,3],146],[[160,153,3],160],[[159,154,3],159],[[164,156,3],164],[[163,157,3],163],[[168,168,3],168],[[146,146,3],146],[[160,160,3],160],[[159,159,3],159],[[164,164,3],164],[[163,163,3],163],[[168,13],168],[[146,14],146],[[160,2],160],[[159,3],159],[[164,8],164],[[163,9],163],[[176,176],176],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[[13,167,3],13],[[13,168,3],13],[[167,167],167],[[145,145],145],[[167,167,3],167],[[145,145,3],145],[[167,168,3],167],[[145,146,3],145],[[14,14],14],[[14,145,3],14],[[14,146,3],14],[[168,168],168],[[146,146],146],[[168,167,3],168],[[146,145,3],146],[[168,168,3],168],[[146,146,3],146],[[13,13],13],[[13,167,3],13],[[13,168,3],13],[172,172],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[176,176],[160,160],[159,159],[162,162],[164,164],[163,163],[166,166],[167,167],[145,145],[153,153],[154,154],[169,169],[155,155],[4,4],[168,168],[146,146],[160,160],[159,159],[161,161],[162,162],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[154,153],154],[[169,154],169],[[153,155],153],[[157,156],157],[[173,157],173],[[156,158],156],[[159,160],159],[[161,159],161],[[160,162],160],[[163,164],163],[[165,163],165],[[164,166],164],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[146,14],[161,4],[165,10],[153,154],[154,169],[155,153],[156,157],[157,173],[158,156],[160,159],[159,161],[162,160],[164,163],[163,165],[166,164],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[167,13],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[168,168],168],[[146,146],146],[146,14],[167,13],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[146,14],[167,13],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[168,168],168],[[146,146],146],[146,14],[167,13],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[146,14],[167,13],[153,153],[154,154],[169,169],[155,155],[1,1],[4,4],[2,2],[160,160],[159,159],[161,161],[162,162],[3,3],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[1,1],1],[[7,7],7],[[4,4],4],[[10,10],10],[[2,2],2],[[8,8],8],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[3,3],3],[[9,9],9],[[159,160,153,3],159],[[161,159,154,3],161],[[159,160,160,3],159],[[161,159,159,3],161],[[159,160,2],159],[[161,159,3],161],[[159,160,160],159],[[161,159,159],161],[[159,153,153,3],159],[[161,154,154,3],161],[[159,153,160,3],159],[[161,154,159,3],161],[[159,153,2],159],[[161,154,3],161],[[159,153,153],159],[[161,154,154],161],[[3,2,153,3],3],[[3,2,160,3],3],[[3,2,2],3],[[4,3,154,3],4],[[4,3,159,3],4],[[4,3,3],4],[[159,160,153,3],159],[[161,159,154,3],161],[[159,160,160,3],159],[[161,159,159,3],161],[[159,160,2],159],[[161,159,3],161],[[159,160,160],159],[[161,159,159],161],[[159,153,153,3],159],[[161,154,154,3],161],[[159,153,160,3],159],[[161,154,159,3],161],[[159,153,2],159],[[161,154,3],161],[[159,153,153],159],[[161,154,154],161],[[3,2,153,3],3],[[3,2,160,3],3],[[3,2,2],3],[[4,3,154,3],4],[[4,3,159,3],4],[[4,3,3],4],[[153,153,3],153],[[154,154,3],154],[[153,160,3],153],[[154,159,3],154],[[153,2],153],[[154,3],154],[[153,153],153],[[154,154],154],[[2,153,3],2],[[2,160,3],2],[[2,2],2],[[160,153,3],160],[[159,154,3],159],[[160,160,3],160],[[159,159,3],159],[[160,2],160],[[159,3],159],[[160,160],160],[[159,159],159],[[3,154,3],3],[[3,159,3],3],[[3,3],3],[[160,153,3],159],[[159,154,3],161],[[160,160,3],159],[[159,159,3],161],[[160,2],159],[[159,3],161],[[160,160],159],[[159,159],161],[[153,153,3],159],[[154,154,3],161],[[153,160,3],159],[[154,159,3],161],[[153,2],159],[[154,3],161],[[153,153],159],[[154,154],161],[[2,153,3],3],[[2,160,3],3],[[2,2],3],[[3,154,3],4],[[3,159,3],4],[[3,3],4],[[155,160],162],[[153,159],160],[[154,161],159],[[158,164],166],[[156,163],164],[[157,165],163],[160,155],[159,153],[161,154],[164,158],[163,156],[165,157],[4,3],[10,9],[2,1],[8,7],[3,2],[9,8],[[158,160],166],[[156,159],164],[[157,161],163],[160,158],[159,156],[161,157],[4,9],[2,7],[3,8],[153,153],[154,154],[169,169],[155,155],[1,1],[4,4],[2,2],[160,160],[159,159],[161,161],[162,162],[3,3],[[153,153,153,3],153],[[154,154,154,3],154],[[153,153,160,3],153],[[154,154,159,3],154],[[153,153,153],153],[[154,154,154],154],[[2,2,153,3],2],[[2,2,160,3],2],[[2,2,2],2],[[160,160,153,3],160],[[159,159,154,3],159],[[160,160,160,3],160],[[159,159,159,3],159],[[160,160,160],160],[[159,159,159],159],[[3,3,154,3],3],[[3,3,159,3],3],[[3,3,3],3],[[153,153,153,3],153],[[154,154,154,3],154],[[153,153,160,3],153],[[154,154,159,3],154],[[153,153,153],153],[[154,154,154],154],[[2,2,153,3],2],[[2,2,160,3],2],[[2,2,2],2],[[160,160,153,3],160],[[159,159,154,3],159],[[160,160,160,3],160],[[159,159,159,3],159],[[160,160,160],160],[[159,159,159],159],[[3,3,154,3],3],[[3,3,159,3],3],[[3,3,3],3],[[153,153,3],153],[[154,154,3],154],[[153,160,3],153],[[154,159,3],154],[[153,2],153],[[154,3],154],[[153,153],153],[[154,154],154],[[2,153,3],2],[[2,160,3],2],[[2,2],2],[[160,153,3],160],[[159,154,3],159],[[160,160,3],160],[[159,159,3],159],[[160,2],160],[[159,3],159],[[160,160],160],[[159,159],159],[[3,154,3],3],[[3,159,3],3],[[3,3],3],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[1,1],1],[[7,1],7],[[4,4],4],[[10,4],10],[[2,2],2],[[8,2],8],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[3,3],3],[[9,3],9],[[155,160,3],162],[[153,159,3],160],[[154,161,3],159],[[158,164,3],166],[[156,163,3],164],[[157,165,3],163],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[4,3],3],[[10,3],9],[[2,3],1],[[8,3],7],[[3,3],2],[[9,3],8],[[158,160,3],166],[[156,159,3],164],[[157,161,3],163],[[160,3],158],[[159,3],156],[[161,3],157],[[4,3],9],[[2,3],7],[[3,3],8],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[1,3],1],[[7,3],7],[[1,1],1],[[7,1],7],[[4,3],4],[[10,3],10],[[4,4],4],[[10,4],10],[[2,3],2],[[8,3],8],[[2,2],2],[[8,2],8],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[3,3],3],[[9,3],9],[[3,3],3],[[9,3],9],[[153,3],156],[[154,3],157],[[169,3],173],[[155,3],158],[[1,3],7],[[4,3],10],[[2,3],8],[[160,3],164],[[159,3],163],[[161,3],165],[[162,3],166],[[3,3],9],[[155,160,3],162],[[153,159,3],160],[[154,161,3],159],[[158,164,3],166],[[156,163,3],164],[[157,165,3],163],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[4,3],3],[[10,3],9],[[2,3],1],[[8,3],7],[[3,3],2],[[9,3],8],[[158,160,3],166],[[156,159,3],164],[[157,161,3],163],[[160,3],158],[[159,3],156],[[161,3],157],[[4,3],9],[[2,3],7],[[3,3],8],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[1,1],1],[[7,7],7],[[4,4],4],[[10,10],10],[[2,2],2],[[8,8],8],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[3,3],3],[[9,9],9],[[176,158],172],[[162,158],155],[[166,158],158],[[176,166],176],[[162,166],162],[[166,166],166],[[222,158],172],[[234,158],155],[[246,158],158],[[222,166],176],[[234,166],162],[[246,166],166],[[223,158],172],[[235,158],155],[[247,158],158],[[223,166],176],[[235,166],162],[[247,166],166],[[224,158],172],[[236,158],155],[[248,158],158],[[224,166],176],[[236,166],162],[[248,166],166],[[172,176,158],172],[[155,162,158],155],[[158,166,158],158],[[176,176,166],176],[[162,162,166],162],[[166,166,166],166],[[172,222,158],172],[[155,234,158],155],[[158,246,158],158],[[176,222,166],176],[[162,234,166],162],[[166,246,166],166],[[172,223,158],172],[[155,235,158],155],[[158,247,158],158],[[176,223,166],176],[[162,235,166],162],[[166,247,166],166],[[172,224,158],172],[[155,236,158],155],[[158,248,158],158],[[176,224,166],176],[[162,236,166],162],[[166,248,166],166],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[165,165],165],[172,172],[155,155],[158,158],[176,176],[162,162],[166,166],[167,167],[145,145],[157,157],[14,14],[168,168],[146,146],[163,163],[13,13],[[167,167],167],[[145,145],145],[[14,14],14],[[168,168],168],[[146,146],146],[[13,13],13],[14,14],[13,13],[145,167],[170,167],[171,167],[172,167],[153,167],[154,167],[169,167],[155,167],[156,167],[157,167],[173,167],[158,167],[167,145],[170,145],[171,145],[172,145],[153,145],[154,145],[169,145],[155,145],[156,145],[157,145],[173,145],[158,145],[167,170],[145,170],[171,170],[172,170],[153,170],[154,170],[169,170],[155,170],[156,170],[157,170],[173,170],[158,170],[167,171],[145,171],[170,171],[172,171],[153,171],[154,171],[169,171],[155,171],[156,171],[157,171],[173,171],[158,171],[167,172],[145,172],[170,172],[171,172],[153,172],[154,172],[169,172],[155,172],[156,172],[157,172],[173,172],[158,172],[167,153],[145,153],[170,153],[171,153],[172,153],[154,153],[169,153],[155,153],[156,153],[157,153],[173,153],[158,153],[167,154],[145,154],[170,154],[171,154],[172,154],[153,154],[169,154],[155,154],[156,154],[157,154],[173,154],[158,154],[167,169],[145,169],[170,169],[171,169],[172,169],[153,169],[154,169],[155,169],[156,169],[157,169],[173,169],[158,169],[167,155],[145,155],[170,155],[171,155],[172,155],[153,155],[154,155],[169,155],[156,155],[157,155],[173,155],[158,155],[167,156],[145,156],[170,156],[171,156],[172,156],[153,156],[154,156],[169,156],[155,156],[157,156],[173,156],[158,156],[167,157],[145,157],[170,157],[171,157],[172,157],[153,157],[154,157],[169,157],[155,157],[156,157],[173,157],[158,157],[167,173],[145,173],[170,173],[171,173],[172,173],[153,173],[154,173],[169,173],[155,173],[156,173],[157,173],[158,173],[167,158],[145,158],[170,158],[171,158],[172,158],[153,158],[154,158],[169,158],[155,158],[156,158],[157,158],[173,158],[146,168],[11,168],[174,168],[175,168],[176,168],[160,168],[159,168],[161,168],[162,168],[164,168],[163,168],[165,168],[166,168],[168,146],[11,146],[174,146],[175,146],[176,146],[160,146],[159,146],[161,146],[162,146],[164,146],[163,146],[165,146],[166,146],[168,11],[146,11],[174,11],[175,11],[176,11],[160,11],[159,11],[161,11],[162,11],[164,11],[163,11],[165,11],[166,11],[168,174],[146,174],[11,174],[175,174],[176,174],[160,174],[159,174],[161,174],[162,174],[164,174],[163,174],[165,174],[166,174],[168,175],[146,175],[11,175],[174,175],[176,175],[160,175],[159,175],[161,175],[162,175],[164,175],[163,175],[165,175],[166,175],[168,176],[146,176],[11,176],[174,176],[175,176],[160,176],[159,176],[161,176],[162,176],[164,176],[163,176],[165,176],[166,176],[168,160],[146,160],[11,160],[174,160],[175,160],[176,160],[159,160],[161,160],[162,160],[164,160],[163,160],[165,160],[166,160],[168,159],[146,159],[11,159],[174,159],[175,159],[176,159],[160,159],[161,159],[162,159],[164,159],[163,159],[165,159],[166,159],[168,161],[146,161],[11,161],[174,161],[175,161],[176,161],[160,161],[159,161],[162,161],[164,161],[163,161],[165,161],[166,161],[168,162],[146,162],[11,162],[174,162],[175,162],[176,162],[160,162],[159,162],[161,162],[164,162],[163,162],[165,162],[166,162],[168,164],[146,164],[11,164],[174,164],[175,164],[176,164],[160,164],[159,164],[161,164],[162,164],[163,164],[165,164],[166,164],[168,163],[146,163],[11,163],[174,163],[175,163],[176,163],[160,163],[159,163],[161,163],[162,163],[164,163],[165,163],[166,163],[168,165],[146,165],[11,165],[174,165],[175,165],[176,165],[160,165],[159,165],[161,165],[162,165],[164,165],[163,165],[166,165],[168,166],[146,166],[11,166],[174,166],[175,166],[176,166],[160,166],[159,166],[161,166],[162,166],[164,166],[163,166],[165,166],[172,172],[155,155],[158,158],[176,176],[162,162],[166,166],[170,170],[172,172],[153,153],[155,155],[156,156],[158,158],[174,174],[176,176],[160,160],[162,162],[164,164],[166,166],[167,167],[170,170],[172,172],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[168,168],[174,174],[176,176],[160,160],[159,159],[162,162],[164,164],[163,163],[166,166],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[13,13],[167,167],[145,145],[168,168],[146,146],[168,168],[146,146],[167,167],[145,145],[168,168],[146,146],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[4,4],4],[[10,4],10],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[4,3],4],[[10,3],10],[[155,160,3],162],[[153,159,3],160],[[154,161,3],159],[[158,164,3],166],[[156,163,3],164],[[157,165,3],163],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[167,167],[145,145],[157,157],[14,14],[168,168],[146,146],[163,163],[13,13],[[167,167],167],[[145,145],145],[[14,14],14],[[168,168],168],[[146,146],146],[[13,13],13],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[4,4,3],4],[[10,10,3],10],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[13,167,3],167],[[14,145,3],145],[[8,170,3],170],[[10,171,3],171],[[7,172,3],172],[[2,153,3],153],[[3,154,3],154],[[4,169,3],169],[[1,155,3],155],[[8,156,3],156],[[9,157,3],157],[[10,173,3],173],[[7,158,3],158],[[13,168,3],168],[[14,146,3],146],[[8,174,3],174],[[10,175,3],175],[[7,176,3],176],[[2,160,3],160],[[3,159,3],159],[[4,161,3],161],[[1,162,3],162],[[8,164,3],164],[[9,163,3],163],[[10,165,3],165],[[7,166,3],166],[[163,9,163],163],[9,9],[[163,9,163],163],[[163,9,163],163],[[163,163,163],163],[[163,163],163],[[163,163,163],163],[[163,163,163],163],[[163,163],163],[[163,163,163],163],[[165,165,165],165],[[165,165,165],165],[[165,165],165],[[165,165,165],165],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[4,3],4],[[10,3],10],[[4,4],4],[[10,4],10],[[160,3],159],[[159,3],161],[[162,3],160],[[164,3],163],[[163,3],165],[[166,3],164],[[153,3],159],[[154,3],161],[[155,3],160],[[156,3],163],[[157,3],165],[[158,3],164],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[4,3],4],[[10,3],10],[[155,160,3],162],[[153,159,3],160],[[154,161,3],159],[[158,164,3],166],[[156,163,3],164],[[157,165,3],163],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[[170,170,3],170],[[171,171,3],171],[[172,172,3],172],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[4,4,3],4],[[10,10,3],10],[[174,174,3],174],[[175,175,3],175],[[176,176,3],176],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[163,163,163],163],[[163,163,163],163],[[163,163,163],163],[[163,163,163,3],163],[[163,163,163,3],163],[[163,163,163,3],163],[[163,163,163,3],163],[[163,163],163],[[163,163],163],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[7,1],7],[[10,4],10],[[8,2],8],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[9,3],9],[167,167],[145,145],[168,168],[146,146],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[4,4,3],4],[[10,10,3],10],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[170,170,3],170],[[171,171,3],171],[[172,172,3],172],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[4,4,3],4],[[10,10,3],10],[[174,174,3],174],[[175,175,3],175],[[176,176,3],176],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[13,167],15],[[13,177],15],[[13,178],15],[[13,179],15],[[14,145],15],[[14,147],15],[[14,148],15],[[14,149],15],[[13,167,3],15],[[14,145,3],15],[[8,170,3],15],[[10,171,3],15],[[7,172,3],15],[[2,153,3],15],[[3,154,3],15],[[4,169,3],15],[[1,155,3],15],[[8,156,3],15],[[9,157,3],15],[[10,173,3],15],[[7,158,3],15],[[8,170],15],[[8,180],15],[[8,181],15],[[8,182],15],[[10,171],15],[[10,183],15],[[10,184],15],[[10,185],15],[[7,172],15],[[7,186],15],[[7,187],15],[[7,188],15],[[2,153],15],[[2,189],15],[[2,190],15],[[2,191],15],[[3,154],15],[[3,192],15],[[3,193],15],[[3,194],15],[[4,169],15],[[4,195],15],[[4,196],15],[[4,197],15],[[1,155],15],[[1,198],15],[[1,199],15],[[1,200],15],[[8,156],15],[[8,201],15],[[8,202],15],[[8,203],15],[[9,157],15],[[9,204],15],[[9,205],15],[[9,206],15],[[10,173],15],[[10,207],15],[[10,208],15],[[10,209],15],[[7,158],15],[[7,210],15],[[7,211],15],[[7,212],15],[[13,168],15],[[13,213],15],[[13,214],15],[[13,215],15],[[14,146],15],[[14,150],15],[[14,151],15],[[14,152],15],[[13,168,3],15],[[14,146,3],15],[[8,174,3],15],[[10,175,3],15],[[7,176,3],15],[[2,160,3],15],[[3,159,3],15],[[4,161,3],15],[[1,162,3],15],[[8,164,3],15],[[9,163,3],15],[[10,165,3],15],[[7,166,3],15],[[8,174],15],[[8,216],15],[[8,217],15],[[8,218],15],[[10,175],15],[[10,219],15],[[10,220],15],[[10,221],15],[[7,176],15],[[7,222],15],[[7,223],15],[[7,224],15],[[2,160],15],[[2,225],15],[[2,226],15],[[2,227],15],[[3,159],15],[[3,228],15],[[3,229],15],[[3,230],15],[[4,161],15],[[4,231],15],[[4,232],15],[[4,233],15],[[1,162],15],[[1,234],15],[[1,235],15],[[1,236],15],[[8,164],15],[[8,237],15],[[8,238],15],[[8,239],15],[[9,163],15],[[9,240],15],[[9,241],15],[[9,242],15],[[10,165],15],[[10,243],15],[[10,244],15],[[10,245],15],[[7,166],15],[[7,246],15],[[7,247],15],[[7,248],15],[[13,177],15],[[14,147],15],[[13,177,3],15],[[14,147,3],15],[[8,180,3],15],[[10,183,3],15],[[7,186,3],15],[[2,189,3],15],[[3,192,3],15],[[4,195,3],15],[[1,198,3],15],[[8,201,3],15],[[9,204,3],15],[[10,207,3],15],[[7,210,3],15],[[8,180],15],[[10,183],15],[[7,186],15],[[2,189],15],[[3,192],15],[[4,195],15],[[1,198],15],[[8,201],15],[[9,204],15],[[10,207],15],[[7,210],15],[[13,213],15],[[14,150],15],[[13,213,3],15],[[14,150,3],15],[[8,216,3],15],[[10,219,3],15],[[7,222,3],15],[[2,225,3],15],[[3,228,3],15],[[4,231,3],15],[[1,234,3],15],[[8,237,3],15],[[9,240,3],15],[[10,243,3],15],[[7,246,3],15],[[8,216],15],[[10,219],15],[[7,222],15],[[2,225],15],[[3,228],15],[[4,231],15],[[1,234],15],[[8,237],15],[[9,240],15],[[10,243],15],[[7,246],15],[[13,178],15],[[14,148],15],[[13,178,3],15],[[14,148,3],15],[[8,181,3],15],[[10,184,3],15],[[7,187,3],15],[[2,190,3],15],[[3,193,3],15],[[4,196,3],15],[[1,199,3],15],[[8,202,3],15],[[9,205,3],15],[[10,208,3],15],[[7,211,3],15],[[8,181],15],[[10,184],15],[[7,187],15],[[2,190],15],[[3,193],15],[[4,196],15],[[1,199],15],[[8,202],15],[[9,205],15],[[10,208],15],[[7,211],15],[[13,214],15],[[14,151],15],[[13,214,3],15],[[14,151,3],15],[[8,217,3],15],[[10,220,3],15],[[7,223,3],15],[[2,226,3],15],[[3,229,3],15],[[4,232,3],15],[[1,235,3],15],[[8,238,3],15],[[9,241,3],15],[[10,244,3],15],[[7,247,3],15],[[8,217],15],[[10,220],15],[[7,223],15],[[2,226],15],[[3,229],15],[[4,232],15],[[1,235],15],[[8,238],15],[[9,241],15],[[10,244],15],[[7,247],15],[[13,179],15],[[14,149],15],[[13,179,3],15],[[14,149,3],15],[[8,182,3],15],[[10,185,3],15],[[7,188,3],15],[[2,191,3],15],[[3,194,3],15],[[4,197,3],15],[[1,200,3],15],[[8,203,3],15],[[9,206,3],15],[[10,209,3],15],[[7,212,3],15],[[8,182],15],[[10,185],15],[[7,188],15],[[2,191],15],[[3,194],15],[[4,197],15],[[1,200],15],[[8,203],15],[[9,206],15],[[10,209],15],[[7,212],15],[[13,215],15],[[14,152],15],[[13,215,3],15],[[14,152,3],15],[[8,218,3],15],[[10,221,3],15],[[7,224,3],15],[[2,227,3],15],[[3,230,3],15],[[4,233,3],15],[[1,236,3],15],[[8,239,3],15],[[9,242,3],15],[[10,245,3],15],[[7,248,3],15],[[8,218],15],[[10,221],15],[[7,224],15],[[2,227],15],[[3,230],15],[[4,233],15],[[1,236],15],[[8,239],15],[[9,242],15],[[10,245],15],[[7,248],15],[[11,11],15],[[167,167],167],[[145,145],145],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[4,4],4],[[10,10],10],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[160,160],159],[[159,159],161],[[162,162],160],[[164,164],163],[[163,163],165],[[166,166],164],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[146,146],146],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[159,160],159],[[161,159],161],[[160,162],160],[[163,164],163],[[165,163],165],[[164,166],164],[[159,153],159],[[161,154],161],[[160,155],160],[[163,156],163],[[165,157],165],[[164,158],164],[[154,155,158,3],154],[[154,155,166,3],154],[[159,162,158,3],159],[[159,162,166,3],159],[[172,158],172],[[155,155],155],[[158,158],158],[[186,158],172],[[198,155],155],[[210,158],158],[[187,158],172],[[199,155],155],[[211,158],158],[[188,158],172],[[200,155],155],[[212,158],158],[[172,172,158],172],[[155,155,155],155],[[158,158,158],158],[[172,186,158],172],[[155,198,155],155],[[158,210,158],158],[[172,187,158],172],[[155,199,155],155],[[158,211,158],158],[[172,188,158],172],[[155,200,155],155],[[158,212,158],158],[[167,167],167],[[170,170],170],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],168],[[146,146],146],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[170,170],170],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],168],[[146,146],146],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],177],[[170,170],180],[[172,172],186],[[153,153],189],[[154,154],192],[[155,155],198],[[156,156],201],[[157,157],204],[[158,158],210],[[168,168],213],[[174,174],216],[[176,176],222],[[160,160],225],[[159,159],228],[[162,162],234],[[164,164],237],[[163,163],240],[[166,166],246],[[170,170],156],[[171,171],173],[[172,172],158],[[153,153],156],[[154,154],157],[[169,169],173],[[155,155],158],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[4,4],10],[[10,10],10],[[174,174],164],[[175,175],165],[[176,176],166],[[160,160],164],[[159,159],163],[[161,161],165],[[162,162],166],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[153,156],153],[[154,157],154],[[169,173],169],[[155,158],155],[[1,7],1],[[4,10],4],[[2,8],2],[[160,164],160],[[159,163],159],[[161,165],161],[[162,166],162],[[3,9],3],[[154,158,155,3],154],[[154,158,162,3],154],[[154,158,155],154],[[159,166,155,3],159],[[159,166,162,3],159],[[159,166,162],159],[[159,166,162],159],[[167,167],167],[[170,170],170],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],168],[[146,146],146],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[170,170],170],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],168],[[146,146],146],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],177],[[170,170],180],[[172,172],186],[[153,153],189],[[154,154],192],[[155,155],198],[[156,156],201],[[157,157],204],[[158,158],210],[[168,168],213],[[174,174],216],[[176,176],222],[[160,160],225],[[159,159],228],[[162,162],234],[[164,164],237],[[163,163],240],[[166,166],246],[[165,165,3],165],[[167,167],167],[[170,170],170],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],168],[[146,146],146],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],167],[[170,170],170],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],168],[[146,146],146],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167],177],[[170,170],180],[[172,172],186],[[153,153],189],[[154,154],192],[[155,155],198],[[156,156],201],[[157,157],204],[[158,158],210],[[168,168],213],[[174,174],216],[[176,176],222],[[160,160],225],[[159,159],228],[[162,162],234],[[164,164],237],[[163,163],240],[[166,166],246],0,[[9,7],9],[[9,7],9],[[9,8],9],[[9,9],9],[[9,8],9],[[9,9],9],[3,15],[-1,15,0],[-1,15,0],[-1,15,0],[[],15],[[3,3],3],[[249,249],249],[[250,250],250],[[249,249],249],[3,3],[[249,249],249],[[3,3],3],[[249,249],249],[[250,250],250],[[249,249],249],[[250,250],250],[[249,249],249],[[250,250],250],[[],15],[[],15],[[249,249],249],[[250,250],250],[[249,249],249],[[250,250],250],[[249,249,3],3],[[249,249,3],3],[[249,249,3],3],[[249,249,3],3],[[249,249,3],3],[[3,249,3],3],[[3,249,3],3],[[249,249,3],3],[[249,249],3],[[249,249],3],[[249,249],3],[[249,249],3],[[249,249],3],[[249,249],3],[[249,3],3],[[249,3],3],[[249,249],3],[[249,249],3],[[250,250],250],[[250,250],9],[[250,250,9],9],[[251,251],251],[[],15],[[],15],[[],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[155,155],[158,158],[172,172],[153,153],[156,156],[170,170],[154,154],[157,157],[167,167],[169,169],[173,173],[171,171],[162,162],[166,166],[176,176],[160,160],[164,164],[174,174],[159,159],[163,163],[168,168],[161,161],[165,165],[175,175],[198,198],[199,199],[200,200],[234,234],[235,235],[236,236],[210,210],[211,211],[212,212],[246,246],[247,247],[248,248],[186,186],[187,187],[188,188],[222,222],[223,223],[224,224],[189,189],[190,190],[191,191],[225,225],[226,226],[227,227],[201,201],[202,202],[203,203],[237,237],[238,238],[239,239],[180,180],[181,181],[182,182],[216,216],[217,217],[218,218],[192,192],[193,193],[194,194],[228,228],[229,229],[230,230],[204,204],[205,205],[206,206],[240,240],[241,241],[242,242],[177,177],[178,178],[179,179],[213,213],[214,214],[215,215],[195,195],[196,196],[197,197],[231,231],[232,232],[233,233],[207,207],[208,208],[209,209],[243,243],[244,244],[245,245],[183,183],[184,184],[185,185],[219,219],[220,220],[221,221],[250,250],[251,251],0,0,0,0,0,0,0,0,0,[[155,77],78],[[158,77],78],[[172,77],78],[[153,77],78],[[156,77],78],[[170,77],78],[[154,77],78],[[157,77],78],[[167,77],78],[[169,77],78],[[173,77],78],[[171,77],78],[[162,77],78],[[166,77],78],[[176,77],78],[[160,77],78],[[164,77],78],[[174,77],78],[[159,77],78],[[163,77],78],[[168,77],78],[[161,77],78],[[165,77],78],[[175,77],78],[[198,77],78],[[199,77],78],[[200,77],78],[[234,77],78],[[235,77],78],[[236,77],78],[[210,77],78],[[211,77],78],[[212,77],78],[[246,77],78],[[247,77],78],[[248,77],78],[[186,77],78],[[187,77],78],[[188,77],78],[[222,77],78],[[223,77],78],[[224,77],78],[[189,77],78],[[190,77],78],[[191,77],78],[[225,77],78],[[226,77],78],[[227,77],78],[[201,77],78],[[202,77],78],[[203,77],78],[[237,77],78],[[238,77],78],[[239,77],78],[[180,77],78],[[181,77],78],[[182,77],78],[[216,77],78],[[217,77],78],[[218,77],78],[[192,77],78],[[193,77],78],[[194,77],78],[[228,77],78],[[229,77],78],[[230,77],78],[[204,77],78],[[205,77],78],[[206,77],78],[[240,77],78],[[241,77],78],[[242,77],78],[[177,77],78],[[178,77],78],[[179,77],78],[[213,77],78],[[214,77],78],[[215,77],78],[[195,77],78],[[196,77],78],[[197,77],78],[[231,77],78],[[232,77],78],[[233,77],78],[[207,77],78],[[208,77],78],[[209,77],78],[[243,77],78],[[244,77],78],[[245,77],78],[[183,77],78],[[184,77],78],[[185,77],78],[[219,77],78],[[220,77],78],[[221,77],78],[[250,77],78],[[251,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[153,153,153],153],[[154,154,154],154],[[155,155,155],155],[[156,156,156],156],[[157,157,157],157],[[158,158,158],158],[[159,153,153],159],[[161,154,154],161],[[160,155,155],160],[[163,156,156],163],[[165,157,157],165],[[164,158,158],164],[[160,160,160],160],[[159,159,159],159],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[166,166,166],166],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[167,167],[153,153],[154,154],[155,155],[168,168],[160,160],[159,159],[162,162],[[167,167],167],[[170,170],170],[[171,171],171],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[160,160],159],[[159,159],161],[[162,162],160],[[164,164],163],[[163,163],165],[[166,166],164],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[11,11],11],[[174,174],174],[[175,175],175],[[176,176],176],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[159,160],159],[[161,159],161],[[160,162],160],[[163,164],163],[[165,163],165],[[164,166],164],[[159,153],159],[[161,154],161],[[160,155],160],[[163,156],163],[[165,157],165],[[164,158],164],[[166,166],166],[[166,166],166],[166,166],[166,166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[157,167,167],167],[[156,170,170],170],[[158,172,172],172],[[156,153,153],153],[[157,154,154],154],[[173,169,169],169],[[158,155,155],155],[[156,156,156],156],[[157,157,157],157],[[173,173,173],173],[[158,158,158],158],[[163,168,168],168],[[164,174,174],174],[[166,176,176],176],[[164,160,160],160],[[163,159,159],159],[[165,161,161],161],[[166,162,162],162],[[164,164,164],164],[[163,163,163],163],[[165,165,165],165],[[166,166,166],166],[[167,167],157],[[168,168],163],[[167,167],157],[[168,168],163],[[167,167],157],[[168,168],163],[[167,167],157],[[168,168],163],[[167,167],157],[[172,172],158],[[153,153],156],[[154,154],157],[[155,155],158],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],163],[[176,176],166],[[160,160],164],[[159,159],163],[[162,162],166],[[164,164],164],[[163,163],163],[[166,166],166],[[167,167],157],[[153,153],156],[[154,154],157],[[155,155],158],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],163],[[160,160],164],[[159,159],163],[[162,162],166],[[164,164],164],[[163,163],163],[[166,166],166],[[167,167],157],[[153,153],156],[[154,154],157],[[155,155],158],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],163],[[160,160],164],[[159,159],163],[[162,162],166],[[164,164],164],[[163,163],163],[[166,166],166],[[167,167],157],[[153,153],156],[[154,154],157],[[155,155],158],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],163],[[160,160],164],[[159,159],163],[[162,162],166],[[164,164],164],[[163,163],163],[[166,166],166],[153,153],[154,154],[155,155],[156,153],[157,154],[158,155],[160,160],[159,159],[162,162],[164,160],[163,159],[166,162],[[167,167],157],[[153,153],156],[[154,154],157],[[155,155],158],[[156,156],156],[[157,157],157],[[158,158],158],[[168,168],163],[[160,160],164],[[159,159],163],[[162,162],166],[[164,164],164],[[163,163],163],[[166,166],166],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[160,160],[159,159],[162,162],[164,164],[163,163],[166,166],[172,172],[155,155],[158,158],[176,176],[162,162],[166,166],[[167,167],168],[[170,170],174],[[171,171],175],[[172,172],176],[[153,153],160],[[154,154],159],[[169,169],161],[[155,155],162],[[156,156],164],[[157,157],163],[[173,173],165],[[158,158],166],[10,167],[10,170],[10,171],[10,172],[10,153],[10,154],[10,169],[10,155],[10,156],[10,157],[10,173],[10,158],[154,167],[157,167],[[154,3],167],[[157,3],167],[[167,3],154],[[167,3],157],[167,154],[167,157],[159,168],[163,168],[[159,3],168],[[163,3],168],[[168,3],159],[[168,3],163],[168,159],[168,163],[[154,155,155,3],154],[[157,158,158,3],157],[[154,155,155],154],[[157,158,158],157],[[159,162,155,3],159],[[163,166,158,3],163],[[159,162,162],159],[[163,166,166],163],[[167,3],167],[[170,3],170],[[172,3],172],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[168,3],167],[[174,3],170],[[176,3],172],[[160,3],153],[[159,3],154],[[161,3],169],[[162,3],155],[[164,3],156],[[163,3],157],[[165,3],173],[[166,3],158],[13,167],[8,170],[7,172],[2,153],[3,154],[4,169],[1,155],[8,156],[9,157],[10,173],[7,158],[[167,3],168],[[170,3],174],[[172,3],176],[[153,3],160],[[154,3],159],[[169,3],161],[[155,3],162],[[156,3],164],[[157,3],163],[[173,3],165],[[158,3],166],[[168,3],168],[[174,3],174],[[176,3],176],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[13,168],[8,174],[7,176],[2,160],[3,159],[4,161],[1,162],[8,164],[9,163],[10,165],[7,166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[167,167,3],167],[[170,170,3],170],[[172,172,3],172],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[168,168,3],168],[[174,174,3],174],[[176,176,3],176],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[167,167,167],167],[[167,167,13],167],[[168,168,168],168],[[168,168,13],168],[[167,167,167],167],[[167,167,13],167],[[168,168,168],168],[[168,168,13],168],[168,167],[174,170],[176,172],[160,153],[159,154],[161,169],[162,155],[164,156],[163,157],[165,173],[166,158],[[167,3],13],[[170,3],8],[[171,3],10],[[172,3],7],[[153,3],2],[[154,3],3],[[169,3],4],[[155,3],1],[[156,3],8],[[157,3],9],[[173,3],10],[[158,3],7],[168,167],[174,170],[176,172],[160,153],[159,154],[161,169],[162,155],[164,156],[163,157],[165,173],[166,158],[[168,3],13],[[174,3],8],[[175,3],10],[[176,3],7],[[160,3],2],[[159,3],3],[[161,3],4],[[162,3],1],[[164,3],8],[[163,3],9],[[165,3],10],[[166,3],7],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[13,167],[8,170],[10,171],[7,172],[2,153],[3,154],[4,169],[1,155],[8,156],[9,157],[10,173],[7,158],[13,167],[13,177],[13,178],[13,179],[[13,167,3],167],[[8,170,3],170],[[10,171,3],171],[[7,172,3],172],[[2,153,3],153],[[3,154,3],154],[[4,169,3],169],[[1,155,3],155],[[8,156,3],156],[[9,157,3],157],[[10,173,3],173],[[7,158,3],158],[8,170],[8,180],[8,181],[8,182],[10,171],[10,183],[10,184],[10,185],[7,172],[7,186],[7,187],[7,188],[2,153],[2,189],[2,190],[2,191],[3,154],[3,192],[3,193],[3,194],[4,169],[4,195],[4,196],[4,197],[1,155],[1,198],[1,199],[1,200],[8,156],[8,201],[8,202],[8,203],[9,157],[9,204],[9,205],[9,206],[10,173],[10,207],[10,208],[10,209],[7,158],[7,210],[7,211],[7,212],[13,168],[8,174],[10,175],[7,176],[2,160],[3,159],[4,161],[1,162],[8,164],[9,163],[10,165],[7,166],[13,168],[13,213],[13,214],[13,215],[[13,168,3],168],[[8,174,3],174],[[10,175,3],175],[[7,176,3],176],[[2,160,3],160],[[3,159,3],159],[[4,161,3],161],[[1,162,3],162],[[8,164,3],164],[[9,163,3],163],[[10,165,3],165],[[7,166,3],166],[8,174],[8,216],[8,217],[8,218],[10,175],[10,219],[10,220],[10,221],[7,176],[7,222],[7,223],[7,224],[2,160],[2,225],[2,226],[2,227],[3,159],[3,228],[3,229],[3,230],[4,161],[4,231],[4,232],[4,233],[1,162],[1,234],[1,235],[1,236],[8,164],[8,237],[8,238],[8,239],[9,163],[9,240],[9,241],[9,242],[10,165],[10,243],[10,244],[10,245],[7,166],[7,246],[7,247],[7,248],[13,177],[8,180],[10,183],[7,186],[2,189],[3,192],[4,195],[1,198],[8,201],[9,204],[10,207],[7,210],[13,177],[[13,177,3],177],[[8,180,3],180],[[7,186,3],186],[[2,189,3],189],[[3,192,3],192],[[1,198,3],198],[[8,201,3],201],[[9,204,3],204],[[7,210,3],210],[8,180],[10,183],[7,186],[2,189],[3,192],[4,195],[1,198],[8,201],[9,204],[10,207],[7,210],[13,213],[8,216],[7,222],[2,225],[3,228],[1,234],[8,237],[9,240],[7,246],[13,213],[[13,213,3],213],[[8,216,3],216],[[2,225,3],225],[[3,228,3],228],[[8,237,3],237],[[9,240,3],240],[8,216],[7,222],[2,225],[3,228],[1,234],[8,237],[9,240],[7,246],[13,178],[8,181],[10,184],[7,187],[2,190],[3,193],[4,196],[1,199],[8,202],[9,205],[10,208],[7,211],[13,178],[[13,178,3],178],[[8,181,3],181],[[7,187,3],187],[[2,190,3],190],[[3,193,3],193],[[1,199,3],199],[[8,202,3],202],[[9,205,3],205],[[7,211,3],211],[8,181],[10,184],[7,187],[2,190],[3,193],[4,196],[1,199],[8,202],[9,205],[10,208],[7,211],[13,214],[8,217],[7,223],[2,226],[3,229],[1,235],[8,238],[9,241],[7,247],[13,214],[[13,214,3],214],[[8,217,3],217],[[2,226,3],226],[[3,229,3],229],[[8,238,3],238],[[9,241,3],241],[8,217],[7,223],[2,226],[3,229],[1,235],[8,238],[9,241],[7,247],[13,179],[8,182],[10,185],[7,188],[2,191],[3,194],[4,197],[1,200],[8,203],[9,206],[10,209],[7,212],[13,179],[[13,179,3],179],[[8,182,3],182],[[7,188,3],188],[[2,191,3],191],[[3,194,3],194],[[1,200,3],200],[[8,203,3],203],[[9,206,3],206],[[7,212,3],212],[8,182],[10,185],[7,188],[2,191],[3,194],[4,197],[1,200],[8,203],[9,206],[10,209],[7,212],[13,215],[8,218],[7,224],[2,227],[3,230],[1,236],[8,239],[9,242],[7,248],[13,215],[[13,215,3],215],[[8,218,3],218],[[2,227,3],227],[[3,230,3],230],[[8,239,3],239],[[9,242,3],242],[8,218],[7,224],[2,227],[3,230],[1,236],[8,239],[9,242],[7,248],[11,11],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[168,168],168],[[168,168],168],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[168,168],168],[[168,168],168],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[[167,167,167],167],[[167,167,167,3],167],[[153,153,153,3],153],[[154,154,154,3],154],[[156,156,156,3],156],[[157,157,157,3],157],[[167,167,168,3],167],[[153,153,160,3],153],[[154,154,159,3],154],[[156,156,164,3],156],[[157,157,163,3],157],[[167,167,13],167],[[153,153,2],153],[[154,154,3],154],[[156,156,8],156],[[157,157,9],157],[[153,153,153],153],[[154,154,154],154],[[155,155,155],155],[[156,156,156],156],[[157,157,157],157],[[158,158,158],158],[[159,153,153,3],159],[[161,154,154,3],161],[[163,156,156,3],163],[[165,157,157,3],165],[[159,153,160,3],159],[[161,154,159,3],161],[[163,156,164,3],163],[[165,157,163,3],165],[[159,153,2],159],[[161,154,3],161],[[163,156,8],163],[[165,157,9],165],[[159,153,153],159],[[161,154,154],161],[[160,155,155],160],[[163,156,156],163],[[165,157,157],165],[[164,158,158],164],[[168,168,168],168],[[168,168,167,3],168],[[160,160,153,3],160],[[159,159,154,3],159],[[164,164,156,3],164],[[163,163,157,3],163],[[168,168,168,3],168],[[160,160,160,3],160],[[159,159,159,3],159],[[164,164,164,3],164],[[163,163,163,3],163],[[168,168,13],168],[[160,160,2],160],[[159,159,3],159],[[164,164,8],164],[[163,163,9],163],[[160,160,160],160],[[159,159,159],159],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[166,166,166],166],[[167,167,167],167],[[167,167,167,3],167],[[153,153,153,3],153],[[154,154,154,3],154],[[156,156,156,3],156],[[157,157,157,3],157],[[167,167,168,3],167],[[153,153,160,3],153],[[154,154,159,3],154],[[156,156,164,3],156],[[157,157,163,3],157],[[167,167,13],167],[[153,153,2],153],[[154,154,3],154],[[156,156,8],156],[[157,157,9],157],[[153,153,153],153],[[154,154,154],154],[[155,155,155],155],[[156,156,156],156],[[157,157,157],157],[[158,158,158],158],[[159,153,153,3],159],[[161,154,154,3],161],[[163,156,156,3],163],[[165,157,157,3],165],[[159,153,160,3],159],[[161,154,159,3],161],[[163,156,164,3],163],[[165,157,163,3],165],[[159,153,2],159],[[161,154,3],161],[[163,156,8],163],[[165,157,9],165],[[159,153,153],159],[[161,154,154],161],[[160,155,155],160],[[163,156,156],163],[[165,157,157],165],[[164,158,158],164],[[168,168,168],168],[[168,168,167,3],168],[[160,160,153,3],160],[[159,159,154,3],159],[[164,164,156,3],164],[[163,163,157,3],163],[[168,168,168,3],168],[[160,160,160,3],160],[[159,159,159,3],159],[[164,164,164,3],164],[[163,163,163,3],163],[[168,168,13],168],[[160,160,2],160],[[159,159,3],159],[[164,164,8],164],[[163,163,9],163],[[160,160,160],160],[[159,159,159],159],[[162,162,162],162],[[164,164,164],164],[[163,163,163],163],[[166,166,166],166],[[159,162,162],159],[[163,166,166],163],[13,167],[8,170],[7,172],[2,153],[3,154],[4,169],[1,155],[8,156],[9,157],[10,173],[7,158],[153,159],[154,161],[155,160],[156,163],[157,165],[158,164],[160,155],[159,153],[161,154],[164,158],[163,156],[165,157],[13,168],[8,174],[7,176],[2,160],[3,159],[4,161],[1,162],[8,164],[9,163],[10,165],[7,166],[[167,167],167],[[167,167,3],167],[[153,153,3],153],[[154,154,3],154],[[156,156,3],156],[[157,157,3],157],[[167,168,3],167],[[153,160,3],153],[[154,159,3],154],[[156,164,3],156],[[157,163,3],157],[[167,13],167],[[153,2],153],[[154,3],154],[[156,8],156],[[157,9],157],[[172,172],172],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[153,153,3],159],[[154,154,3],161],[[156,156,3],163],[[157,157,3],165],[[153,160,3],159],[[154,159,3],161],[[156,164,3],163],[[157,163,3],165],[[153,2],159],[[154,3],161],[[156,8],163],[[157,9],165],[[172,172],174],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[168,167,3],168],[[160,153,3],160],[[159,154,3],159],[[164,156,3],164],[[163,157,3],163],[[168,168,3],168],[[160,160,3],160],[[159,159,3],159],[[164,164,3],164],[[163,163,3],163],[[168,13],168],[[160,2],160],[[159,3],159],[[164,8],164],[[163,9],163],[[176,176],176],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[172,172],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[176,176],[160,160],[159,159],[162,162],[164,164],[163,163],[166,166],[167,167],[153,153],[154,154],[155,155],[168,168],[160,160],[159,159],[162,162],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[154,153],154],[[169,154],169],[[153,155],153],[[157,156],157],[[173,157],173],[[156,158],156],[[159,160],159],[[161,159],161],[[160,162],160],[[163,164],163],[[165,163],165],[[164,166],164],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[153,154],[154,169],[155,153],[156,157],[157,173],[158,156],[160,159],[159,161],[162,160],[164,163],[163,165],[166,164],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[167,167],167],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[153,153],[154,154],[155,155],[160,160],[159,159],[162,162],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[159,153,153,3],159],[[161,154,154,3],161],[[159,153,2],159],[[161,154,3],161],[[159,153,153],159],[[161,154,154],161],[[159,153,153,3],159],[[161,154,154,3],161],[[159,153,2],159],[[161,154,3],161],[[159,153,153],159],[[161,154,154],161],[[153,160,3],153],[[154,159,3],154],[[153,2],153],[[154,3],154],[[153,153],153],[[154,154],154],[[160,160,3],160],[[159,159,3],159],[[160,2],160],[[159,3],159],[[160,160],160],[[159,159],159],[[153,153,3],159],[[154,154,3],161],[[153,2],159],[[154,3],161],[[153,153],159],[[154,154],161],[160,155],[159,153],[161,154],[164,158],[163,156],[165,157],[160,158],[159,156],[161,157],[153,153],[154,154],[155,155],[160,160],[159,159],[162,162],[[153,153,3],153],[[154,154,3],154],[[153,160,3],153],[[154,159,3],154],[[153,2],153],[[154,3],154],[[153,153],153],[[154,154],154],[[160,153,3],160],[[159,154,3],159],[[160,160,3],160],[[159,159,3],159],[[160,2],160],[[159,3],159],[[160,160],160],[[159,159],159],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[160,3],158],[[159,3],156],[[161,3],157],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[153,3],156],[[154,3],157],[[169,3],173],[[155,3],158],[[160,3],164],[[159,3],163],[[161,3],165],[[162,3],166],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[160,3],158],[[159,3],156],[[161,3],157],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[167,167],[157,157],[168,168],[163,163],[[167,167],167],[[168,168],168],[170,167],[172,167],[153,167],[154,167],[169,167],[155,167],[156,167],[157,167],[173,167],[158,167],[167,170],[171,170],[172,170],[153,170],[154,170],[169,170],[155,170],[156,170],[157,170],[173,170],[158,170],[170,171],[172,171],[153,171],[154,171],[155,171],[156,171],[157,171],[158,171],[167,172],[170,172],[171,172],[153,172],[154,172],[169,172],[155,172],[156,172],[157,172],[173,172],[158,172],[167,153],[170,153],[171,153],[172,153],[154,153],[169,153],[155,153],[156,153],[157,153],[173,153],[158,153],[167,154],[170,154],[171,154],[172,154],[153,154],[169,154],[155,154],[156,154],[157,154],[173,154],[158,154],[167,169],[170,169],[172,169],[153,169],[154,169],[155,169],[156,169],[157,169],[173,169],[158,169],[167,155],[170,155],[171,155],[172,155],[153,155],[154,155],[169,155],[156,155],[157,155],[173,155],[158,155],[167,156],[170,156],[171,156],[172,156],[153,156],[154,156],[169,156],[155,156],[157,156],[173,156],[158,156],[167,157],[170,157],[171,157],[172,157],[153,157],[154,157],[169,157],[155,157],[156,157],[173,157],[158,157],[167,173],[170,173],[172,173],[153,173],[154,173],[169,173],[155,173],[156,173],[157,173],[158,173],[167,158],[170,158],[171,158],[172,158],[153,158],[154,158],[169,158],[155,158],[156,158],[157,158],[173,158],[11,168],[174,168],[176,168],[160,168],[159,168],[161,168],[162,168],[164,168],[163,168],[165,168],[166,168],[168,11],[174,11],[175,11],[176,11],[160,11],[159,11],[161,11],[162,11],[164,11],[163,11],[165,11],[166,11],[168,174],[11,174],[175,174],[176,174],[160,174],[159,174],[161,174],[162,174],[164,174],[163,174],[165,174],[166,174],[11,175],[174,175],[176,175],[160,175],[159,175],[162,175],[164,175],[163,175],[166,175],[168,176],[11,176],[174,176],[175,176],[160,176],[159,176],[161,176],[162,176],[164,176],[163,176],[165,176],[166,176],[168,160],[11,160],[174,160],[175,160],[176,160],[159,160],[161,160],[162,160],[164,160],[163,160],[165,160],[166,160],[168,159],[11,159],[174,159],[175,159],[176,159],[160,159],[161,159],[162,159],[164,159],[163,159],[165,159],[166,159],[168,161],[11,161],[174,161],[176,161],[160,161],[159,161],[162,161],[164,161],[163,161],[165,161],[166,161],[168,162],[11,162],[174,162],[175,162],[176,162],[160,162],[159,162],[161,162],[164,162],[163,162],[165,162],[166,162],[168,164],[11,164],[174,164],[175,164],[176,164],[160,164],[159,164],[161,164],[162,164],[163,164],[165,164],[166,164],[168,163],[11,163],[174,163],[175,163],[176,163],[160,163],[159,163],[161,163],[162,163],[164,163],[165,163],[166,163],[168,165],[11,165],[174,165],[176,165],[160,165],[159,165],[161,165],[162,165],[164,165],[163,165],[166,165],[168,166],[11,166],[174,166],[175,166],[176,166],[160,166],[159,166],[161,166],[162,166],[164,166],[163,166],[165,166],[172,172],[155,155],[158,158],[176,176],[162,162],[166,166],[170,170],[172,172],[153,153],[155,155],[156,156],[158,158],[174,174],[176,176],[160,160],[162,162],[164,164],[166,166],[167,167],[170,170],[172,172],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[168,168],[174,174],[176,176],[160,160],[159,159],[162,162],[164,164],[163,163],[166,166],[[153,153],153],[[154,154],154],[[155,155],155],[[156,156],156],[[157,157],157],[[158,158],158],[[160,160],160],[[159,159],159],[[162,162],162],[[164,164],164],[[163,163],163],[[166,166],166],[167,167],[168,168],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[167,167],[157,157],[168,168],[163,163],[[167,167],167],[[168,168],168],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[13,167,3],167],[[8,170,3],170],[[10,171,3],171],[[7,172,3],172],[[2,153,3],153],[[3,154,3],154],[[4,169,3],169],[[1,155,3],155],[[8,156,3],156],[[9,157,3],157],[[10,173,3],173],[[7,158,3],158],[[13,168,3],168],[[8,174,3],174],[[10,175,3],175],[[7,176,3],176],[[2,160,3],160],[[3,159,3],159],[[4,161,3],161],[[1,162,3],162],[[8,164,3],164],[[9,163,3],163],[[10,165,3],165],[[7,166,3],166],[[163,9,163],163],[9,9],[[163,9,163],163],[[163,9,163],163],[[163,163,163],163],[[163,163],163],[[163,163,163],163],[[163,163,163],163],[[163,163],163],[[163,163,163],163],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,153],156],[[157,154],157],[[173,169],173],[[158,155],158],[[153,3],159],[[154,3],161],[[155,3],160],[[156,3],163],[[157,3],165],[[158,3],164],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,160],164],[[163,159],163],[[165,161],165],[[166,162],166],[[153,3],153],[[154,3],154],[[169,3],169],[[155,3],155],[[156,3],156],[[157,3],157],[[173,3],173],[[158,3],158],[[160,3],155],[[159,3],153],[[161,3],154],[[164,3],158],[[163,3],156],[[165,3],157],[[160,3],160],[[159,3],159],[[161,3],161],[[162,3],162],[[164,3],164],[[163,3],163],[[165,3],165],[[166,3],166],[[170,170,3],170],[[171,171,3],171],[[172,172,3],172],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[174,174,3],174],[[175,175,3],175],[[176,176,3],176],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[170,170,3],170],[[171,171,3],171],[[172,172,3],172],[[153,153,3],153],[[154,154,3],154],[[169,169,3],169],[[155,155,3],155],[[156,156,3],156],[[157,157,3],157],[[173,173,3],173],[[158,158,3],158],[[174,174,3],174],[[175,175,3],175],[[176,176,3],176],[[160,160,3],160],[[159,159,3],159],[[161,161,3],161],[[162,162,3],162],[[164,164,3],164],[[163,163,3],163],[[165,165,3],165],[[166,166,3],166],[[13,167],15],[[13,177],15],[[13,178],15],[[13,179],15],[[13,167,3],15],[[8,170,3],15],[[10,171,3],15],[[7,172,3],15],[[2,153,3],15],[[3,154,3],15],[[4,169,3],15],[[1,155,3],15],[[8,156,3],15],[[9,157,3],15],[[10,173,3],15],[[7,158,3],15],[[8,170],15],[[8,180],15],[[8,181],15],[[8,182],15],[[10,171],15],[[10,183],15],[[10,184],15],[[10,185],15],[[7,172],15],[[7,186],15],[[7,187],15],[[7,188],15],[[2,153],15],[[2,189],15],[[2,190],15],[[2,191],15],[[3,154],15],[[3,192],15],[[3,193],15],[[3,194],15],[[4,169],15],[[4,195],15],[[4,196],15],[[4,197],15],[[1,155],15],[[1,198],15],[[1,199],15],[[1,200],15],[[8,156],15],[[8,201],15],[[8,202],15],[[8,203],15],[[9,157],15],[[9,204],15],[[9,205],15],[[9,206],15],[[10,173],15],[[10,207],15],[[10,208],15],[[10,209],15],[[7,158],15],[[7,210],15],[[7,211],15],[[7,212],15],[[13,168],15],[[13,213],15],[[13,214],15],[[13,215],15],[[13,168,3],15],[[8,174,3],15],[[10,175,3],15],[[7,176,3],15],[[2,160,3],15],[[3,159,3],15],[[4,161,3],15],[[1,162,3],15],[[8,164,3],15],[[9,163,3],15],[[10,165,3],15],[[7,166,3],15],[[8,174],15],[[8,216],15],[[8,217],15],[[8,218],15],[[10,175],15],[[10,219],15],[[10,220],15],[[10,221],15],[[7,176],15],[[7,222],15],[[7,223],15],[[7,224],15],[[2,160],15],[[2,225],15],[[2,226],15],[[2,227],15],[[3,159],15],[[3,228],15],[[3,229],15],[[3,230],15],[[4,161],15],[[4,231],15],[[4,232],15],[[4,233],15],[[1,162],15],[[1,234],15],[[1,235],15],[[1,236],15],[[8,164],15],[[8,237],15],[[8,238],15],[[8,239],15],[[9,163],15],[[9,240],15],[[9,241],15],[[9,242],15],[[10,165],15],[[10,243],15],[[10,244],15],[[10,245],15],[[7,166],15],[[7,246],15],[[7,247],15],[[7,248],15],[[13,177],15],[[13,177,3],15],[[8,180,3],15],[[7,186,3],15],[[2,189,3],15],[[3,192,3],15],[[1,198,3],15],[[8,201,3],15],[[9,204,3],15],[[7,210,3],15],[[8,180],15],[[10,183],15],[[7,186],15],[[2,189],15],[[3,192],15],[[4,195],15],[[1,198],15],[[8,201],15],[[9,204],15],[[10,207],15],[[7,210],15],[[13,213],15],[[13,213,3],15],[[8,216,3],15],[[2,225,3],15],[[3,228,3],15],[[8,237,3],15],[[9,240,3],15],[[8,216],15],[[7,222],15],[[2,225],15],[[3,228],15],[[1,234],15],[[8,237],15],[[9,240],15],[[7,246],15],[[13,178],15],[[13,178,3],15],[[8,181,3],15],[[7,187,3],15],[[2,190,3],15],[[3,193,3],15],[[1,199,3],15],[[8,202,3],15],[[9,205,3],15],[[7,211,3],15],[[8,181],15],[[10,184],15],[[7,187],15],[[2,190],15],[[3,193],15],[[4,196],15],[[1,199],15],[[8,202],15],[[9,205],15],[[10,208],15],[[7,211],15],[[13,214],15],[[13,214,3],15],[[8,217,3],15],[[2,226,3],15],[[3,229,3],15],[[8,238,3],15],[[9,241,3],15],[[8,217],15],[[7,223],15],[[2,226],15],[[3,229],15],[[1,235],15],[[8,238],15],[[9,241],15],[[7,247],15],[[13,179],15],[[13,179,3],15],[[8,182,3],15],[[7,188,3],15],[[2,191,3],15],[[3,194,3],15],[[1,200,3],15],[[8,203,3],15],[[9,206,3],15],[[7,212,3],15],[[8,182],15],[[10,185],15],[[7,188],15],[[2,191],15],[[3,194],15],[[4,197],15],[[1,200],15],[[8,203],15],[[9,206],15],[[10,209],15],[[7,212],15],[[13,215],15],[[13,215,3],15],[[8,218,3],15],[[2,227,3],15],[[3,230,3],15],[[8,239,3],15],[[9,242,3],15],[[8,218],15],[[7,224],15],[[2,227],15],[[3,230],15],[[1,236],15],[[8,239],15],[[9,242],15],[[7,248],15],[[11,11],15],[[167,167],167],[[153,153],153],[[154,154],154],[[169,169],169],[[155,155],155],[[156,156],156],[[157,157],157],[[173,173],173],[[158,158],158],[[155,160,160],162],[[153,159,159],160],[[154,161,161],159],[[158,164,164],166],[[156,163,163],164],[[157,165,165],163],[[160,160],155],[[159,159],153],[[161,161],154],[[164,164],158],[[163,163],156],[[165,165],157],[[153,153],159],[[154,154],161],[[155,155],160],[[156,156],163],[[157,157],165],[[158,158],164],[[168,168],168],[[160,160],160],[[159,159],159],[[161,161],161],[[162,162],162],[[164,164],164],[[163,163],163],[[165,165],165],[[166,166],166],[[159,153],159],[[161,154],161],[[160,155],160],[[163,156],163],[[165,157],165],[[164,158],164],[[154,155,158,3],154],[[159,162,158,3],159],[[172,158],172],[[155,155],155],[[158,158],158],[[186,158],172],[[198,155],155],[[210,158],158],[[187,158],172],[[199,155],155],[[211,158],158],[[188,158],172],[[200,155],155],[[212,158],158],[[172,172,158],172],[[155,155,155],155],[[158,158,158],158],[[172,186,158],172],[[155,198,155],155],[[158,210,158],158],[[172,187,158],172],[[155,199,155],155],[[158,211,158],158],[[172,188,158],172],[[155,200,155],155],[[158,212,158],158],[[167,167],177],[[170,170],180],[[172,172],186],[[153,153],189],[[154,154],192],[[155,155],198],[[156,156],201],[[157,157],204],[[158,158],210],[[168,168],213],[[174,174],216],[[176,176],222],[[160,160],225],[[159,159],228],[[162,162],234],[[164,164],237],[[163,163],240],[[166,166],246],[[170,170],156],[[172,172],158],[[153,153],156],[[154,154],157],[[155,155],158],[[156,156],156],[[157,157],157],[[158,158],158],[[174,174],164],[[176,176],166],[[160,160],164],[[159,159],163],[[162,162],166],[[164,164],164],[[163,163],163],[[166,166],166],[[154,158,155,3],154],[[154,158,155],154],[[159,166,155,3],159],[[159,166,162],159],[[159,166,162],159],[[167,167],177],[[170,170],180],[[172,172],186],[[153,153],189],[[154,154],192],[[155,155],198],[[156,156],201],[[157,157],204],[[158,158],210],[[168,168],213],[[174,174],216],[[176,176],222],[[160,160],225],[[159,159],228],[[162,162],234],[[164,164],237],[[163,163],240],[[166,166],246],[[167,167],177],[[170,170],180],[[172,172],186],[[153,153],189],[[154,154],192],[[155,155],198],[[156,156],201],[[157,157],204],[[158,158],210],[[168,168],213],[[174,174],216],[[176,176],222],[[160,160],225],[[159,159],228],[[162,162],234],[[164,164],237],[[163,163],240],[[166,166],246],[[3,3],3],[3,3],[[3,3],3],[[249,249,3],3],[[249,249,3],3],[[249,249,3],3],[[249,249,3],3],[[3,249,3],3],[[3,249,3],3],[[249,249],3],[[249,249],3],[[249,249],3],[[249,249],3],[[249,3],3],[[249,3],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[249,249],[252,252],[[249,77],78],[[252,77],78],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],0,[[],56],[[],56],[[7,7,9,7],15],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],15],[[],3],[[],3],[[],3],0,0,[[],56],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[253,253],[254,254],[255,255],[256,256],[257,257],[258,258],[259,259],[260,260],[261,261],[262,262],[263,263],[264,264],[265,265],[266,266],[[253,77],78],[[254,77],78],[[255,77],78],[[256,77],78],[[257,77],78],[[258,77],78],[[259,77],78],[[260,77],78],[[261,77],78],[[262,77],78],[[263,77],78],[[264,77],78],[[265,77],78],[[266,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[253],[256],[259],[262],[[],56],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,-1,0],[-1,-1,0],[[-2,-1],[],[],[[0,[-1]]]],[[260,260],260],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],33],[[-1,-2],[],[],[[0,[-1]]]],[[-1,-2],[],[],[[0,[-1]]]],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],33],[[262,262],33],[[262,262],33],[[262,262],33],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-1,-2],[],[],[[0,[-1]]]],[[-1,-2],[],[],[[0,[-1]]]],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],33],[[262,262],33],[[262,262],33],[[262,262],33],[262,33],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[262,262],[[262,262],259],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],261],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],261],[[-1,-2],[],[],[[0,[-1]]]],[-1,262,0],[262,259],[262,260],[262,262],[262,262],[[6,-1],[],0],[[6,-1],[],0],[[6,-1],[],0],[262,262],[[262,262,262],262],[[256,256,256],256],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[],257],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1,-1],[],[],[[0,[-1]]]],[[256,256,256],256],[[-3,-1,-2],-2,[],[],[[0,[-1,-2]]]],[[-2,-2,-1],-1,[],[[0,[-1]]]],[[-2,-2],-1,[],[[0,[-1]]]],[[-2,-2],-1,[],[[0,[-1]]]],[[262,262,262],262],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-1,-1,254],-1,0],[-1,-1,0],[[],256],[[],259],[[],253],[[],257],[[],260],[[],254],[-1,[],0],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[259,259],259],[[-2,-1],-1,[],[[0,[-1]]]],[-1,[],0],[-1,[],0],[[6,-1],[],0],[[-2,-1],[],[],[[0,[-1]]]],[[-1,-1],-1,0],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],56],[-1,-1,0],[-1,-1,0],[[-2,-1],[],[],[[0,[-1]]]],[[260,260],260],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],33],[[-1,-2],[],[],[[0,[-1]]]],[[-1,-2],[],[],[[0,[-1]]]],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],33],[[262,262],33],[[262,262],33],[[262,262],33],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-1,-2],[],[],[[0,[-1]]]],[[-1,-2],[],[],[[0,[-1]]]],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],33],[[262,262],33],[[262,262],33],[[262,262],33],[262,33],[262,33],[[-2,-1],[],[],[[0,[-1]]]],[262,262],[[262,262],259],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],261],[[-2,-1],[],[],[[0,[-1]]]],[[262,262],261],[[-1,-2],[],[],[[0,[-1]]]],[-1,262,0],[262,259],[262,260],[262,262],[262,262],[[6,-1],[],0],[[6,-1],[],0],[[6,-1],[],0],[262,262],[[262,262,262],262],[[256,256,256],256],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[],257],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1,-1],[],[],[[0,[-1]]]],[[256,256,256],256],[[-3,-1,-2],-2,[],[],[[0,[-1,-2]]]],[[-2,-2,-1],-1,[],[[0,[-1]]]],[[-2,-2],-1,[],[[0,[-1]]]],[[-2,-2],-1,[],[[0,[-1]]]],[[262,262,262],262],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[-1,-1,254],-1,0],[-1,-1,0],[[],256],[[],259],[[],253],[[],257],[[],260],[[],254],[-1,[],0],[[-2,-1],[],[],[[0,[-1]]]],[[-2,-1],[],[],[[0,[-1]]]],[[259,259],259],[[-2,-1],-1,[],[[0,[-1]]]],[-1,[],0],[-1,[],0],[[6,-1],[],0],[[-2,-1],[],[],[[0,[-1]]]],[[-1,-1],-1,0],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,12],12],[[12,12],12],[[9,9,7],9],[[9,9,7],9],[[9,9,7],9],[[9,9,7],9],[[12,12],12],[[12,12],12],[[12,12],12],[12,12],[12,12],[12,12],[12,12],[12,12],[12,12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[[],9],[[],9],[[],9],[9,9],[9,9],[9,9],[[12,12],15],[[],15],[12,15],[12,15],[[12,12],15],[[],15],[12,15],[12,15],[[12,12],15],[[],15],[12,15],[12,15],[[12,12],15],[[],15],[12,15],[12,15],[1,1],[7,7],[2,2],[8,8],[3,3],[8,8],[9,9],[[1,1],15],[[2,2],15],[[3,3],15],[12,12],[12,12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,9],12],[[12,9],12],[[12,3],12],[[12,3],12],[[12,3],12],[[12,3],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[12,12],[[],15],[[12,12],12],[[12,12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[[12,12],15],[[],15],[12,15],[12,15],[[],15],[9,9],[9,9],[9,9],[9,9],[[9,9],9],[[9,9],9],[[9,9],9],[[9,9],9],[[9,9],9],[[9,9],9],[[12,12],15],[[],15],[12,15],[12,15],[[12,9],12],[[12,9],12],[9,9],[9,9],[[9,9,7],9],[[9,9,7],9],[[12,12,12],12],[[12,12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[12,12],[12,12],[12,12],[12,12],[12,12],[12,12],[12,12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[9,9],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[[12,12],12],[[12,12],12],[9,9],[12,12],[12,12],[12,12],[12,12],[12,12],[[12,12],12],[[12,12],12],[[10,10],10],[[10,10],10],[[10,10],10],[[10,10],10],[[10,7],10],[[10,10],10],[[12,12],12],[[12,12],12],[[12,12],12],[12,12],[12,12],[12,12],[12,12],[12,12],[12,12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[[],9],[[],9],[[],9],[9,9],[9,9],[9,9],[[12,12],15],[[],15],[12,15],[12,15],[[12,12],15],[[],15],[12,15],[12,15],[[12,12],15],[[],15],[12,15],[12,15],[[12,12],15],[[],15],[12,15],[12,15],[1,1],[7,7],[4,4],[2,2],[8,8],[3,3],[9,9],[8,8],[9,9],[[1,1],15],[[4,4],15],[[2,2],15],[[3,3],15],[12,12],[12,12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,9],12],[[12,9],12],[[12,3],12],[[12,3],12],[[12,3],12],[[12,3],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[12,12],[[],15],[[12,12],12],[[12,12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[[12,12],15],[[],15],[12,15],[12,15],[[],15],[9,9],[9,9],[9,9],[9,9],[10,10],[10,10],[10,10],[10,10],[[12,12],15],[[],15],[12,15],[12,15],[[12,9],12],[[12,9],12],[9,9],[9,9],[[9,9,7],9],[[9,9,7],9],[[12,12,12],12],[[12,12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,9],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[12,12],[12,12],[12,12],[12,12],[12,12],[12,12],[12,12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],12],[[],15],[[12,12],12],[[12,12],12],[12,12],[12,12],[12,12],[12,12],[12,12],[[13,13,13,13],267],[267,267],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,13],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,13],267],[13,267],[267,267],[[267,267],267],[267,267],[[14,14],267],[267,267],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,14],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,14],267],[14,267],[267,267],[[267,267],267],[267,267],[[2,2,2,2,2,2,2,2],267],[267,267],[[267,267],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,2],[[267,267],267],[[267,267],267],[[267,267],267],[1,267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,267],267],[[267,2],267],[[267,9],267],[[267,9],267],[[267,267],267],[2,267],[[267,267],267],[[267,267],267],[[3,3,3,3],267],[267,267],[[267,267],267],[267,33],[267,7],[[267,267],267],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,3],[[267,267],267],[[267,267],267],[[267,267],267],[2,267],[8,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,267,267],267],[267,267],[267,267],[[267,3],267],[[267,9],267],[[267,9],267],[[267,267],267],[3,267],[[267,267],267],[267,267],[267,267],[[4,4],267],[267,267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,4],[[267,267],267],[[267,267],267],[[267,267],267],[3,267],[9,267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,4],267],[[267,9],267],[[267,9],267],[[267,267],267],[4,267],[[267,267],267],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],267],[267,267],[[267,267],267],[[267,267],267],[267,33],[267,8],[[267,267],267],[267,1],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267,267],267],[[267,267],267],[[267,1],267],[[267,9],267],[[267,9],267],[[267,267],267],[1,267],[[267,267],267],[[267,267],267],[[267,267],267],[[3,9],9],[[3,3,4],3],[[4,4,4],3],[[9,12],12],[9,12],[[8,8,8,8,8,8,8,8],267],[[267,267],267],[[267,267],267],[267,33],[[267,267],267],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,8],[[267,267],267],[[267,267],267],[[267,267],267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,8],267],[[267,9],267],[[267,9],267],[[267,267],267],[8,267],[[267,267],267],[[267,267],267],[[9,9,9,9],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,9],[[267,267],267],[[267,267],267],[[267,267],267],[8,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,9],267],[[267,9],267],[[267,9],267],[[267,267],267],[9,267],[[267,267],267],[267,267],[267,267],[[10,10],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,10],[9,267],[[267,267],267],[[267,267],267],[[267,10],267],[[267,9],267],[[267,9],267],[[267,267],267],[10,267],[[267,267],267],[[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],267],[[267,267],267],[[267,267],267],[267,33],[[267,267],267],[267,8],[[267,267],267],[267,7],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,7],267],[[267,9],267],[[267,9],267],[[267,267],267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[],56],0,[[267,267],267],[[267,267],267],[267,33],[[267,267,267],267],[267,267],[[267,8],267],[8,267],[[267,9],267],[9,267],[9,267],[[267,10],267],[10,267],[10,267],[[267,7],267],[7,267],[267,267],[[267,267],267],[[267,267],15],[[267,8],15],[[267,9],15],[[267,10],15],[[267,7],15],[[267,267],267],[-1,-2,[],[]],[-1,-2,[],[]],[267,267],[[13,13,13,13],267],[267,267],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,13],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,13],267],[13,267],[267,267],[[267,267],267],[267,267],[[14,14],267],[267,267],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,14],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,14],267],[14,267],[267,267],[[267,267],267],[267,267],[[267,77],78],[-1,-1,[]],[[2,2,2,2,2,2,2,2],267],[267,267],[[267,267],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,2],[[267,267],267],[[267,267],267],[[267,267],267],[1,267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,267],267],[[267,2],267],[[267,9],267],[[267,9],267],[[267,267],267],[2,267],[[267,267],267],[[267,267],267],[[3,3,3,3],267],[267,267],[[267,267],267],[267,33],[267,7],[[267,267],267],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,3],[[267,267],267],[[267,267],267],[[267,267],267],[2,267],[8,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,267,267],267],[267,267],[267,267],[[267,3],267],[[267,9],267],[[267,9],267],[[267,267],267],[3,267],[[267,267],267],[267,267],[267,267],[[4,4],267],[267,267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,4],[[267,267],267],[[267,267],267],[[267,267],267],[3,267],[9,267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,4],267],[[267,9],267],[[267,9],267],[[267,267],267],[4,267],[[267,267],267],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],267],[267,267],[[267,267],267],[[267,267],267],[267,33],[267,8],[[267,267],267],[267,1],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267,267],267],[[267,267],267],[[267,1],267],[[267,9],267],[[267,9],267],[[267,267],267],[1,267],[[267,267],267],[[267,267],267],[[267,267],267],[-1,-2,[],[]],[[3,9],9],[[3,3,4],3],[[4,4,4],3],[[9,12],12],[9,12],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[[8,8,8,8,8,8,8,8],267],[[267,267],267],[[267,267],267],[267,33],[[267,267],267],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,8],[[267,267],267],[[267,267],267],[[267,267],267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,8],267],[[267,9],267],[[267,9],267],[[267,267],267],[8,267],[[267,267],267],[[267,267],267],[[9,9,9,9],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,9],[[267,267],267],[[267,267],267],[[267,267],267],[8,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,9],267],[[267,9],267],[[267,9],267],[[267,267],267],[9,267],[[267,267],267],[267,267],[267,267],[[10,10],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,10],[9,267],[[267,267],267],[[267,267],267],[[267,10],267],[[267,9],267],[[267,9],267],[[267,267],267],[10,267],[[267,267],267],[[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],267],[[267,267],267],[[267,267],267],[267,33],[[267,267],267],[267,8],[[267,267],267],[267,7],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,7],267],[[267,9],267],[[267,9],267],[[267,267],267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[],56],0,[[267,267],267],[[267,267],267],[267,33],[[267,267,267],267],[267,267],[[267,8],267],[8,267],[[267,9],267],[9,267],[9,267],[[267,10],267],[10,267],[10,267],[[267,7],267],[7,267],[267,267],[[267,267],267],[[267,267],15],[[267,8],15],[[267,9],15],[[267,10],15],[[267,7],15],[[267,267],267],[[13,13,13,13],267],[267,267],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,13],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,13],267],[13,267],[267,267],[[267,267],267],[267,267],[[14,14],267],[267,267],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,14],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,14],267],[14,267],[267,267],[[267,267],267],[267,267],[[2,2,2,2,2,2,2,2],267],[267,267],[[267,267],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,2],[[267,267],267],[[267,267],267],[[267,267],267],[1,267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267],267],[[267,267],267],[[267,267,267],267],[[267,267],267],[[267,2],267],[[267,9],267],[[267,9],267],[[267,267],267],[2,267],[[267,267],267],[[267,267],267],[[3,3,3,3],267],[267,267],[[267,267],267],[267,33],[267,7],[[267,267],267],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,3],[[267,267],267],[[267,267],267],[[267,267],267],[2,267],[8,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,267,267],267],[267,267],[267,267],[[267,3],267],[[267,9],267],[[267,9],267],[[267,267],267],[3,267],[[267,267],267],[267,267],[267,267],[[4,4],267],[267,267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,4],[[267,267],267],[[267,267],267],[[267,267],267],[3,267],[9,267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,267,267],267],[[267,4],267],[[267,9],267],[[267,9],267],[[267,267],267],[4,267],[[267,267],267],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],267],[267,267],[[267,267],267],[[267,267],267],[267,33],[267,8],[[267,267],267],[267,1],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,267,267],267],[[267,267],267],[[267,1],267],[[267,9],267],[[267,9],267],[[267,267],267],[1,267],[[267,267],267],[[267,267],267],[[267,267],267],[[3,9],9],[[3,3,4],3],[[4,4,4],3],[[9,12],12],[9,12],[[8,8,8,8,8,8,8,8],267],[[267,267],267],[[267,267],267],[267,33],[[267,267],267],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,8],[[267,267],267],[[267,267],267],[[267,267],267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,8],267],[[267,9],267],[[267,9],267],[[267,267],267],[8,267],[[267,267],267],[[267,267],267],[[9,9,9,9],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,9],[[267,267],267],[[267,267],267],[[267,267],267],[8,267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[267,267],[[267,9],267],[[267,9],267],[[267,9],267],[[267,267],267],[9,267],[[267,267],267],[267,267],[267,267],[[10,10],267],[[267,267],267],[267,33],[267,7],[[267,267],267],[267,267],[267,267],[[267,267],267],[[267,267],267],[267,10],[9,267],[[267,267],267],[[267,267],267],[[267,10],267],[[267,9],267],[[267,9],267],[[267,267],267],[10,267],[[267,267],267],[[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],267],[[267,267],267],[[267,267],267],[267,33],[[267,267],267],[267,8],[[267,267],267],[267,7],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[[267,267],267],[267,267],[[267,7],267],[[267,9],267],[[267,9],267],[[267,267],267],[7,267],[[267,267],267],[[267,267],267],[[267,267],267],[[],56],0,[[267,267],267],[[267,267],267],[267,33],[[267,267,267],267],[267,267],[[267,8],267],[8,267],[[267,9],267],[9,267],[9,267],[[267,10],267],[10,267],[10,267],[[267,7],267],[7,267],[267,267],[[267,267],267],[[267,267],15],[[267,8],15],[[267,9],15],[[267,10],15],[[267,7],15],[[267,267],267],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,15],[9,15],[9,15],[9,15],[[9,9,9,9],3],[[268,268,268,268],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,269],[[9,9],269],[9,[[15,[9,9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,10],[[7,9,9,9],7],[[7,9,9,9],7],[[9,9],9],[[9,9],9],[[9,9,9],9],[[3,3],7],[[3,3],7],[[3,3],7],[[3,3],7],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[9,9],[10,10],[9,9],[9,9],[3,3],[[9,9],9],[7,15],[7,15],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[272,272],[270,270],[271,271],[[272,272],272],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[9,270],[10,271],[9,9],[273,273],[273,273],[273,273],[273,273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273,3],273],[[273,273,3],273],[[273,273,3],273],[[274,274],274],[[275,275],275],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],270],[[273,273,3],273],[[273,273,3],273],[[274,274,3],274],[[275,275,3],275],[[273,273,273],273],[[274,274,274],274],[[275,275,275],275],[268,275],[276,273],[277,274],[268,275],[14,274],[13,275],[276,273],[276,273],[278,273],[272,273],[276,273],[277,274],[276,273],[268,275],[276,273],[[273,3],273],[[273,3],273],[277,274],[274,277],[274,275],[274,273],[268,275],[275,268],[275,274],[275,273],[276,273],[273,274],[273,275],[273,276],[274,274],[275,275],[[273,273,3],273],[[273,273,3],272],[[273,273,279],278],[[273,273,279],278],[[273,273,3],270],[[273,273,3],272],[[273,273,279],278],[[273,273,279],278],[[273,273,3],270],[[274,274,3],274],[[274,274,3],278],[[275,275,3],275],[[275,275,3],278],[[273,273],273],[[273,273],272],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],273],[[273,273],272],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[273,273],[273,273],[276,273],[276,273],[273,276],[273,276],[276,273],[273,276],[276,274],[273,275],[273,276],[273,276],[273,276],[276,273],[276,273],[276,273],[276,273],[276,273],[276,273],[276,274],[276,273],[276,273],[276,273],[[275,275],280],[275,281],[274,276],[274,276],[274,268],[276,275],[275,273],[275,273],[268,274],[[275,3],276],[274,14],[273,276],[273,276],[273,276],[273,276],[273,276],[273,276],[273,3],[275,13],[274,276],[274,276],[275,273],[275,273],[273,276],[273,276],[273,276],[273,276],[273,276],[273,276],[[273,273,3],273],[[274,274],274],[[275,275],275],[[275,275,3],275],[[275,280,280],275],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,3],3],[[273,3],3],[[273,3],3],[[274,3],277],[[275,3],268],[[273,3],276],[[275,3],268],[[273,3],276],[[273,3],276],[[274,274,273,3],274],[[275,275,273,3],275],[274,274],[275,275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[274,274],[275,275],[[274,282,283],274],[[275,282,283],275],[[273,273,3],273],[[273,273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[3,273,3],273],[[4,276,3],273],[[14,276,3],274],[[13,273,3],275],[[7,276,273,3],15],[[3,273,3],276],[[4,273,3],273],[[14,273,3],274],[[13,273,3],268],[[273,2,3],273],[[273,3,3],273],[[273,1,3],273],[[274,277,3],274],[[275,268,3],275],[[273,276,3],273],[[275,268,3],275],[[273,276,3],273],[[273,276,3],273],[273,273],[3,273],[4,273],[14,274],[13,275],[273,273],[[13,13],275],[[14,14],274],[[276,276],273],[2,273],[3,273],[4,273],[1,273],[14,274],[13,275],[273,273],[273,273],[273,273],[[273,273,273],273],[[273,273,273],273],[[273,273],273],[[273,273],273],[[273,273,272,273],273],[[273,273,278,273],273],[[273,273,278,273],273],[[273,273,270,273],273],[[274,273,278,274],274],[[275,273,278,275],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[273,270,273,273,3],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[270,273,273],270],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[275,278,268],275],[[273,278,276],273],[[273,270,276],273],[[273,278,276],273],[[273,278,276],273],[[274,278,277],274],[[275,278,268],275],[[273,272,276],273],[[272,273,273,3],272],[[278,273,273,279],278],[[278,273,273,279],278],[[270,273,273,3],270],[[272,273,273,3],272],[[278,273,273,279],278],[[278,273,273,279],278],[[270,273,273,3],270],[[278,274,274,3],278],[[278,275,275,3],278],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[7,272,273],15],[[7,278,273],15],[[7,278,273],15],[[7,270,273],15],[[7,278,274],15],[[7,278,275],15],[[273,278,273],273],[[273,278,273],273],[[276,278,275,3],276],[[273,278,276],273],[[273,278,276],273],[[276,272,273],276],[[1,272,273],15],[[276,278,273],276],[[273,278,276],273],[[276,278,273],276],[[274,278,276],274],[[275,278,273],275],[[1,278,273],15],[[1,278,273],15],[[276,278,273],276],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[1,278,273],15],[[273,272,276],273],[[273,278,276],273],[[273,278,276],273],[[273,278,276],273],[[273,278,276],273],[[273,278,276],273],[[274,278,276],274],[[273,272,276],273],[[273,278,276],273],[[273,278,276],273],[[280,272,275,275],280],[[281,278,275],281],[[276,278,274],276],[[276,278,274],276],[[268,278,274],268],[[275,278,276],275],[[273,278,275],273],[[273,278,275],273],[[276,278,275,3],276],[[276,272,273],276],[[1,272,273],15],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[276,278,273],276],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[1,278,273],15],[[276,278,274],276],[[276,278,274],276],[[273,278,275],273],[[273,278,275],273],[[276,272,273],276],[[1,272,273],15],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[276,278,273],276],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[1,278,273],15],[[273,272,273,273,3],273],[[274,278,274,274],274],[[275,278,275,275],275],[[275,278,280,280],275],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[273,272,2],273],[[273,278,3],273],[[273,278,4],273],[[273,270,1],273],[[274,278,14],274],[[275,278,13],275],[[268,278,275,3],268],[[276,278,273,3],276],[[274,278,274,273,3],274],[[275,278,275,273,3],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274],274],[[275,278,275],275],[[274,278,274,282,283],274],[[275,278,275,282,283],275],[[273,270,273,273,3],273],[[273,270,273,273,3],273],[[273,270,273,273],273],[[273,3,273,273,3],273],[[273,4,276,273,3],273],[[274,14,276,274,3],274],[[275,13,273,275,3],275],[[276,3,273,276,3],276],[[273,4,273,273,3],273],[[274,14,273,274,3],274],[[268,13,273,268,3],268],[[275,278,275,268,3],275],[[273,278,273,276,3],273],[[273,278,3],273],[[273,278,4],273],[[274,278,14],274],[[275,278,13],275],[[273,272,2],273],[[273,278,3],273],[[273,278,4],273],[[273,270,1],273],[[274,278,14],274],[[275,278,13],275],[[273,278,273],273],[[273,278,273],273],[[273,278,273,273],273],[[273,272,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[274,278,274],274],[[275,278,275],275],[[275,278,275],275],[[273,278,273,273],273],[[273,278,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,272,273,273],273],[[273,272,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[274,278,274,3],274],[[275,278,275,3],275],[[274,278,274,273],274],[[275,278,275,273],275],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,273,274],274],[[275,278,273,275],275],[[273,278,273,3],273],[[274,278,274,3],274],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,273,274],274],[[275,278,273,275],275],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[273,278,273,3],273],[[273,278,273,3],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,3],273],[[273,278,273,3],273],[[273,278,273,273],273],[[273,278,273,273],273],[[274,278,274,3],274],[[275,278,275,3],275],[[274,278,274],274],[[275,278,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,2],273],[[273,278,3],273],[[273,278,4],273],[[273,270,1],273],[[273,272,273,273,3],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273,273,3],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,284],273],[[273,270,273,273],273],[[275,278,275,275,3],275],[[274,278,274,274,3],274],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[274,278,274,274,3],274],[[275,278,275,275,3],275],[[273,272,273,3],273],[[273,272,273,3],273],[[273,272,273,276],273],[[273,278,273,276],273],[[273,278,273,276],273],[[273,272,273,9],273],[[273,278,273,9],273],[[273,278,273,9],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[274,278,274],274],[[275,278,275],275],[[273,272,273,276],273],[[273,278,273,276],273],[[273,278,273,276],273],[[273,272,273,9],273],[[273,278,273,9],273],[[273,278,273,9],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273,276],273],[[273,278,273,276],273],[[273,278,273,276],273],[[273,272,273,3],273],[[273,278,273,9],273],[[273,278,273,9],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[3,278,273],15],[[4,278,273],15],[[14,278,274],15],[[13,278,275],15],[[2,272,273],15],[[3,278,273],15],[[4,278,273],15],[[1,270,273],15],[[14,278,274],15],[[13,278,275],15],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,278,273,273],273],[[273,278,273,273],273],[[3,273],273],[[4,273],273],[[14,273],274],[[13,273],275],[[3,273,273],15],[[4,273,273],15],[[14,273,274],15],[[13,273,275],15],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[270,273,273],273],[[272,273,273],273],[[270,273,273],273],[[278,273,273,3],273],[[278,273,273,3],273],[[270,273,273,3],273],[[278,273,273],273],[[278,273,273],273],[[278,273,273],273],[[278,273,273],273],[[272,273,273],273],[[270,273,273],273],[[278,268],275],[[278,276],273],[[270,276],273],[[278,276],273],[[278,276],273],[[278,277],274],[[278,268],275],[[272,276],273],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[278,273],273],[[278,273],273],[[278,275,3],276],[[278,276],273],[[278,276],273],[[272,273],276],[[278,273],276],[[278,276],273],[[278,273],276],[[278,276],274],[[278,273],275],[[278,273],276],[[278,273],276],[[278,273],276],[[272,276],273],[[278,276],273],[[278,276],273],[[278,276],273],[[278,276],273],[[278,276],273],[[278,276],274],[[272,276],273],[[278,276],273],[[278,276],273],[[272,275,275],280],[[278,275],281],[[278,274],276],[[278,274],276],[[278,274],268],[[278,276],275],[[278,275],273],[[278,275],273],[[278,275,3],276],[[272,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,274],276],[[278,274],276],[[278,275],273],[[278,275],273],[[272,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[272,273,273,3],273],[[278,274,274],274],[[278,275,275],275],[[278,275,280,280],275],[[278,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[272,2],273],[[278,3],273],[[278,4],273],[[270,1],273],[[278,14],274],[[278,13],275],[[278,275,3],268],[[278,273,3],276],[[278,274,274,273,3],274],[[278,275,275,273,3],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274],274],[[278,275],275],[[278,274,282,283],274],[[278,275,282,283],275],[[270,273,273,3],273],[[270,273,273,3],273],[[270,273,273],273],[[278,275,268,3],275],[[278,273,276,3],273],[[278,3],273],[[278,4],273],[[278,14],274],[[278,13],275],[[272,2],273],[[278,3],273],[[278,4],273],[[270,1],273],[[278,14],274],[[278,13],275],[[278,273],273],[[278,273],273],[[278,273,273],273],[[272,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[278,274],274],[[278,275],275],[[278,275],275],[[278,273,273],273],[[278,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[272,273,273],273],[[272,273,273],273],[[272,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[272,273,273],273],[[270,273,273],273],[[272,273,273],273],[[278,274,3],274],[[278,275,3],275],[[278,274,273],274],[[278,275,273],275],[[272,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[270,273,273,273],273],[[278,274,273,274],274],[[278,275,273,275],275],[[278,273,3],273],[[278,274,3],274],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,273,274],274],[[278,273,275],275],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[278,273,3],273],[[278,273,3],273],[[278,273,273],273],[[278,273,273],273],[[278,273,3],273],[[278,273,3],273],[[278,273,273],273],[[278,273,273],273],[[278,274,3],274],[[278,275,3],275],[[278,274],274],[[278,275],275],[[278,274,274],274],[[278,275,275],275],[[272,2],273],[[278,3],273],[[278,4],273],[[270,1],273],[[272,273,273,3],273],[[278,273,273,3],273],[[278,273,273,3],273],[[272,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[272,273,273,3],273],[[278,273,273,3],273],[[278,273,273,3],273],[[272,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[278,273,284],273],[[270,273,273],273],[[278,275,275,3],275],[[278,274,274,3],274],[[278,273,273,3],273],[[278,273,273,3],273],[[278,274,274,3],274],[[278,275,275,3],275],[[272,273,3],273],[[272,273,3],273],[[272,273,276],273],[[278,273,276],273],[[278,273,276],273],[[272,273,9],273],[[278,273,9],273],[[278,273,9],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[278,274],274],[[278,275],275],[[272,273,276],273],[[278,273,276],273],[[278,273,276],273],[[272,273,9],273],[[278,273,9],273],[[278,273,9],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[272,273,276],273],[[278,273,276],273],[[278,273,276],273],[[272,273,3],273],[[278,273,9],273],[[278,273,9],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[270,273,273],273],[[272,273,273],273],[[270,273,273],273],[[278,273,273,273,3],273],[[278,273,273,273,3],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[278,273,273],273],[[278,273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[274,274],[275,275],[275,275],[273,3],[274,3],[275,3],[273,272],[273,270],[272,273],[270,273],[[273,273,3],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274,3],274],[[275,275,3],275],[[273,273,3],273],[[273,273,3],273],[[273,3],273],[[274,3],274],[[274,3],274],[[275,3],275],[[273,273],273],[[275,273],275],[[274,273],274],[[275,273],275],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[274,273,274],274],[[275,273,275],275],[[273,3],273],[[274,3],274],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,274],274],[[273,275],275],[273,273],[273,273],[273,273],[273,273],[274,274],[275,275],[275,275],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[274,3],274],[[275,3],275],[[274,3],274],[[275,3],275],[275,275],[[273,273],273],[[274,274],274],[[275,275],275],[2,273],[3,273],[4,273],[1,273],[14,274],[13,275],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],273],[[3,3,3,3,3,3,3,3],273],[[4,4,4,4],273],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],273],[[268,268],275],[[277,277],274],[[276,276],273],[[14,14,14,14],274],[[13,13,13,13,13,13,13,13],275],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],273],[[3,3,3,3,3,3,3,3],273],[[4,4,4,4],273],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],273],[[268,268],275],[[277,277],274],[[276,276],273],[[14,14,14,14],274],[[13,13,13,13,13,13,13,13],275],[[],274],[[],275],[[],273],[[273,273,3],273],[[273,273,3],273],[[273,273,3],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,273,3],273],[[273,273,3],273],[[273,273,3],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,3],273],[[273,273],273],[[275,275,3],275],[[274,274,3],274],[[273,273,3],273],[[273,273,3],273],[[274,274,3],274],[[275,275,3],275],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,276],273],[[273,276],273],[[273,276],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[274,274],[275,275],[[273,276],273],[[273,276],273],[[273,276],273],[[273,3],273],[[273,3],273],[[273,9],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,276],273],[[273,276],273],[[273,276],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[[3,273],15],[[4,273],15],[[14,274],15],[[13,275],15],[[273,273],15],[[13,13,275],15],[[14,14,274],15],[[276,276,273],15],[[2,273],15],[[3,273],15],[[4,273],15],[[1,273],15],[[14,274],15],[[13,275],15],[[273,273],15],[[14,274],15],[[13,275],15],[[273,273],15],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273,273,3],273],[[273,273,273,3],273],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[274,274],3],[[275,275],3],[[273,273],3],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[274,274],3],[[275,275],3],[[273,273],3],[[274,274],3],[[275,275],3],[[273,273],3],[[],274],[[],275],[[],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[],15],[[],15],[277,274],[268,275],[276,273],[285,285],[285,285],[285,285],[285,285],[286,286],[287,287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285,3],285],[[285,285,3],285],[[285,285,3],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],271],[268,287],[274,286],[276,285],[273,285],[276,285],[276,285],[278,285],[272,285],[276,285],[277,286],[268,287],[276,285],[[285,3],285],[[285,3],285],[277,286],[274,286],[286,277],[286,274],[286,287],[286,285],[268,287],[275,287],[287,268],[287,275],[287,286],[287,285],[276,285],[273,285],[285,286],[285,287],[285,276],[285,273],[[285,285,3],285],[[285,285,3],270],[[285,285,279],272],[[285,285,279],278],[[285,285,3],271],[[285,285,3],270],[[285,285,279],272],[[285,285,279],278],[[285,285,3],271],[[286,286,3],278],[[287,287,3],272],[[286,286,3,3],278],[[287,287,3,3],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[285,285],[285,285],[[285,3],287],[[285,3],287],[[286,3],273],[[286,3],273],[[286,3],275],[[273,3],287],[[287,3],285],[[287,3],285],[[275,3],286],[[287,3],273],[273,285],[276,285],[285,273],[285,273],[273,285],[285,276],[273,286],[285,287],[285,286],[285,276],[285,273],[285,276],[273,285],[276,285],[276,285],[273,285],[276,285],[273,285],[273,286],[285,287],[285,286],[273,285],[276,285],[276,285],[[287,287],288],[287,280],[286,273],[286,273],[286,275],[286,287],[273,287],[287,285],[287,285],[275,286],[[287,3],273],[287,286],[285,273],[285,273],[285,276],[285,276],[285,273],[285,276],[285,3],[[286,3],273],[[286,3],273],[[287,3],285],[[287,3],285],[286,273],[286,273],[287,285],[287,285],[285,273],[285,273],[285,276],[285,276],[285,273],[285,276],[[285,285,3],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[287,288,288],287],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[287,3],268],[[286,3],274],[[285,3],276],[[285,3],273],[[286,286,285,3],286],[[287,287,285,3],287],[[286,286,285,3,3],286],[[287,287,285,3,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[286,286],[287,287],[[286,3],286],[[287,3],287],[[286,282,283],286],[[287,282,283],287],[[286,282,283,3],286],[[287,282,283,3],287],[[285,285,3],285],[[285,285,3],285],[[285,285],285],[[285,7,3],285],[[273,7,3],285],[[273,7,3],286],[[285,7,3],287],[[7,285,285,3],15],[[7,273,285,3],15],[[7,273,286,3],15],[[7,285,287,3],15],[[285,7,3],273],[[285,7,3],285],[[285,7,3],286],[[285,7,3],275],[[7,285,273,3],15],[[7,285,285,3],15],[[7,285,286,3],15],[[7,285,275,3],15],[[287,268,3],287],[[286,274,3],286],[[285,276,3],285],[[285,273,3],285],[3,272],[[272,272],272],[[272,272],272],[272,272],[272,272],[[272,272],272],[[272,272],3],[[272,272],272],[[272,272],272],[[272,272],272],[3,285],[4,285],[14,286],[13,287],[3,285],[2,285],[3,285],[4,285],[1,285],[14,286],[13,287],[3,285],[285,285],[285,285],[[285,285,285],285],[[285,285,285],285],[[285,285],285],[[285,285],285],[[285,285,270,285],285],[[285,285,272,285],285],[[285,285,278,285],285],[[285,285,271,285],285],[[286,285,278,286],286],[[287,285,272,287],287],[272,3],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[285,271,285,285,3],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[271,285,285],271],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[287,272,268],287],[[286,278,274],286],[[285,272,276],285],[[285,278,273],285],[[285,271,276],285],[[285,272,276],285],[[285,278,276],285],[[286,278,277],286],[[287,272,268],287],[[285,270,276],285],[[270,285,285,3],270],[[272,285,285,279],272],[[278,285,285,279],278],[[271,285,285,3],271],[[270,285,285,3],270],[[272,285,285,279],272],[[278,285,285,279],278],[[271,285,285,3],271],[[278,286,286,3],278],[[272,287,287,3],272],[[278,286,286,3,3],278],[[272,287,287,3,3],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[7,270,285],15],[[7,272,285],15],[[7,278,285],15],[[7,271,285],15],[[7,278,286],15],[[7,272,287],15],[[285,272,285],285],[[285,278,285],285],[[287,272,285,3],287],[[287,272,285,3],287],[[273,278,286,3],273],[[273,278,286,3],273],[[275,278,286,3],275],[[287,272,273,3],287],[[285,272,287,3],285],[[285,272,287,3],285],[[286,278,275,3],286],[[273,272,287,3],273],[[285,272,273],285],[[285,278,276],285],[[273,270,285],273],[[1,270,285],15],[[273,272,285],273],[[285,278,273],285],[[276,272,285],276],[[286,278,273],286],[[287,272,285],287],[[1,272,285],15],[[1,272,285],15],[[286,278,285],286],[[276,278,285],276],[[273,278,285],273],[[276,278,285],276],[[1,278,285],15],[[1,278,285],15],[[1,278,285],15],[[285,270,273],285],[[285,272,276],285],[[285,278,276],285],[[285,272,273],285],[[285,278,276],285],[[285,278,273],285],[[286,278,273],286],[[287,272,285],287],[[286,278,285],286],[[285,270,273],285],[[285,272,276],285],[[285,278,276],285],[[288,270,287,287],288],[[280,272,287],280],[[273,278,286],273],[[273,278,286],273],[[275,278,286],275],[[287,278,286],287],[[287,272,273],287],[[285,272,287],285],[[285,272,287],285],[[286,278,275],286],[[273,272,287,3],273],[[286,278,287],286],[[273,270,285],273],[[1,270,285],15],[[273,272,285],273],[[276,272,285],276],[[1,272,285],15],[[1,272,285],15],[[276,278,285],276],[[273,278,285],273],[[276,278,285],276],[[1,278,285],15],[[1,278,285],15],[[1,278,285],15],[[273,278,286,3],273],[[273,278,286,3],273],[[285,272,287,3],285],[[285,272,287,3],285],[[273,278,286],273],[[273,278,286],273],[[285,272,287],285],[[285,272,287],285],[[273,270,285],273],[[1,270,285],15],[[273,272,285],273],[[276,272,285],276],[[1,272,285],15],[[1,272,285],15],[[276,278,285],276],[[273,278,285],273],[[276,278,285],276],[[1,278,285],15],[[1,278,285],15],[[1,278,285],15],[[285,270,285,285,3],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[287,272,288,288],287],[[285,272,285,285],285],[[285,272,285,285],285],[[285,272,285,285],285],[[285,272,285,285],285],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[285,270,2],285],[[285,272,3],285],[[285,278,4],285],[[285,271,1],285],[[286,278,14],286],[[287,272,13],287],[[268,278,287,3],268],[[274,278,286,3],274],[[276,278,285,3],276],[[273,278,285,3],273],[[286,278,286,285,3],286],[[287,272,287,285,3],287],[[286,278,286,285,3,3],286],[[287,272,287,285,3,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286],286],[[287,272,287],287],[[286,278,286,3],286],[[287,272,287,3],287],[[286,278,286,282,283],286],[[287,272,287,282,283],287],[[286,278,286,282,283,3],286],[[287,272,287,282,283,3],287],[[285,271,285,285,3],285],[[285,271,285,285,3],285],[[285,271,285,285],285],[[285,272,285,7,3],285],[[285,278,273,7,3],285],[[286,278,273,7,3],286],[[287,272,285,7,3],287],[[7,272,285,285,3],15],[[7,278,273,285,3],15],[[7,278,273,286,3],15],[[7,272,285,287,3],15],[[273,278,285,7,3],273],[[285,278,285,7,3],285],[[286,278,285,7,3],286],[[275,278,285,7,3],275],[[7,278,285,273,3],15],[[7,278,285,285,3],15],[[7,278,285,286,3],15],[[7,278,285,275,3],15],[[287,272,287,268,3],287],[[286,278,286,274,3],286],[[285,272,285,276,3],285],[[285,278,285,273,3],285],[[285,272,3],285],[[285,278,4],285],[[286,278,14],286],[[287,272,13],287],[[285,270,2],285],[[285,272,3],285],[[285,278,4],285],[[285,271,1],285],[[286,278,14],286],[[287,272,13],287],[[285,272,285],285],[[285,278,285],285],[[285,272,285,285],285],[[285,270,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[286,278,286],286],[[287,272,287],287],[[287,272,287],287],[[285,278,285,285],285],[[285,278,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,270,285,285],285],[[285,270,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[286,278,286,3],286],[[287,272,287,3],287],[[285,272,285,285],285],[[286,278,286,285],286],[[287,272,287,285],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,285,286],286],[[287,272,285,287],287],[[285,278,285,3],285],[[286,278,286,3],286],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,285,286],286],[[287,272,285,287],287],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[272,285],3],[[278,285],4],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[272,285],3],[[278,285],4],[[272,285],9],[[278,285],10],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[272,285],9],[[278,285],10],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[285,272,285,3],285],[[285,278,285,3],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,272,285,3],285],[[285,278,285,3],285],[[285,272,285,285],285],[[285,278,285,285],285],[[286,278,286,3],286],[[287,272,287,3],287],[[286,278,286,3,3],286],[[287,272,287,3,3],287],[[286,278,286],286],[[287,272,287],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,2],285],[[285,272,3],285],[[285,278,4],285],[[285,271,1],285],[[285,270,285,285,3],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,270,285,285,3],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,272,285,284],285],[[285,271,285,285],285],[[287,272,287,287,3],287],[[286,278,286,286,3],286],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,3],285],[[285,270,285,3],285],[[285,270,285,276],285],[[285,272,285,276],285],[[285,278,285,276],285],[[285,270,285,9],285],[[285,272,285,9],285],[[285,278,285,9],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[286,278,286],286],[[287,272,287],287],[[286,278,286,3],286],[[287,272,287,3],287],[[285,270,285,276],285],[[285,272,285,276],285],[[285,278,285,276],285],[[285,270,285,9],285],[[285,272,285,9],285],[[285,278,285,9],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,270,285,276],285],[[285,272,285,276],285],[[285,278,285,276],285],[[285,270,285,9],285],[[285,272,285,9],285],[[285,278,285,9],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[3,272,285],15],[[4,278,285],15],[[14,278,286],15],[[13,272,287],15],[[2,270,285],15],[[3,272,285],15],[[4,278,285],15],[[1,271,285],15],[[14,278,286],15],[[13,272,287],15],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[285,272,285,285],285],[[285,278,285,285],285],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[271,285,285],285],[[270,285,285],285],[[271,285,285],285],[[272,285,285,3],285],[[278,285,285,3],285],[[271,285,285,3],285],[[272,285,285],285],[[278,285,285],285],[[272,285,285],285],[[278,285,285],285],[[270,285,285],285],[[271,285,285],285],[[272,268],287],[[278,274],286],[[272,276],285],[[278,273],285],[[271,276],285],[[272,276],285],[[278,276],285],[[278,277],286],[[272,268],287],[[270,276],285],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[272,285],285],[[278,285],285],[[272,285,3],287],[[272,285,3],287],[[278,286,3],273],[[278,286,3],273],[[278,286,3],275],[[272,273,3],287],[[272,287,3],285],[[272,287,3],285],[[278,275,3],286],[[272,287,3],273],[[272,273],285],[[278,276],285],[[270,285],273],[[272,285],273],[[278,273],285],[[272,285],276],[[278,273],286],[[272,285],287],[[278,285],276],[[278,285],273],[[278,285],276],[[270,273],285],[[272,276],285],[[278,276],285],[[272,273],285],[[278,276],285],[[278,273],285],[[278,273],286],[[272,285],287],[[270,273],285],[[272,276],285],[[278,276],285],[[270,287,287],288],[[272,287],280],[[278,286],273],[[278,286],273],[[278,286],275],[[272,273],287],[[272,287],285],[[272,287],285],[[278,275],286],[[272,287,3],273],[[270,285],273],[[272,285],273],[[272,285],276],[[278,285],276],[[278,285],273],[[278,285],276],[[278,286,3],273],[[278,286,3],273],[[272,287,3],285],[[272,287,3],285],[[278,286],273],[[278,286],273],[[272,287],285],[[272,287],285],[[270,285],273],[[272,285],273],[[272,285],276],[[278,285],276],[[278,285],273],[[278,285],276],[[270,285,285,3],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[272,287,288,288],287],[[272,285,285,285],285],[[272,285,285,285],285],[[272,285,285,285],285],[[272,285,285,285],285],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[270,2],285],[[272,3],285],[[278,4],285],[[271,1],285],[[278,14],286],[[272,13],287],[[278,287,3],268],[[278,286,3],274],[[278,285,3],276],[[278,285,3],273],[[278,286,286,285,3],286],[[272,287,287,285,3],287],[[278,286,286,285,3,3],286],[[272,287,287,285,3,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286],286],[[272,287],287],[[278,286,3],286],[[272,287,3],287],[[278,286,282,283],286],[[272,287,282,283],287],[[278,286,282,283,3],286],[[272,287,282,283,3],287],[[271,285,285,3],285],[[271,285,285,3],285],[[271,285,285],285],[[272,287,268,3],287],[[278,286,274,3],286],[[272,285,276,3],285],[[278,285,273,3],285],[[272,3],285],[[278,4],285],[[278,14],286],[[272,13],287],[[270,2],285],[[272,3],285],[[278,4],285],[[271,1],285],[[278,14],286],[[272,13],287],[[272,285],285],[[278,285],285],[[272,285,285],285],[[270,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[278,286],286],[[272,287],287],[[272,287],287],[[278,285,285],285],[[278,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[270,285,285],285],[[270,285,285],285],[[270,285,285],285],[[272,285,285],285],[[271,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[270,285,285],285],[[271,285,285],285],[[270,285,285],285],[[278,286,3],286],[[272,287,3],287],[[278,286,285],286],[[272,287,285],287],[[270,285,285,285],285],[[272,285,285,285],285],[[278,285,285,285],285],[[271,285,285,285],285],[[278,286,285,286],286],[[272,287,285,287],287],[[278,285,3],285],[[278,286,3],286],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,285,286],286],[[272,285,287],287],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[272,285,3],285],[[278,285,3],285],[[272,285,285],285],[[278,285,285],285],[[272,285,3],285],[[278,285,3],285],[[272,285,285],285],[[278,285,285],285],[[278,286,3],286],[[272,287,3],287],[[278,286,3,3],286],[[272,287,3,3],287],[[278,286],286],[[272,287],287],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,2],285],[[272,3],285],[[278,4],285],[[271,1],285],[[270,285,285,3],285],[[272,285,285,3],285],[[278,285,285,3],285],[[270,285,285,285],285],[[272,285,285,285],285],[[278,285,285,285],285],[[270,285,285,3],285],[[272,285,285,3],285],[[278,285,285,3],285],[[270,285,285,285],285],[[272,285,285,285],285],[[278,285,285,285],285],[[272,285,284],285],[[271,285,285],285],[[272,287,287,3],287],[[278,286,286,3],286],[[272,285,285,3],285],[[278,285,285,3],285],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,3],285],[[270,285,3],285],[[270,285,276],285],[[272,285,276],285],[[278,285,276],285],[[270,285,9],285],[[272,285,9],285],[[278,285,9],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[278,286],286],[[272,287],287],[[278,286,3],286],[[272,287,3],287],[[270,285,276],285],[[272,285,276],285],[[278,285,276],285],[[270,285,9],285],[[272,285,9],285],[[278,285,9],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[270,285,276],285],[[272,285,276],285],[[278,285,276],285],[[270,285,3],285],[[272,285,9],285],[[278,285,9],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[271,285,285],285],[[270,285,285],285],[[271,285,285],285],[[272,285,285,285,3],285],[[278,285,285,285,3],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[272,285,285],285],[[278,285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[286,286],[287,287],[287,287],[285,270],[285,271],[270,285],[271,285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,3],286],[[287,3],287],[[285,285],285],[[286,285],286],[[287,285],287],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[286,285,286],286],[[287,285,287],287],[[285,3],285],[[286,3],286],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,286],286],[[285,287],287],[285,285],[285,285],[285,285],[285,285],[286,286],[287,287],[285,3],[285,4],[286,14],[287,13],[285,3],[285,4],[285,3],[285,4],[285,9],[285,10],[286,14],[287,13],[285,3],[285,4],[285,9],[285,10],[286,14],[287,13],[285,3],[285,4],[286,14],[287,13],[285,3],[285,4],[[285,3],285],[[285,3],285],[[285,285],285],[[285,285],285],[[285,3],285],[[285,3],285],[[285,285],285],[[285,285],285],[[286,3],286],[[287,3],287],[[286,3,3],286],[[287,3,3],287],[286,286],[287,287],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[2,285],[3,285],[4,285],[1,285],[14,286],[13,287],[[3,3,3,3],285],[[4,4,4,4],285],[[14,14,14,14],286],[[13,13,13,13],287],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],285],[[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],285],[[4,4,4,4,4,4,4,4],285],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],285],[[14,14,14,14,14,14,14,14],286],[[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],287],[[3,3,3,3],285],[[4,4,4,4],285],[[14,14,14,14],286],[[13,13,13,13],287],[[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],285],[[4,4,4,4,4,4,4,4],285],[[14,14,14,14,14,14,14,14],286],[[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],287],[[],287],[[],285],[[],286],[[],287],[[],285],[[285,285,3],285],[[285,285,3],285],[[285,285,3],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,285,3],285],[[285,285,3],285],[[285,285,3],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,284],285],[[285,285],285],[[287,287,3],287],[[286,286,3],286],[[285,285,3],285],[[285,285,3],285],[[286,286,3],286],[[287,287,3],287],[[285,3],285],[[285,3],285],[[285,276],285],[[285,276],285],[[285,276],285],[[285,9],285],[[285,9],285],[[285,9],285],[[285,285],285],[[285,285],285],[[285,285],285],[286,286],[287,287],[[286,3],286],[[287,3],287],[[285,276],285],[[285,276],285],[[285,276],285],[[285,9],285],[[285,9],285],[[285,9],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,276],285],[[285,276],285],[[285,276],285],[[285,9],285],[[285,9],285],[[285,9],285],[[285,285],285],[[285,285],285],[[285,285],285],[[3,285],15],[[4,285],15],[[14,286],15],[[13,287],15],[[3,285],15],[[2,285],15],[[3,285],15],[[4,285],15],[[1,285],15],[[14,286],15],[[13,287],15],[[3,285],15],[[14,286],15],[[13,287],15],[[4,285],15],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285,285,3],285],[[285,285,285,3],285],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[],287],[[],285],[[],286],[[],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[285,285],285],[[285,285],285],[[285,285],285],[277,286],[274,286],[268,287],[275,287],[276,285],[273,285],[276,276],[276,276],[276,276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[276,276],[[276,3],276],[[276,276,3],276],[[276,276,3],276],[[276,276,3],276],[[277,277],277],[[268,268],268],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],272],[[276,276,3],276],[[276,276,3],276],[[277,277,3],277],[[268,268,3],268],[[276,276,276],276],[[277,277,277],277],[[268,268,268],268],[13,268],[276,276],[276,276],[278,276],[272,276],[276,276],[277,277],[268,268],[276,276],[[276,3],276],[[276,3],276],[277,268],[277,276],[268,277],[268,276],[276,277],[276,268],[277,277],[268,268],[[277,277],277],[[268,268],268],[7,15],[[276,276,3],276],[[276,276,3],278],[[276,276,279],278],[[276,276,279],278],[[276,276,3],272],[[276,276,3],278],[[276,276,279],278],[[276,276,279],278],[[276,276,3],272],[[277,277,3],277],[[277,277,3],278],[[268,268,3],268],[[268,268,3],278],[[277,277,3,3],278],[[268,268,3,3],278],[[277,277,3],277],[[277,277,3],278],[[268,268,3],268],[[268,268,3],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,3,276,3,3],276],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276,3],3],[[276,276,3],3],[[276,276,3],3],[[276,276,3],276],[[276,276,3],3],[[276,276,3],3],[[276,276,3],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],278],[[276,276],276],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277,3,3],3],[[268,268,3,3],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[276,276],[276,276],[[9,8],9],[[9,9],9],[[9,7],9],[[268,3,3],268],[[277,3],3],[[277,3],3],[[268,277,3],268],[[277,3],9],[[268,3,3],268],[[268,3],3],[[277,268,3],277],[[268,3],3],[[268,3],9],[[268,9,3],268],[[268,3],268],[268,3],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,277],[276,268],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,277],[276,276],[276,276],[276,276],[[277,3],277],[[268,3],268],[[268,268],281],[277,276],[277,276],[277,268],[276,268],[268,276],[268,276],[268,277],[[268,3],276],[277,14],[277,3],[277,3],[[268,277],268],[277,9],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,3],[[277,3],277],[3,276],[[268,3],268],[268,13],[268,3],[[277,268],277],[268,3],[268,9],[[277,3],3],[[277,3],3],[[277,3],9],[[268,3],3],[[268,3],3],[[268,3],9],[268,3],[277,276],[277,276],[268,276],[268,276],[277,3],[277,3],[277,9],[268,3],[268,3],[268,9],[[277,9],277],[[268,9],268],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[[276,276,3],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[268,281,281],268],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,3],3],[[276,3],3],[[276,3],3],[[268,3],3],[[276,276],276],[[277,277,276,3],277],[[268,268,276,3],268],[[277,277,276,3,3],277],[[268,268,276,3,3],268],[[277,277,276,3],277],[[268,268,276,3],268],[277,277],[268,268],[[277,277],277],[[268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[],9],[277,277],[268,268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[277,282,283],277],[[268,282,283],268],[[277,277,282,283,3],277],[[268,268,282,283,3],268],[[277,277,282,283],277],[[268,268,282,283],268],[[276,276,3],276],[[276,276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[3,276,3],276],[[4,276,3],276],[[14,276,3],277],[[13,276,3],268],[[3,276,3],276],[[4,276,3],276],[[14,276,3],277],[[13,276,3],268],[[276,3,3],276],[[276,3,3],276],[[276,3,3],276],[[268,268,3],268],[[276,276],276],[276,276],[[],15],[14,277],[13,268],[3,276],[4,276],[14,277],[14,277],[13,268],[13,268],[14,277],[276,276],[13,268],[14,277],[[277,14],277],[276,276],[[277,14],277],[14,277],[13,268],[2,276],[3,276],[4,276],[1,276],[14,277],[13,268],[276,276],[7,276],[276,276],[276,276],[[276,276,276],276],[[276,276,276],276],[[276,276],276],[[276,276],276],[[276,276,278,276],276],[[276,276,278,276],276],[[276,276,278,276],276],[[276,276,272,276],276],[[277,276,278,277],277],[[268,276,278,268],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,272,276,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[272,276,276],272],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[276,272,276],276],[[276,278,276],276],[[276,278,276],276],[[268,278,268],268],[[276,278,276],276],[[278,276,276,3],278],[[278,276,276,279],278],[[278,276,276,279],278],[[272,276,276,3],272],[[278,276,276,3],278],[[278,276,276,279],278],[[278,276,276,279],278],[[272,276,276,3],272],[[278,277,277,3],278],[[278,268,268,3],278],[[278,277,277,3,3],278],[[278,268,268,3,3],278],[[278,277,277,3],278],[[278,268,268,3],278],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[7,278,276],15],[[7,278,276],15],[[7,278,276],15],[[7,272,276],15],[[7,278,277],15],[[7,278,268],15],[[276,278,276],276],[[276,278,276],276],[[276,278,268,3],276],[[268,278,268,277,3],268],[[277,278,277,268,3],277],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[277,278,276],277],[[268,278,276],268],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[277,278,276],277],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[281,278,268,268],281],[[276,278,277],276],[[276,278,277],276],[[268,278,277],268],[[268,278,276],268],[[276,278,268],276],[[276,278,268],276],[[276,278,268,3],276],[[268,278,268,277],268],[[276,278,276],276],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[1,278,276],15],[[277,278,277,268],277],[[276,278,277],276],[[276,278,277],276],[[276,278,268],276],[[276,278,268],276],[[276,278,276],276],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[1,278,276],15],[[276,278,276,276,3],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[268,278,281,281],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[276,278,2],276],[[276,278,3],276],[[276,278,4],276],[[276,272,1],276],[[277,278,14],277],[[268,278,13],268],[[277,278,277,276,3],277],[[268,278,268,276,3],268],[[277,278,277,276,3,3],277],[[268,278,268,276,3,3],268],[[277,278,277,276,3],277],[[268,278,268,276,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,282,283],277],[[268,278,268,282,283],268],[[277,278,277,277,282,283,3],277],[[268,278,268,268,282,283,3],268],[[277,278,277,277,282,283],277],[[268,278,268,268,282,283],268],[[276,272,276,276,3],276],[[276,272,276,276,3],276],[[276,272,276,276],276],[[276,3,276,276,3],276],[[276,4,276,276,3],276],[[277,14,276,277,3],277],[[268,13,276,268,3],268],[[276,3,276,276,3],276],[[276,4,276,276,3],276],[[277,14,276,277,3],277],[[268,13,276,268,3],268],[[276,278,3],276],[[276,278,4],276],[[277,278,14],277],[[268,278,13],268],[[276,278,2],276],[[276,278,3],276],[[276,278,4],276],[[276,272,1],276],[[277,278,14],277],[[268,278,13],268],[[276,278,276],276],[[276,278,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277],277],[[268,278,268],268],[[268,278,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[277,278,277,3],277],[[268,278,268,3],268],[[277,278,277,276],277],[[268,278,268,276],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,276,277],277],[[268,278,276,268],268],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,3],276],[[276,278,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,3],276],[[276,278,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[277,278,277,3],277],[[268,278,268,3],268],[[277,278,277,277,3,3],277],[[268,278,268,268,3,3],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,2],276],[[276,278,3],276],[[276,278,4],276],[[276,272,1],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,284],276],[[276,272,276,276],276],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[276,278,276,3],276],[[276,278,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,3],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[3,278,276],15],[[4,278,276],15],[[14,278,277],15],[[13,278,268],15],[[2,278,276],15],[[3,278,276],15],[[4,278,276],15],[[1,272,276],15],[[14,278,277],15],[[13,278,268],15],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[3,276],276],[[4,276],276],[[14,276],277],[[13,276],268],[[276,276,1],15],[[3,276,276],15],[[4,276,276],15],[[14,276,277],15],[[13,276,268],15],[[278,276],276],[[278,276],276],[[272,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276,3],276],[[278,276,276,3],276],[[272,276,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[272,276],276],[[278,276],276],[[278,276],276],[[278,268],268],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,276],276],[[278,276],276],[[278,268,3],276],[[278,268,277,3],268],[[278,277,268,3],277],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],277],[[278,276],268],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],277],[[278,276],276],[[278,276],276],[[278,276],276],[[278,268,268],281],[[278,277],276],[[278,277],276],[[278,277],268],[[278,276],268],[[278,268],276],[[278,268],276],[[278,268,3],276],[[278,268,277],268],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,277,268],277],[[278,277],276],[[278,277],276],[[278,268],276],[[278,268],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276,276,3],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,268,281,281],268],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,2],276],[[278,3],276],[[278,4],276],[[272,1],276],[[278,14],277],[[278,13],268],[[278,277,277,276,3],277],[[278,268,268,276,3],268],[[278,277,277,276,3,3],277],[[278,268,268,276,3,3],268],[[278,277,277,276,3],277],[[278,268,268,276,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277],277],[[278,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,277,282,283],277],[[278,268,282,283],268],[[278,277,277,282,283,3],277],[[278,268,268,282,283,3],268],[[278,277,277,282,283],277],[[278,268,268,282,283],268],[[272,276,276,3],276],[[272,276,276,3],276],[[272,276,276],276],[[278,3],276],[[278,4],276],[[278,14],277],[[278,13],268],[[278,2],276],[[278,3],276],[[278,4],276],[[272,1],276],[[278,14],277],[[278,13],268],[[278,276],276],[[278,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,277,277],277],[[278,268,268],268],[[278,277],277],[[278,268],268],[[278,268],268],[[278,276,276],276],[[278,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,277,3],277],[[278,268,3],268],[[278,277,276],277],[[278,268,276],268],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[272,276,276,276],276],[[278,277,276,277],277],[[278,268,276,268],268],[[278,276,276],276],[[272,276,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,277,277],277],[[278,268,268],268],[[278,276,3],276],[[278,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,3],276],[[278,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,277,3],277],[[278,268,3],268],[[278,277,277,3,3],277],[[278,268,268,3,3],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277],277],[[278,268],268],[[278,277,277],277],[[278,268,268],268],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,2],276],[[278,3],276],[[278,4],276],[[272,1],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,284],276],[[272,276,276],276],[[278,277,277,3],277],[[278,268,268,3],268],[[278,276,3],276],[[278,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,9],276],[[278,276,9],276],[[278,276,9],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,277],277],[[278,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,9],276],[[278,276,9],276],[[278,276,9],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,3],276],[[278,276,9],276],[[278,276,9],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276,276,3],276],[[278,276,276,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[],15],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[276,276],[276,276],[[277,277],277],[[268,268],268],[277,277],[268,268],[[268,268],268],[268,268],[[268,268],268],[276,3],[277,3],[268,3],[276,278],[276,272],[278,276],[272,276],[[276,276,3],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[],15],[[277,3],277],[[268,3],268],[[277,276],277],[[268,276],268],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[277,276,277],277],[[268,276,268],268],[[276,276],276],[[276,276],276],[276,276],[276,276],[276,276],[276,276],[[1,3],15],[277,277],[268,268],[[277,277],277],[[268,268],268],[268,268],[268,268],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[277,3],277],[[268,3],268],[[277,277,3],277],[[268,268,3],268],[[277,3],277],[[268,3],268],[[277,277,3,3],277],[[268,268,3,3],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[268,268],[268,268],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[2,276],[3,276],[4,276],[1,276],[14,277],[13,268],[[2,2,2,2,2,2,2,2],276],[[3,3,3,3],276],[[4,4],276],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],276],[[14,14],277],[14,277],[[13,13,13,13],268],[13,268],[14,277],[13,268],[9,15],[[2,2,2,2,2,2,2,2],276],[[3,3,3,3],276],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],276],[[14,14],277],[[13,13,13,13],268],[[],277],[[],268],[[],276],[[],15],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276,3],276],[[276,276],276],[[276,276],276],[[276,276,276],276],[[276,276,3],276],[[276,276,3],276],[[276,276,3],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,276,3],276],[[276,276,3],276],[[276,276,3],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,3],276],[[276,276],276],[[277,277,3],277],[[268,268,3],268],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[277,277],[268,268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[268,268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,9],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[[14,277],15],[[13,268],15],[[3,276],15],[[4,276],15],[[14,277],15],[[14,277],15],[[13,268],15],[[13,268],15],[[14,277],15],[[276,276],15],[[13,268],15],[[14,277],15],[[276,276],15],[[14,277],15],[[14,277],15],[[13,268],15],[[2,276],15],[[3,276],15],[[4,276],15],[[1,276],15],[[14,277],15],[[13,268],15],[[276,276],15],[[14,277],15],[[13,268],15],[[14,277],15],[[276,276],15],[[3,3],15],[[13,268],15],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276,276,3],276],[[276,276,276,3],276],[276,3],[[276,276],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],3],[[277,277],3],[[268,268],3],[[276,276],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],3],[[268,268],3],[[276,276],3],[[277,277],3],[[268,268],3],[[276,276],3],[9,3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[],277],[[],268],[[],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[9,9,9],9],[[9,9],9],[[9,9],9],[3,3],[8,3],[9,3],[8,3],[9,3],[[],10],[[9,270],15],[[10,271],15],[[7,9,9,9],7],[9,9],[10,10],[9,9],[9,9],[10,10],[9,15],[9,9],[[],9],[[],15],[9,10],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[9,10],15],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[276,276],[268,268],[277,277],[273,273],[275,275],[274,274],[285,285],[287,287],[286,286],[281,281],[280,280],[288,288],[269,269],[[269,269],58],0,0,0,0,[[269,269],33],[[276,77],78],[[268,77],78],[[277,77],78],[[273,77],78],[[275,77],78],[[274,77],78],[[285,77],78],[[287,77],78],[[286,77],78],[[281,77],78],[[280,77],78],[[288,77],78],[[269,77],78],[289,276],[290,276],[-1,-1,[]],[291,276],[292,276],[293,276],[294,276],[295,276],[296,276],[297,276],[298,276],[-1,-1,[]],[299,268],[300,277],[-1,-1,[]],[301,273],[302,273],[303,273],[304,273],[305,273],[306,273],[307,273],[308,273],[-1,-1,[]],[309,273],[310,273],[-1,-1,[]],[311,275],[312,274],[-1,-1,[]],[313,285],[314,285],[-1,-1,[]],[315,285],[316,285],[317,285],[318,285],[319,285],[320,285],[321,285],[322,285],[-1,-1,[]],[323,287],[-1,-1,[]],[324,286],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[269,269],[[22,[58]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,15],[9,15],[9,15],[9,15],[[9,9,9,9],3],[[268,268,268,268],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,269],[[9,9],269],[9,[[15,[9,9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,10],[[7,9,9,9],7],[[7,10,10,10],7],[[7,9,9,9],7],[[7,10,10,10],7],[[9,9],9],[[10,10],10],[[9,9],9],[[10,10],10],[[9,9,9],9],[[10,9,9],10],[[3,3],7],[[4,4],7],[[3,3],7],[[4,4],7],[[3,3],7],[[4,4],7],[[3,3],7],[[4,4],7],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[3,3],[4,4],[[9,9],9],[[10,9],10],[7,15],[7,15],[7,15],[7,15],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[272,272],[270,270],[271,271],[[272,272],272],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[[272,272],272],[[270,270],270],[[271,271],271],[9,270],[10,271],[9,9],[10,10],[273,273],[273,273],[273,273],[273,273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273,3],273],[[273,273,3],273],[[273,273,3],273],[[274,274],274],[[275,275],275],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],270],[[273,273,3],273],[[273,273,3],273],[[274,274,3],274],[[275,275,3],275],[[273,273,273],273],[[274,274,274],274],[[275,275,275],275],[268,275],[276,273],[277,274],[268,275],[14,274],[13,275],[276,273],[276,273],[278,273],[272,273],[276,273],[277,274],[276,273],[268,275],[276,273],[[273,3],273],[[273,3],273],[277,274],[274,277],[274,275],[274,273],[268,275],[275,268],[275,274],[275,273],[276,273],[273,274],[273,275],[273,276],[274,274],[275,275],[[273,273,3],273],[[273,273,3],272],[[273,273,279],278],[[273,273,279],278],[[273,273,3],270],[[273,273,3],272],[[273,273,279],278],[[273,273,279],278],[[273,273,3],270],[[274,274,3],274],[[274,274,3],278],[[275,275,3],275],[[275,275,3],278],[[273,273],273],[[273,273],272],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],273],[[273,273],272],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],278],[[273,273],273],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[273,273],[273,273],[276,273],[276,273],[273,276],[273,276],[276,273],[273,276],[276,274],[273,275],[273,276],[273,276],[273,276],[276,273],[276,273],[276,273],[276,273],[276,273],[276,273],[276,274],[276,273],[276,273],[276,273],[[275,275],280],[275,281],[274,276],[274,276],[274,268],[276,275],[275,273],[275,273],[268,274],[[275,3],276],[274,14],[273,276],[273,276],[273,276],[273,276],[273,276],[273,276],[273,3],[275,13],[274,276],[274,276],[275,273],[275,273],[273,276],[273,276],[273,276],[273,276],[273,276],[273,276],[[273,273,3],273],[[274,274],274],[[275,275],275],[[275,275,3],275],[[275,280,280],275],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,3],3],[[273,3],3],[[273,3],4],[[273,3],3],[[274,3],277],[[275,3],268],[[273,3],276],[[275,3],268],[[273,3],276],[[273,3],276],[[274,274,273,3],274],[[275,275,273,3],275],[274,274],[275,275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[[274,274,274],274],[[275,275,275],275],[274,274],[275,275],[[274,282,283],274],[[275,282,283],275],[[273,273,3],273],[[273,273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[3,273,3],273],[[4,276,3],273],[[14,276,3],274],[[13,273,3],275],[[7,276,273,3],15],[[3,273,3],276],[[4,273,3],273],[[14,273,3],274],[[13,273,3],268],[[273,2,3],273],[[273,3,3],273],[[273,4,3],273],[[273,1,3],273],[[274,277,3],274],[[275,268,3],275],[[273,276,3],273],[[275,268,3],275],[[273,276,3],273],[[273,276,3],273],[273,273],[3,273],[4,273],[14,274],[13,275],[273,273],[[13,13],275],[[14,14],274],[[276,276],273],[2,273],[3,273],[4,273],[1,273],[14,274],[13,275],[273,273],[273,273],[273,273],[[273,273,273],273],[[273,273,273],273],[[273,273],273],[[273,273],273],[[273,273,272,273],273],[[273,273,278,273],273],[[273,273,278,273],273],[[273,273,270,273],273],[[274,273,278,274],274],[[275,273,278,275],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[274,274,274,278],274],[[275,275,275,278],275],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[273,270,273,273,3],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[270,273,273],270],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[275,278,268],275],[[273,278,276],273],[[273,270,276],273],[[273,278,276],273],[[273,278,276],273],[[274,278,277],274],[[275,278,268],275],[[273,272,276],273],[[272,273,273,3],272],[[278,273,273,279],278],[[278,273,273,279],278],[[270,273,273,3],270],[[272,273,273,3],272],[[278,273,273,279],278],[[278,273,273,279],278],[[270,273,273,3],270],[[278,274,274,3],278],[[278,275,275,3],278],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[7,272,273],15],[[7,278,273],15],[[7,278,273],15],[[7,270,273],15],[[7,278,274],15],[[7,278,275],15],[[273,278,273],273],[[273,278,273],273],[[276,278,275,3],276],[[273,278,276],273],[[273,278,276],273],[[276,272,273],276],[[1,272,273],15],[[276,278,273],276],[[273,278,276],273],[[276,278,273],276],[[274,278,276],274],[[275,278,273],275],[[1,278,273],15],[[1,278,273],15],[[276,278,273],276],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[1,278,273],15],[[273,272,276],273],[[273,278,276],273],[[273,278,276],273],[[273,278,276],273],[[273,278,276],273],[[273,278,276],273],[[274,278,276],274],[[273,272,276],273],[[273,278,276],273],[[273,278,276],273],[[280,272,275,275],280],[[281,278,275],281],[[276,278,274],276],[[276,278,274],276],[[268,278,274],268],[[275,278,276],275],[[273,278,275],273],[[273,278,275],273],[[276,278,275,3],276],[[276,272,273],276],[[1,272,273],15],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[276,278,273],276],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[1,278,273],15],[[276,278,274],276],[[276,278,274],276],[[273,278,275],273],[[273,278,275],273],[[276,272,273],276],[[1,272,273],15],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[276,278,273],276],[[276,278,273],276],[[276,278,273],276],[[1,278,273],15],[[1,278,273],15],[[1,278,273],15],[[273,272,273,273,3],273],[[274,278,274,274],274],[[275,278,275,275],275],[[275,278,280,280],275],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[273,272,2],273],[[273,278,3],273],[[273,278,4],273],[[273,270,1],273],[[274,278,14],274],[[275,278,13],275],[[268,278,275,3],268],[[276,278,273,3],276],[[274,278,274,273,3],274],[[275,278,275,273,3],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[274,278,274],274],[[275,278,275],275],[[274,278,274,282,283],274],[[275,278,275,282,283],275],[[273,270,273,273,3],273],[[273,270,273,273,3],273],[[273,270,273,273],273],[[273,3,273,273,3],273],[[273,4,276,273,3],273],[[274,14,276,274,3],274],[[275,13,273,275,3],275],[[276,3,273,276,3],276],[[273,4,273,273,3],273],[[274,14,273,274,3],274],[[268,13,273,268,3],268],[[275,278,275,268,3],275],[[273,278,273,276,3],273],[[273,278,3],273],[[273,278,4],273],[[274,278,14],274],[[275,278,13],275],[[273,272,2],273],[[273,278,3],273],[[273,278,4],273],[[273,270,1],273],[[274,278,14],274],[[275,278,13],275],[[273,278,273],273],[[273,278,273],273],[[273,278,273,273],273],[[273,272,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[274,278,274],274],[[275,278,275],275],[[275,278,275],275],[[273,278,273,273],273],[[273,278,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,272,273,273],273],[[273,272,273,273],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[274,278,274,3],274],[[275,278,275,3],275],[[274,278,274,273],274],[[275,278,275,273],275],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,273,274],274],[[275,278,273,275],275],[[273,278,273,3],273],[[274,278,274,3],274],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,273,274],274],[[275,278,273,275],275],[[273,272,273],273],[[273,278,273],273],[[273,278,273],273],[[273,270,273],273],[[274,278,274],274],[[275,278,275],275],[[273,278,273,3],273],[[273,278,273,3],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,3],273],[[273,278,273,3],273],[[273,278,273,273],273],[[273,278,273,273],273],[[274,278,274,3],274],[[275,278,275,3],275],[[274,278,274],274],[[275,278,275],275],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,2],273],[[273,278,3],273],[[273,278,4],273],[[273,270,1],273],[[273,272,273,273,3],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273,273,3],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,278,273,284],273],[[273,270,273,273],273],[[275,278,275,275,3],275],[[274,278,274,274,3],274],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[274,278,274,274,3],274],[[275,278,275,275,3],275],[[273,272,273,3],273],[[273,272,273,3],273],[[273,272,273,276],273],[[273,278,273,276],273],[[273,278,273,276],273],[[273,272,273,9],273],[[273,278,273,9],273],[[273,278,273,9],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[274,278,274],274],[[275,278,275],275],[[273,272,273,276],273],[[273,278,273,276],273],[[273,278,273,276],273],[[273,272,273,9],273],[[273,278,273,9],273],[[273,278,273,9],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,272,273,276],273],[[273,278,273,276],273],[[273,278,273,276],273],[[273,272,273,3],273],[[273,278,273,9],273],[[273,278,273,9],273],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[3,278,273],15],[[4,278,273],15],[[14,278,274],15],[[13,278,275],15],[[2,272,273],15],[[3,278,273],15],[[4,278,273],15],[[1,270,273],15],[[14,278,274],15],[[13,278,275],15],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,270,273,273],273],[[273,272,273,273],273],[[273,270,273,273],273],[[273,278,273,273,3],273],[[273,278,273,273,3],273],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[272,273,273],272],[[278,273,273],278],[[278,273,273],278],[[270,273,273],270],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,272,273,273],273],[[273,278,273,273],273],[[273,278,273,273],273],[[273,270,273,273],273],[[274,278,274,274],274],[[275,278,275,275],275],[[273,278,273,273],273],[[273,278,273,273],273],[[3,273],273],[[4,273],273],[[14,273],274],[[13,273],275],[[3,273,273],15],[[4,273,273],15],[[14,273,274],15],[[13,273,275],15],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[270,273,273],273],[[272,273,273],273],[[270,273,273],273],[[278,273,273,3],273],[[278,273,273,3],273],[[270,273,273,3],273],[[278,273,273],273],[[278,273,273],273],[[278,273,273],273],[[278,273,273],273],[[272,273,273],273],[[270,273,273],273],[[278,268],275],[[278,276],273],[[270,276],273],[[278,276],273],[[278,276],273],[[278,277],274],[[278,268],275],[[272,276],273],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[278,273],273],[[278,273],273],[[278,275,3],276],[[278,276],273],[[278,276],273],[[272,273],276],[[278,273],276],[[278,276],273],[[278,273],276],[[278,276],274],[[278,273],275],[[278,273],276],[[278,273],276],[[278,273],276],[[272,276],273],[[278,276],273],[[278,276],273],[[278,276],273],[[278,276],273],[[278,276],273],[[278,276],274],[[272,276],273],[[278,276],273],[[278,276],273],[[272,275,275],280],[[278,275],281],[[278,274],276],[[278,274],276],[[278,274],268],[[278,276],275],[[278,275],273],[[278,275],273],[[278,275,3],276],[[272,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,274],276],[[278,274],276],[[278,275],273],[[278,275],273],[[272,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[278,273],276],[[272,273,273,3],273],[[278,274,274],274],[[278,275,275],275],[[278,275,280,280],275],[[278,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[272,2],273],[[278,3],273],[[278,4],273],[[270,1],273],[[278,14],274],[[278,13],275],[[278,275,3],268],[[278,273,3],276],[[278,274,274,273,3],274],[[278,275,275,273,3],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274,274,274],274],[[278,275,275,275],275],[[278,274],274],[[278,275],275],[[278,274,282,283],274],[[278,275,282,283],275],[[270,273,273,3],273],[[270,273,273,3],273],[[270,273,273],273],[[278,275,268,3],275],[[278,273,276,3],273],[[278,3],273],[[278,4],273],[[278,14],274],[[278,13],275],[[272,2],273],[[278,3],273],[[278,4],273],[[270,1],273],[[278,14],274],[[278,13],275],[[278,273],273],[[278,273],273],[[278,273,273],273],[[272,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[278,274],274],[[278,275],275],[[278,275],275],[[278,273,273],273],[[278,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[272,273,273],273],[[272,273,273],273],[[272,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[272,273,273],273],[[270,273,273],273],[[272,273,273],273],[[278,274,3],274],[[278,275,3],275],[[278,274,273],274],[[278,275,273],275],[[272,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[270,273,273,273],273],[[278,274,273,274],274],[[278,275,273,275],275],[[278,273,3],273],[[278,274,3],274],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,273,274],274],[[278,273,275],275],[[272,273],273],[[278,273],273],[[278,273],273],[[270,273],273],[[278,274],274],[[278,275],275],[[278,273,3],273],[[278,273,3],273],[[278,273,273],273],[[278,273,273],273],[[278,273,3],273],[[278,273,3],273],[[278,273,273],273],[[278,273,273],273],[[278,274,3],274],[[278,275,3],275],[[278,274],274],[[278,275],275],[[278,274,274],274],[[278,275,275],275],[[272,2],273],[[278,3],273],[[278,4],273],[[270,1],273],[[272,273,273,3],273],[[278,273,273,3],273],[[278,273,273,3],273],[[272,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[272,273,273,3],273],[[278,273,273,3],273],[[278,273,273,3],273],[[272,273,273,273],273],[[278,273,273,273],273],[[278,273,273,273],273],[[278,273,284],273],[[270,273,273],273],[[278,275,275,3],275],[[278,274,274,3],274],[[278,273,273,3],273],[[278,273,273,3],273],[[278,274,274,3],274],[[278,275,275,3],275],[[272,273,3],273],[[272,273,3],273],[[272,273,276],273],[[278,273,276],273],[[278,273,276],273],[[272,273,9],273],[[278,273,9],273],[[278,273,9],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[278,274],274],[[278,275],275],[[272,273,276],273],[[278,273,276],273],[[278,273,276],273],[[272,273,9],273],[[278,273,9],273],[[278,273,9],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[272,273,276],273],[[278,273,276],273],[[278,273,276],273],[[272,273,3],273],[[278,273,9],273],[[278,273,9],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[270,273,273],273],[[272,273,273],273],[[270,273,273],273],[[278,273,273,273,3],273],[[278,273,273,273,3],273],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[272,273,273],273],[[278,273,273],273],[[278,273,273],273],[[270,273,273],273],[[278,274,274],274],[[278,275,275],275],[[278,273,273],273],[[278,273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[274,274],[275,275],[275,275],[273,3],[274,3],[275,3],[273,272],[273,270],[272,273],[270,273],[[273,273,3],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274,3],274],[[275,275,3],275],[[273,273,3],273],[[273,273,3],273],[[273,3],273],[[274,3],274],[[274,3],274],[[275,3],275],[[273,273],273],[[275,273],275],[[274,273],274],[[275,273],275],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[274,273,274],274],[[275,273,275],275],[[273,3],273],[[274,3],274],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,274],274],[[273,275],275],[273,273],[273,273],[273,273],[273,273],[274,274],[275,275],[275,275],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[274,3],274],[[275,3],275],[[274,3],274],[[275,3],275],[275,275],[[273,273],273],[[274,274],274],[[275,275],275],[2,273],[3,273],[4,273],[1,273],[14,274],[13,275],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],273],[[3,3,3,3,3,3,3,3],273],[[4,4,4,4],273],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],273],[[268,268],275],[[277,277],274],[[276,276],273],[[14,14,14,14],274],[[13,13,13,13,13,13,13,13],275],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],273],[[3,3,3,3,3,3,3,3],273],[[4,4,4,4],273],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],273],[[268,268],275],[[277,277],274],[[276,276],273],[[14,14,14,14],274],[[13,13,13,13,13,13,13,13],275],[[],274],[[],275],[[],273],[[273,273,3],273],[[273,273,3],273],[[273,273,3],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,273,3],273],[[273,273,3],273],[[273,273,3],273],[[273,273,273],273],[[273,273,273],273],[[273,273,273],273],[[273,3],273],[[273,273],273],[[275,275,3],275],[[274,274,3],274],[[273,273,3],273],[[273,273,3],273],[[274,274,3],274],[[275,275,3],275],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,276],273],[[273,276],273],[[273,276],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[274,274],[275,275],[[273,276],273],[[273,276],273],[[273,276],273],[[273,3],273],[[273,3],273],[[273,9],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,276],273],[[273,276],273],[[273,276],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,3],273],[[273,273],273],[[273,273],273],[[273,273],273],[[3,273],15],[[4,273],15],[[14,274],15],[[13,275],15],[[273,273],15],[[13,13,275],15],[[14,14,274],15],[[276,276,273],15],[[2,273],15],[[3,273],15],[[4,273],15],[[1,273],15],[[14,274],15],[[13,275],15],[[273,273],15],[[14,274],15],[[13,275],15],[[273,273],15],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273,273,3],273],[[273,273,273,3],273],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[274,274],3],[[275,275],3],[[273,273],3],[[273,273],272],[[273,273],278],[[273,273],278],[[273,273],270],[[274,274],3],[[275,275],3],[[273,273],3],[[274,274],3],[[275,275],3],[[273,273],3],[[],274],[[],275],[[],273],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[273,273],273],[[274,274],274],[[275,275],275],[[273,273],273],[[],15],[[],15],[277,274],[268,275],[276,273],[285,285],[285,285],[285,285],[285,285],[286,286],[287,287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285,3],285],[[285,285,3],285],[[285,285,3],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],271],[268,287],[274,286],[276,285],[273,285],[276,285],[276,285],[278,285],[272,285],[276,285],[277,286],[268,287],[276,285],[[285,3],285],[[285,3],285],[277,286],[274,286],[286,277],[286,274],[286,287],[286,285],[268,287],[275,287],[287,268],[287,275],[287,286],[287,285],[276,285],[273,285],[285,286],[285,287],[285,276],[285,273],[[285,285,3],285],[[285,285,3],270],[[285,285,279],272],[[285,285,279],278],[[285,285,3],271],[[285,285,3],270],[[285,285,279],272],[[285,285,279],278],[[285,285,3],271],[[286,286,3],278],[[287,287,3],272],[[286,286,3,3],278],[[287,287,3,3],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[[286,286],278],[[287,287],272],[285,285],[285,285],[[285,3],287],[[285,3],287],[[286,3],273],[[286,3],273],[[286,3],275],[[273,3],287],[[287,3],285],[[287,3],285],[[275,3],286],[[287,3],273],[273,285],[276,285],[285,273],[285,273],[273,285],[285,276],[273,286],[285,287],[285,286],[285,276],[285,273],[285,276],[273,285],[276,285],[276,285],[273,285],[276,285],[273,285],[273,286],[285,287],[285,286],[273,285],[276,285],[276,285],[[287,287],288],[287,280],[286,273],[286,273],[286,275],[286,287],[273,287],[287,285],[287,285],[275,286],[[287,3],273],[287,286],[285,273],[285,273],[285,276],[285,276],[285,273],[285,276],[285,3],[[286,3],273],[[286,3],273],[[287,3],285],[[287,3],285],[286,273],[286,273],[287,285],[287,285],[285,273],[285,273],[285,276],[285,276],[285,273],[285,276],[[285,285,3],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[287,288,288],287],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[287,3],268],[[286,3],274],[[285,3],276],[[285,3],273],[[286,286,285,3],286],[[287,287,285,3],287],[[286,286,285,3,3],286],[[287,287,285,3,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[[286,286,286],286],[[287,287,287],287],[[286,286,286,3],286],[[287,287,287,3],287],[286,286],[287,287],[[286,3],286],[[287,3],287],[[286,282,283],286],[[287,282,283],287],[[286,282,283,3],286],[[287,282,283,3],287],[[285,285,3],285],[[285,285,3],285],[[285,285],285],[[285,7,3],285],[[273,7,3],285],[[273,7,3],286],[[285,7,3],287],[[7,285,285,3],15],[[7,273,285,3],15],[[7,273,286,3],15],[[7,285,287,3],15],[[285,7,3],273],[[285,7,3],285],[[285,7,3],286],[[285,7,3],275],[[7,285,273,3],15],[[7,285,285,3],15],[[7,285,286,3],15],[[7,285,275,3],15],[[287,268,3],287],[[286,274,3],286],[[285,276,3],285],[[285,273,3],285],[3,272],[[272,272],272],[[272,272],272],[272,272],[272,272],[[272,272],272],[[272,272],3],[[272,272],272],[[272,272],272],[[272,272],272],[3,285],[4,285],[14,286],[13,287],[3,285],[2,285],[3,285],[4,285],[1,285],[14,286],[13,287],[3,285],[285,285],[285,285],[[285,285,285],285],[[285,285,285],285],[[285,285],285],[[285,285],285],[[285,285,270,285],285],[[285,285,272,285],285],[[285,285,278,285],285],[[285,285,271,285],285],[[286,285,278,286],286],[[287,285,272,287],287],[272,3],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[286,286,286,278],286],[[287,287,287,272],287],[[286,286,286,278,3],286],[[287,287,287,272,3],287],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[285,271,285,285,3],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[271,285,285],271],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[287,272,268],287],[[286,278,274],286],[[285,272,276],285],[[285,278,273],285],[[285,271,276],285],[[285,272,276],285],[[285,278,276],285],[[286,278,277],286],[[287,272,268],287],[[285,270,276],285],[[270,285,285,3],270],[[272,285,285,279],272],[[278,285,285,279],278],[[271,285,285,3],271],[[270,285,285,3],270],[[272,285,285,279],272],[[278,285,285,279],278],[[271,285,285,3],271],[[278,286,286,3],278],[[272,287,287,3],272],[[278,286,286,3,3],278],[[272,287,287,3,3],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[278,286,286],278],[[272,287,287],272],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[7,270,285],15],[[7,272,285],15],[[7,278,285],15],[[7,271,285],15],[[7,278,286],15],[[7,272,287],15],[[285,272,285],285],[[285,278,285],285],[[287,272,285,3],287],[[287,272,285,3],287],[[273,278,286,3],273],[[273,278,286,3],273],[[275,278,286,3],275],[[287,272,273,3],287],[[285,272,287,3],285],[[285,272,287,3],285],[[286,278,275,3],286],[[273,272,287,3],273],[[285,272,273],285],[[285,278,276],285],[[273,270,285],273],[[1,270,285],15],[[273,272,285],273],[[285,278,273],285],[[276,272,285],276],[[286,278,273],286],[[287,272,285],287],[[1,272,285],15],[[1,272,285],15],[[286,278,285],286],[[276,278,285],276],[[273,278,285],273],[[276,278,285],276],[[1,278,285],15],[[1,278,285],15],[[1,278,285],15],[[285,270,273],285],[[285,272,276],285],[[285,278,276],285],[[285,272,273],285],[[285,278,276],285],[[285,278,273],285],[[286,278,273],286],[[287,272,285],287],[[286,278,285],286],[[285,270,273],285],[[285,272,276],285],[[285,278,276],285],[[288,270,287,287],288],[[280,272,287],280],[[273,278,286],273],[[273,278,286],273],[[275,278,286],275],[[287,278,286],287],[[287,272,273],287],[[285,272,287],285],[[285,272,287],285],[[286,278,275],286],[[273,272,287,3],273],[[286,278,287],286],[[273,270,285],273],[[1,270,285],15],[[273,272,285],273],[[276,272,285],276],[[1,272,285],15],[[1,272,285],15],[[276,278,285],276],[[273,278,285],273],[[276,278,285],276],[[1,278,285],15],[[1,278,285],15],[[1,278,285],15],[[273,278,286,3],273],[[273,278,286,3],273],[[285,272,287,3],285],[[285,272,287,3],285],[[273,278,286],273],[[273,278,286],273],[[285,272,287],285],[[285,272,287],285],[[273,270,285],273],[[1,270,285],15],[[273,272,285],273],[[276,272,285],276],[[1,272,285],15],[[1,272,285],15],[[276,278,285],276],[[273,278,285],273],[[276,278,285],276],[[1,278,285],15],[[1,278,285],15],[[1,278,285],15],[[285,270,285,285,3],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[287,272,288,288],287],[[285,272,285,285],285],[[285,272,285,285],285],[[285,272,285,285],285],[[285,272,285,285],285],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[285,270,2],285],[[285,272,3],285],[[285,278,4],285],[[285,271,1],285],[[286,278,14],286],[[287,272,13],287],[[268,278,287,3],268],[[274,278,286,3],274],[[276,278,285,3],276],[[273,278,285,3],273],[[286,278,286,285,3],286],[[287,272,287,285,3],287],[[286,278,286,285,3,3],286],[[287,272,287,285,3,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[286,278,286],286],[[287,272,287],287],[[286,278,286,3],286],[[287,272,287,3],287],[[286,278,286,282,283],286],[[287,272,287,282,283],287],[[286,278,286,282,283,3],286],[[287,272,287,282,283,3],287],[[285,271,285,285,3],285],[[285,271,285,285,3],285],[[285,271,285,285],285],[[285,272,285,7,3],285],[[285,278,273,7,3],285],[[286,278,273,7,3],286],[[287,272,285,7,3],287],[[7,272,285,285,3],15],[[7,278,273,285,3],15],[[7,278,273,286,3],15],[[7,272,285,287,3],15],[[273,278,285,7,3],273],[[285,278,285,7,3],285],[[286,278,285,7,3],286],[[275,278,285,7,3],275],[[7,278,285,273,3],15],[[7,278,285,285,3],15],[[7,278,285,286,3],15],[[7,278,285,275,3],15],[[287,272,287,268,3],287],[[286,278,286,274,3],286],[[285,272,285,276,3],285],[[285,278,285,273,3],285],[[285,272,3],285],[[285,278,4],285],[[286,278,14],286],[[287,272,13],287],[[285,270,2],285],[[285,272,3],285],[[285,278,4],285],[[285,271,1],285],[[286,278,14],286],[[287,272,13],287],[[285,272,285],285],[[285,278,285],285],[[285,272,285,285],285],[[285,270,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[286,278,286],286],[[287,272,287],287],[[287,272,287],287],[[285,278,285,285],285],[[285,278,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,270,285,285],285],[[285,270,285,285],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[286,278,286,3],286],[[287,272,287,3],287],[[285,272,285,285],285],[[286,278,286,285],286],[[287,272,287,285],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,285,286],286],[[287,272,285,287],287],[[285,278,285,3],285],[[286,278,286,3],286],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,285,286],286],[[287,272,285,287],287],[[285,270,285],285],[[285,272,285],285],[[285,278,285],285],[[285,271,285],285],[[286,278,286],286],[[287,272,287],287],[[272,285],3],[[278,285],4],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[272,285],3],[[278,285],4],[[272,285],9],[[278,285],10],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[272,285],9],[[278,285],10],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[278,286],14],[[272,287],13],[[272,285],3],[[278,285],4],[[285,272,285,3],285],[[285,278,285,3],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,272,285,3],285],[[285,278,285,3],285],[[285,272,285,285],285],[[285,278,285,285],285],[[286,278,286,3],286],[[287,272,287,3],287],[[286,278,286,3,3],286],[[287,272,287,3,3],287],[[286,278,286],286],[[287,272,287],287],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,2],285],[[285,272,3],285],[[285,278,4],285],[[285,271,1],285],[[285,270,285,285,3],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,270,285,285,3],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,272,285,284],285],[[285,271,285,285],285],[[287,272,287,287,3],287],[[286,278,286,286,3],286],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,3],285],[[285,270,285,3],285],[[285,270,285,276],285],[[285,272,285,276],285],[[285,278,285,276],285],[[285,270,285,9],285],[[285,272,285,9],285],[[285,278,285,9],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[286,278,286],286],[[287,272,287],287],[[286,278,286,3],286],[[287,272,287,3],287],[[285,270,285,276],285],[[285,272,285,276],285],[[285,278,285,276],285],[[285,270,285,9],285],[[285,272,285,9],285],[[285,278,285,9],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,270,285,276],285],[[285,272,285,276],285],[[285,278,285,276],285],[[285,270,285,9],285],[[285,272,285,9],285],[[285,278,285,9],285],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[3,272,285],15],[[4,278,285],15],[[14,278,286],15],[[13,272,287],15],[[2,270,285],15],[[3,272,285],15],[[4,278,285],15],[[1,271,285],15],[[14,278,286],15],[[13,272,287],15],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[286,278,286,286,3],286],[[287,272,287,287,3],287],[[285,270,285,285],285],[[285,271,285,285],285],[[285,270,285,285],285],[[285,271,285,285],285],[[285,272,285,285,3],285],[[285,278,285,285,3],285],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[270,285,285],270],[[272,285,285],272],[[278,285,285],278],[[271,285,285],271],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[285,270,285,285],285],[[285,272,285,285],285],[[285,278,285,285],285],[[285,271,285,285],285],[[286,278,286,286],286],[[287,272,287,287],287],[[285,272,285,285],285],[[285,278,285,285],285],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[271,285,285],285],[[270,285,285],285],[[271,285,285],285],[[272,285,285,3],285],[[278,285,285,3],285],[[271,285,285,3],285],[[272,285,285],285],[[278,285,285],285],[[272,285,285],285],[[278,285,285],285],[[270,285,285],285],[[271,285,285],285],[[272,268],287],[[278,274],286],[[272,276],285],[[278,273],285],[[271,276],285],[[272,276],285],[[278,276],285],[[278,277],286],[[272,268],287],[[270,276],285],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[272,285],285],[[278,285],285],[[272,285,3],287],[[272,285,3],287],[[278,286,3],273],[[278,286,3],273],[[278,286,3],275],[[272,273,3],287],[[272,287,3],285],[[272,287,3],285],[[278,275,3],286],[[272,287,3],273],[[272,273],285],[[278,276],285],[[270,285],273],[[272,285],273],[[278,273],285],[[272,285],276],[[278,273],286],[[272,285],287],[[278,285],276],[[278,285],273],[[278,285],276],[[270,273],285],[[272,276],285],[[278,276],285],[[272,273],285],[[278,276],285],[[278,273],285],[[278,273],286],[[272,285],287],[[270,273],285],[[272,276],285],[[278,276],285],[[270,287,287],288],[[272,287],280],[[278,286],273],[[278,286],273],[[278,286],275],[[272,273],287],[[272,287],285],[[272,287],285],[[278,275],286],[[272,287,3],273],[[270,285],273],[[272,285],273],[[272,285],276],[[278,285],276],[[278,285],273],[[278,285],276],[[278,286,3],273],[[278,286,3],273],[[272,287,3],285],[[272,287,3],285],[[278,286],273],[[278,286],273],[[272,287],285],[[272,287],285],[[270,285],273],[[272,285],273],[[272,285],276],[[278,285],276],[[278,285],273],[[278,285],276],[[270,285,285,3],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[272,287,288,288],287],[[272,285,285,285],285],[[272,285,285,285],285],[[272,285,285,285],285],[[272,285,285,285],285],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[270,2],285],[[272,3],285],[[278,4],285],[[271,1],285],[[278,14],286],[[272,13],287],[[278,287,3],268],[[278,286,3],274],[[278,285,3],276],[[278,285,3],273],[[278,286,286,285,3],286],[[272,287,287,285,3],287],[[278,286,286,285,3,3],286],[[272,287,287,285,3,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286,286,286],286],[[272,287,287,287],287],[[278,286,286,286,3],286],[[272,287,287,287,3],287],[[278,286],286],[[272,287],287],[[278,286,3],286],[[272,287,3],287],[[278,286,282,283],286],[[272,287,282,283],287],[[278,286,282,283,3],286],[[272,287,282,283,3],287],[[271,285,285,3],285],[[271,285,285,3],285],[[271,285,285],285],[[272,287,268,3],287],[[278,286,274,3],286],[[272,285,276,3],285],[[278,285,273,3],285],[[272,3],285],[[278,4],285],[[278,14],286],[[272,13],287],[[270,2],285],[[272,3],285],[[278,4],285],[[271,1],285],[[278,14],286],[[272,13],287],[[272,285],285],[[278,285],285],[[272,285,285],285],[[270,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[278,286],286],[[272,287],287],[[272,287],287],[[278,285,285],285],[[278,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[270,285,285],285],[[270,285,285],285],[[270,285,285],285],[[272,285,285],285],[[271,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[270,285,285],285],[[271,285,285],285],[[270,285,285],285],[[278,286,3],286],[[272,287,3],287],[[278,286,285],286],[[272,287,285],287],[[270,285,285,285],285],[[272,285,285,285],285],[[278,285,285,285],285],[[271,285,285,285],285],[[278,286,285,286],286],[[272,287,285,287],287],[[278,285,3],285],[[278,286,3],286],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,285,286],286],[[272,285,287],287],[[270,285],285],[[272,285],285],[[278,285],285],[[271,285],285],[[278,286],286],[[272,287],287],[[272,285,3],285],[[278,285,3],285],[[272,285,285],285],[[278,285,285],285],[[272,285,3],285],[[278,285,3],285],[[272,285,285],285],[[278,285,285],285],[[278,286,3],286],[[272,287,3],287],[[278,286,3,3],286],[[272,287,3,3],287],[[278,286],286],[[272,287],287],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,2],285],[[272,3],285],[[278,4],285],[[271,1],285],[[270,285,285,3],285],[[272,285,285,3],285],[[278,285,285,3],285],[[270,285,285,285],285],[[272,285,285,285],285],[[278,285,285,285],285],[[270,285,285,3],285],[[272,285,285,3],285],[[278,285,285,3],285],[[270,285,285,285],285],[[272,285,285,285],285],[[278,285,285,285],285],[[272,285,284],285],[[271,285,285],285],[[272,287,287,3],287],[[278,286,286,3],286],[[272,285,285,3],285],[[278,285,285,3],285],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,3],285],[[270,285,3],285],[[270,285,276],285],[[272,285,276],285],[[278,285,276],285],[[270,285,9],285],[[272,285,9],285],[[278,285,9],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[278,286],286],[[272,287],287],[[278,286,3],286],[[272,287,3],287],[[270,285,276],285],[[272,285,276],285],[[278,285,276],285],[[270,285,9],285],[[272,285,9],285],[[278,285,9],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[270,285,276],285],[[272,285,276],285],[[278,285,276],285],[[270,285,3],285],[[272,285,9],285],[[278,285,9],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[278,286,286,3],286],[[272,287,287,3],287],[[270,285,285],285],[[271,285,285],285],[[270,285,285],285],[[271,285,285],285],[[272,285,285,285,3],285],[[278,285,285,285,3],285],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[270,285,285],285],[[272,285,285],285],[[278,285,285],285],[[271,285,285],285],[[278,286,286],286],[[272,287,287],287],[[272,285,285],285],[[278,285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[286,286],[287,287],[287,287],[285,270],[285,271],[270,285],[271,285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,3],286],[[287,3],287],[[285,285],285],[[286,285],286],[[287,285],287],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[286,285,286],286],[[287,285,287],287],[[285,3],285],[[286,3],286],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,286],286],[[285,287],287],[285,285],[285,285],[285,285],[285,285],[286,286],[287,287],[285,3],[285,4],[286,14],[287,13],[285,3],[285,4],[285,3],[285,4],[285,9],[285,10],[286,14],[287,13],[285,3],[285,4],[285,9],[285,10],[286,14],[287,13],[285,3],[285,4],[286,14],[287,13],[285,3],[285,4],[[285,3],285],[[285,3],285],[[285,285],285],[[285,285],285],[[285,3],285],[[285,3],285],[[285,285],285],[[285,285],285],[[286,3],286],[[287,3],287],[[286,3,3],286],[[287,3,3],287],[286,286],[287,287],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[2,285],[3,285],[4,285],[1,285],[14,286],[13,287],[[3,3,3,3],285],[[4,4,4,4],285],[[14,14,14,14],286],[[13,13,13,13],287],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],285],[[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],285],[[4,4,4,4,4,4,4,4],285],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],285],[[14,14,14,14,14,14,14,14],286],[[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],287],[[3,3,3,3],285],[[4,4,4,4],285],[[14,14,14,14],286],[[13,13,13,13],287],[[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],285],[[4,4,4,4,4,4,4,4],285],[[14,14,14,14,14,14,14,14],286],[[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],287],[[],287],[[],285],[[],286],[[],287],[[],285],[[285,285,3],285],[[285,285,3],285],[[285,285,3],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,285,3],285],[[285,285,3],285],[[285,285,3],285],[[285,285,285],285],[[285,285,285],285],[[285,285,285],285],[[285,284],285],[[285,285],285],[[287,287,3],287],[[286,286,3],286],[[285,285,3],285],[[285,285,3],285],[[286,286,3],286],[[287,287,3],287],[[285,3],285],[[285,3],285],[[285,276],285],[[285,276],285],[[285,276],285],[[285,9],285],[[285,9],285],[[285,9],285],[[285,285],285],[[285,285],285],[[285,285],285],[286,286],[287,287],[[286,3],286],[[287,3],287],[[285,276],285],[[285,276],285],[[285,276],285],[[285,9],285],[[285,9],285],[[285,9],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,276],285],[[285,276],285],[[285,276],285],[[285,9],285],[[285,9],285],[[285,9],285],[[285,285],285],[[285,285],285],[[285,285],285],[[3,285],15],[[4,285],15],[[14,286],15],[[13,287],15],[[3,285],15],[[2,285],15],[[3,285],15],[[4,285],15],[[1,285],15],[[14,286],15],[[13,287],15],[[3,285],15],[[14,286],15],[[13,287],15],[[4,285],15],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[286,286,3],286],[[287,287,3],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285,285,3],285],[[285,285,285,3],285],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[285,285],270],[[285,285],272],[[285,285],278],[[285,285],271],[[],287],[[],285],[[],286],[[],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[285,285],285],[[285,285],285],[[285,285],285],[[285,285],285],[[286,286],286],[[287,287],287],[[285,285],285],[[285,285],285],[[285,285],285],[277,286],[274,286],[268,287],[275,287],[276,285],[273,285],[276,276],[276,276],[276,276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[276,276],[[276,3],276],[[276,276,3],276],[[276,276,3],276],[[276,276,3],276],[[277,277],277],[[268,268],268],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],272],[[276,276,3],276],[[276,276,3],276],[[277,277,3],277],[[268,268,3],268],[[276,276,276],276],[[277,277,277],277],[[268,268,268],268],[13,268],[276,276],[276,276],[278,276],[272,276],[276,276],[277,277],[268,268],[276,276],[[276,3],276],[[276,3],276],[277,268],[277,276],[268,277],[268,276],[276,277],[276,268],[277,277],[268,268],[[277,277],277],[[268,268],268],[7,15],[[276,276,3],276],[[276,276,3],278],[[276,276,279],278],[[276,276,279],278],[[276,276,3],272],[[276,276,3],278],[[276,276,279],278],[[276,276,279],278],[[276,276,3],272],[[277,277,3],277],[[277,277,3],278],[[268,268,3],268],[[268,268,3],278],[[277,277,3,3],278],[[268,268,3,3],278],[[277,277,3],277],[[277,277,3],278],[[268,268,3],268],[[268,268,3],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,3,276,3,3],276],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,3,276,3,3],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276,3],3],[[276,276,3],3],[[276,276,3],3],[[276,276,3],276],[[276,276,3],3],[[276,276,3],3],[[276,276,3],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],278],[[276,276],276],[[276,276],278],[[276,276],278],[[276,276],276],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277],277],[[268,268],268],[[277,277,3,3],3],[[268,268,3,3],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[276,276],[276,276],[[9,8],9],[[9,9],9],[[10,10],10],[[9,7],9],[[268,3,3],268],[[277,4,3],277],[[268,4,3],268],[[277,3],3],[[277,3],4],[[277,3],3],[[277,3],4],[[268,277,3],268],[[277,3],9],[[277,3],10],[[268,3,3],268],[[277,4,3],277],[[268,4,3],268],[[268,3],3],[[268,3],4],[[277,268,3],277],[[268,3],3],[[268,3],4],[[268,3],9],[[268,3],10],[[268,9,3],268],[[277,10,3],277],[[268,10,3],268],[[268,3],268],[268,3],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,277],[276,268],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,277],[276,276],[276,276],[276,276],[[277,3],277],[[268,3],268],[[277,4],277],[[268,4],268],[[268,268],281],[277,276],[277,276],[277,268],[276,268],[268,276],[268,276],[268,277],[[268,3],276],[277,14],[277,3],[277,4],[277,3],[277,4],[277,4],[[268,277],268],[277,9],[277,10],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[276,3],[276,4],[276,4],[[277,3],277],[3,276],[[268,3],268],[[277,4],277],[4,276],[[268,4],268],[[277,4],277],[4,276],[268,13],[268,3],[268,4],[[277,268],277],[268,3],[268,4],[268,9],[268,10],[[277,3],3],[[277,3],4],[[277,3],3],[[277,3],4],[[277,3],9],[[277,3],10],[[268,3],3],[[268,3],4],[[268,3],3],[[268,3],4],[[268,3],9],[[268,3],10],[268,3],[277,276],[277,276],[268,276],[268,276],[277,3],[277,4],[277,3],[277,4],[277,4],[277,9],[277,10],[268,3],[268,4],[268,3],[268,4],[268,9],[268,10],[[277,9],277],[[268,9],268],[[277,10],277],[[268,10],268],[276,276],[276,276],[276,276],[276,276],[276,276],[276,276],[[276,276,3],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[268,281,281],268],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,3],3],[[276,3],3],[[276,3],4],[[276,3],3],[[268,3],3],[[276,276],276],[[277,277,276,3],277],[[268,268,276,3],268],[[277,277,276,3,3],277],[[268,268,276,3,3],268],[[277,277,276,3],277],[[268,268,276,3],268],[277,277],[268,268],[[277,277],277],[[268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277],277],[[268,268,268],268],[[277,277,277,3],277],[[268,268,268,3],268],[[277,277,277],277],[[268,268,268],268],[[],9],[277,277],[268,268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[277,282,283],277],[[268,282,283],268],[[277,277,282,283,3],277],[[268,268,282,283,3],268],[[277,277,282,283],277],[[268,268,282,283],268],[[276,276,3],276],[[276,276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[3,276,3],276],[[4,276,3],276],[[14,276,3],277],[[13,276,3],268],[[3,276,3],276],[[4,276,3],276],[[14,276,3],277],[[13,276,3],268],[[276,3,3],276],[[276,3,3],276],[[276,4,3],276],[[276,3,3],276],[[268,268,3],268],[[276,276],276],[276,276],[[],15],[14,277],[13,268],[3,276],[4,276],[14,277],[14,277],[13,268],[13,268],[14,277],[276,276],[13,268],[14,277],[[277,14],277],[276,276],[[277,14],277],[14,277],[13,268],[2,276],[3,276],[4,276],[1,276],[14,277],[13,268],[276,276],[7,276],[276,276],[276,276],[[276,276,276],276],[[276,276,276],276],[[276,276],276],[[276,276],276],[[276,276,278,276],276],[[276,276,278,276],276],[[276,276,278,276],276],[[276,276,272,276],276],[[277,276,278,277],277],[[268,276,278,268],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278],277],[[268,268,268,278],268],[[277,277,277,278,3],277],[[268,268,268,278,3],268],[[277,277,277,278],277],[[268,268,268,278],268],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,272,276,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[272,276,276],272],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[276,272,276],276],[[276,278,276],276],[[276,278,276],276],[[268,278,268],268],[[276,278,276],276],[[278,276,276,3],278],[[278,276,276,279],278],[[278,276,276,279],278],[[272,276,276,3],272],[[278,276,276,3],278],[[278,276,276,279],278],[[278,276,276,279],278],[[272,276,276,3],272],[[278,277,277,3],278],[[278,268,268,3],278],[[278,277,277,3,3],278],[[278,268,268,3,3],278],[[278,277,277,3],278],[[278,268,268,3],278],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[7,278,276],15],[[7,278,276],15],[[7,278,276],15],[[7,272,276],15],[[7,278,277],15],[[7,278,268],15],[[276,278,276],276],[[276,278,276],276],[[276,278,268,3],276],[[268,278,268,277,3],268],[[277,278,277,268,3],277],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[277,278,276],277],[[268,278,276],268],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[277,278,276],277],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[281,278,268,268],281],[[276,278,277],276],[[276,278,277],276],[[268,278,277],268],[[268,278,276],268],[[276,278,268],276],[[276,278,268],276],[[276,278,268,3],276],[[268,278,268,277],268],[[276,278,276],276],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[1,278,276],15],[[277,278,277,268],277],[[276,278,277],276],[[276,278,277],276],[[276,278,268],276],[[276,278,268],276],[[276,278,276],276],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[1,278,276],15],[[1,278,276],15],[[1,278,276],15],[[276,278,276,276,3],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[268,278,281,281],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[276,278,2],276],[[276,278,3],276],[[276,278,4],276],[[276,272,1],276],[[277,278,14],277],[[268,278,13],268],[[277,278,277,276,3],277],[[268,278,268,276,3],268],[[277,278,277,276,3,3],277],[[268,278,268,276,3,3],268],[[277,278,277,276,3],277],[[268,278,268,276,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,282,283],277],[[268,278,268,282,283],268],[[277,278,277,277,282,283,3],277],[[268,278,268,268,282,283,3],268],[[277,278,277,277,282,283],277],[[268,278,268,268,282,283],268],[[276,272,276,276,3],276],[[276,272,276,276,3],276],[[276,272,276,276],276],[[276,3,276,276,3],276],[[276,4,276,276,3],276],[[277,14,276,277,3],277],[[268,13,276,268,3],268],[[276,3,276,276,3],276],[[276,4,276,276,3],276],[[277,14,276,277,3],277],[[268,13,276,268,3],268],[[276,278,3],276],[[276,278,4],276],[[277,278,14],277],[[268,278,13],268],[[276,278,2],276],[[276,278,3],276],[[276,278,4],276],[[276,272,1],276],[[277,278,14],277],[[268,278,13],268],[[276,278,276],276],[[276,278,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277],277],[[268,278,268],268],[[268,278,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[277,278,277,3],277],[[268,278,268,3],268],[[277,278,277,276],277],[[268,278,268,276],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,276,277],277],[[268,278,276,268],268],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276],276],[[276,278,276],276],[[276,278,276],276],[[276,272,276],276],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,3],276],[[276,278,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,3],276],[[276,278,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[277,278,277,3],277],[[268,278,268,3],268],[[277,278,277,277,3,3],277],[[268,278,268,268,3,3],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,2],276],[[276,278,3],276],[[276,278,4],276],[[276,272,1],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,284],276],[[276,272,276,276],276],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[276,278,276,3],276],[[276,278,276,3],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[277,278,277],277],[[268,278,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,3],276],[[276,278,276,9],276],[[276,278,276,9],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[3,278,276],15],[[4,278,276],15],[[14,278,277],15],[[13,278,268],15],[[2,278,276],15],[[3,278,276],15],[[4,278,276],15],[[1,272,276],15],[[14,278,277],15],[[13,278,268],15],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[277,278,277,277,3],277],[[268,278,268,268,3],268],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[276,278,276,276,3],276],[[276,278,276,276,3],276],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[278,276,276],278],[[278,276,276],278],[[278,276,276],278],[[272,276,276],272],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[276,278,276,276],276],[[276,272,276,276],276],[[277,278,277,277],277],[[268,278,268,268],268],[[276,278,276,276],276],[[276,278,276,276],276],[[3,276],276],[[4,276],276],[[14,276],277],[[13,276],268],[[276,276,1],15],[[3,276,276],15],[[4,276,276],15],[[14,276,277],15],[[13,276,268],15],[[278,276],276],[[278,276],276],[[272,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276,3],276],[[278,276,276,3],276],[[272,276,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[272,276],276],[[278,276],276],[[278,276],276],[[278,268],268],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,276],276],[[278,276],276],[[278,268,3],276],[[278,268,277,3],268],[[278,277,268,3],277],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],277],[[278,276],268],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],277],[[278,276],276],[[278,276],276],[[278,276],276],[[278,268,268],281],[[278,277],276],[[278,277],276],[[278,277],268],[[278,276],268],[[278,268],276],[[278,268],276],[[278,268,3],276],[[278,268,277],268],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,277,268],277],[[278,277],276],[[278,277],276],[[278,268],276],[[278,268],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[278,276,276,3],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,268,281,281],268],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,2],276],[[278,3],276],[[278,4],276],[[272,1],276],[[278,14],277],[[278,13],268],[[278,277,277,276,3],277],[[278,268,268,276,3],268],[[278,277,277,276,3,3],277],[[278,268,268,276,3,3],268],[[278,277,277,276,3],277],[[278,268,268,276,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277,277,277,3],277],[[278,268,268,268,3],268],[[278,277,277,277],277],[[278,268,268,268],268],[[278,277],277],[[278,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,277,282,283],277],[[278,268,282,283],268],[[278,277,277,282,283,3],277],[[278,268,268,282,283,3],268],[[278,277,277,282,283],277],[[278,268,268,282,283],268],[[272,276,276,3],276],[[272,276,276,3],276],[[272,276,276],276],[[278,3],276],[[278,4],276],[[278,14],277],[[278,13],268],[[278,2],276],[[278,3],276],[[278,4],276],[[272,1],276],[[278,14],277],[[278,13],268],[[278,276],276],[[278,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,277,277],277],[[278,268,268],268],[[278,277],277],[[278,268],268],[[278,268],268],[[278,276,276],276],[[278,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[278,277,3],277],[[278,268,3],268],[[278,277,276],277],[[278,268,276],268],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[272,276,276,276],276],[[278,277,276,277],277],[[278,268,276,268],268],[[278,276,276],276],[[272,276,276],276],[[278,276],276],[[278,276],276],[[278,276],276],[[272,276],276],[[278,277],277],[[278,268],268],[[278,277,277],277],[[278,268,268],268],[[278,276,3],276],[[278,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,3],276],[[278,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,277,3],277],[[278,268,3],268],[[278,277,277,3,3],277],[[278,268,268,3,3],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277],277],[[278,268],268],[[278,277,277],277],[[278,268,268],268],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,2],276],[[278,3],276],[[278,4],276],[[272,1],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,3],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,276,276],276],[[278,276,284],276],[[272,276,276],276],[[278,277,277,3],277],[[278,268,268,3],268],[[278,276,3],276],[[278,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,9],276],[[278,276,9],276],[[278,276,9],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,277],277],[[278,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,9],276],[[278,276,9],276],[[278,276,9],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,3],276],[[278,276,9],276],[[278,276,9],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,277,277,3],277],[[278,268,268,3],268],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[272,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,276,276,276,3],276],[[278,276,276,276,3],276],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[278,276,276],276],[[272,276,276],276],[[278,277,277],277],[[278,268,268],268],[[278,276,276],276],[[278,276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[],15],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[276,276],[276,276],[[277,277],277],[[268,268],268],[277,277],[268,268],[[268,268],268],[268,268],[[268,268],268],[276,3],[277,3],[268,3],[276,278],[276,272],[278,276],[272,276],[[276,276,3],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[],15],[[277,3],277],[[268,3],268],[[277,276],277],[[268,276],268],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[277,276,277],277],[[268,276,268],268],[[276,276],276],[[276,276],276],[276,276],[276,276],[276,276],[276,276],[[1,3],15],[277,277],[268,268],[[277,277],277],[[268,268],268],[268,268],[268,268],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[277,3],277],[[268,3],268],[[277,277,3],277],[[268,268,3],268],[[277,3],277],[[268,3],268],[[277,277,3,3],277],[[268,268,3,3],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[268,268],[268,268],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[2,276],[3,276],[4,276],[1,276],[14,277],[13,268],[[2,2,2,2,2,2,2,2],276],[[3,3,3,3],276],[[4,4],276],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],276],[[14,14],277],[14,277],[[13,13,13,13],268],[13,268],[14,277],[13,268],[9,15],[[2,2,2,2,2,2,2,2],276],[[3,3,3,3],276],[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],276],[[14,14],277],[[13,13,13,13],268],[[],277],[[],268],[[],276],[[],15],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276,3],276],[[276,276],276],[[276,276],276],[[276,276,276],276],[[276,276,3],276],[[276,276,3],276],[[276,276,3],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,276,3],276],[[276,276,3],276],[[276,276,3],276],[[276,276,276],276],[[276,276,276],276],[[276,276,276],276],[[276,3],276],[[276,276],276],[[277,277,3],277],[[268,268,3],268],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[277,277],[268,268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[268,268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,9],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,3],276],[[276,276],276],[[276,276],276],[[276,276],276],[[14,277],15],[[13,268],15],[[3,276],15],[[4,276],15],[[14,277],15],[[14,277],15],[[13,268],15],[[13,268],15],[[14,277],15],[[276,276],15],[[13,268],15],[[14,277],15],[[276,276],15],[[14,277],15],[[14,277],15],[[13,268],15],[[2,276],15],[[3,276],15],[[4,276],15],[[1,276],15],[[14,277],15],[[13,268],15],[[276,276],15],[[14,277],15],[[13,268],15],[[14,277],15],[[276,276],15],[[3,3],15],[[4,4],15],[[13,268],15],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[277,277,3],277],[[268,268,3],268],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276,276,3],276],[[276,276,276,3],276],[276,3],[[276,276],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[276,276],3],[[277,277],3],[[268,268],3],[[276,276],3],[[276,276],278],[[276,276],278],[[276,276],278],[[276,276],272],[[277,277],3],[[268,268],3],[[276,276],3],[[277,277],3],[[268,268],3],[[276,276],3],[9,3],[10,4],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[277,277],3],[[268,268],3],[[],277],[[],268],[[],276],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[276,276],276],[[277,277],277],[[268,268],268],[[276,276],276],[[9,9,9],9],[[10,10,10],10],[[9,9],9],[[10,10],10],[[9,9],9],[[10,10],10],[3,3],[4,3],[8,3],[9,3],[10,3],[8,3],[9,3],[10,3],[[],10],[[9,270],15],[[10,271],15],[[7,9,9,9],7],[[7,10,10,10],7],[9,9],[10,10],[9,9],[10,10],[9,9],[10,10],[9,15],[9,9],[[],9],[[],15],[9,10],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[7,10],15],[[9,10],15],[[],7],[[11,11,11,325,325],11],0,0,0,0,[[],33],0,0,[[[326,[-1]],12],[[30,[15,47]]],[]],[[[326,[-1]],12],[[30,[15,47]]],[]],[[[326,[-1]]],[[16,[-1]]],[]],[[[326,[-1]]],[[16,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[326,[-1]]],[[326,[-1]]],57],[137,137],[[[326,[-1]]],12,[]],[137,24],[[[326,[-1]]],15,[]],[[],[[326,[-1]]],[]],[[[326,[-1]],77],78,79],[[137,77],78],[[137,77],78],[[[326,[-1]],-2,-3],-2,[],[],32],[-1,-1,[]],[-1,-1,[]],[327,137],[-1,[[23,[-2]]],32,[]],[-1,[[23,[-1]]],[]],[-1,[[23,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[326,[-1]]],33,[]],[[[326,[-1]]],22,[]],[[[326,[-1]]],12,[]],[[[23,[-1]]],[[326,[-1]]],[]],[[[23,[[29,[-1]]]],[26,[12]]],[[326,[-1]]],[]],[[[326,[-1]]],22,[]],[[[326,[-1]]],22,[]],[[[326,[-1]],-2,-3],-2,[],[],32],[[[326,[-1]]],[[15,[12,[22,[12]]]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[],32],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[69,12],[[30,[15,47]]]],[[69,12],[[30,[15,47]]]],[21,24],[[21,12],[[22,[21]]]],[[21,12],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[69,69],[[21,21],58],[69,12],[7,[[22,[21]]]],[7,21],[[21,21],33],[7,69],[[21,77],78],[[21,77],78],[[69,77],78],[[69,77],78],[[21,12],[[22,[21]]]],[[21,12],21],[-1,-1,[]],[-1,-1,[]],[7,[[22,[21]]]],[7,21],[[21,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,[[22,[7]]]],[69,12],[69,[[22,[7]]]],[69,[[22,[7]]]],[[21,21],[[22,[58]]]],[69,[[15,[12,[22,[12]]]]]],[[21,21],[[22,[12]]]],[21,20],[21,7],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[328,[-1]]],[[328,[-1]]],57],[[[328,[-1]],77],78,79],[-1,-1,[]],[-1,328,64],[-1,-2,[],[]],[[[329,[-1]],330],[[331,[22]]],[]],[[[329,[[328,[-1]]]],330],[[331,[22]]],107],[-1,[[15,[12,[22,[12]]]]],[]],[-1,[[15,[12,[22,[12]]]]],[]],[[[328,[-1]]],[[15,[12,[22,[12]]]]],107],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[[332,[[23,[-1]]]]],[[23,[[332,[-1]]]]],[]],[[[332,[-1]]],[],25],[[[333,[-1]]],[],25],[[[332,[[16,[-1]]]]],[[16,[[332,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[333,[-1]]],[[334,[-1]]],25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[333,[-1]]],[[335,[-1]]],25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[336,[-1]]],[[336,[-1]]],57],[[[332,[-1]]],[[332,[-1]]],61],[[[333,[-1]]],[[333,[-1]]],57],[[[334,[-1]]],[[334,[-1]]],25],[[[333,[-1]],[333,[-1]]],15,57],[[[332,[-1]],[332,[-1]]],58,[31,61]],[[[333,[-1]],[333,[-1]]],58,[25,31]],[[],[[337,[-1]]],65],[[],[[336,[-1]]],[]],[[],[[332,[-1]]],65],[[],[[333,[-1]]],65],[[],[[338,[-1]]],65],[[],[[339,[-1]]],65],[[[337,[-1,-2]]],-1,[],102],[[[334,[-1]]],-1,25],[[[335,[-1]]],-1,25],[[[335,[-1]]],-1,25],[340,24],[341,24],[[[336,[-1]],[336,[-1]]],33,59],[[[332,[-1]],[332,[-1]]],33,[59,61]],[[[333,[-1]],[333,[-1]]],33,[25,59]],[[[334,[-1]],-2],[[30,[[334,[-3]],[334,[-1]]]]],25,102,25],[[[335,[-1]],-2],[[30,[[335,[-3]],[335,[-1]]]]],25,102,25],[[[337,[-1,-2]],77],78,79,[]],[[[336,[-1]],77],78,79],[[[332,[-1]],77],78,[61,79]],[[[333,[-1]],77],78,[25,79]],[[340,77],78],[[340,77],78],[[341,77],78],[[341,77],78],[[[334,[-1]],77],78,[25,79]],[[[334,[-1]],77],78,[25,342]],[[[335,[-1]],77],78,[25,79]],[[[335,[-1]],77],78,[25,342]],[[[338,[-1]],77],78,25],[[[339,[-1]],77],78,25],[[[337,[-1,-2]]],-1,[],102],[-1,-1,[]],[-1,-1,[]],[56,-1,[]],[-1,[[336,[-1]]],[]],[56,-1,[]],[-1,[[332,[-1]]],[]],[-1,-1,[]],[56,-1,[]],[-1,[[333,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[338,[-1]]],[]],[56,-1,[]],[-1,-1,[]],[56,-1,[]],[-1,[[339,[-1]]],[]],[-1,-1,[]],[-1,[[332,[-1]]],25],[-1,[[338,[-1]]],25],[[[332,[-1]],[332,[-1]]],33,[86,61]],[[[333,[-1]],[333,[-1]]],33,[25,86]],[[[336,[-1]]],[[22,[-1]]],[]],[[[332,[-1]]],-1,61],[[[338,[-1]]],[],25],[[[339,[-1]]],[],25],[[[336,[-1]]],[[22,[-1]]],[]],[[[332,[-1]]],-1,25],[[[333,[-1]]],-1,25],[[[338,[-1]]],-1,25],[[[339,[-1]]],-1,25],[[[336,[-1]],-2],-1,[],102],[[[336,[-1]],-2],[[30,[-1,-3]]],[],102,[]],[[[332,[-1]],[332,[-1]]],33,[86,61]],[[[333,[-1]],[333,[-1]]],33,[25,86]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[337,[-1,-2]]],[[30,[-1,-2]]],[],102],[[[336,[-1]]],[[22,[-1]]],[]],[[[332,[-1]]],-1,[]],[[[333,[-1]]],-1,[]],[[[338,[-1]]],-1,[]],[[[339,[-1]]],-1,[]],[[[332,[-1]],[332,[-1]]],33,[86,61]],[[[333,[-1]],[333,[-1]]],33,[25,86]],[[[334,[-1]]],-1,25],[[[335,[-1]]],-1,25],[[[332,[-1]],[332,[-1]]],33,[86,61]],[[[333,[-1]],[333,[-1]]],33,[25,86]],[[[334,[-1]],-2],[[334,[-3]]],25,102,25],[[[335,[-1]],-2],[[335,[-3]]],25,102,25],[[[334,[-1]],-2],[[15,[[334,[-3]],[334,[-4]]]]],25,102,25,25],[[[335,[-1]],-2],[[15,[[335,[-3]],[335,[-4]]]]],25,102,25,25],[-1,[[337,[-2,-1]]],102,[]],[[],[[336,[-1]]],[]],[-1,[[332,[-1]]],[]],[-1,[[333,[-1]]],[]],[-1,[[338,[-1]]],[]],[-1,[[339,[-1]]],[]],[[[332,[-1]],[332,[-1]]],[[22,[58]]],[86,61]],[[[333,[-1]],[333,[-1]]],[[22,[58]]],[25,86]],[[]],[[]],[[[332,[-1]],-1],-1,[]],[[[333,[-1]],-1],-1,[]],[[[333,[-1]],-2],-1,[],102],[[[336,[-1]],-1],[[30,[15,-1]]],[]],[[[332,[-1]],-1],15,[]],[[[332,[-1]],[332,[-1]]],15,[]],[[[333,[-1]],[333,[-1]]],15,[]],[[[336,[-1]]],[[22,[-1]]],[]],[[[332,[-1]]],-1,65],[[[333,[-1]]],-1,65],[[[333,[-1]]],[[30,[[334,[-1]],340]]],25],[[[333,[-1]]],[[30,[[335,[-1]],341]]],25],[[[333,[-1]]],[[30,[-1,340]]],25],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[[333,[-1]]],-1,25],[[[332,[-1]],-2],-1,61,102],0,0,0,0,0,0,0,0,0,0,0,0,0,[[74,12],[[30,[15,47]]]],[[72,12],[[30,[15,47]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[343,343],[344,344],[[[63,[-1]]],[[63,[-1]]],[107,57]],[345,345],[74,74],[72,72],[70,70],[135,135],[136,136],[346,346],[74,12],[72,12],[70,12],[-1,63,64],[343,24],[344,24],[345,24],0,0,[[343,343],33],[[344,344],33],[[345,345],33],[[346,346],33],[[343,77],78],[[343,77],78],[[344,77],78],[[344,77],78],[[[63,[-1]],77],78,[107,79]],[[345,77],78],[[345,77],78],[[74,77],78],[[74,77],78],[[72,77],78],[[72,77],78],[[70,77],78],[[70,77],78],[[135,77],78],[[135,77],78],[[136,77],78],[[136,77],78],[[346,77],78],[[346,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[9,9],[[22,[20]]]],[9,[[22,[20]]]],[9,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[74,[[22,[20]]]],[72,[[22,[20]]]],[74,12],[72,12],[70,12],[[[63,[-1]]],[[22,[[30,[20,345]]]]],107],[74,[[22,[20]]]],[72,[[22,[20]]]],[70,[[22,[20]]]],[135,[[22,[20]]]],[136,[[22,[20]]]],[135,[[22,[20]]]],[136,[[22,[20]]]],[[[63,[-1]]],[[15,[12,[22,[12]]]]],107],[74,[[15,[12,[22,[12]]]]]],[72,[[15,[12,[22,[12]]]]]],[70,[[15,[12,[22,[12]]]]]],[135,[[15,[12,[22,[12]]]]]],[136,[[15,[12,[22,[12]]]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[345,8],0,0,[-1,-1,[]],[[-1,-1],15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-1],-1,[25,86]],[58,58],[[[347,[-1]]],[[347,[-1]]],57],[[[347,[-1]],[347,[-1]]],15,57],[[-1,-1],58,[]],[[58,58],58],[[[347,[-1]],[347,[-1]]],58,31],[[],[[347,[-1]]],65],[[-1,-2],33,[],[]],[[58,58],33],[[[347,[-1]],[347,[-1]]],33,59],[[58,77],78],[[[347,[-1]],77],78,79],[-1,-1,[]],[-1,-1,[]],[[-1,-2],33,[],[]],[[[347,[-1]],[347,[-1]]],33,86],[[-1,-2],33,[],[]],[[[347,[-1]],[347,[-1]]],33,86],[[58,-1],15,91],[[[347,[-1]],-2],15,92,91],[-1,-2,[],[]],[-1,-2,[],[]],[58,33],[58,33],[58,33],[58,33],[58,33],[58,33],[[-1,-2],33,[],[]],[[[347,[-1]],[347,[-1]]],33,86],[[-1,-2],33,[],[]],[[[347,[-1]],[347,[-1]]],33,86],[[-1,-1],-1,31],[[-1,-1],-1,25],[[-1,-1,-2],-1,[],102],[[-1,-1,-2],-1,[],32],[[-1,-1],-1,31],[[-1,-1],-1,25],[[-1,-1,-2],-1,[],102],[[-1,-1,-2],-1,[],32],[[-1,-1],[[23,[-1]]],31],[[-1,-1,-2],[[23,[-1]]],[],102],[[-1,-1,-2],[[23,[-1]]],[],32],[[-1,-2],33,[],[]],[[-1,-2],[[22,[58]]],[],[]],[[58,58],[[22,[58]]]],[[[347,[-1]],[347,[-1]]],[[22,[58]]],86],[58,58],[[58,58],58],[[58,-1],58,102],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[327,327],[[327,327],58],[327,24],[[327,327],33],[[327,77],78],[[327,77],78],[-1,-2,[],[]],[-1,-1,[]],[56,327],[56,-1,[]],[[327,-1],15,91],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[327,327],[[22,[58]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],0,0,[[],-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[22,[348]]],[]],[349,349],[-1,24,[]],[348,[[22,[-1]]],348],[348,[[22,[-1]]],348],[348,[[22,[-1]]],348],[348,[[22,[-1]]],348],[348,[[22,[-1]]],348],[348,[[22,[-1]]],348],[[350,77],78],[[349,77],78],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[348,33],[348,33],[348,33],[349,22],[[-1,350],15,[]],[[350,-1],350,25],[[350,-1],350,102],[[350,-1],350,[]],[[350,-1],350,102],[-1,[[22,[-2]]],[348,25],25],[-1,[[22,[-2]]],[348,25],[]],[-1,[[22,[348]]],[]],[348,349],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[350,33],[350,33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[351,-1,0],[352,353],[352,352],[351,354],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[355,355],[356,356],[351,351],[[352,352],58],[352,12],[[],352],[354,351],[354,351],[355,24],[351,15],[[352,352],33],[[355,355],33],[[356,356],33],[[357,77],78],[[352,77],78],[[355,77],78],[[355,77],78],[[356,77],78],[[356,77],78],[[351,77],78],[[354,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[16,[7]]],[[30,[352,356]]]],[[[16,[7]]],[[30,[352,355]]]],[[[16,[7]]],352],[353,352],[[352,-1],15,91],[[352,[358,[12]]],352],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[352,33],[[352,352],[[22,[58]]]],[352,[[16,[7]]]],[352,[[16,[7]]]],[352,[[30,[24,359]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[351,-1],-2,102,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[77,[[22,[360]]]],[77,33],[361,[[22,[24]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[360,360],[80,80],[361,361],[[80,80],58],[77,362],[77,363],[77,364],[[77,24],365],[[77,24],366],[[],80],[80,24],[[364,-1],364,64],[[362,-1],362,64],[[363,-1],363,64],[[364,79],364],[[362,79],362],[[363,79,79],363],[[360,360],33],[[80,80],33],[[365,24,79],365],[[366,79],366],[77,20],[365,78],[366,78],[364,78],[362,78],[363,78],[365,78],[77,9],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[-1,77],78,[]],[[360,77],78],[[80,77],78],[[80,77],78],[[361,77],78],[[361,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[80,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[363,79],363],[[77,24],78],[[77,33,24,24],78],[[80,80],[[22,[58]]]],[77,[[22,[12]]]],[77,33],[77,33],[77,33],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[363,79],363],[77,[[22,[12]]]],[[367,361],78],[[-1,20],78,[]],[[77,20],78],[[-1,361],78,[]],[[77,361],78],[[77,361],78],[[-1,24],78,[]],[[77,24],78],[[77,24],78],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[368,[-1]]],[[368,[-1]]],[]],[[[369,[-1]]],[[369,[-1]]],57],[[[368,[-1]],77],78,[]],[[[370,[-1]],77],78,[]],[[[369,[-1]],77],78,79],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[369,[-1]]],-1,[]],0,[[],[[368,[-1]]],[]],[[[329,[-1]],330],331,[]],[[[329,[[368,[-1]]]],330],[[331,[-1]]],[]],[[[329,[[370,[-1]]]],330],[[331,[-2]]],32,[]],[[[329,[[369,[-1]]]],330],[[331,[-1]]],[]],[-1,[[370,[-1]]],32],[-1,[[369,[-1]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[371,[-1]]],-1,[65,91]],[[[371,[-1]]],[[371,[-1]]],[]],[372,372],[[],[[371,[-1]]],[]],[[],372],[[[371,[-1]],[371,[-1]]],33,[]],[-1,10,[]],[372,10],[[[371,[-1]],77],78,[]],[[372,77],78],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[],91],[[-1,-2],10,25,92],[[[16,[-1]],-2],15,25,91],[-1,-2,[],[]],[-1,-2,[],[]],[[],372],[[10,10],372],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[[-1,[16,[7]]],15,[]],[[372,[16,[7]]],15],[[-1,5],15,[]],[[-1,2],15,[]],[[-1,3],15,[]],[[-1,4],15,[]],[[-1,1],15,[]],[[-1,6],15,[]],[[-1,12],15,[]],[[-1,24],15,[]],[[372,24],15],[[-1,11],15,[]],[[-1,8],15,[]],[[-1,9],15,[]],[[-1,10],15,[]],[[-1,7],15,[]],[[-1,12],15,[]],[-1,-1,[]],[-1,-1,[]],[[],15],[[],56],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,15],[12,15],0,0,0,0,0,0,0,0,0,0,[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,12],15],0,0,[[15,373],15],[-1,-2,[],[]],[-1,[[15,[-1,33]]],[]],[-1,-1,[]],[-1,15,[]],[-1,[],[]],[[-1,373],15,[]],[[15,9],-1,[]],[373,373],[-1,12,[]],[-1,-1,[]],[[-1,-2],-1,[],[]],[-1,15,[]],[[],373],[[-1,9],15,[]],[-1,-1,[]],[-1,[],[]],[-1,15,[]],[-1,15,[]],[[],373],[[-1,9],15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[374,[-1,-2,-3]],12],[[30,[15,47]]],375,64,32],[[[376,[-1]],12],[[30,[15,47]]],375],[[-1,12],[[30,[15,47]]],[]],[[-1,12],[[30,[15,47]]],[]],[[[377,[-1]],12],[[30,[15,47]]],375],[[[378,[-1,-2]],12],[[30,[15,47]]],375,375],[[[379,[-1]],12],[[30,[15,47]]],375],[[[380,[-1]],12],[[30,[15,47]]],[381,375]],[[[382,[-1]],12],[[30,[15,47]]],375],[[[383,[-1]],12],[[30,[15,47]]],[375,381]],[[[384,[-1]],12],[[30,[15,47]]],[375,381]],[[[385,[-1]],12],[[30,[15,47]]],57],[[[374,[-1,-2,-3]],12],[[30,[15,47]]],107,64,32],[[[376,[-1]],12],[[30,[15,47]]],107],[[-1,12],[[30,[15,47]]],[]],[[-1,12],[[30,[15,47]]],[]],[[[377,[-1]],12],[[30,[15,47]]],107],[[[378,[-1,-2]],12],[[30,[15,47]]],107,107],[[[379,[-1]],12],[[30,[15,47]]],107],[[[386,[-1]],12],[[30,[15,47]]],[57,107]],[[[380,[-1]],12],[[30,[15,47]]],107],[[[382,[-1]],12],[[30,[15,47]]],375],[[[383,[-1]],12],[[30,[15,47]]],107],[[[384,[-1]],12],[[30,[15,47]]],107],[[[385,[-1]],12],[[30,[15,47]]],57],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[-1,[[387,[-1]]],25],[-1,[[387,[-1]]],25],[[-1,12],-1,[]],[[-1,12],-1,[]],[[-1,12],[[22,[-1]]],[]],[[-1,12],-1,[]],[[-1,12],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,25],[-1,-1,25],[[-1,-2],[[378,[-1]]],25,64],[[-1,-2],[[378,[-1]]],25,64],[[[374,[-1,-2,-3]]],[[374,[-1,-2,-3]]],57,[57,64],57],[[[376,[-1]]],[[376,[-1]]],[57,107]],[[[388,[-1,-2]]],[[388,[-1,-2]]],[107,57],57],[[[389,[-1,-2]]],[[389,[-1,-2]]],[107,57],57],[[[390,[-1]]],[[390,[-1]]],[]],[[[387,[-1]]],[[387,[-1]]],[57,107]],[[[378,[-1,-2]]],[[378,[-1,-2]]],57,57],[[[391,[-1]]],[[391,[-1]]],57],[[[379,[-1]]],[[379,[-1]]],57],[[[386,[-1]]],[[386,[-1]]],57],[[[380,[-1]]],[[380,[-1]]],57],[[[392,[-1,-2]]],[[392,[-1,-2]]],57,57],[[[393,[-1,-2]]],[[393,[-1,-2]]],57,57],[[[394,[-1]]],[[394,[-1]]],57],[[[395,[-1,-2]]],[[395,[-1,-2]]],57,57],[[[396,[-1]]],[[396,[-1]]],[57,107]],[[[397,[-1,-2]]],[[397,[-1,-2]]],57,57],[[[398,[-1,-2]]],[[398,[-1,-2]]],57,57],[[[399,[-1]]],[[399,[-1]]],[57,107]],[[[382,[-1]]],[[382,[-1]]],57],[[[400,[-1,-2,-3]]],[[400,[-1,-2,-3]]],57,57,57],[[[383,[-1]]],[[383,[-1]]],57],[[[401,[-1,-2]]],[[401,[-1,-2]]],57,57],[[[402,[-1]]],[[402,[-1]]],57],[[[384,[-1]]],[[384,[-1]]],57],[[[403,[-1,-2]]],[[403,[-1,-2]]],57,57],[[[404,[-1,-2]]],[[404,[-1,-2]]],57,57],[[[405,[-1]]],[[405,[-1]]],57],[[[406,[-1]]],[[406,[-1]]],57],[[[407,[-1]]],[[407,[-1]]],57],[[[385,[-1]]],[[385,[-1]]],57],[[[408,[-1]]],[[408,[-1]]],57],[[[409,[-1,-2]]],[[409,[-1,-2]]],57,57],[-1,[[391,[-1]]],[25,107]],[-1,[[391,[-1]]],[25,107]],[[-1,-2],58,25,64],[[-1,-2],58,25,64],[[-1,-2,-3],58,25,64,32],[[-1,-2,-3],58,25,64,32],[-1,-2,25,410],[-1,-2,25,410],[[-1,-2],-2,25,76],[[-1,-2],-2,25,76],[-1,[[379,[-1]]],[25,107]],[-1,[[379,[-1]]],[25,107]],[[[374,[-1,-2,-3]]],12,107,64,32],[[[376,[-1]]],12,107],[-1,12,25],[-1,12,25],[[[387,[-1]]],12,107],[[[378,[-1,-2]]],12,107,107],[[[379,[-1]]],12,107],[[[380,[-1]]],12,107],[[[392,[-1,-2]]],12,107,32],[[[394,[-1]]],12,107],[[[399,[-1]]],12,107],[[[383,[-1]]],12,107],[[[385,[-1]]],12,57],[-1,[[386,[-1]]],[25,57]],[-1,[[386,[-1]]],[25,57]],[[],[[376,[-1]]],[65,107]],[[],[[390,[-1]]],[]],[[],[[378,[-1,-2]]],65,65],[[],[[391,[-1]]],65],[[],[[379,[-1]]],65],[[],[[380,[-1]]],65],[[],[[394,[-1]]],65],[[],[[382,[-1]]],65],[[],[[390,[-1]]],[]],[-1,[[380,[-1]]],25],[-1,[[380,[-1]]],25],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[[-1,-2,-3],33,25,64,32],[[-1,-2,-3],33,25,64,32],[[-1,-2],15,[],64],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,12],15,[]],[[-1,12],15,[]],[[-1,-2],[[392,[-1,-2]]],25,32],[[-1,-2],[[392,[-1,-2]]],25,32],[[-1,-2],[[393,[-1,-2]]],25,32],[[-1,-2],[[393,[-1,-2]]],25,32],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[[378,[-1,-2]],-3],22,107,107,32],[[[394,[-1]],-2],22,107,32],[[[382,[-1]],-2],22,375,32],[[-1,-2],[[22,[-3]]],25,32,[]],[[-1,-2],[[22,[-3]]],25,32,[]],[[-1,-2],[[374,[-1,-3,-2]]],25,32,64],[[-1,-2],[[374,[-1,-3,-2]]],25,32,64],[-1,[[376,[-1]]],25],[-1,[[376,[-1]]],25],[[[374,[-1,-2,-3]],77],78,79,64,[]],[[[376,[-1]],77],78,[79,107]],[[[388,[-1,-2]],77],78,[107,79],79],[[[389,[-1,-2]],77],78,[107,79],[]],[[[390,[-1]],77],78,[]],[[[387,[-1]],77],78,[79,107]],[[[377,[-1]],77],78,79],[[[378,[-1,-2]],77],78,79,79],[[[391,[-1]],77],78,79],[[[379,[-1]],77],78,79],[[[386,[-1]],77],78,79],[[[380,[-1]],77],78,79],[[[392,[-1,-2]],77],78,79,[]],[[[393,[-1,-2]],77],78,79,[]],[[[394,[-1]],77],78,79],[[[395,[-1,-2]],77],78,79,[]],[[[396,[-1]],77],78,[79,107]],[[[397,[-1,-2]],77],78,79,[]],[[[398,[-1,-2]],77],78,79,[]],[[[399,[-1]],77],78,[79,107]],[[[382,[-1]],77],78,79],[[[400,[-1,-2,-3]],77],78,79,79,[]],[[[383,[-1]],77],78,79],[[[401,[-1,-2]],77],78,79,[]],[[[402,[-1]],77],78,79],[[[384,[-1]],77],78,79],[[[403,[-1,-2]],77],78,79,[]],[[[404,[-1,-2]],77],78,79,79],[[[405,[-1]],77],78,[]],[[[406,[-1]],77],78,79],[[[407,[-1]],77],78,[]],[[[385,[-1]],77],78,79],[[[408,[-1]],77],78,[]],[[[409,[-1,-2]],77],78,79,[]],[[[374,[-1,-2,-3]],-4,-5],-4,107,64,32,[],32],[[[376,[-1]],-2,-3],-2,107,[],32],[[[388,[-1,-2]],-3,-4],-3,107,32,[],32],[[-1,-2,-3],-2,25,[],32],[[-1,-2,-3],-2,25,[],32],[[[387,[-1]],-2,-3],-2,107,[],32],[[[377,[-1]],-2,-3],-2,107,[],32],[[[378,[-1,-2]],-3,-4],-3,107,107,[],32],[[[391,[-1]],-2,-3],-2,107,[],32],[[[379,[-1]],-2,-3],-2,107,[],32],[[[380,[-1]],-2,-3],-2,107,[],32],[[[392,[-1,-2]],-3,-4],-3,107,32,[],32],[[[393,[-1,-2]],-3,-4],-3,107,32,[],32],[[[394,[-1]],-2,-3],-2,107,[],32],[[[395,[-1,-2]],-3,-4],-3,107,32,[],32],[[[396,[-1]],-2,-3],-2,107,[],32],[[[397,[-1,-2]],-3,-4],-3,107,32,[],32],[[[398,[-1,-2]],-3,-4],-3,107,32,[],32],[[[399,[-1]],-2,-3],-2,107,[],32],[[[382,[-1]],-2,-3],-2,375,[],32],[[[400,[-1,-2,-3]],-4,-5],-4,107,[],32,[],32],[[[383,[-1]],-2,-3],-2,107,[],32],[[[401,[-1,-2]],-3,-4],-3,107,32,[],32],[[[402,[-1]],-2,-3],-2,107,[],32],[[[384,[-1]],-2,-3],-2,107,[],32],[[[403,[-1,-2]],-3,-4],-3,107,32,[],32],[[-1,-2],15,25,32],[[-1,-2],15,25,32],[[[384,[-1]],-2],15,107,32],[[-1,12],-1,[]],[[-1,12],-1,[]],[[-1,12],[[22,[-1]]],[]],[[-1,12],-1,[]],[[-1,12],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[405,[-1]]],32],[-1,[[0,[-1]]],[411,412]],[-1,-2,64,[]],[-1,[[394,[-1]]],25],[-1,[[394,[-1]]],25],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[[-1,-2],[[395,[-1,-2]]],25,32],[[-1,-2],[[395,[-1,-2]]],25,32],[-1,[[396,[-1]]],25],[-1,[[396,[-1]]],25],[[-1,-2],[[388,[-1,-2]]],25,32],[[-1,-2],[[388,[-1,-2]]],25,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[387,[-1]]],[[22,[326]]],107],[-1,33,[]],[-1,33,[]],[[[387,[-1]]],33,381],[[[391,[-1]]],33,381],[[[379,[-1]]],33,381],[[[380,[-1]]],33,381],[[[394,[-1]]],33,381],[[[395,[-1,-2]]],33,381,32],[[[397,[-1,-2]]],33,381,32],[[[382,[-1]]],33,[381,375]],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[-1,33,25],[-1,33,25],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[[-1,-2],33,25,32],[[[374,[-1,-2,-3]]],22,107,64,32],[[[376,[-1]]],22,107],[-1,22,25],[-1,22,25],[[[378,[-1,-2]]],22,107,107],[[[379,[-1]]],[[22,[-2]]],107,61],[[[394,[-1]]],22,107],[[[399,[-1]]],22,107],[[[383,[-1]]],22,107],[[[385,[-1]]],[[22,[-1]]],57],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[[[390,[-1]]],12,[]],[-1,12,[]],[-1,12,[]],[[[387,[-1]]],12,381],[[[391,[-1]]],12,381],[[[379,[-1]]],12,381],[[[380,[-1]]],12,381],[[[394,[-1]]],12,381],[[[395,[-1,-2]]],12,381,32],[[[397,[-1,-2]]],12,381,32],[[[382,[-1]]],12,[381,375]],[[[406,[-1]]],12,[]],[[[407,[-1]]],12,102],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[[-1,-2],[[397,[-1,-2]]],25,32],[[-1,-2],[[397,[-1,-2]]],25,32],[[-1,-2],[[398,[-1,-2]]],25,32],[[-1,-2],[[398,[-1,-2]]],25,32],[[-1,-2],[[389,[-1,-2]]],25,32],[[-1,-2],[[389,[-1,-2]]],25,32],[-1,22,25],[-1,22,25],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[-1,22,25],[-1,22,25],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[-1,-2],33,25,64],[[-1,-2],33,25,64],[-1,22,[]],[[[374,[-1,-2,-3]]],22,107,64,32],[[[376,[-1]]],22,107],[[[388,[-1,-2]]],22,107,32],[[[389,[-1,-2]]],22,107,32],[[[390,[-1]]],[[22,[-1]]],[]],[[[387,[-1]]],22,107],[[[377,[-1]]],22,107],[[[378,[-1,-2]]],22,107,107],[[[391,[-1]]],[[22,[-2]]],107,57],[[[379,[-1]]],[[22,[-2]]],107,61],[[[386,[-1]]],22,[57,107]],[[[380,[-1]]],[[22,[[15,[12]]]]],107],[[[392,[-1,-2]]],22,107,32],[[[393,[-1,-2]]],[[22,[-3]]],107,32,[]],[[[394,[-1]]],22,107],[[[395,[-1,-2]]],22,107,32],[[[396,[-1]]],22,107],[[[397,[-1,-2]]],[[22,[-3]]],107,32,[]],[[[398,[-1,-2]]],[[22,[-3]]],107,32,[]],[[[399,[-1]]],22,107],[[[382,[-1]]],22,375],[[[400,[-1,-2,-3]]],[[22,[-4]]],107,[],32,[]],[[[383,[-1]]],22,107],[[[401,[-1,-2]]],22,107,32],[[[402,[-1]]],22,107],[[[384,[-1]]],22,107],[[[403,[-1,-2]]],22,107,32],[[[404,[-1,-2]]],22,107,107],[[[405,[-1]]],22,32],[[[406,[-1]]],[[22,[-1]]],[]],[[[407,[-1]]],[[22,[-2]]],102,[]],[[[385,[-1]]],[[22,[-1]]],57],[[[408,[-1]]],[[22,[-2]]],32,[]],[[[409,[-1,-2]]],22,[],32],[-1,22,[]],[[[374,[-1,-2,-3]]],22,375,64,32],[[[376,[-1]]],22,375],[[[390,[-1]]],[[22,[-1]]],[]],[[[387,[-1]]],22,[375,381]],[[[377,[-1]]],22,375],[[[378,[-1,-2]]],22,375,375],[[[391,[-1]]],[[22,[-2]]],375,57],[[[379,[-1]]],[[22,[-2]]],375,61],[[[380,[-1]]],[[22,[[15,[12]]]]],[381,375]],[[[392,[-1,-2]]],22,375,32],[[[393,[-1,-2]]],[[22,[-3]]],375,32,[]],[[[394,[-1]]],22,375],[[[395,[-1,-2]]],22,375,32],[[[397,[-1,-2]]],[[22,[-3]]],375,32,[]],[[[399,[-1]]],22,375],[[[382,[-1]]],22,375],[[[383,[-1]]],22,[375,381]],[[[402,[-1]]],22,[375,381]],[[[384,[-1]]],22,[375,381]],[[[404,[-1,-2]]],[[22,[15]]],[375,381],[375,381]],[[[406,[-1]]],[[22,[-1]]],[]],[[[407,[-1]]],[[22,[-2]]],102,[]],[[[385,[-1]]],[[22,[-1]]],57],[-1,[[30,[23,326]]],25],[-1,[[30,[23,326]]],25],[[[379,[-1]]],[[30,[23,326]]],107],[[[392,[-1,-2]]],[[30,[23,326]]],107,32],[[[393,[-1,-2]]],[[30,[23,326]]],107,32],[[[399,[-1]],-2],22,107,102],[[[399,[-1]],-2],22,107,25],[[-1,12],22,[]],[[-1,12],22,[]],[[[377,[-1]],12],22,107],[[[378,[-1,-2]],12],22,107,107],[[[379,[-1]],12],[[22,[-2]]],107,61],[[[380,[-1]],12],[[22,[[15,[12]]]]],107],[[[394,[-1]],12],22,107],[[[399,[-1]],12],22,107],[[[382,[-1]],12],22,375],[[[383,[-1]],12],22,107],[[[402,[-1]],12],22,107],[[[384,[-1]],12],22,107],[[[404,[-1,-2]],12],22,107,107],[[[385,[-1]],12],[[22,[-1]]],57],[[-1,12],22,[]],[[-1,12],22,[]],[[[377,[-1]],12],22,375],[[[378,[-1,-2]],12],22,375,375],[[[380,[-1]],12],[[22,[[15,[12]]]]],[381,375]],[[[394,[-1]],12],22,375],[[[382,[-1]],12],22,375],[[[383,[-1]],12],22,[375,381]],[[[402,[-1]],12],22,[375,381]],[[[384,[-1]],12],22,[375,381]],[[[385,[-1]],12],[[22,[-1]]],57],[-1,[[406,[-1]]],[]],[-1,[[407,[-1]]],102],[[-1,-2],[[22,[58]]],25,64],[[-1,-2],[[22,[58]]],25,64],[[-1,-2,-3],[[22,[58]]],25,64,32],[[-1,-2,-3],[[22,[58]]],25,64,32],[[-1,-2],[[15,[-3,-3]]],25,32,[65,76]],[[-1,-2],[[15,[-3,-3]]],25,32,[65,76]],[[-1,-2],12,[25,375],32],[[-1,-2],12,[25,375],32],[[[399,[-1]]],22,107],[[[399,[-1]]],22,107],[-1,[[399,[-1]]],25],[-1,[[399,[-1]]],25],[[-1,-2],[[22,[12]]],25,32],[[-1,-2],[[22,[12]]],25,32],[-1,-2,107,[]],[-1,-2,25,413],[-1,-2,25,413],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[-1,[[385,[-1]]],57],0,[-1,[[408,[-1]]],32],[-1,[[382,[-1]]],[25,375]],[-1,[[382,[-1]]],[25,375]],[[-1,-2],22,25,32],[[-1,-2],22,25,32],[[[378,[-1,-2]],-3],22,375,375,32],[[[394,[-1]],-2],22,375,32],[[[382,[-1]],-2],22,375,32],[[[374,[-1,-2,-3]],-4,-5],-4,375,64,32,[],32],[[[376,[-1]],-2,-3],-2,375,[],32],[[-1,-2,-3],-2,25,[],32],[[-1,-2,-3],-2,25,[],32],[[[387,[-1]],-2,-3],-2,[375,381],[],32],[[[377,[-1]],-2,-3],-2,375,[],32],[[[378,[-1,-2]],-3,-4],-3,375,375,[],32],[[[391,[-1]],-2,-3],-2,375,[],32],[[[379,[-1]],-2,-3],-2,375,[],32],[[[380,[-1]],-2,-3],-2,[381,375],[],32],[[[392,[-1,-2]],-3,-4],-3,375,32,[],32],[[[393,[-1,-2]],-3,-4],-3,375,32,[],32],[[[394,[-1]],-2,-3],-2,375,[],32],[[[395,[-1,-2]],-3,-4],-3,375,32,[],32],[[[397,[-1,-2]],-3,-4],-3,375,32,[],32],[[[399,[-1]],-2,-3],-2,375,[],32],[[[382,[-1]],-2,-3],-2,375,[],32],[[[383,[-1]],-2,-3],-2,[375,381],[],32],[[[402,[-1]],-2,-3],-2,[375,381],[],32],[[[384,[-1]],-2,-3],-2,[375,381],[],32],[[-1,-2],[[22,[12]]],[25,381,375],32],[[-1,-2],[[22,[12]]],[25,381,375],32],[[-1,-2,-3],[[400,[-1,-2,-3]]],25,[],32],[[-1,-2,-3],[[400,[-1,-2,-3]]],25,[],32],[[[374,[-1,-2,-3]]],[[15,[12,[22,[12]]]]],107,64,32],[[[376,[-1]]],[[15,[12,[22,[12]]]]],107],[[[388,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[389,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[390,[-1]]],[[15,[12,[22,[12]]]]],[]],[-1,[[15,[12,[22,[12]]]]],[]],[-1,[[15,[12,[22,[12]]]]],[]],[[[387,[-1]]],[[15,[12,[22,[12]]]]],107],[[[377,[-1]]],[[15,[12,[22,[12]]]]],107],[[[378,[-1,-2]]],[[15,[12,[22,[12]]]]],107,107],[[[391,[-1]]],[[15,[12,[22,[12]]]]],107],[[[379,[-1]]],[[15,[12,[22,[12]]]]],107],[[[386,[-1]]],[[15,[12,[22,[12]]]]],[57,107]],[[[380,[-1]]],[[15,[12,[22,[12]]]]],107],[[[392,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[393,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[394,[-1]]],[[15,[12,[22,[12]]]]],107],[[[395,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[396,[-1]]],[[15,[12,[22,[12]]]]],107],[[[397,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[398,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[399,[-1]]],[[15,[12,[22,[12]]]]],107],[[[382,[-1]]],[[15,[12,[22,[12]]]]],375],[[[400,[-1,-2,-3]]],[[15,[12,[22,[12]]]]],107,[],32],[[[383,[-1]]],[[15,[12,[22,[12]]]]],107],[[[401,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[402,[-1]]],[[15,[12,[22,[12]]]]],107],[[[384,[-1]]],[[15,[12,[22,[12]]]]],107],[[[403,[-1,-2]]],[[15,[12,[22,[12]]]]],107,32],[[[404,[-1,-2]]],[[15,[12,[22,[12]]]]],107,107],[[[406,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[407,[-1]]],[[15,[12,[22,[12]]]]],102],[[[385,[-1]]],[[15,[12,[22,[12]]]]],57],[[[408,[-1]]],[[15,[12,[22,[12]]]]],32],[[[409,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[-1,12],[[383,[-1]]],25],[[-1,12],[[383,[-1]]],25],[[-1,-2],[[401,[-1,-2]]],25,32],[[-1,-2],[[401,[-1,-2]]],25,32],[[-1,12],[[402,[-1]]],25],[[-1,12],[[402,[-1]]],25],[[-1,-1],[[22,[12]]],[]],[[[22,[-1]],-2],[[409,[-1,-2]]],[],32],[-1,-2,107,[]],[-1,-2,25,414],[-1,-2,25,414],[[-1,12],[[384,[-1]]],25],[[-1,12],[[384,[-1]]],25],[[-1,-2],[[403,[-1,-2]]],25,32],[[-1,-2],[[403,[-1,-2]]],25,32],[-1,[],25],[-1,[],25],[[-1,-2],[],25,32],[[-1,-2],[],25,32],[[[374,[-1,-2,-3]],-4,-5],-6,107,64,32,[],32,415],[[[376,[-1]],-2,-3],-4,107,[],32,415],[[-1,-2,-3],-4,25,[],32,415],[[-1,-2,-3],-4,25,[],32,415],[[[387,[-1]],-2,-3],-4,107,[],32,415],[[[377,[-1]],-2,-3],-4,107,[],32,415],[[[378,[-1,-2]],-3,-4],-5,107,107,[],32,415],[[[391,[-1]],-2,-3],-4,107,[],32,415],[[[379,[-1]],-2,-3],-4,107,[],32,415],[[[386,[-1]],-2,-3],-4,[57,107],[],32,415],[[[380,[-1]],-2,-3],-4,107,[],32,415],[[[392,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[393,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[394,[-1]],-2,-3],-4,107,[],32,415],[[[395,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[397,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[398,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[399,[-1]],-2,-3],-4,107,[],32,415],[[[382,[-1]],-2,-3],-4,375,[],32,415],[[[400,[-1,-2,-3]],-4,-5],-6,107,[],32,[],32,415],[[[383,[-1]],-2,-3],-4,107,[],32,415],[[[401,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[402,[-1]],-2,-3],-4,107,[],32,415],[[[384,[-1]],-2,-3],-4,107,[],32,415],[[[403,[-1,-2]],-3,-4],-5,107,32,[],32,415],[[[408,[-1]],-2,-3],-4,32,[],32,415],[[-1,-2],-3,25,32,415],[[-1,-2],-3,25,32,415],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[-1,-2],[],25,32],[[-1,-2],[],25,32],[[[374,[-1,-2,-3]],-4,-5],-6,375,64,32,[],32,415],[[[376,[-1]],-2,-3],-4,375,[],32,415],[[-1,-2,-3],-4,25,[],32,415],[[-1,-2,-3],-4,25,[],32,415],[[[387,[-1]],-2,-3],-4,[375,381],[],32,415],[[[377,[-1]],-2,-3],-4,375,[],32,415],[[[378,[-1,-2]],-3,-4],-5,375,375,[],32,415],[[[391,[-1]],-2,-3],-4,375,[],32,415],[[[379,[-1]],-2,-3],-4,375,[],32,415],[[[380,[-1]],-2,-3],-4,[381,375],[],32,415],[[[392,[-1,-2]],-3,-4],-5,375,32,[],32,415],[[[393,[-1,-2]],-3,-4],-5,375,32,[],32,415],[[[394,[-1]],-2,-3],-4,375,[],32,415],[[[395,[-1,-2]],-3,-4],-5,375,32,[],32,415],[[[397,[-1,-2]],-3,-4],-5,375,32,[],32,415],[[[399,[-1]],-2,-3],-4,375,[],32,415],[[[382,[-1]],-2,-3],-4,375,[],32,415],[[[383,[-1]],-2,-3],-4,[375,381],[],32,415],[[[402,[-1]],-2,-3],-4,[375,381],[],32,415],[[[384,[-1]],-2,-3],-4,[375,381],[],32,415],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,[[15,[-3,-5]]],[25,107],[],[65,[76,[-2]]],[],[65,[76,[-4]]]],[-1,[[15,[-3,-5]]],[25,107],[],[65,[76,[-2]]],[],[65,[76,[-4]]]],[[-1,-2],404,64,64],[[-1,-2],[[404,[-1]]],25,64],[[-1,-2],[[404,[-1]]],25,64],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[416,[-1]]],[[416,[-1]]],25],[417,417],[[[416,[-1]],[416,[-1]]],58,25],[[417,417],58],[[],[[416,[-1]]],25],[[],417],[[[416,[-1]],[416,[-1]]],33,25],[[417,417],33],[[[416,[-1]],77],78,25],[[417,77],78],[-1,-1,[]],[-1,-1,[]],[[[416,[-1]],-2],15,25,91],[[417,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[[[416,[-1]],[416,[-1]]],[[22,[58]]],25],[[417,417],[[22,[58]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,[[418,418],418],[[],12],[-1,12,25],[[],12],0,[[418,418],418],[[[23,[[29,[-1]]]]],[[23,[-1]]],[]],[[[29,[-1]]],[[16,[[29,[7]]]]],[]],[[[29,[-1]]],[[16,[[29,[7]]]]],[]],[[[29,[-1]]],[],[]],[[[29,[-1]]],[],[]],[[[29,[-1]]],-1,[]],[[[29,[-1]]],15,[]],[[[29,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[[[29,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[418,418],418],[[[419,[-1]]],[[419,[-1]]],[]],[[[420,[-1]]],[[420,[-1]]],[57,25]],[[[29,[-1]]],[[29,[-1]]],61],[418,418],[[[420,[-1]],[420,[-1]]],58,[31,25]],[-1,-1,61],[[],[[420,[-1]]],[65,25]],[[[420,[-1]]],-1,25],[[[420,[-1]]],-1,25],[-1,[[419,[-1]]],[]],[-1,15,[]],[[[420,[-1]]],15,25],[[[419,[-1]],[419,[-1]]],33,[]],[[[420,[-1]],[420,[-1]]],33,[59,25]],[[418,418],33],[[[419,[-1]],77],78,[]],[[[420,[-1]],77],78,[79,25]],[[[29,[-1]],77],78,[]],[[418,77],78],[-1,15,[]],[-1,15,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[419,[-1]],-2],15,[],91],[[[420,[-1]],-2],15,[92,25],91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[420,[-1]]],-1,[]],0,[[],12],[-1,12,25],[[],33],[-1,[[420,[-1]]],[]],[-1,[[29,[-1]]],[]],0,[[[420,[-1]],[420,[-1]]],[[22,[58]]],[86,25]],[[-1,-1],-1,[]],0,[[],12],[-1,12,25],[[],12],[[[16,[[29,[-1]]]]],[[16,[[29,[7]]]]],[]],[[[16,[[29,[-1]]]]],[[16,[[29,[7]]]]],[]],[[[16,[[29,[-1]]]]],[],[]],[[[16,[[29,[-1]]]]],[],[]],[[[16,[[29,[-1]]]]],[[16,[-1]]],[]],[[[16,[[29,[-1]]]]],[[16,[-1]]],[]],[[418,418],418],[[-1,-1],15,[]],[-1,-1,65],[[[420,[-1]]],-1,[]],0,[-1,-2,[],[]],[[[29,[[23,[-1]]]]],[[23,[[29,[-1]]]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[],[[29,[-1]]],[]],[[],[[23,[[29,[-1]]]]],[]],[[],-1,[]],0,[[],12],[[[29,[-1]],-1],-1,[]],[[[16,[[29,[-1]]]],[16,[-1]]],[[16,[-1]]],61],[[[16,[[29,[-1]]]],[16,[-1]]],[[16,[-1]]],57],[[],-1,[]],[[],[[29,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[81,12],[[22,[81]]]],[[82,12],[[22,[82]]]],[[81,12],81],[[82,12],82],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[421,421],[81,81],[82,82],[422,422],[423,423],[424,424],[425,425],[426,426],[[421,421],58],[[81,81],58],[[82,82],58],[[424,424],58],[[425,425],58],[[426,426],58],[423,24],[[421,82],33],[[421,421],33],[[421,81],33],[[81,421],33],[[81,81],33],[[82,421],33],[[82,82],33],[[422,422],33],[[423,423],33],[[424,424],33],[[425,425],33],[[426,426],33],[426,9],[[421,77],78],[[421,77],78],[[81,77],78],[[81,77],78],[[82,77],78],[[82,77],78],[[422,77],78],[[423,77],78],[[423,77],78],[[424,77],78],[[424,77],78],[[425,77],78],[[425,77],78],[[426,77],78],[[426,77],78],[[81,12],[[22,[81]]]],[[82,12],[[22,[82]]]],[[81,12],81],[[82,12],82],[81,421],[[[23,[7]]],421],[[[23,[8]]],421],[-1,-1,[]],[82,421],[[[23,[7]]],421],[-1,-1,[]],[9,81],[[[23,[7]]],81],[[[23,[7]]],82],[[[23,[8]]],82],[-1,-1,[]],[11,82],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[15,[-1,8]]],424,[[427,[421]]]],[425,424],[426,424],[-1,-1,[]],[-1,-1,[]],[9,81],[11,82],[24,[[30,[421,423]]]],[24,[[30,[81,423]]]],[24,[[30,[82,423]]]],[24,[[30,[424,423]]]],[24,[[30,[425,423]]]],[24,[[30,[426,423]]]],[[421,-1],15,91],[[81,-1],15,91],[[82,-1],15,91],[[422,-1],15,91],[[424,-1],15,91],[[425,-1],15,91],[[426,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[424,421],[425,81],[426,82],[421,33],[81,33],[82,33],[81,33],[421,33],[81,33],[82,33],[421,33],[81,33],[82,33],[421,33],[424,33],[421,33],[424,33],[81,33],[421,33],[81,33],[82,33],[421,33],[81,33],[82,33],[81,33],[81,33],[81,33],[82,33],[82,33],[82,33],[82,33],[421,33],[81,33],[82,33],[82,[[22,[422]]]],[[7,7,7,7],81],[[8,8,8,8,8,8,8,8],82],[[421,8],424],[[81,8],425],[[82,8,9,9],426],[81,[[23,[7]]]],[82,[[23,[7]]]],[[[16,[7]]],[[30,[421,423]]]],[[[16,[7]]],[[30,[81,423]]]],[[[16,[7]]],[[30,[82,423]]]],[[[16,[7]]],[[30,[424,423]]]],[[[16,[7]]],[[30,[425,423]]]],[[[16,[7]]],[[30,[426,423]]]],[[421,81],[[22,[58]]]],[[421,421],[[22,[58]]]],[[421,82],[[22,[58]]]],[[81,81],[[22,[58]]]],[[81,421],[[22,[58]]]],[[82,82],[[22,[58]]]],[[82,421],[[22,[58]]]],[[424,424],[[22,[58]]]],[[425,425],[[22,[58]]]],[[426,426],[[22,[58]]]],[424,8],[425,8],[426,8],[426,9],[82,[[23,[8]]]],[[426,9],15],[[424,421],15],[[425,81],15],[[426,82],15],[[424,8],15],[[425,8],15],[[426,8],15],[[426,9],15],[[81,81],[[22,[12]]]],[[82,82],[[22,[12]]]],[81,9],[82,11],[421,421],[82,421],[82,[[22,[81]]]],[82,[[22,[81]]]],[81,82],[81,82],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,36],[37,37],[38,38],[39,39],[40,40],[46,46],[[[428,[2]]],[[428,[2]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[6]]],[[428,[6]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[6]]],[[429,[6]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[12]],[428,[12]]]],[[[428,[12]],[428,[12]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[1]],[428,[1]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[7]],[428,[7]]]],[[[428,[4]],[428,[4]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[2]],[428,[2]]]],[[[428,[10]],[428,[10]]]],[[[428,[7]],[428,[7]]]],[[[428,[11]],[428,[11]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[2]],[428,[2]]]],[[[428,[4]],[428,[4]]]],[[[428,[6]],[428,[6]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[9]],[428,[9]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[5]],[428,[5]]]],[[[428,[11]],[428,[11]]]],[[[428,[6]],[428,[6]]]],[[[428,[7]],[428,[7]]]],[[[428,[11]],[428,[11]]]],[[[428,[9]],[428,[9]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[12]],[428,[12]]]],[[[428,[3]],[428,[3]]]],[[[428,[8]],[428,[8]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[9]],[428,[9]]]],[[[428,[2]],[428,[2]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[10]],[428,[10]]]],[[[428,[4]],[428,[4]]]],[[[428,[8]],[428,[8]]]],[[[428,[5]],[428,[5]]]],[[[428,[8]],[428,[8]]]],[[[428,[6]],[428,[6]]]],[[[428,[10]],[428,[10]]]],[[[428,[1]],[428,[1]]]],[[[428,[1]],[428,[1]]]],[[[428,[3]],[428,[3]]]],[[[428,[5]],[428,[5]]]],[[[428,[3]],[428,[3]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[429,[7]],[429,[7]]]],[[[429,[6]],[429,[6]]]],[[[429,[2]],[429,[2]]]],[[[429,[6]],[429,[6]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[5]],[429,[5]]]],[[[429,[7]],[429,[7]]]],[[[429,[1]],[429,[1]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[12]],[429,[12]]]],[[[429,[3]],[429,[3]]]],[[[429,[10]],[429,[10]]]],[[[429,[8]],[429,[8]]]],[[[429,[4]],[429,[4]]]],[[[429,[4]],[429,[4]]]],[[[429,[2]],[429,[2]]]],[[[429,[8]],[429,[8]]]],[[[429,[4]],[429,[4]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[9]],[429,[9]]]],[[[429,[5]],[429,[5]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[3]],[429,[3]]]],[[[429,[12]],[429,[12]]]],[[[429,[8]],[429,[8]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[11]],[429,[11]]]],[[[429,[1]],[429,[1]]]],[[[429,[11]],[429,[11]]]],[[[429,[3]],[429,[3]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[12]],[429,[12]]]],[[[429,[5]],[429,[5]]]],[[[429,[9]],[429,[9]]]],[[[429,[7]],[429,[7]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[9]],[429,[9]]]],[[[429,[10]],[429,[10]]]],[[[429,[6]],[429,[6]]]],[[[429,[1]],[429,[1]]]],[[[429,[11]],[429,[11]]]],[[[429,[2]],[429,[2]]]],[[[429,[10]],[429,[10]]]],[[[428,[11]],11],15],[[[428,[7]],[428,[7]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[7]],7],15],[[[428,[8]],[428,[8]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[5]],5],15],[[[428,[2]],[428,[2]]],15],[[[428,[7]],7],15],[[[428,[4]],4],15],[[[428,[12]],12],15],[[[428,[2]],2],15],[[[428,[1]],[428,[1]]],15],[[[428,[9]],[428,[9]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[4]],4],15],[[[428,[10]],[428,[10]]],15],[[[428,[11]],[428,[11]]],15],[[[428,[7]],[428,[7]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[6]],6],15],[[[428,[11]],11],15],[[[428,[12]],12],15],[[[428,[6]],[428,[6]]],15],[[[428,[10]],10],15],[[[428,[3]],3],15],[[[428,[10]],[428,[10]]],15],[[[428,[8]],8],15],[[[428,[10]],10],15],[[[428,[1]],[428,[1]]],15],[[[428,[5]],5],15],[[[428,[6]],[428,[6]]],15],[[[428,[1]],1],15],[[[428,[9]],[428,[9]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[1]],1],15],[[[428,[2]],[428,[2]]],15],[[[428,[8]],8],15],[[[428,[11]],[428,[11]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[9]],9],15],[[[428,[2]],2],15],[[[428,[3]],3],15],[[[428,[6]],6],15],[[[428,[3]],[428,[3]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[9]],9],15],[[[429,[6]],6],15],[[[429,[7]],[429,[7]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[1]],1],15],[[[429,[6]],[429,[6]]],15],[[[429,[8]],8],15],[[[429,[5]],5],15],[[[429,[3]],[429,[3]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[6]],6],15],[[[429,[7]],7],15],[[[429,[5]],5],15],[[[429,[12]],12],15],[[[429,[11]],11],15],[[[429,[8]],8],15],[[[429,[10]],[429,[10]]],15],[[[429,[4]],4],15],[[[429,[11]],11],15],[[[429,[12]],[429,[12]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[9]],9],15],[[[429,[4]],[429,[4]]],15],[[[429,[3]],3],15],[[[429,[10]],[429,[10]]],15],[[[429,[4]],4],15],[[[429,[2]],2],15],[[[429,[10]],10],15],[[[429,[11]],[429,[11]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[9]],[429,[9]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[10]],10],15],[[[429,[9]],9],15],[[[429,[2]],[429,[2]]],15],[[[429,[1]],1],15],[[[429,[2]],2],15],[[[429,[12]],[429,[12]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[3]],3],15],[[[429,[9]],[429,[9]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[12]],12],15],[[[429,[6]],[429,[6]]],15],[[[429,[7]],7],15],[[[428,[6]],[428,[6]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[4]],[428,[4]]]],[[[428,[7]],[428,[7]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[8]],[428,[8]]]],[[[428,[4]],[428,[4]]]],[[[428,[6]],[428,[6]]]],[[[428,[1]],[428,[1]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[3]],[428,[3]]]],[[[428,[7]],[428,[7]]]],[[[428,[10]],[428,[10]]]],[[[428,[5]],[428,[5]]]],[[[428,[11]],[428,[11]]]],[[[428,[12]],[428,[12]]]],[[[428,[10]],[428,[10]]]],[[[428,[9]],[428,[9]]]],[[[428,[8]],[428,[8]]]],[[[428,[4]],[428,[4]]]],[[[428,[2]],[428,[2]]]],[[[428,[12]],[428,[12]]]],[[[428,[3]],[428,[3]]]],[[[428,[1]],[428,[1]]]],[[[428,[9]],[428,[9]]]],[[[428,[10]],[428,[10]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[1]],[428,[1]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[11]],[428,[11]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[9]],[428,[9]]]],[[[428,[5]],[428,[5]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[5]],[428,[5]]]],[[[428,[2]],[428,[2]]]],[[[428,[6]],[428,[6]]]],[[[428,[2]],[428,[2]]]],[[[428,[8]],[428,[8]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[3]],[428,[3]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[11]],[428,[11]]]],[[[428,[7]],[428,[7]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[12]],[428,[12]]]],[[[429,[4]],[429,[4]]]],[[[429,[1]],[429,[1]]]],[[[429,[5]],[429,[5]]]],[[[429,[6]],[429,[6]]]],[[[429,[3]],[429,[3]]]],[[[429,[12]],[429,[12]]]],[[[429,[7]],[429,[7]]]],[[[429,[8]],[429,[8]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[9]],[429,[9]]]],[[[429,[7]],[429,[7]]]],[[[429,[10]],[429,[10]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[4]],[429,[4]]]],[[[429,[12]],[429,[12]]]],[[[429,[10]],[429,[10]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[6]],[429,[6]]]],[[[429,[5]],[429,[5]]]],[[[429,[8]],[429,[8]]]],[[[429,[1]],[429,[1]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[10]],[429,[10]]]],[[[429,[8]],[429,[8]]]],[[[429,[12]],[429,[12]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[9]],[429,[9]]]],[[[429,[3]],[429,[3]]]],[[[429,[5]],[429,[5]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[11]],[429,[11]]]],[[[429,[9]],[429,[9]]]],[[[429,[11]],[429,[11]]]],[[[429,[7]],[429,[7]]]],[[[429,[11]],[429,[11]]]],[[[429,[6]],[429,[6]]]],[[[429,[1]],[429,[1]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[4]],[429,[4]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[2]],[429,[2]]]],[[[428,[7]],[428,[7]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[9]],9],15],[[[428,[7]],7],15],[[[428,[1]],[428,[1]]],15],[[[428,[2]],[428,[2]]],15],[[[428,[3]],3],15],[[[428,[1]],1],15],[[[428,[4]],4],15],[[[428,[5]],5],15],[[[428,[4]],[428,[4]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[10]],10],15],[[[428,[8]],[428,[8]]],15],[[[428,[1]],1],15],[[[428,[3]],[428,[3]]],15],[[[428,[9]],[428,[9]]],15],[[[428,[9]],[428,[9]]],15],[[[428,[8]],8],15],[[[428,[8]],8],15],[[[428,[11]],[428,[11]]],15],[[[428,[6]],[428,[6]]],15],[[[428,[6]],6],15],[[[428,[12]],12],15],[[[428,[11]],11],15],[[[428,[10]],10],15],[[[428,[8]],[428,[8]]],15],[[[428,[3]],3],15],[[[428,[7]],[428,[7]]],15],[[[428,[11]],11],15],[[[428,[6]],[428,[6]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[12]],12],15],[[[428,[4]],[428,[4]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[10]],[428,[10]]],15],[[[428,[5]],5],15],[[[428,[2]],2],15],[[[428,[11]],[428,[11]]],15],[[[428,[7]],7],15],[[[428,[9]],9],15],[[[428,[4]],4],15],[[[428,[2]],[428,[2]]],15],[[[428,[2]],2],15],[[[428,[6]],6],15],[[[428,[10]],[428,[10]]],15],[[[429,[10]],10],15],[[[429,[3]],[429,[3]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[12]],12],15],[[[429,[6]],6],15],[[[429,[5]],[429,[5]]],15],[[[429,[4]],4],15],[[[429,[10]],[429,[10]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[6]],[429,[6]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[12]],[429,[12]]],15],[[[429,[10]],[429,[10]]],15],[[[429,[1]],1],15],[[[429,[11]],11],15],[[[429,[12]],12],15],[[[429,[2]],2],15],[[[429,[11]],11],15],[[[429,[1]],[429,[1]]],15],[[[429,[2]],2],15],[[[429,[7]],7],15],[[[429,[12]],[429,[12]]],15],[[[429,[8]],8],15],[[[429,[8]],[429,[8]]],15],[[[429,[8]],8],15],[[[429,[5]],5],15],[[[429,[2]],[429,[2]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[3]],3],15],[[[429,[11]],[429,[11]]],15],[[[429,[9]],9],15],[[[429,[7]],[429,[7]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[1]],1],15],[[[429,[7]],7],15],[[[429,[9]],[429,[9]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[6]],6],15],[[[429,[7]],[429,[7]]],15],[[[429,[3]],3],15],[[[429,[5]],5],15],[[[429,[10]],10],15],[[[429,[4]],[429,[4]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[6]],[429,[6]]],15],[[[429,[9]],9],15],[[[429,[9]],[429,[9]]],15],[[[429,[4]],4],15],[[41,41]],[[41,7]],[[42,42]],[[42,8]],[[43,43]],[[43,9]],[[44,44]],[[44,10]],[[45,45]],[[45,11]],[[47,12]],[[47,47]],[[36,1]],[[36,36]],[[37,2]],[[37,37]],[[38,3]],[[38,38]],[[39,39]],[[39,4]],[[40,40]],[[40,5]],[[46,6]],[[46,46]],[[[428,[5]],[428,[5]]]],[[[428,[10]],[428,[10]]]],[[[428,[4]],[428,[4]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[8]],[428,[8]]]],[[[428,[10]],[428,[10]]]],[[[428,[6]],[428,[6]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[11]],[428,[11]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[2]],[428,[2]]]],[[[428,[7]],[428,[7]]]],[[[428,[2]],[428,[2]]]],[[[428,[3]],[428,[3]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[8]],[428,[8]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[12]],[428,[12]]]],[[[428,[6]],[428,[6]]]],[[[428,[4]],[428,[4]]]],[[[428,[6]],[428,[6]]]],[[[428,[5]],[428,[5]]]],[[[428,[7]],[428,[7]]]],[[[428,[1]],[428,[1]]]],[[[428,[3]],[428,[3]]]],[[[428,[3]],[428,[3]]]],[[[428,[8]],[428,[8]]]],[[[428,[2]],[428,[2]]]],[[[428,[9]],[428,[9]]]],[[[428,[9]],[428,[9]]]],[[[428,[10]],[428,[10]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[11]],[428,[11]]]],[[[428,[1]],[428,[1]]]],[[[428,[11]],[428,[11]]]],[[[428,[9]],[428,[9]]]],[[[428,[5]],[428,[5]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[7]],[428,[7]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[12]],[428,[12]]]],[[[428,[4]],[428,[4]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[12]],[428,[12]]]],[[[428,[1]],[428,[1]]]],[[[429,[8]],[429,[8]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[3]],[429,[3]]]],[[[429,[3]],[429,[3]]]],[[[429,[1]],[429,[1]]]],[[[429,[11]],[429,[11]]]],[[[429,[10]],[429,[10]]]],[[[429,[6]],[429,[6]]]],[[[429,[6]],[429,[6]]]],[[[429,[8]],[429,[8]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[5]],[429,[5]]]],[[[429,[9]],[429,[9]]]],[[[429,[11]],[429,[11]]]],[[[429,[9]],[429,[9]]]],[[[429,[4]],[429,[4]]]],[[[429,[11]],[429,[11]]]],[[[429,[2]],[429,[2]]]],[[[429,[7]],[429,[7]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[12]],[429,[12]]]],[[[429,[4]],[429,[4]]]],[[[429,[2]],[429,[2]]]],[[[429,[10]],[429,[10]]]],[[[429,[3]],[429,[3]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[1]],[429,[1]]]],[[[429,[2]],[429,[2]]]],[[[429,[6]],[429,[6]]]],[[[429,[7]],[429,[7]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[7]],[429,[7]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[12]],[429,[12]]]],[[[429,[8]],[429,[8]]]],[[[429,[5]],[429,[5]]]],[[[429,[9]],[429,[9]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[12]],[429,[12]]]],[[[429,[4]],[429,[4]]]],[[[429,[10]],[429,[10]]]],[[[429,[5]],[429,[5]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[1]],[429,[1]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[41,7],15],[[41,41],15],[[42,42],15],[[42,8],15],[[43,9],15],[[43,43],15],[[44,10],15],[[44,44],15],[[45,45],15],[[45,11],15],[[47,47],15],[[47,12],15],[[36,36],15],[[36,1],15],[[37,2],15],[[37,37],15],[[38,3],15],[[38,38],15],[[39,4],15],[[39,39],15],[[40,5],15],[[40,40],15],[[46,46],15],[[46,6],15],[[[428,[8]],[428,[8]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[5]],5],15],[[[428,[9]],9],15],[[[428,[6]],[428,[6]]],15],[[[428,[1]],1],15],[[[428,[3]],3],15],[[[428,[3]],3],15],[[[428,[3]],[428,[3]]],15],[[[428,[8]],8],15],[[[428,[1]],[428,[1]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[6]],[428,[6]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[5]],5],15],[[[428,[11]],[428,[11]]],15],[[[428,[2]],2],15],[[[428,[12]],12],15],[[[428,[10]],10],15],[[[428,[7]],[428,[7]]],15],[[[428,[2]],[428,[2]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[2]],2],15],[[[428,[2]],[428,[2]]],15],[[[428,[10]],[428,[10]]],15],[[[428,[8]],8],15],[[[428,[10]],10],15],[[[428,[6]],6],15],[[[428,[4]],4],15],[[[428,[9]],[428,[9]]],15],[[[428,[4]],4],15],[[[428,[11]],[428,[11]]],15],[[[428,[7]],7],15],[[[428,[11]],11],15],[[[428,[9]],9],15],[[[428,[11]],11],15],[[[428,[1]],[428,[1]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[1]],1],15],[[[428,[10]],[428,[10]]],15],[[[428,[9]],[428,[9]]],15],[[[428,[12]],12],15],[[[428,[7]],7],15],[[[428,[6]],6],15],[[[428,[7]],[428,[7]]],15],[[[429,[8]],8],15],[[[429,[3]],3],15],[[[429,[9]],[429,[9]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[4]],4],15],[[[429,[4]],[429,[4]]],15],[[[429,[6]],[429,[6]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[10]],[429,[10]]],15],[[[429,[1]],1],15],[[[429,[1]],[429,[1]]],15],[[[429,[3]],3],15],[[[429,[6]],[429,[6]]],15],[[[429,[10]],10],15],[[[429,[12]],[429,[12]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[11]],11],15],[[[429,[3]],[429,[3]]],15],[[[429,[6]],6],15],[[[429,[12]],12],15],[[[429,[4]],4],15],[[[429,[8]],8],15],[[[429,[2]],2],15],[[[429,[2]],2],15],[[[429,[7]],7],15],[[[429,[3]],[429,[3]]],15],[[[429,[10]],10],15],[[[429,[9]],9],15],[[[429,[10]],[429,[10]]],15],[[[429,[12]],[429,[12]]],15],[[[429,[5]],5],15],[[[429,[7]],7],15],[[[429,[7]],[429,[7]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[6]],6],15],[[[429,[1]],1],15],[[[429,[1]],[429,[1]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[12]],12],15],[[[429,[9]],[429,[9]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[11]],11],15],[[[429,[5]],5],15],[[[429,[9]],9],15],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[7]],[428,[7]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[6]],[428,[6]]]],[[[428,[1]],[428,[1]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[10]],[428,[10]]]],[[[428,[12]],[428,[12]]]],[[[428,[9]],[428,[9]]]],[[[428,[9]],[428,[9]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[3]],[428,[3]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[7]],[428,[7]]]],[[[428,[11]],[428,[11]]]],[[[428,[7]],[428,[7]]]],[[[428,[3]],[428,[3]]]],[[[428,[4]],[428,[4]]]],[[[428,[5]],[428,[5]]]],[[[428,[12]],[428,[12]]]],[[[428,[5]],[428,[5]]]],[[[428,[12]],[428,[12]]]],[[[428,[2]],[428,[2]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[8]],[428,[8]]]],[[[428,[10]],[428,[10]]]],[[[428,[2]],[428,[2]]]],[[[428,[8]],[428,[8]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[4]],[428,[4]]]],[[[428,[1]],[428,[1]]]],[[[428,[11]],[428,[11]]]],[[[428,[9]],[428,[9]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[11]],[428,[11]]]],[[[428,[10]],[428,[10]]]],[[[428,[2]],[428,[2]]]],[[[428,[6]],[428,[6]]]],[[[428,[6]],[428,[6]]]],[[[428,[1]],[428,[1]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[4]],[428,[4]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[8]],[428,[8]]]],[[[428,[5]],[428,[5]]]],[[[428,[3]],[428,[3]]]],[[[429,[11]],[429,[11]]]],[[[429,[6]],[429,[6]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[10]],[429,[10]]]],[[[429,[8]],[429,[8]]]],[[[429,[4]],[429,[4]]]],[[[429,[5]],[429,[5]]]],[[[429,[5]],[429,[5]]]],[[[429,[8]],[429,[8]]]],[[[429,[4]],[429,[4]]]],[[[429,[9]],[429,[9]]]],[[[429,[7]],[429,[7]]]],[[[429,[3]],[429,[3]]]],[[[429,[9]],[429,[9]]]],[[[429,[3]],[429,[3]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[1]],[429,[1]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[5]],[429,[5]]]],[[[429,[1]],[429,[1]]]],[[[429,[10]],[429,[10]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[7]],[429,[7]]]],[[[429,[2]],[429,[2]]]],[[[429,[6]],[429,[6]]]],[[[429,[4]],[429,[4]]]],[[[429,[10]],[429,[10]]]],[[[429,[11]],[429,[11]]]],[[[429,[11]],[429,[11]]]],[[[429,[12]],[429,[12]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[1]],[429,[1]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[12]],[429,[12]]]],[[[429,[2]],[429,[2]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[12]],[429,[12]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]]],[[[429,[8]],[429,[8]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[7]],[429,[7]]]],[[[429,[9]],[429,[9]]]],[[[429,[6]],[429,[6]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[428,[11]],[428,[11]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[5]],5],15],[[[428,[6]],[428,[6]]],15],[[[428,[3]],3],15],[[[428,[8]],[428,[8]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[10]],10],15],[[[428,[8]],[428,[8]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[11]],11],15],[[[428,[10]],10],15],[[[428,[4]],4],15],[[[428,[12]],12],15],[[[428,[9]],9],15],[[[428,[1]],[428,[1]]],15],[[[428,[11]],11],15],[[[428,[11]],[428,[11]]],15],[[[428,[5]],5],15],[[[428,[7]],[428,[7]]],15],[[[428,[1]],1],15],[[[428,[12]],[428,[12]]],15],[[[428,[7]],7],15],[[[428,[10]],[428,[10]]],15],[[[428,[8]],8],15],[[[428,[6]],6],15],[[[428,[1]],[428,[1]]],15],[[[428,[2]],2],15],[[[428,[9]],[428,[9]]],15],[[[428,[6]],6],15],[[[428,[5]],[428,[5]]],15],[[[428,[9]],9],15],[[[428,[4]],4],15],[[[428,[12]],12],15],[[[428,[7]],7],15],[[[428,[8]],8],15],[[[428,[6]],[428,[6]]],15],[[[428,[3]],3],15],[[[428,[2]],[428,[2]]],15],[[[428,[10]],[428,[10]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[7]],[428,[7]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[2]],[428,[2]]],15],[[[428,[9]],[428,[9]]],15],[[[428,[2]],2],15],[[[428,[1]],1],15],[[[429,[5]],[429,[5]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[6]],6],15],[[[429,[9]],[429,[9]]],15],[[[429,[8]],8],15],[[[429,[9]],9],15],[[[429,[11]],[429,[11]]],15],[[[429,[1]],1],15],[[[429,[8]],8],15],[[[429,[8]],[429,[8]]],15],[[[429,[1]],1],15],[[[429,[12]],12],15],[[[429,[1]],[429,[1]]],15],[[[429,[3]],3],15],[[[429,[2]],2],15],[[[429,[5]],5],15],[[[429,[6]],[429,[6]]],15],[[[429,[5]],5],15],[[[429,[10]],10],15],[[[429,[4]],4],15],[[[429,[12]],12],15],[[[429,[2]],[429,[2]]],15],[[[429,[4]],4],15],[[[429,[11]],11],15],[[[429,[10]],[429,[10]]],15],[[[429,[6]],6],15],[[[429,[3]],[429,[3]]],15],[[[429,[7]],7],15],[[[429,[4]],[429,[4]]],15],[[[429,[10]],[429,[10]]],15],[[[429,[7]],7],15],[[[429,[12]],[429,[12]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[10]],10],15],[[[429,[8]],[429,[8]]],15],[[[429,[11]],11],15],[[[429,[11]],[429,[11]]],15],[[[429,[9]],9],15],[[[429,[6]],[429,[6]]],15],[[[429,[12]],[429,[12]]],15],[[[429,[2]],2],15],[[[429,[7]],[429,[7]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[9]],[429,[9]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[3]],3],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[22,[36]]]],[37,[[22,[37]]]],[38,[[22,[38]]]],[39,[[22,[39]]]],[40,[[22,[40]]]],[46,[[22,[46]]]],[[41,7],[[22,[41]]]],[[42,8],[[22,[42]]]],[[43,9],[[22,[43]]]],[[44,10],[[22,[44]]]],[[45,11],[[22,[45]]]],[[47,12],[[22,[47]]]],[[41,41],[[22,[41]]]],[[42,42],[[22,[42]]]],[[43,43],[[22,[43]]]],[[44,44],[[22,[44]]]],[[45,45],[[22,[45]]]],[[47,47],[[22,[47]]]],[[36,36],[[22,[36]]]],[[37,37],[[22,[37]]]],[[38,38],[[22,[38]]]],[[39,39],[[22,[39]]]],[[40,40],[[22,[40]]]],[[46,46],[[22,[46]]]],[36,[[22,[36]]]],[37,[[22,[37]]]],[38,[[22,[38]]]],[39,[[22,[39]]]],[40,[[22,[40]]]],[46,[[22,[46]]]],[41,[[22,[41]]]],[42,[[22,[42]]]],[43,[[22,[43]]]],[44,[[22,[44]]]],[45,[[22,[45]]]],[47,[[22,[47]]]],[[41,9],[[22,[41]]]],[[42,9],[[22,[42]]]],[[43,9],[[22,[43]]]],[[44,9],[[22,[44]]]],[[45,9],[[22,[45]]]],[[47,9],[[22,[47]]]],[[36,9],[[22,[36]]]],[[37,9],[[22,[37]]]],[[38,9],[[22,[38]]]],[[39,9],[[22,[39]]]],[[40,9],[[22,[40]]]],[[46,9],[[22,[46]]]],[430,430],[85,85],[431,431],[41,41],[42,42],[43,43],[44,44],[45,45],[47,47],[36,36],[37,37],[38,38],[39,39],[40,40],[46,46],[[[428,[-1]]],[[428,[-1]]],57],[[[429,[-1]]],[[429,[-1]]],57],[55,55],[[41,41],58],[[42,42],58],[[43,43],58],[[44,44],58],[[45,45],58],[[47,47],58],[[36,36],58],[[37,37],58],[[38,38],58],[[39,39],58],[[40,40],58],[[46,46],58],[[[428,[-1]],[428,[-1]]],58,31],[[[429,[-1]],[429,[-1]]],58,31],[[[428,[9]]],9],[[[428,[6]]],9],[[[428,[3]]],9],[[[428,[5]]],9],[[[428,[11]]],9],[[[428,[10]]],9],[[[428,[2]]],9],[[[428,[1]]],9],[[[428,[4]]],9],[[[428,[8]]],9],[[[428,[7]]],9],[[[428,[12]]],9],[[[429,[7]]],9],[[[429,[3]]],9],[[[429,[8]]],9],[[[429,[5]]],9],[[[429,[4]]],9],[[[429,[2]]],9],[[[429,[12]]],9],[[[429,[6]]],9],[[[429,[1]]],9],[[[429,[9]]],9],[[[429,[10]]],9],[[[429,[11]]],9],[[[428,[9]]],9],[[[428,[10]]],9],[[[428,[3]]],9],[[[428,[5]]],9],[[[428,[12]]],9],[[[428,[4]]],9],[[[428,[2]]],9],[[[428,[1]]],9],[[[428,[8]]],9],[[[428,[7]]],9],[[[428,[6]]],9],[[[428,[11]]],9],[[[429,[1]]],9],[[[429,[12]]],9],[[[429,[10]]],9],[[[429,[7]]],9],[[[429,[2]]],9],[[[429,[11]]],9],[[[429,[3]]],9],[[[429,[5]]],9],[[[429,[6]]],9],[[[429,[9]]],9],[[[429,[8]]],9],[[[429,[4]]],9],[[],[[428,[-1]]],65],[[],[[429,[-1]]],65],[430,24],[85,24],[[[428,[2]],[428,[2]]]],[[[428,[2]],[428,[2]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[3]],[428,[3]]]],[[[428,[11]],[428,[11]]]],[[[428,[3]],[428,[3]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[9]],[428,[9]]]],[[[428,[4]],[428,[4]]]],[[[428,[10]],[428,[10]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[10]],[428,[10]]]],[[[428,[10]],[428,[10]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[6]],[428,[6]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[11]],[428,[11]]]],[[[428,[5]],[428,[5]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[8]],[428,[8]]]],[[[428,[6]],[428,[6]]]],[[[428,[9]],[428,[9]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[6]],[428,[6]]]],[[[428,[9]],[428,[9]]]],[[[428,[8]],[428,[8]]]],[[[428,[5]],[428,[5]]]],[[[428,[7]],[428,[7]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[4]],[428,[4]]]],[[[428,[12]],[428,[12]]]],[[[428,[1]],[428,[1]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[11]],[428,[11]]]],[[[428,[3]],[428,[3]]]],[[[428,[7]],[428,[7]]]],[[[428,[12]],[428,[12]]]],[[[428,[4]],[428,[4]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[12]],[428,[12]]]],[[[428,[5]],[428,[5]]]],[[[428,[8]],[428,[8]]]],[[[428,[2]],[428,[2]]]],[[[428,[1]],[428,[1]]]],[[[428,[7]],[428,[7]]]],[[[428,[1]],[428,[1]]]],[[[429,[5]],[429,[5]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[7]],[429,[7]]]],[[[429,[12]],[429,[12]]]],[[[429,[7]],[429,[7]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[9]],[429,[9]]]],[[[429,[1]],[429,[1]]]],[[[429,[8]],[429,[8]]]],[[[429,[12]],[429,[12]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[4]],[429,[4]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]]],[[[429,[9]],[429,[9]]]],[[[429,[9]],[429,[9]]]],[[[429,[6]],[429,[6]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]]],[[[429,[2]],[429,[2]]]],[[[429,[8]],[429,[8]]]],[[[429,[8]],[429,[8]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[7]],[429,[7]]]],[[[429,[10]],[429,[10]]]],[[[429,[10]],[429,[10]]]],[[[429,[6]],[429,[6]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[5]],[429,[5]]]],[[[429,[12]],[429,[12]]]],[[[429,[11]],[429,[11]]]],[[[429,[4]],[429,[4]]]],[[[429,[6]],[429,[6]]]],[[[429,[1]],[429,[1]]]],[[[429,[10]],[429,[10]]]],[[[429,[11]],[429,[11]]]],[[[429,[5]],[429,[5]]]],[[[429,[1]],[429,[1]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[11]],[429,[11]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[4]],[429,[4]]]],[[[429,[3]],[429,[3]]]],[[[428,[3]],3],15],[[[428,[12]],[428,[12]]],15],[[[428,[9]],9],15],[[[428,[4]],4],15],[[[428,[8]],8],15],[[[428,[8]],8],15],[[[428,[11]],[428,[11]]],15],[[[428,[10]],10],15],[[[428,[12]],12],15],[[[428,[6]],6],15],[[[428,[5]],5],15],[[[428,[12]],[428,[12]]],15],[[[428,[6]],[428,[6]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[5]],5],15],[[[428,[7]],[428,[7]]],15],[[[428,[11]],11],15],[[[428,[6]],6],15],[[[428,[12]],12],15],[[[428,[2]],[428,[2]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[9]],9],15],[[[428,[1]],1],15],[[[428,[10]],10],15],[[[428,[2]],[428,[2]]],15],[[[428,[11]],11],15],[[[428,[2]],2],15],[[[428,[8]],[428,[8]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[10]],[428,[10]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[11]],[428,[11]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[6]],[428,[6]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[4]],4],15],[[[428,[7]],[428,[7]]],15],[[[428,[7]],7],15],[[[428,[10]],[428,[10]]],15],[[[428,[1]],1],15],[[[428,[9]],[428,[9]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[3]],3],15],[[[428,[2]],2],15],[[[428,[9]],[428,[9]]],15],[[[428,[7]],7],15],[[[429,[1]],[429,[1]]],15],[[[429,[1]],1],15],[[[429,[1]],1],15],[[[429,[12]],12],15],[[[429,[12]],[429,[12]]],15],[[[429,[9]],9],15],[[[429,[4]],[429,[4]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[8]],8],15],[[[429,[2]],[429,[2]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[3]],3],15],[[[429,[12]],[429,[12]]],15],[[[429,[11]],11],15],[[[429,[8]],8],15],[[[429,[7]],[429,[7]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[11]],11],15],[[[429,[6]],[429,[6]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[7]],7],15],[[[429,[3]],[429,[3]]],15],[[[429,[3]],3],15],[[[429,[10]],[429,[10]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[6]],[429,[6]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[10]],10],15],[[[429,[9]],[429,[9]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[10]],10],15],[[[429,[6]],6],15],[[[429,[9]],[429,[9]]],15],[[[429,[10]],[429,[10]]],15],[[[429,[6]],6],15],[[[429,[2]],2],15],[[[429,[4]],4],15],[[[429,[5]],5],15],[[[429,[7]],7],15],[[[429,[9]],9],15],[[[429,[5]],5],15],[[[429,[2]],2],15],[[[429,[12]],12],15],[[[429,[4]],4],15],[[[429,[8]],[429,[8]]],15],[[430,430],33],[[85,85],33],[[431,431],33],[[41,41],33],[[42,42],33],[[43,43],33],[[44,44],33],[[45,45],33],[[47,47],33],[[36,36],33],[[37,37],33],[[38,38],33],[[39,39],33],[[40,40],33],[[46,46],33],[[[428,[-1]],[428,[-1]]],33,59],[[[429,[-1]],[429,[-1]]],33,59],[[55,55],33],[[430,77],78],[[430,77],78],[[85,77],78],[[85,77],78],[[431,77],78],[[41,77],78],[[41,77],78],[[41,77],78],[[41,77],78],[[41,77],78],[[41,77],78],[[42,77],78],[[42,77],78],[[42,77],78],[[42,77],78],[[42,77],78],[[42,77],78],[[43,77],78],[[43,77],78],[[43,77],78],[[43,77],78],[[43,77],78],[[43,77],78],[[44,77],78],[[44,77],78],[[44,77],78],[[44,77],78],[[44,77],78],[[44,77],78],[[45,77],78],[[45,77],78],[[45,77],78],[[45,77],78],[[45,77],78],[[45,77],78],[[47,77],78],[[47,77],78],[[47,77],78],[[47,77],78],[[47,77],78],[[47,77],78],[[36,77],78],[[36,77],78],[[36,77],78],[[36,77],78],[[36,77],78],[[36,77],78],[[37,77],78],[[37,77],78],[[37,77],78],[[37,77],78],[[37,77],78],[[37,77],78],[[38,77],78],[[38,77],78],[[38,77],78],[[38,77],78],[[38,77],78],[[38,77],78],[[39,77],78],[[39,77],78],[[39,77],78],[[39,77],78],[[39,77],78],[[39,77],78],[[40,77],78],[[40,77],78],[[40,77],78],[[40,77],78],[[40,77],78],[[40,77],78],[[46,77],78],[[46,77],78],[[46,77],78],[[46,77],78],[[46,77],78],[[46,77],78],[[[428,[-1]],77],78,432],[[[428,[-1]],77],78,433],[[[428,[-1]],77],78,342],[[[428,[-1]],77],78,434],[[[428,[-1]],77],78,435],[[[428,[-1]],77],78,79],[[[429,[-1]],77],78,342],[[[429,[-1]],77],78,433],[[[429,[-1]],77],78,432],[[[429,[-1]],77],78,434],[[[429,[-1]],77],78,435],[[[429,[-1]],77],78,79],[[55,77],78],[327,430],[-1,-1,[]],[56,-1,[]],[56,430],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,42],[-1,-1,[]],[42,43],[-1,-1,[]],[41,43],[43,44],[41,44],[-1,-1,[]],[42,44],[-1,-1,[]],[43,45],[41,45],[42,45],[44,45],[83,47],[41,47],[42,47],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[36,37],[41,37],[42,38],[-1,-1,[]],[36,38],[37,38],[41,38],[38,39],[42,39],[36,39],[43,39],[-1,-1,[]],[41,39],[37,39],[38,40],[43,40],[36,40],[37,40],[39,40],[-1,-1,[]],[44,40],[41,40],[42,40],[37,46],[-1,-1,[]],[41,46],[36,46],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[428,[3]]],[[428,[3]]]],[[[428,[12]]],[[428,[12]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[10]]],[[428,[10]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[9]]],[[428,[9]]]],[[[428,[11]]],[[428,[11]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[10]]],[[429,[10]]]],[[[428,[10]]],[[428,[10]]]],[[[428,[11]]],[[428,[11]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[12]]],[[428,[12]]]],[[[428,[9]]],[[428,[9]]]],[[[428,[1]]],[[428,[1]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[7]]],[[429,[7]]]],[24,[[30,[41]]]],[24,[[30,[42]]]],[24,[[30,[43]]]],[24,[[30,[44]]]],[24,[[30,[45]]]],[24,[[30,[47]]]],[24,[[30,[36]]]],[24,[[30,[37]]]],[24,[[30,[38]]]],[24,[[30,[39]]]],[24,[[30,[40]]]],[24,[[30,[46]]]],[41,7],[42,8],[43,9],[44,10],[45,11],[47,12],[36,1],[37,2],[38,3],[39,4],[40,5],[46,6],[[41,-1],15,91],[[42,-1],15,91],[[43,-1],15,91],[[44,-1],15,91],[[45,-1],15,91],[[47,-1],15,91],[[36,-1],15,91],[[37,-1],15,91],[[38,-1],15,91],[[39,-1],15,91],[[40,-1],15,91],[[46,-1],15,91],[[[428,[-1]],-2],15,92,91],[[[429,[-1]],-2],15,92,91],[41,9],[42,9],[43,9],[44,9],[45,9],[47,9],[41,9],[42,9],[43,9],[44,9],[45,9],[47,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,33],[37,33],[38,33],[39,33],[40,33],[46,33],[[[428,[6]]],33],[[[428,[1]]],33],[[[428,[5]]],33],[[[428,[4]]],33],[[[428,[2]]],33],[[[428,[3]]],33],[[[429,[3]]],33],[[[429,[2]]],33],[[[429,[4]]],33],[[[429,[6]]],33],[[[429,[1]]],33],[[[429,[5]]],33],[36,33],[37,33],[38,33],[39,33],[40,33],[46,33],[[[428,[1]]],33],[[[428,[4]]],33],[[[428,[6]]],33],[[[428,[3]]],33],[[[428,[5]]],33],[[[428,[2]]],33],[[[429,[4]]],33],[[[429,[2]]],33],[[[429,[6]]],33],[[[429,[5]]],33],[[[429,[1]]],33],[[[429,[3]]],33],[41,33],[42,33],[43,33],[44,33],[45,33],[47,33],[[[428,[8]]],33],[[[428,[11]]],33],[[[428,[9]]],33],[[[428,[12]]],33],[[[428,[7]]],33],[[[428,[10]]],33],[[[429,[12]]],33],[[[429,[7]]],33],[[[429,[11]]],33],[[[429,[8]]],33],[[[429,[10]]],33],[[[429,[9]]],33],[85,431],[41,9],[42,9],[43,9],[44,9],[45,9],[47,9],[36,9],[37,9],[38,9],[39,9],[40,9],[46,9],[[[428,[4]]],9],[[[428,[6]]],9],[[[428,[2]]],9],[[[428,[12]]],9],[[[428,[7]]],9],[[[428,[9]]],9],[[[428,[1]]],9],[[[428,[11]]],9],[[[428,[8]]],9],[[[428,[5]]],9],[[[428,[10]]],9],[[[428,[3]]],9],[[[429,[9]]],9],[[[429,[7]]],9],[[[429,[1]]],9],[[[429,[8]]],9],[[[429,[5]]],9],[[[429,[4]]],9],[[[429,[3]]],9],[[[429,[11]]],9],[[[429,[2]]],9],[[[429,[12]]],9],[[[429,[6]]],9],[[[429,[10]]],9],[[41,41],41],[[42,42],42],[[43,43],43],[[44,44],44],[[45,45],45],[[47,47],47],[[[428,[4]],[428,[4]]]],[[[428,[11]],[428,[11]]]],[[[428,[8]],[428,[8]]]],[[[428,[8]],[428,[8]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[6]],[428,[6]]]],[[[428,[7]],[428,[7]]]],[[[428,[5]],[428,[5]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[10]],[428,[10]]]],[[[428,[6]],[428,[6]]]],[[[428,[1]],[428,[1]]]],[[[428,[2]],[428,[2]]]],[[[428,[3]],[428,[3]]]],[[[428,[9]],[428,[9]]]],[[[428,[12]],[428,[12]]]],[[[428,[5]],[428,[5]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[7]],[428,[7]]]],[[[428,[4]],[428,[4]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[7]],[428,[7]]]],[[[428,[12]],[428,[12]]]],[[[428,[4]],[428,[4]]]],[[[428,[1]],[428,[1]]]],[[[428,[9]],[428,[9]]]],[[[428,[2]],[428,[2]]]],[[[428,[9]],[428,[9]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[3]],[428,[3]]]],[[[428,[11]],[428,[11]]]],[[[428,[3]],[428,[3]]]],[[[428,[6]],[428,[6]]]],[[[428,[10]],[428,[10]]]],[[[428,[5]],[428,[5]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[2]],[428,[2]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[10]],[428,[10]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[1]],[428,[1]]]],[[[428,[11]],[428,[11]]]],[[[428,[8]],[428,[8]]]],[[[428,[12]],[428,[12]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[429,[6]],[429,[6]]]],[[[429,[12]],[429,[12]]]],[[[429,[3]],[429,[3]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[10]],[429,[10]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[8]],[429,[8]]]],[[[429,[6]],[429,[6]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[5]],[429,[5]]]],[[[429,[2]],[429,[2]]]],[[[429,[5]],[429,[5]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[9]],[429,[9]]]],[[[429,[5]],[429,[5]]]],[[[429,[3]],[429,[3]]]],[[[429,[6]],[429,[6]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[8]],[429,[8]]]],[[[429,[7]],[429,[7]]]],[[[429,[1]],[429,[1]]]],[[[429,[3]],[429,[3]]]],[[[429,[11]],[429,[11]]]],[[[429,[12]],[429,[12]]]],[[[429,[11]],[429,[11]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[1]],[429,[1]]]],[[[429,[12]],[429,[12]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[4]],[429,[4]]]],[[[429,[9]],[429,[9]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[7]],[429,[7]]]],[[[429,[8]],[429,[8]]]],[[[429,[2]],[429,[2]]]],[[[429,[2]],[429,[2]]]],[[[429,[9]],[429,[9]]]],[[[429,[7]],[429,[7]]]],[[[429,[4]],[429,[4]]]],[[[429,[10]],[429,[10]]]],[[[429,[4]],[429,[4]]]],[[[429,[11]],[429,[11]]]],[[[429,[10]],[429,[10]]]],[[[429,[1]],[429,[1]]]],[[[428,[4]],4],15],[[[428,[10]],[428,[10]]],15],[[[428,[1]],1],15],[[[428,[9]],[428,[9]]],15],[[[428,[9]],9],15],[[[428,[6]],[428,[6]]],15],[[[428,[11]],11],15],[[[428,[4]],4],15],[[[428,[9]],[428,[9]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[11]],[428,[11]]],15],[[[428,[6]],[428,[6]]],15],[[[428,[12]],12],15],[[[428,[3]],[428,[3]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[2]],2],15],[[[428,[2]],[428,[2]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[7]],7],15],[[[428,[7]],[428,[7]]],15],[[[428,[2]],2],15],[[[428,[12]],[428,[12]]],15],[[[428,[2]],[428,[2]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[12]],12],15],[[[428,[10]],10],15],[[[428,[5]],[428,[5]]],15],[[[428,[3]],3],15],[[[428,[1]],1],15],[[[428,[7]],7],15],[[[428,[11]],11],15],[[[428,[3]],3],15],[[[428,[6]],6],15],[[[428,[5]],[428,[5]]],15],[[[428,[6]],6],15],[[[428,[9]],9],15],[[[428,[10]],10],15],[[[428,[10]],[428,[10]]],15],[[[428,[7]],[428,[7]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[8]],8],15],[[[428,[11]],[428,[11]]],15],[[[428,[8]],8],15],[[[428,[5]],5],15],[[[428,[5]],5],15],[[[429,[9]],[429,[9]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[8]],[429,[8]]],15],[[[429,[12]],12],15],[[[429,[4]],4],15],[[[429,[3]],[429,[3]]],15],[[[429,[5]],5],15],[[[429,[2]],2],15],[[[429,[8]],8],15],[[[429,[1]],1],15],[[[429,[9]],[429,[9]]],15],[[[429,[9]],9],15],[[[429,[7]],7],15],[[[429,[2]],[429,[2]]],15],[[[429,[4]],4],15],[[[429,[12]],[429,[12]]],15],[[[429,[12]],12],15],[[[429,[7]],[429,[7]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[3]],3],15],[[[429,[10]],10],15],[[[429,[10]],[429,[10]]],15],[[[429,[6]],6],15],[[[429,[5]],[429,[5]]],15],[[[429,[8]],8],15],[[[429,[1]],[429,[1]]],15],[[[429,[1]],1],15],[[[429,[6]],[429,[6]]],15],[[[429,[5]],5],15],[[[429,[11]],[429,[11]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[6]],6],15],[[[429,[4]],[429,[4]]],15],[[[429,[9]],9],15],[[[429,[6]],[429,[6]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[2]],2],15],[[[429,[10]],[429,[10]]],15],[[[429,[3]],3],15],[[[429,[12]],[429,[12]]],15],[[[429,[11]],11],15],[[[429,[7]],7],15],[[[429,[5]],[429,[5]]],15],[[[429,[10]],10],15],[[[429,[7]],[429,[7]]],15],[[[429,[11]],11],15],[[[429,[11]],[429,[11]]],15],[[[429,[8]],[429,[8]]],15],[36],[36,36],[37],[37,37],[38,38],[38],[39,39],[39],[40],[40,40],[46,46],[46],[[[428,[6]]],[[428,[6]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[5]]]],[[[428,[1]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[6]]]],[[[428,[2]]]],[[[428,[3]]]],[[[428,[4]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[9]]]],[[[429,[8]]]],[[[429,[6]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[7]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[2]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[4]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[10]]]],[[[429,[12]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[11]]]],[[[429,[5]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[1]]]],[[[429,[3]]]],[7,[[22,[41]]]],[8,[[22,[42]]]],[9,[[22,[43]]]],[10,[[22,[44]]]],[11,[[22,[45]]]],[12,[[22,[47]]]],[1,[[22,[36]]]],[2,[[22,[37]]]],[3,[[22,[38]]]],[4,[[22,[39]]]],[5,[[22,[40]]]],[6,[[22,[46]]]],[7,41],[8,42],[9,43],[10,44],[11,45],[12,47],[1,36],[2,37],[3,38],[4,39],[5,40],[6,46],[[[429,[12]]],[[429,[12]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[11]]],[[429,[11]]]],[[[428,[4]]]],[[[428,[5]]]],[[[428,[7]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[9]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[6]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[12]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[12]]],[[428,[12]]]],[[[428,[11]]],[[428,[11]]]],[[[428,[3]]]],[[[428,[11]]]],[[[428,[8]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[2]]]],[[[428,[10]]],[[428,[10]]]],[[[428,[1]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[9]]],[[428,[9]]]],[[[428,[10]]]],[[[429,[12]]]],[[[429,[9]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[4]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[3]]]],[[[429,[8]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[6]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[2]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[5]]]],[[[429,[1]]]],[[[429,[7]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[11]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[10]]]],[36,[[15,[36,33]]]],[37,[[15,[37,33]]]],[38,[[15,[38,33]]]],[39,[[15,[39,33]]]],[40,[[15,[40,33]]]],[46,[[15,[46,33]]]],[36,[[15,[36,33]]]],[37,[[15,[37,33]]]],[38,[[15,[38,33]]]],[39,[[15,[39,33]]]],[40,[[15,[40,33]]]],[46,[[15,[46,33]]]],[[41,41],[[22,[58]]]],[[42,42],[[22,[58]]]],[[43,43],[[22,[58]]]],[[44,44],[[22,[58]]]],[[45,45],[[22,[58]]]],[[47,47],[[22,[58]]]],[[36,36],[[22,[58]]]],[[37,37],[[22,[58]]]],[[38,38],[[22,[58]]]],[[39,39],[[22,[58]]]],[[40,40],[[22,[58]]]],[[46,46],[[22,[58]]]],[[[428,[-1]],[428,[-1]]],[[22,[58]]],86],[[[429,[-1]],[429,[-1]]],[[22,[58]]],86],[[[428,[11]],9],[[428,[11]]]],[[[428,[1]],9],[[428,[1]]]],[[[428,[4]],9],[[428,[4]]]],[[[428,[12]],9],[[428,[12]]]],[[[428,[3]],9],[[428,[3]]]],[[[428,[5]],9],[[428,[5]]]],[[[428,[8]],9],[[428,[8]]]],[[[428,[9]],9],[[428,[9]]]],[[[428,[6]],9],[[428,[6]]]],[[[428,[2]],9],[[428,[2]]]],[[[428,[10]],9],[[428,[10]]]],[[[428,[7]],9],[[428,[7]]]],[[[429,[3]],9],[[429,[3]]]],[[[429,[10]],9],[[429,[10]]]],[[[429,[4]],9],[[429,[4]]]],[[[429,[12]],9],[[429,[12]]]],[[[429,[5]],9],[[429,[5]]]],[[[429,[1]],9],[[429,[1]]]],[[[429,[7]],9],[[429,[7]]]],[[[429,[6]],9],[[429,[6]]]],[[[429,[2]],9],[[429,[2]]]],[[[429,[11]],9],[[429,[11]]]],[[[429,[9]],9],[[429,[9]]]],[[[429,[8]],9],[[429,[8]]]],[-1,[[429,[12]]],107],[-1,[[429,[5]]],107],[-1,[[429,[4]]],107],[-1,[[429,[7]]],107],[-1,[[429,[2]]],107],[-1,[[429,[8]]],107],[-1,[[429,[7]]],107],[-1,[[429,[1]]],107],[-1,[[429,[3]]],107],[-1,[[429,[2]]],107],[-1,[[429,[5]]],107],[-1,[[429,[4]]],107],[-1,[[429,[8]]],107],[-1,[[429,[11]]],107],[-1,[[429,[10]]],107],[-1,[[429,[9]]],107],[-1,[[429,[12]]],107],[-1,[[429,[1]]],107],[-1,[[429,[6]]],107],[-1,[[429,[10]]],107],[-1,[[429,[9]]],107],[-1,[[429,[11]]],107],[-1,[[429,[6]]],107],[-1,[[429,[3]]],107],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[6]],[428,[6]]]],[[[428,[8]],[428,[8]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[428,[7]],[428,[7]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[1]],[428,[1]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[12]],[428,[12]]]],[[[428,[5]],[428,[5]]]],[[[428,[2]],[428,[2]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[2]],[428,[2]]]],[[[428,[9]],[428,[9]]]],[[[428,[4]],[428,[4]]]],[[[428,[7]],[428,[7]]]],[[[428,[11]],[428,[11]]]],[[[428,[4]],[428,[4]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[3]],[428,[3]]]],[[[428,[4]],[428,[4]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[3]],[428,[3]]]],[[[428,[6]],[428,[6]]]],[[[428,[10]],[428,[10]]]],[[[428,[3]],[428,[3]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[8]],[428,[8]]]],[[[428,[11]],[428,[11]]]],[[[428,[7]],[428,[7]]]],[[[428,[11]],[428,[11]]]],[[[428,[1]],[428,[1]]]],[[[428,[9]],[428,[9]]]],[[[428,[8]],[428,[8]]]],[[[428,[6]],[428,[6]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[5]],[428,[5]]]],[[[428,[1]],[428,[1]]]],[[[428,[5]],[428,[5]]]],[[[428,[12]],[428,[12]]]],[[[428,[2]],[428,[2]]]],[[[428,[10]],[428,[10]]]],[[[428,[12]],[428,[12]]]],[[[428,[10]],[428,[10]]]],[[[428,[9]],[428,[9]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[429,[6]],[429,[6]]]],[[[429,[9]],[429,[9]]]],[[[429,[3]],[429,[3]]]],[[[429,[4]],[429,[4]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[11]],[429,[11]]]],[[[429,[4]],[429,[4]]]],[[[429,[5]],[429,[5]]]],[[[429,[9]],[429,[9]]]],[[[429,[4]],[429,[4]]]],[[[429,[3]],[429,[3]]]],[[[429,[1]],[429,[1]]]],[[[429,[8]],[429,[8]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[5]],[429,[5]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]]],[[[429,[7]],[429,[7]]]],[[[429,[12]],[429,[12]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[7]],[429,[7]]]],[[[429,[5]],[429,[5]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[12]],[429,[12]]]],[[[429,[6]],[429,[6]]]],[[[429,[11]],[429,[11]]]],[[[429,[10]],[429,[10]]]],[[[429,[10]],[429,[10]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[12]],[429,[12]]]],[[[429,[7]],[429,[7]]]],[[[429,[8]],[429,[8]]]],[[[429,[2]],[429,[2]]]],[[[429,[1]],[429,[1]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[9]],[429,[9]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[11]],[429,[11]]]],[[[429,[6]],[429,[6]]]],[[[429,[8]],[429,[8]]]],[[[429,[1]],[429,[1]]]],[[[429,[10]],[429,[10]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[428,[5]],5],15],[[[428,[9]],[428,[9]]],15],[[[428,[2]],2],15],[[[428,[4]],[428,[4]]],15],[[[428,[6]],6],15],[[[428,[9]],[428,[9]]],15],[[[428,[6]],[428,[6]]],15],[[[428,[3]],3],15],[[[428,[3]],3],15],[[[428,[10]],10],15],[[[428,[6]],[428,[6]]],15],[[[428,[7]],[428,[7]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[2]],[428,[2]]],15],[[[428,[11]],[428,[11]]],15],[[[428,[11]],11],15],[[[428,[9]],9],15],[[[428,[5]],[428,[5]]],15],[[[428,[4]],4],15],[[[428,[4]],[428,[4]]],15],[[[428,[12]],12],15],[[[428,[8]],[428,[8]]],15],[[[428,[1]],1],15],[[[428,[9]],9],15],[[[428,[2]],2],15],[[[428,[8]],8],15],[[[428,[10]],[428,[10]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[11]],[428,[11]]],15],[[[428,[3]],[428,[3]]],15],[[[428,[10]],[428,[10]]],15],[[[428,[8]],8],15],[[[428,[7]],7],15],[[[428,[11]],11],15],[[[428,[3]],[428,[3]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[5]],5],15],[[[428,[1]],[428,[1]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[1]],1],15],[[[428,[4]],4],15],[[[428,[6]],6],15],[[[428,[10]],10],15],[[[428,[7]],7],15],[[[428,[2]],[428,[2]]],15],[[[428,[12]],12],15],[[[428,[7]],[428,[7]]],15],[[[429,[12]],[429,[12]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[7]],7],15],[[[429,[11]],11],15],[[[429,[11]],[429,[11]]],15],[[[429,[5]],5],15],[[[429,[10]],[429,[10]]],15],[[[429,[2]],2],15],[[[429,[1]],1],15],[[[429,[12]],[429,[12]]],15],[[[429,[9]],[429,[9]]],15],[[[429,[8]],8],15],[[[429,[11]],11],15],[[[429,[6]],6],15],[[[429,[9]],9],15],[[[429,[1]],1],15],[[[429,[4]],[429,[4]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[3]],3],15],[[[429,[3]],3],15],[[[429,[10]],10],15],[[[429,[3]],[429,[3]]],15],[[[429,[8]],8],15],[[[429,[8]],[429,[8]]],15],[[[429,[10]],10],15],[[[429,[6]],[429,[6]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[2]],2],15],[[[429,[4]],4],15],[[[429,[7]],7],15],[[[429,[12]],12],15],[[[429,[12]],12],15],[[[429,[6]],[429,[6]]],15],[[[429,[6]],6],15],[[[429,[8]],[429,[8]]],15],[[[429,[9]],9],15],[[[429,[1]],[429,[1]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[5]],5],15],[[[429,[4]],4],15],[[[429,[5]],[429,[5]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[9]],[429,[9]]],15],[[[429,[10]],[429,[10]]],15],[[[428,[10]]],[[428,[10]]]],[[[428,[11]]],[[428,[11]]]],[[[428,[12]]],[[428,[12]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[9]]],[[428,[9]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[1]]],[[428,[1]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[2]]],[[429,[2]]]],[[[428,[2]],9],[[428,[2]]]],[[[428,[4]],9],[[428,[4]]]],[[[428,[11]],9],[[428,[11]]]],[[[428,[9]],9],[[428,[9]]]],[[[428,[3]],9],[[428,[3]]]],[[[428,[12]],9],[[428,[12]]]],[[[428,[7]],9],[[428,[7]]]],[[[428,[5]],9],[[428,[5]]]],[[[428,[6]],9],[[428,[6]]]],[[[428,[8]],9],[[428,[8]]]],[[[428,[10]],9],[[428,[10]]]],[[[428,[1]],9],[[428,[1]]]],[[[429,[6]],9],[[429,[6]]]],[[[429,[5]],9],[[429,[5]]]],[[[429,[11]],9],[[429,[11]]]],[[[429,[3]],9],[[429,[3]]]],[[[429,[7]],9],[[429,[7]]]],[[[429,[12]],9],[[429,[12]]]],[[[429,[2]],9],[[429,[2]]]],[[[429,[1]],9],[[429,[1]]]],[[[429,[4]],9],[[429,[4]]]],[[[429,[9]],9],[[429,[9]]]],[[[429,[10]],9],[[429,[10]]]],[[[429,[8]],9],[[429,[8]]]],[[[428,[4]],9],[[428,[4]]]],[[[428,[5]],9],[[428,[5]]]],[[[428,[1]],9],[[428,[1]]]],[[[428,[10]],9],[[428,[10]]]],[[[428,[11]],9],[[428,[11]]]],[[[428,[6]],9],[[428,[6]]]],[[[428,[7]],9],[[428,[7]]]],[[[428,[12]],9],[[428,[12]]]],[[[428,[9]],9],[[428,[9]]]],[[[428,[2]],9],[[428,[2]]]],[[[428,[3]],9],[[428,[3]]]],[[[428,[8]],9],[[428,[8]]]],[[[429,[10]],9],[[429,[10]]]],[[[429,[4]],9],[[429,[4]]]],[[[429,[9]],9],[[429,[9]]]],[[[429,[12]],9],[[429,[12]]]],[[[429,[7]],9],[[429,[7]]]],[[[429,[2]],9],[[429,[2]]]],[[[429,[11]],9],[[429,[11]]]],[[[429,[8]],9],[[429,[8]]]],[[[429,[6]],9],[[429,[6]]]],[[[429,[3]],9],[[429,[3]]]],[[[429,[5]],9],[[429,[5]]]],[[[429,[1]],9],[[429,[1]]]],[36,36],[37,37],[38,38],[39,39],[40,40],[46,46],[[41,7],41],[[42,8],42],[[43,9],43],[[44,10],44],[[45,11],45],[[47,12],47],[[41,41],41],[[42,42],42],[[43,43],43],[[44,44],44],[[45,45],45],[[47,47],47],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[46,46],46],[36,36],[37,37],[38,38],[39,39],[40,40],[46,46],[[41,9],41],[[42,9],42],[[43,9],43],[[44,9],44],[[45,9],45],[[47,9],47],[[36,9],36],[[37,9],37],[[38,9],38],[[39,9],39],[[40,9],40],[[46,9],46],[[[429,[11]],12]],[[[429,[1]],12]],[[[429,[2]],12]],[[[429,[3]],12]],[[[429,[12]],12],[[429,[12]]]],[[[429,[2]],12],[[429,[2]]]],[[[429,[4]],12]],[[[429,[12]],12]],[[[429,[5]],12]],[[[429,[6]],12]],[[[429,[5]],12],[[429,[5]]]],[[[429,[9]],12],[[429,[9]]]],[[[429,[11]],12],[[429,[11]]]],[[[429,[8]],12],[[429,[8]]]],[[[429,[3]],12],[[429,[3]]]],[[[429,[1]],12]],[[[429,[7]],12]],[[[429,[11]],12]],[[[429,[5]],12]],[[[429,[10]],12]],[[[429,[9]],12]],[[[429,[4]],12]],[[[429,[11]],12]],[[[429,[6]],12],[[429,[6]]]],[[[429,[3]],12]],[[[429,[9]],12]],[[[429,[12]],12]],[[[429,[2]],12]],[[[429,[8]],12]],[[[429,[5]],12]],[[[429,[1]],12],[[429,[1]]]],[[[429,[7]],12]],[[[429,[12]],12]],[[[429,[2]],12]],[[[429,[6]],12]],[[[429,[4]],12]],[[[429,[6]],12]],[[[429,[7]],12],[[429,[7]]]],[[[429,[8]],12]],[[[429,[8]],12]],[[[429,[1]],12]],[[[429,[10]],12]],[[[429,[7]],12]],[[[429,[3]],12]],[[[429,[9]],12]],[[[429,[10]],12],[[429,[10]]]],[[[429,[4]],12],[[429,[4]]]],[[[429,[10]],12]],[[[429,[5]],12],15],[[[429,[1]],12],15],[[[429,[7]],12],15],[[[429,[11]],12],15],[[[429,[3]],12],15],[[[429,[11]],12],15],[[[429,[12]],12],15],[[[429,[6]],12],15],[[[429,[1]],12],15],[[[429,[3]],12],15],[[[429,[12]],12],15],[[[429,[8]],12],15],[[[429,[10]],12],15],[[[429,[4]],12],15],[[[429,[10]],12],15],[[[429,[8]],12],15],[[[429,[9]],12],15],[[[429,[7]],12],15],[[[429,[2]],12],15],[[[429,[9]],12],15],[[[429,[6]],12],15],[[[429,[5]],12],15],[[[429,[4]],12],15],[[[429,[2]],12],15],[[[429,[5]],12]],[[[429,[9]],12],[[429,[9]]]],[[[429,[10]],12],[[429,[10]]]],[[[429,[7]],12]],[[[429,[6]],12]],[[[429,[3]],12]],[[[429,[10]],12]],[[[429,[8]],12]],[[[429,[11]],12]],[[[429,[6]],12],[[429,[6]]]],[[[429,[10]],12]],[[[429,[9]],12]],[[[429,[5]],12]],[[[429,[11]],12]],[[[429,[1]],12]],[[[429,[11]],12],[[429,[11]]]],[[[429,[10]],12]],[[[429,[2]],12],[[429,[2]]]],[[[429,[5]],12]],[[[429,[5]],12],[[429,[5]]]],[[[429,[4]],12],[[429,[4]]]],[[[429,[2]],12]],[[[429,[12]],12]],[[[429,[12]],12]],[[[429,[3]],12]],[[[429,[7]],12]],[[[429,[11]],12]],[[[429,[3]],12],[[429,[3]]]],[[[429,[7]],12],[[429,[7]]]],[[[429,[12]],12]],[[[429,[6]],12]],[[[429,[8]],12]],[[[429,[9]],12]],[[[429,[8]],12]],[[[429,[1]],12],[[429,[1]]]],[[[429,[12]],12],[[429,[12]]]],[[[429,[6]],12]],[[[429,[9]],12]],[[[429,[8]],12],[[429,[8]]]],[[[429,[4]],12]],[[[429,[4]],12]],[[[429,[2]],12]],[[[429,[1]],12]],[[[429,[7]],12]],[[[429,[4]],12]],[[[429,[3]],12]],[[[429,[1]],12]],[[[429,[2]],12]],[[[429,[6]],12],15],[[[429,[5]],12],15],[[[429,[7]],12],15],[[[429,[5]],12],15],[[[429,[10]],12],15],[[[429,[10]],12],15],[[[429,[1]],12],15],[[[429,[4]],12],15],[[[429,[1]],12],15],[[[429,[9]],12],15],[[[429,[2]],12],15],[[[429,[11]],12],15],[[[429,[3]],12],15],[[[429,[12]],12],15],[[[429,[9]],12],15],[[[429,[7]],12],15],[[[429,[12]],12],15],[[[429,[8]],12],15],[[[429,[2]],12],15],[[[429,[8]],12],15],[[[429,[4]],12],15],[[[429,[11]],12],15],[[[429,[6]],12],15],[[[429,[3]],12],15],[[[428,[5]]],[[428,[5]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[3]]],[[428,[3]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[4]]],[[429,[4]]]],[[[428,[8]],[428,[8]]],[[428,[8]]]],[[[428,[8]],[428,[8]]]],[[[428,[8]],[428,[8]]]],[[[428,[3]],[428,[3]]],[[428,[3]]]],[[[428,[7]],[428,[7]]],[[428,[7]]]],[[[428,[12]],[428,[12]]]],[[[428,[11]],[428,[11]]]],[[[428,[6]],[428,[6]]]],[[[428,[6]],[428,[6]]],[[428,[6]]]],[[[428,[5]],[428,[5]]]],[[[428,[12]],[428,[12]]]],[[[428,[3]],[428,[3]]]],[[[428,[10]],[428,[10]]]],[[[428,[1]],[428,[1]]]],[[[428,[4]],[428,[4]]]],[[[428,[9]],[428,[9]]]],[[[428,[7]],[428,[7]]]],[[[428,[2]],[428,[2]]]],[[[428,[9]],[428,[9]]]],[[[428,[11]],[428,[11]]]],[[[428,[2]],[428,[2]]]],[[[428,[1]],[428,[1]]],[[428,[1]]]],[[[428,[5]],[428,[5]]]],[[[428,[4]],[428,[4]]],[[428,[4]]]],[[[428,[4]],[428,[4]]]],[[[428,[2]],[428,[2]]],[[428,[2]]]],[[[428,[11]],[428,[11]]]],[[[428,[2]],[428,[2]]]],[[[428,[4]],[428,[4]]]],[[[428,[8]],[428,[8]]]],[[[428,[6]],[428,[6]]]],[[[428,[10]],[428,[10]]],[[428,[10]]]],[[[428,[5]],[428,[5]]],[[428,[5]]]],[[[428,[12]],[428,[12]]],[[428,[12]]]],[[[428,[12]],[428,[12]]]],[[[428,[1]],[428,[1]]]],[[[428,[1]],[428,[1]]]],[[[428,[7]],[428,[7]]]],[[[428,[11]],[428,[11]]],[[428,[11]]]],[[[428,[7]],[428,[7]]]],[[[428,[3]],[428,[3]]]],[[[428,[6]],[428,[6]]]],[[[428,[9]],[428,[9]]]],[[[428,[5]],[428,[5]]]],[[[428,[3]],[428,[3]]]],[[[428,[10]],[428,[10]]]],[[[428,[10]],[428,[10]]]],[[[428,[9]],[428,[9]]],[[428,[9]]]],[[[429,[5]],[429,[5]]]],[[[429,[9]],[429,[9]]],[[429,[9]]]],[[[429,[1]],[429,[1]]]],[[[429,[9]],[429,[9]]]],[[[429,[8]],[429,[8]]],[[429,[8]]]],[[[429,[9]],[429,[9]]]],[[[429,[4]],[429,[4]]]],[[[429,[6]],[429,[6]]],[[429,[6]]]],[[[429,[3]],[429,[3]]]],[[[429,[12]],[429,[12]]]],[[[429,[10]],[429,[10]]],[[429,[10]]]],[[[429,[2]],[429,[2]]]],[[[429,[2]],[429,[2]]]],[[[429,[8]],[429,[8]]]],[[[429,[11]],[429,[11]]],[[429,[11]]]],[[[429,[9]],[429,[9]]]],[[[429,[5]],[429,[5]]],[[429,[5]]]],[[[429,[7]],[429,[7]]]],[[[429,[12]],[429,[12]]]],[[[429,[11]],[429,[11]]]],[[[429,[1]],[429,[1]]]],[[[429,[2]],[429,[2]]],[[429,[2]]]],[[[429,[5]],[429,[5]]]],[[[429,[4]],[429,[4]]]],[[[429,[12]],[429,[12]]]],[[[429,[11]],[429,[11]]]],[[[429,[1]],[429,[1]]],[[429,[1]]]],[[[429,[8]],[429,[8]]]],[[[429,[10]],[429,[10]]]],[[[429,[11]],[429,[11]]]],[[[429,[6]],[429,[6]]]],[[[429,[1]],[429,[1]]]],[[[429,[6]],[429,[6]]]],[[[429,[5]],[429,[5]]]],[[[429,[8]],[429,[8]]]],[[[429,[7]],[429,[7]]]],[[[429,[3]],[429,[3]]]],[[[429,[7]],[429,[7]]],[[429,[7]]]],[[[429,[10]],[429,[10]]]],[[[429,[2]],[429,[2]]]],[[[429,[3]],[429,[3]]]],[[[429,[10]],[429,[10]]]],[[[429,[4]],[429,[4]]]],[[[429,[7]],[429,[7]]]],[[[429,[12]],[429,[12]]],[[429,[12]]]],[[[429,[4]],[429,[4]]],[[429,[4]]]],[[[429,[3]],[429,[3]]],[[429,[3]]]],[[[429,[6]],[429,[6]]]],[[[428,[8]],[428,[8]]],15],[[[428,[6]],6],15],[[[428,[2]],[428,[2]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[3]],3],15],[[[428,[11]],[428,[11]]],15],[[[428,[2]],2],15],[[[428,[1]],[428,[1]]],15],[[[428,[1]],1],15],[[[428,[10]],[428,[10]]],15],[[[428,[4]],[428,[4]]],15],[[[428,[7]],[428,[7]]],15],[[[428,[1]],[428,[1]]],15],[[[428,[12]],[428,[12]]],15],[[[428,[5]],[428,[5]]],15],[[[428,[11]],11],15],[[[428,[3]],[428,[3]]],15],[[[428,[3]],3],15],[[[428,[2]],[428,[2]]],15],[[[428,[5]],5],15],[[[428,[10]],10],15],[[[428,[9]],9],15],[[[428,[3]],[428,[3]]],15],[[[428,[11]],11],15],[[[428,[9]],9],15],[[[428,[9]],[428,[9]]],15],[[[428,[1]],1],15],[[[428,[8]],8],15],[[[428,[2]],2],15],[[[428,[10]],10],15],[[[428,[6]],[428,[6]]],15],[[[428,[7]],7],15],[[[428,[4]],4],15],[[[428,[5]],5],15],[[[428,[12]],[428,[12]]],15],[[[428,[9]],[428,[9]]],15],[[[428,[10]],[428,[10]]],15],[[[428,[12]],12],15],[[[428,[4]],[428,[4]]],15],[[[428,[4]],4],15],[[[428,[7]],7],15],[[[428,[12]],12],15],[[[428,[8]],8],15],[[[428,[6]],[428,[6]]],15],[[[428,[8]],[428,[8]]],15],[[[428,[6]],6],15],[[[428,[7]],[428,[7]]],15],[[[428,[11]],[428,[11]]],15],[[[429,[11]],11],15],[[[429,[12]],[429,[12]]],15],[[[429,[10]],10],15],[[[429,[7]],7],15],[[[429,[10]],10],15],[[[429,[2]],[429,[2]]],15],[[[429,[9]],[429,[9]]],15],[[[429,[10]],[429,[10]]],15],[[[429,[4]],4],15],[[[429,[5]],5],15],[[[429,[8]],[429,[8]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[1]],1],15],[[[429,[12]],12],15],[[[429,[6]],[429,[6]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[12]],12],15],[[[429,[3]],[429,[3]]],15],[[[429,[1]],[429,[1]]],15],[[[429,[9]],9],15],[[[429,[6]],6],15],[[[429,[8]],8],15],[[[429,[10]],[429,[10]]],15],[[[429,[1]],1],15],[[[429,[8]],8],15],[[[429,[9]],9],15],[[[429,[6]],[429,[6]]],15],[[[429,[2]],[429,[2]]],15],[[[429,[2]],2],15],[[[429,[8]],[429,[8]]],15],[[[429,[11]],[429,[11]]],15],[[[429,[3]],[429,[3]]],15],[[[429,[4]],[429,[4]]],15],[[[429,[3]],3],15],[[[429,[7]],7],15],[[[429,[1]],[429,[1]]],15],[[[429,[7]],[429,[7]]],15],[[[429,[12]],[429,[12]]],15],[[[429,[3]],3],15],[[[429,[4]],4],15],[[[429,[11]],[429,[11]]],15],[[[429,[5]],[429,[5]]],15],[[[429,[9]],[429,[9]]],15],[[[429,[2]],2],15],[[[429,[6]],6],15],[[[429,[5]],5],15],[[[429,[11]],11],15],[-1,[[429,[6]]],107],[-1,[[429,[4]]],107],[-1,[[429,[7]]],107],[-1,[[429,[10]]],107],[-1,[[429,[3]]],107],[-1,[[429,[9]]],107],[-1,[[429,[12]]],107],[-1,[[429,[8]]],107],[-1,[[429,[6]]],107],[-1,[[429,[3]]],107],[-1,[[429,[5]]],107],[-1,[[429,[11]]],107],[-1,[[429,[10]]],107],[-1,[[429,[12]]],107],[-1,[[429,[2]]],107],[-1,[[429,[2]]],107],[-1,[[429,[7]]],107],[-1,[[429,[9]]],107],[-1,[[429,[11]]],107],[-1,[[429,[8]]],107],[-1,[[429,[1]]],107],[-1,[[429,[5]]],107],[-1,[[429,[4]]],107],[-1,[[429,[1]]],107],[[[428,[11]]],[[428,[11]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[10]]],[[428,[10]]]],[[[428,[12]]],[[428,[12]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[9]]],[[428,[9]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[5]]],[[429,[5]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[4]]],[[428,[4]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[9]]],[[428,[9]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[10]]],[[428,[10]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[11]]],[[428,[11]]]],[[[428,[12]]],[[428,[12]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[10]]],[[429,[10]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[9]]],[[429,[9]]]],[[[428,[5]]],[[428,[5]]]],[[[428,[9]]],[[428,[9]]]],[[[428,[10]]],[[428,[10]]]],[[[428,[2]]],[[428,[2]]]],[[[428,[1]]],[[428,[1]]]],[[[428,[7]]],[[428,[7]]]],[[[428,[8]]],[[428,[8]]]],[[[428,[6]]],[[428,[6]]]],[[[428,[12]]],[[428,[12]]]],[[[428,[3]]],[[428,[3]]]],[[[428,[11]]],[[428,[11]]]],[[[428,[4]]],[[428,[4]]]],[[[429,[8]]],[[429,[8]]]],[[[429,[5]]],[[429,[5]]]],[[[429,[9]]],[[429,[9]]]],[[[429,[12]]],[[429,[12]]]],[[[429,[7]]],[[429,[7]]]],[[[429,[2]]],[[429,[2]]]],[[[429,[1]]],[[429,[1]]]],[[[429,[4]]],[[429,[4]]]],[[[429,[11]]],[[429,[11]]]],[[[429,[3]]],[[429,[3]]]],[[[429,[6]]],[[429,[6]]]],[[[429,[10]]],[[429,[10]]]],[41,9],[42,9],[43,9],[44,9],[45,9],[47,9],[36,9],[37,9],[38,9],[39,9],[40,9],[46,9],[[[428,[2]]],9],[[[428,[12]]],9],[[[428,[11]]],9],[[[428,[3]]],9],[[[428,[9]]],9],[[[428,[1]]],9],[[[428,[6]]],9],[[[428,[8]]],9],[[[428,[4]]],9],[[[428,[5]]],9],[[[428,[7]]],9],[[[428,[10]]],9],[[[429,[8]]],9],[[[429,[3]]],9],[[[429,[1]]],9],[[[429,[4]]],9],[[[429,[2]]],9],[[[429,[12]]],9],[[[429,[9]]],9],[[[429,[5]]],9],[[[429,[11]]],9],[[[429,[6]]],9],[[[429,[10]]],9],[[[429,[7]]],9],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[44,[[30,[41]]]],[36,[[30,[41]]]],[40,[[30,[41]]]],[38,[[30,[41]]]],[46,[[30,[41]]]],[37,[[30,[41]]]],[39,[[30,[41]]]],[42,[[30,[41]]]],[47,[[30,[41]]]],[43,[[30,[41]]]],[45,[[30,[41]]]],[7,[[30,[41]]]],[38,[[30,[42]]]],[36,[[30,[42]]]],[47,[[30,[42]]]],[43,[[30,[42]]]],[39,[[30,[42]]]],[40,[[30,[42]]]],[8,[[30,[42]]]],[-1,[[30,[-2]]],[],[]],[45,[[30,[42]]]],[46,[[30,[42]]]],[37,[[30,[42]]]],[44,[[30,[42]]]],[40,[[30,[43]]]],[44,[[30,[43]]]],[38,[[30,[43]]]],[39,[[30,[43]]]],[9,[[30,[43]]]],[45,[[30,[43]]]],[47,[[30,[43]]]],[36,[[30,[43]]]],[46,[[30,[43]]]],[37,[[30,[43]]]],[-1,[[30,[-2]]],[],[]],[40,[[30,[44]]]],[46,[[30,[44]]]],[38,[[30,[44]]]],[39,[[30,[44]]]],[37,[[30,[44]]]],[36,[[30,[44]]]],[47,[[30,[44]]]],[10,[[30,[44]]]],[-1,[[30,[-2]]],[],[]],[45,[[30,[44]]]],[47,[[30,[45]]]],[11,[[30,[45]]]],[39,[[30,[45]]]],[36,[[30,[45]]]],[38,[[30,[45]]]],[-1,[[30,[-2]]],[],[]],[37,[[30,[45]]]],[46,[[30,[45]]]],[40,[[30,[45]]]],[40,[[30,[47]]]],[39,[[30,[47]]]],[36,[[30,[47]]]],[-1,[[30,[-2]]],[],[]],[46,[[30,[47]]]],[37,[[30,[47]]]],[43,[[30,[47]]]],[44,[[30,[47]]]],[45,[[30,[47]]]],[12,[[30,[47]]]],[38,[[30,[47]]]],[43,[[30,[36]]]],[42,[[30,[36]]]],[39,[[30,[36]]]],[45,[[30,[36]]]],[-1,[[30,[-2]]],[],[]],[38,[[30,[36]]]],[46,[[30,[36]]]],[1,[[30,[36]]]],[44,[[30,[36]]]],[40,[[30,[36]]]],[37,[[30,[36]]]],[41,[[30,[36]]]],[47,[[30,[36]]]],[47,[[30,[37]]]],[2,[[30,[37]]]],[38,[[30,[37]]]],[43,[[30,[37]]]],[39,[[30,[37]]]],[40,[[30,[37]]]],[45,[[30,[37]]]],[46,[[30,[37]]]],[44,[[30,[37]]]],[-1,[[30,[-2]]],[],[]],[42,[[30,[37]]]],[-1,[[30,[-2]]],[],[]],[3,[[30,[38]]]],[43,[[30,[38]]]],[39,[[30,[38]]]],[47,[[30,[38]]]],[44,[[30,[38]]]],[40,[[30,[38]]]],[45,[[30,[38]]]],[46,[[30,[38]]]],[46,[[30,[39]]]],[-1,[[30,[-2]]],[],[]],[44,[[30,[39]]]],[4,[[30,[39]]]],[47,[[30,[39]]]],[40,[[30,[39]]]],[45,[[30,[39]]]],[46,[[30,[40]]]],[-1,[[30,[-2]]],[],[]],[47,[[30,[40]]]],[45,[[30,[40]]]],[5,[[30,[40]]]],[44,[[30,[46]]]],[6,[[30,[46]]]],[-1,[[30,[-2]]],[],[]],[42,[[30,[46]]]],[38,[[30,[46]]]],[40,[[30,[46]]]],[45,[[30,[46]]]],[43,[[30,[46]]]],[47,[[30,[46]]]],[39,[[30,[46]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[41,7],41],[[42,8],42],[[43,9],43],[[44,10],44],[[45,11],45],[[47,12],47],[[41,41],41],[[42,42],42],[[43,43],43],[[44,44],44],[[45,45],45],[[47,47],47],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[46,46],46],[36,41],[37,42],[38,43],[39,44],[40,45],[46,47],[36,36],[37,37],[38,38],[39,39],[40,40],[46,46],[36,36],[37,37],[38,38],[39,39],[40,40],[46,46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[[26,[-1]],12],[[30,[15,47]]],436],[[[26,[-1]],12],[[30,[15,47]]],436],[[[67,[-1]]],[[67,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,437,[]],[[[437,[-1,-2]]],437,[],[]],[[[437,[-1,-2]]],[[22,[-1]]],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[[[437,[-1,-2]]],[[437,[-1,-2]]],57,57],[[[438,[-1,-2]]],[[438,[-1,-2]]],57,57],[439,439],[[[26,[-1]]],[[26,[-1]]],57],[[[358,[-1]]],[[358,[-1]]],57],[[[440,[-1]]],[[440,[-1]]],57],[[[441,[-1]]],[[441,[-1]]],57],[[[442,[-1]]],[[442,[-1]]],57],[[[67,[-1]]],[[67,[-1]]],57],[[[67,[-1]]],[[67,[-1]]],57],[[[438,[-1,-2]],[438,[-1,-2]]],58,31,31],[[-1,-2],33,[],[25,86],[[86,[-2]]]],[[-1,-2],33,[],[25,86],[[86,[-2]]]],[[[26,[-1]],-2],33,[],[25,[86,[-1]]]],[[[358,[-1]],-2],33,[],[25,[86,[-1]]]],[[[440,[-1]],-2],33,[],[25,[86,[-1]]]],[[[441,[-1]],-2],33,[],[25,[86,[-1]]]],[[[442,[-1]],-2],33,[],[25,[86,[-1]]]],[[[437,[-1,-2]]],[[22,[-2]]],[],[]],[[[26,[-1]]],12,436],[[[441,[-1]]],12,436],[[],439],[[],[[26,[-1]]],65],[-1,[],[]],[-1,[],[]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[-1,15,[]],[[[441,[-1]]],-1,[]],0,0,0,[-1,[[67,[-2]]],[],[]],[439,[[67,[-1]]],25],[[[26,[-1]]],[[67,[-1]]],[]],[[[26,[-1]]],[[67,[-1]]],[]],[[[358,[-1]]],[[67,[-1]]],[]],[[[358,[-1]]],[[67,[-1]]],[]],[[[440,[-1]]],[[67,[-1]]],[]],[[[440,[-1]]],[[67,[-1]]],[]],[[[441,[-1]]],[[67,[-1]]],[]],[[[441,[-1]]],[[67,[-1]]],[]],[[[442,[-1]]],[[67,[-1]]],[]],[[[442,[-1]]],[[67,[-1]]],[]],[[[437,[-1,-2]],[437,[-1,-2]]],33,59,59],[[[438,[-1,-2]],[438,[-1,-2]]],33,59,59],[[439,439],33],[[[26,[-1]],[26,[-1]]],33,59],[[[358,[-1]],[358,[-1]]],33,59],[[[440,[-1]],[440,[-1]]],33,59],[[[441,[-1]],[441,[-1]]],33,59],[[[442,[-1]],[442,[-1]]],33,59],[[[67,[-1]],[67,[-1]]],33,59],[[[437,[-1,-2]],77],78,79,79],[[[438,[-1,-2]],77],78,79,79],[[439,77],78],[[[26,[-1]],77],78,79],[[[358,[-1]],77],78,79],[[[440,[-1]],77],78,79],[[[441,[-1]],77],78,79],[[[442,[-1]],77],78,79],[[[67,[-1]],77],78,79],[[[443,[-1]],77],78,79],[[[441,[-1]],-2,-3],-2,436,[],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],[[437,[-1,-2]]],[],[]],[-1,-2,[],[]],[[[437,[-1,327]]],[[437,[-1,-2]]],[],[]],[[439,24],22],[[439,[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[26,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[26,[12]],24],22],[[[358,[12]],24],22],[[[358,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[440,[12]],24],22],[[[440,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[441,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[441,[12]],24],22],[[[442,[12]],24],22],[[[442,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[439,[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[439,24],22],[[[26,[12]],24],22],[[[26,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[358,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[358,[12]],24],22],[[[440,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[440,[12]],24],22],[[[441,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[441,[12]],24],22],[[[442,[12]],[16,[-1]]],[[22,[[16,[-1]]]]],[]],[[[442,[12]],24],22],[[439,24]],[[439,16],16],[[[26,[12]],16],16],[[[26,[12]],24]],[[[358,[12]],24]],[[[358,[12]],16],16],[[[440,[12]],24]],[[[440,[12]],16],16],[[[441,[12]],16],16],[[[441,[12]],24]],[[[442,[12]],16],16],[[[442,[12]],24]],[[439,16],16],[[439,24]],[[[26,[12]],16],16],[[[26,[12]],24]],[[[358,[12]],16],16],[[[358,[12]],24]],[[[440,[12]],16],16],[[[440,[12]],24]],[[[441,[12]],24]],[[[441,[12]],16],16],[[[442,[12]],16],16],[[[442,[12]],24]],[[[437,[-1,-2]],-3],15,92,92,91],[[[438,[-1,-2]],-3],15,92,92,91],[[439,-1],15,91],[[[26,[-1]],-2],15,92,91],[[[358,[-1]],-2],15,92,91],[[[440,[-1]],-2],15,92,91],[[[441,[-1]],-2],15,92,91],[[[442,[-1]],-2],15,92,91],[[[67,[-1]],-2],15,92,91],[[-1,-2],[],[],[]],[[439,[16,[-1]]],[[16,[-1]]],[]],[[439,24]],[[[26,[12]],24]],[[[26,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[358,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[358,[12]],24]],[[[440,[12]],24]],[[[440,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[441,[12]],24]],[[[441,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[442,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[442,[12]],24]],[[-1,-2],[],[],[]],[[439,24]],[[439,[16,[-1]]],[[16,[-1]]],[]],[[[26,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[26,[12]],24]],[[[358,[12]],24]],[[[358,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[440,[12]],24]],[[[440,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[441,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[441,[12]],24]],[[[442,[12]],[16,[-1]]],[[16,[-1]]],[]],[[[442,[12]],24]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[441,[-1]]],[[15,[-1,-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[437,[-1,-2]]],33,[],[]],[[[437,[-1,-2]]],33,[],[]],[[[26,[-1]]],33,[]],[[[441,[-1]]],33,[]],[[[26,[-1]]],33,436],[[[441,[-1]]],33,436],[[[26,[-1]]],[[22,[-1]]],436],[[[441,[-1]]],[[22,[-1]]],436],[[[67,[-1]],-2],[[67,[-3]]],[],102,[]],[[[437,[-1,-2]],-3],[[437,[-4,-2]]],[],[],102,[]],[[[437,[-1,-2]],-3],[[437,[-1,-4]]],[],[],102,[]],[[[26,[-1]]],[[22,[-1]]],[31,436]],[[[441,[-1]]],[[22,[-1]]],[31,436]],[[[26,[-1]]],[[22,[-1]]],[31,436]],[[[441,[-1]]],[[22,[-1]]],[31,436]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[-1,[],[]],[[-1,-1],[[441,[-1]]],[]],[[[26,[-1]]],[[22,[-1]]],436],[[[358,[-1]]],[[22,[-1]]],436],[[[441,[-1]]],[[22,[-1]]],436],[[[26,[-1]]],[[22,[-1]]],436],[[[441,[-1]]],[[22,[-1]]],436],[-1,[],[]],[[[26,[-1]],12],[[22,[-1]]],436],[[[358,[-1]],12],[[22,[-1]]],436],[[[441,[-1]],12],[[22,[-1]]],436],[[[26,[-1]],12],[[22,[-1]]],436],[[[441,[-1]],12],[[22,[-1]]],436],[[[438,[-1,-2]],[438,[-1,-2]]],[[22,[58]]],86,86],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[[329,[-1]],-2],438,[],[]],[[[441,[-1]],-2,-3],-2,436,[],32],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[[26,[-1]]],[[15,[12,[22,[12]]]]],436],[[[358,[-1]]],[[15,[12,[22,[12]]]]],436],[[[441,[-1]]],[[15,[12,[22,[12]]]]],436],[[[441,[-1]]],-1,[]],0,0,[-1,[[67,[-2]]],[],[]],[439,[[67,[-1]]],25],[[[26,[-1]]],[[67,[-1]]],[]],[[[26,[-1]]],[[67,[-1]]],[]],[[[358,[-1]]],[[67,[-1]]],[]],[[[358,[-1]]],[[67,[-1]]],[]],[[[440,[-1]]],[[67,[-1]]],[]],[[[440,[-1]]],[[67,[-1]]],[]],[[[441,[-1]]],[[67,[-1]]],[]],[[[441,[-1]]],[[67,[-1]]],[]],[[[442,[-1]]],[[67,[-1]]],[]],[[[442,[-1]]],[[67,[-1]]],[]],[[-1,-2],[],[],[]],[[-1,-2],15,[],[]],[[[441,[-1]],-2,-3],-4,436,[],32,415],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[441,[-1]],-2,-3],-4,436,[],32,415],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,[[[22,[-1]],[22,[-2]]],[[22,[-2]]],[],[]],[[[22,[-1]],-2],[[22,[-3]]],[],102,[]],[[[22,[-1]]],22,444],[[[22,[-1]]],22,445],[[[22,[-1]]],[[22,[-1]]],[]],[[[22,[-1]]],[[16,[-1]]],[]],[[[329,[[22,[-1]]]]],[[22,[[329,[-1]]]]],[]],[[[329,[[22,[-1]]]]],[[22,[[329,[-1]]]]],[]],[[[22,[-1]]],[[22,[-1]]],[]],[[[22,[-1]]],[[16,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],437,[]],[[[22,[-1]]],[[22,[-1]]],57],[[[446,[-1]]],[[446,[-1]]],[]],[[[447,[-1]]],[[447,[-1]]],57],[[[22,[-1]],[22,[-1]]],15,57],[[[22,[-1]]],[[22,[-1]]],57],[[[22,[-1]]],[[22,[-1]]],57],[[[22,[-1]],[22,[-1]]],58,31],[[[22,[-1]]],[[22,[-1]]],61],[[[22,[-1]]],[[22,[-1]]],61],[[],[[22,[-1]]],[]],[[[22,[-1]],[22,[-1]]],33,59],[[[22,[-1]],24],-1,[]],[[[22,[-1]],-2],[[22,[-1]]],[],102],[[[22,[[22,[-1]]]]],[[22,[-1]]],[]],[[[22,[-1]],77],78,79],[[[446,[-1]],77],78,79],[[[448,[-1]],77],78,79],[[[447,[-1]],77],78,79],[56,-1,[]],[-1,-1,[]],[[[22,[-1]]],[[22,[-1]]],[]],[[[22,[-1]]],[[22,[-1]]],[]],[-1,[[22,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[22,[-3]]],64,[],[[410,[-2]]]],[[],[[22,[-1]]],[]],[[[22,[327]]],[[22,[-1]]],[]],[[[443,[15]]],[[22,[-1]]],[]],[[[22,[-1]],-1],-1,[]],[[[22,[-1]]],-1,65],[[[22,[-1]],-2],-1,[],102],[[[22,[-1]],-2],15,92,91],[[[22,[-1]],-1],-1,[]],[[[22,[-1]],-2],[[22,[-1]]],[],102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[447,[-1]]],[]],[[[22,[-1]]],[[446,[-1]]],[]],[[[22,[-1]]],[[448,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],33,[]],[[[22,[-1]]],33,[]],[[[22,[-1]],-2],33,[],102],[[[22,[-1]]],[[446,[-1]]],[]],[[[22,[-1]]],[[448,[-1]]],[]],[[[22,[-1]],-2],[[22,[-3]]],[],102,[]],[[[22,[-1]],-2,-3],-2,[],[],102],[[[22,[-1]],-2,-3],-4,[],102,102,[]],[[[446,[-1]]],[[22,[-1]]],[]],[[[448,[-1]]],[[22,[-1]]],[]],[[[447,[-1]]],[[22,[-1]]],[]],[[[446,[-1]]],[[22,[-1]]],[]],[[[448,[-1]]],[[22,[-1]]],[]],[[[447,[-1]]],[[22,[-1]]],[]],[[[22,[-1]],-2],[[30,[-1,-2]]],[],[]],[[[22,[-1]],-2],[[30,[-1,-3]]],[],102,[]],[[[22,[-1]],[22,[-1]]],[[22,[-1]]],[]],[[[22,[-1]],-2],[[22,[-1]]],[],102],[[[22,[-1]],[22,[-1]]],[[22,[58]]],86],[-1,[[22,[-3]]],107,[],[[413,[-2]]]],[[[22,[-1]],-1],[[22,[-1]]],[]],[[[446,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[448,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[447,[-1]]],[[15,[12,[22,[12]]]]],[]],[-1,[[22,[-3]]],107,[],[[414,[-2]]]],[[[22,[-1]]],[[22,[-1]]],[]],[[[22,[-1]],-2],[[22,[-1]]],[],102],[[[22,[[30,[-1,-2]]]]],[[30,[[22,[-1]],-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[[22,[-1]]],-1,[]],[[[22,[-1]],-1],-1,[]],[[[22,[-1]]],-1,65],[[[22,[-1]],-2],-1,[],102],[[[22,[-1]]],-1,[]],[[[22,[[15,[-1,-2]]]]],[[15,[[22,[-1]],[22,[-2]]]]],[],[]],[[[22,[-1]],[22,[-1]]],[[22,[-1]]],[]],[[[22,[-1]],[22,[-2]]],[[22,[[15,[-1,-2]]]]],[],[]],[[[22,[-1]],[22,[-2]],-3],[[22,[-4]]],[],[],102,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[449,[-1]],15],-2,102,[]],[[],450],[451,33],[450,450],[[450,450],58],[450,9],[[],[[449,[-1]]],65],[[[449,[-1]]],-1,[]],[[[449,[-1]]],-1,[]],[[450,450],33],[450,24],[[[449,[-1]],77],78,79],[[450,77],78],[[450,77],78],[[451,77],78],[[451,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[450,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[450,9],[451,[[22,[450]]]],[451,[[22,[361]]]],[[450,450],[[22,[58]]]],[451,144],[[[329,[[449,[-1]]]],330],331,452],[[[329,[[449,[-1]]]],330],[[331,[22]]],453],[[[449,[-1]]],[[15,[12,[22,[12]]]]],453],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[361,56],[24,56],[-1,56,342],[361,56],[24,56],[[361,33],56],[24,56],[24,56],[-1,56,342],0,[[[329,[[329,[-1]]]]],329,445],[[[329,[-1]]],329,445],[[[329,[-1]]],329,444],[-1,-2,[],[]],[-1,-2,[],[]],[[[329,[-1]]],[[329,[-1]]],57],[[[329,[-1]],[329,[-1]]],58,444],[[[329,[-1]]],[],444],[[[329,[-1]]],[],445],[[[329,[-1]],[329,[-2]]],33,444,444],[[[329,[-1]],77],78,342],[[[329,[-1]],77],78,79],[[[329,[-1]],77],78,454],[-1,-1,[]],[[[329,[-1]],[329,[-2]]],33,444,444],[[[329,[-1]]],-1,[412,25]],[[[329,[-1]]],-1,25],[[[329,[-1]]],-1,25],[[[329,[-1]],[329,[-2]]],33,444,444],[[[329,[-1]],-2],15,444,91],[-1,-2,[],[]],[-1,[],[]],[[[329,[-1]]],-1,444],[[[329,[-1]]],-1,444],[[[329,[-1]]],[[329,[-1]]],25],[[[329,[-1]],[329,[-2]]],33,444,444],[[[329,[-1]],[329,[-2]]],33,444,444],[[[329,[-1]],-2],[[329,[-3]]],25,102,25],[[[329,[-1]],-2],[[329,[-3]]],25,102,25],[[[329,[-1]],[329,[-2]]],33,444,444],[-1,[[329,[-1]]],444],[-1,[[329,[-1]]],444],[[[329,[-1]],[329,[-2]]],[[22,[58]]],444,444],0,[[[329,[[329,[-1]]]],330],331,445],[[[329,[[329,[-1]]]],330],[[331,[22]]],445],[[[329,[[329,[-2]]]],-1],438,[],[25,[411,[-1]]]],[[[329,[-1]]],15,445],[[[329,[-1]]],[[15,[12,[22,[12]]]]],445],[-1,[[329,[-1]]],25],[-1,[[329,[-1]]],25],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[142,[-1]]],47,25],0,0,[[[455,[-1]]],12,25],[[[142,[-1]]],-1,25],[[[142,[[16,[-1]]]]],[],[]],[[[142,[[16,[-1]]]]],[[142,[-1]]],[]],[83,47],[[[142,[-1]]],[],25],[[[142,[-1]]],-1,25],[[[142,[-1]]],[[29,[-1]]],25],[[[142,[-1]]],[[29,[-1]]],25],[[[142,[[16,[-1]]]]],[[16,[[29,[-1]]]]],[]],[[[142,[[16,[-1]]]]],[[16,[[29,[-1]]]]],[]],[83,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[142,[-1]]],[[142,[-2]]],25,[]],[[[455,[-1]]],[[455,[-1]]],25],[[[142,[-1]]],[[142,[-1]]],25],[83,83],[[[455,[-1]],[455,[-1]]],58,25],[[[142,[-1]],[142,[-1]]],58,25],[[83,83],58],[12,15],[12,15],[[],[[142,[-1]]],25],[[],15],[[],33],[[[455,[-1]],[455,[-1]]],33,25],[[[142,[-1]],[142,[-1]]],33,25],[[83,83],33],[[[455,[-1]],77],78,25],[[[142,[-1]],77],78,25],[[[142,[-1]],77],78,25],[[83,77],78],[-1,-1,[]],[-1,-1,[]],[-1,[[142,[-1]]],25],[-1,[[142,[-1]]],25],[-1,-1,[]],[12],[12],[-1,[],25],[15],[[[142,[15]]],[[142,[-1]]],25],[15],[-1,[],25],[[[142,[[16,[-1]]]],-2],142,[],[[87,[[16,[-1]]]]]],[-1,15,91],[[[455,[-1]],-2],15,25,91],[[[142,[-1]],-2],15,25,91],[[83,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12],[12],[[[455,[-1]]],140,25],[[[142,[[16,[-1]]]]],12,[]],[83,9],[[[142,[-1]],-2],[[142,[-1]]],25,102],[[]],[[],[[22,[[142,[-1]]]]],25],[12,[[22,[83]]]],[[],[[142,[-1]]],25],[12,83],[[]],[[]],[[],83],[[[455,[-1]],[455,[-1]]],[[22,[58]]],25],[[[142,[-1]],[142,[-1]]],[[22,[58]]],25],[[83,83],[[22,[58]]]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[[[455,[-1]]],12,25],[12,16],[[[142,[-1]],12],[[142,[[16,[-1]]]]],[]],[12,16],[[],15],[12,15],[[[142,[-1]]],[[15,[[142,[15]]]]],25],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[12,[[30,[83]]]],[-1,[[30,[-2]]],[],[]],[47,[[30,[83]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[[142,[-1]],47],[[142,[-1]]],25],[-1,15,[]],[[7,12],15],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,[[[30,[-1,-2]],[30,[-3,-2]]],[[30,[-3,-2]]],[],[],[]],[[[30,[-1,-2]],-3],[[30,[-4,-2]]],[],[],102,[]],[[[30,[-1,-2]]],[[30,[-2]]],444,[]],[[[30,[-1,-2]]],[[30,[-2]]],445,[]],[[[30,[-1,-2]]],[[30,[-1,-2]]],[],[]],[[[30,[-1,-2]]],[[30,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1,-2]]],437,[],[]],[[[30,[-1,-2]]],[[30,[-1,-2]]],57,57],[[[456,[-1]]],[[456,[-1]]],[]],[[[457,[-1]]],[[457,[-1]]],57],[[[30,[-1,-2]],[30,[-1,-2]]],15,57,57],[[[30,[-1,-2]]],[[30,[-1,-2]]],57,[]],[[[30,[-1,-2]]],[[30,[-1,-2]]],57,[]],[[[30,[-1,-2]],[30,[-1,-2]]],58,31,31],[[[30,[-1,-2]]],[[30,[-1,-2]]],61,[]],[[[30,[-1,-2]]],[[30,[-1,-2]]],61,[]],[[[30,[-1,-2]],[30,[-1,-2]]],33,59,59],[[[30,[-1,-2]]],[[22,[-2]]],[],[]],[[[30,[-1,-2]],24],-1,[],79],[[[30,[-1,-2]],24],-2,79,[]],[[[30,[[30,[-1,-2]],-2]]],[[30,[-1,-2]]],[],[]],[[[30,[-1,-2]],77],78,79,79],[[[456,[-1]],77],78,79],[[[458,[-1]],77],78,79],[[[457,[-1]],77],78,79],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[30,[-3,-4]]],64,[],[[410,[-2]]],[]],[[],[[30,[-1,-2]]],[],[]],[[[443,[-1]]],[[30,[-2,-3]]],[],[],[[459,[-1]]]],[[[30,[327,-1]]],[[30,[-2,-3]]],[],[],[[459,[-1]]]],[[[30,[-1,-2]],-3],15,92,92,91],[[[30,[-1,-2]],-3],[[30,[-1,-2]]],[],[],102],[[[30,[-1,-2]],-3],[[30,[-1,-2]]],[],[],102],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1,-2]]],-2,[[427,[56]]],[]],[[[30,[-1,-2]]],[[458,[-1]]],[],[]],[[[30,[-1,-2]]],[[456,[-1]]],[],[]],[[[30,[-1,-2]]],[[457,[-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[-1,-2]]],-1,[],[[427,[56]]]],[[[30,[-1,-2]]],33,[],[]],[[[30,[-1,-2]],-3],33,[],[],102],[[[30,[-1,-2]]],33,[],[]],[[[30,[-1,-2]],-3],33,[],[],102],[[[30,[-1,-2]]],[[456,[-1]]],[],[]],[[[30,[-1,-2]]],[[458,[-1]]],[],[]],[[[30,[-1,-2]],-3],[[30,[-4,-2]]],[],[],102,[]],[[[30,[-1,-2]],-3],[[30,[-1,-4]]],[],[],102,[]],[[[30,[-1,-2]],-3,-4],-3,[],[],[],102],[[[30,[-1,-2]],-3,-4],-5,[],[],102,102,[]],[[[456,[-1]]],[[22,[-1]]],[]],[[[458,[-1]]],[[22,[-1]]],[]],[[[457,[-1]]],[[22,[-1]]],[]],[[[456,[-1]]],[[22,[-1]]],[]],[[[458,[-1]]],[[22,[-1]]],[]],[[[457,[-1]]],[[22,[-1]]],[]],[[[30,[-1,-2]]],[[22,[-1]]],[],[]],[[[30,[-1,-2]],[30,[-1,-3]]],[[30,[-1,-3]]],[],[],[]],[[[30,[-1,-2]],-3],[[30,[-1,-4]]],[],[],102,[]],[[[30,[-1,-2]],[30,[-1,-2]]],[[22,[58]]],86,86],[-1,[[30,[-3,-4]]],107,[],[[413,[-2]]],[]],[[[456,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[458,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[457,[-1]]],[[15,[12,[22,[12]]]]],[]],[-1,[[30,[-3,-4]]],107,[],[[414,[-2]]],[]],[[[30,[[22,[-1]],-2]]],[[22,[[30,[-1,-2]]]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[[30,[-1,-2]]],-1,[],79],[[[30,[-1,-2]]],-2,79,[]],[[[30,[-1,-2]]],-2,[],[]],[[[30,[-1,-2]],-1],-1,[],[]],[[[30,[-1,-2]]],-1,65,[]],[[[30,[-1,-2]],-3],-1,[],[],102],[[[30,[-1,-2]]],-1,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[[[27,[13]]],[[27,[13]]]],[[[27,[2]]],[[27,[2]]]],[[[27,[4]]],[[27,[4]]]],[[[27,[6]]],[[27,[6]]]],[[[27,[1]]],[[27,[1]]]],[[[27,[14]]],[[27,[14]]]],[[[27,[3]]],[[27,[3]]]],[[[27,[6]],[27,[6]]]],[[[27,[4]],[27,[4]]]],[[[27,[2]],[27,[2]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[9]],[27,[9]]]],[[[27,[8]],[27,[8]]]],[[[27,[13]],[27,[13]]]],[[[27,[3]],[27,[3]]]],[[[27,[10]],[27,[10]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[7]],[27,[7]]]],[[[27,[12]],[27,[12]]]],[[[27,[14]],[27,[14]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[1]],[27,[1]]]],[[[27,[-1]],-2],15,28,[]],[-1,[],[]],[-1,[],[]],[27],[27],[[[34,[-1]]],33,35],[[[34,[-1]]],33,35],[[[27,[-1]]],[[23,[-1]]],28],[[[27,[-1]]],[[16,[-1]]],28],[[[27,[-1]]],[[23,[-1]]],28],[[[27,[-1]]],[[23,[-1]]],28],[[[27,[-1]]],[[23,[-1]]],28],[[[27,[-1]]],[[16,[-1]]],28],[[[34,[-1]],[34,[-1]]],[[34,[-1]]],35],[[[34,[-1]],33],[[34,[-1]]],35],[[[27,[6]],[27,[6]]]],[[[27,[1]],[27,[1]]]],[[[27,[3]],[27,[3]]]],[[[27,[4]],[27,[4]]]],[[[27,[9]],[27,[9]]]],[[[27,[7]],[27,[7]]]],[[[27,[10]],[27,[10]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[8]],[27,[8]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[12]],[27,[12]]]],[[[27,[2]],[27,[2]]]],[[[34,[-1]],[34,[-1]]],15,35],[[[34,[-1]],33],15,35],[[[27,[-1]],-2],15,28,[]],[[[34,[-1]],33],[[34,[-1]]],35],[[[34,[-1]],[34,[-1]]],[[34,[-1]]],35],[[[27,[10]],[27,[10]]]],[[[27,[12]],[27,[12]]]],[[[27,[6]],[27,[6]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[9]],[27,[9]]]],[[[27,[1]],[27,[1]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[7]],[27,[7]]]],[[[27,[3]],[27,[3]]]],[[[27,[2]],[27,[2]]]],[[[27,[4]],[27,[4]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[8]],[27,[8]]]],[[[34,[-1]],33],15,35],[[[34,[-1]],[34,[-1]]],15,35],[[[27,[-1]],-2],15,28,[]],[[[34,[-1]],33],[],35],[[[34,[-1]],[34,[-1]]],[],35],[[[27,[9]],[27,[9]]]],[[[27,[10]],[27,[10]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[6]],[27,[6]]]],[[[27,[3]],[27,[3]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[2]],[27,[2]]]],[[[27,[4]],[27,[4]]]],[[[27,[7]],[27,[7]]]],[[[27,[12]],[27,[12]]]],[[[27,[8]],[27,[8]]]],[[[27,[1]],[27,[1]]]],[[[34,[-1]],[34,[-1]]],15,35],[[[34,[-1]],33],15,35],[[[27,[-1]],-2],15,28,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[34,[-1]]],[[34,[-2]]],35,35],[27],[[[27,[3]]]],[[[27,[2]]]],[[[27,[9]]]],[[[27,[14]]]],[[[27,[7]]]],[[[27,[10]]]],[[[27,[6]]]],[[[27,[1]]]],[[[27,[12]]]],[[[27,[4]]]],[[[27,[8]]]],[[[27,[13]]]],[27],[-1,[],[]],[27],[-1,[],[]],[27],[[[34,[-1]]],[[34,[-1]]],35],[[[27,[-1]]],[[27,[-1]]],28],[460,460],[[[27,[-1]],[27,[-1]]],58,[28,31]],[[460,460],58],[[[27,[-1]],[16,[-1]]],15,28],[[-1,-1],-1,[]],[[[27,[14]],[27,[14]]],[[27,[14]]]],[[[27,[13]],[27,[13]]],[[27,[13]]]],[[],[[34,[-1]]],35],[[],[[27,[-1]]],[28,65]],[[[27,[-1]],[27,[-1]]],[[15,[[27,[-1]],[27,[-1]]]]],28],[[[27,[14]],[27,[14]]]],[[[27,[6]],[27,[6]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[9]],[27,[9]]]],[[[27,[2]],[27,[2]]]],[[[27,[12]],[27,[12]]]],[[[27,[1]],[27,[1]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[7]],[27,[7]]]],[[[27,[3]],[27,[3]]]],[[[27,[4]],[27,[4]]]],[[[27,[10]],[27,[10]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[13]],[27,[13]]]],[[[27,[8]],[27,[8]]]],[[[27,[-1]],-2],15,28,[]],[[[34,[-1]],[34,[-1]]],33,[35,59]],[[[27,[-1]],[27,[-1]]],33,[28,59]],[[460,460],33],[-1,[],[]],[-1,[],[]],[27],[27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[34,[-1]],77],78,[35,79]],[[[27,[-1]],77],78,[28,79]],[[460,77],78],[-1,-1,[]],[[[34,[3]]],[[34,[1]]]],[[[34,[6]]],[[34,[4]]]],[-1,-1,[]],[[[34,[2]]],[[34,[4]]]],[[[34,[2]]],[[34,[6]]]],[[[34,[2]]],[[34,[3]]]],[[[34,[1]]],[[34,[4]]]],[[[34,[3]]],[[34,[2]]]],[[[34,[3]]],[[34,[6]]]],[[[34,[6]]],[[34,[3]]]],[[[34,[2]]],[[34,[1]]]],[[[34,[1]]],[[34,[2]]]],[[[23,[33]]],[[34,[-1]]],35],[[[34,[6]]],[[34,[2]]]],[[[34,[3]]],[[34,[4]]]],[[[34,[4]]],[[34,[2]]]],[[[34,[1]]],[[34,[3]]]],[[[34,[6]]],[[34,[1]]]],[[[34,[1]]],[[34,[6]]]],[[[34,[4]]],[[34,[6]]]],[[[34,[4]]],[[34,[1]]]],[[[34,[4]]],[[34,[3]]]],[-1,-1,[]],[[[23,[-1]]],[[27,[-1]]],28],[-1,-1,[]],[276,294],[273,302],[285,321],[276,293],[273,310],[285,314],[276,290],[273,307],[285,313],[276,291],[273,305],[285,320],[276,292],[273,304],[285,316],[276,296],[273,306],[285,315],[276,289],[273,301],[285,319],[276,298],[273,303],[285,317],[276,297],[273,309],[285,318],[276,295],[273,308],[285,322],[268,299],[275,311],[287,323],[277,300],[274,312],[286,324],[[[23,[33]]],[[34,[-1]]],35],[[[23,[-1]]],[[27,[-1]]],28],[[],-1,[]],[7,[[34,[-1]]],35],[7,[[34,[-1]]],35],[7,[[34,[-1]]],35],[9,[[34,[-1]]],35],[10,[[34,[-1]]],35],[8,[[34,[-1]]],35],[7,[[34,[-1]]],35],[[],-1,[]],[[[27,[9]]],[[27,[13]]]],[[[27,[10]]],[[27,[14]]]],[[],-1,[]],[[],-1,[]],[[],27],[[],27],[[[27,[-1]]],[[34,[-1]]],35],[[[27,[-1]]],[[34,[-1]]],35],[[[16,[-1]]],[[27,[-1]]],28],[[[16,[-1]],[27,[12]],[27,[-1]]],[[27,[-1]]],28],[[[16,[-1]],[27,[12]]],[[27,[-1]]],[65,28]],[27,[[27,[-1]]],[65,28]],[[[16,[-1]],[34,[6]],[27,[12]],[27,[-1]]],[[27,[-1]]],28],[[27,[34,[6]],[27,[-1]]],[[27,[-1]]],28],[[[16,[-1]],[34,[6]],[27,[12]],[27,[-1]]],[[27,[-1]]],28],[[[27,[-1]],-2],15,[28,92],91],[[460,-1],15,91],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[27,[-1]],-2],[],28,[[87,[[16,[-1]]]]]],[[[27,[-1]],-2],[],28,[[87,[[16,[-1]]]]]],[[[27,[-1]],[27,[-1]]],[[15,[[27,[-1]],[27,[-1]]]]],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[27,[14]]]],[[[27,[13]]]],[-1,[],[]],[[[27,[13]]]],[[[27,[14]]]],[-1,[],[]],[[[27,[13]]]],[[[27,[14]]]],[-1,[],[]],[[[27,[3]]]],[[[27,[1]]]],[[[27,[2]]]],[[[27,[4]]]],[[[27,[6]]]],[-1,[],[]],[[[27,[13]]]],[[[27,[14]]]],[-1,[],[]],[-1,[],[]],[27],[27],[-1,[],[]],[[[27,[2]]]],[[[27,[1]]]],[[[27,[3]]]],[[[27,[4]]]],[[[27,[6]]]],[-1,[],[]],[[[27,[13]]]],[[[27,[14]]]],[-1,[],[]],[[[27,[14]]]],[[[27,[13]]]],[-1,[],[]],[[[27,[14]]]],[[[27,[13]]]],0,0,0,0,0,0,0,[[[27,[-1]]],12,28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[27,[10]],[27,[10]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[9]],[27,[9]]]],[[[27,[8]],[27,[8]]]],[[[27,[6]],[27,[6]]]],[[[27,[4]],[27,[4]]]],[[[27,[1]],[27,[1]]]],[[[27,[7]],[27,[7]]]],[[[27,[2]],[27,[2]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[14]],[27,[14]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[12]],[27,[12]]]],[[[27,[3]],[27,[3]]]],[[[27,[13]],[27,[13]]]],[[[27,[-1]],-2],15,28,[]],[[[27,[-1]],[27,[-1]]],33,[28,59]],[[[27,[13]]]],[[[27,[1]]]],[[[27,[3]]]],[[[27,[14]]]],[[[27,[6]]]],[[[27,[2]]]],[[[27,[4]]]],[[[34,[-1]]],[],35],[[[27,[1]]]],[[[27,[9]]]],[[[27,[8]]]],[[[27,[10]]]],[[[27,[7]]]],[[[27,[12]]]],[[[27,[4]]]],[[[27,[3]]]],[[[27,[2]]]],[[[27,[6]]]],[[[34,[-1]],[34,[-1]]],[[22,[58]]],[35,86]],[[[27,[-1]],[27,[-1]]],[[22,[58]]],[28,86]],[[460,460],[[22,[58]]]],0,[-1,[[27,[6]]],107],[-1,[[27,[10]]],107],[-1,[[27,[7]]],107],[-1,[[27,[3]]],107],[-1,[[27,[12]]],107],[-1,[[27,[1]]],107],[-1,[[27,[9]]],107],[-1,[[27,[12]]],107],[-1,[[27,[10]]],107],[-1,[[27,[9]]],107],[-1,[[27,[3]]],107],[-1,[[27,[7]]],107],[-1,[[27,[4]]],107],[-1,[[27,[14]]],107],[-1,[[27,[4]]],107],[-1,[[27,[2]]],107],[-1,[[27,[13]]],107],[-1,[[27,[6]]],107],[-1,[[27,[8]]],107],[-1,[[27,[1]]],107],[-1,[[27,[13]]],107],[-1,[[27,[2]]],107],[-1,[[27,[14]]],107],[-1,[[27,[8]]],107],[-1,-1,[]],[[[27,[13]]],[[27,[13]]]],[[[27,[14]]],[[27,[14]]]],[-1,[],[]],[-1,[],[]],[[[27,[6]]]],[[[27,[10]]]],[[[27,[12]]]],[[[27,[2]]]],[[[27,[9]]]],[[[27,[4]]]],[[[27,[3]]]],[[[27,[7]]]],[[[27,[1]]]],[[[27,[8]]]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[27,[6]]]],[[[27,[9]]]],[[[27,[13]]]],[[[27,[2]]]],[[[27,[4]]]],[[[27,[8]]]],[[[27,[12]]]],[[[27,[1]]]],[[[27,[3]]]],[[[27,[10]]]],[[[27,[14]]]],[[[27,[7]]]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[27,[3]]]],[[[27,[12]]]],[[[27,[7]]]],[[[27,[6]]]],[[[27,[10]]]],[[[27,[14]]]],[[[27,[9]]]],[[[27,[13]]]],[[[27,[8]]]],[[[27,[2]]]],[[[27,[1]]]],[[[27,[4]]]],[-1,[],[]],[-1,[],[]],[[[27,[10]]]],[[[27,[2]]]],[[[27,[3]]]],[[[27,[12]]]],[[[27,[9]]]],[[[27,[8]]]],[[[27,[4]]]],[[[27,[6]]]],[[[27,[7]]]],[[[27,[1]]]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[27,[9]]]],[[[27,[6]]]],[[[27,[1]]]],[[[27,[4]]]],[[[27,[13]]]],[[[27,[8]]]],[[[27,[14]]]],[[[27,[10]]]],[[[27,[7]]]],[[[27,[2]]]],[[[27,[12]]]],[[[27,[3]]]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[[27,[3]]]],[[[27,[9]]]],[[[27,[14]]]],[[[27,[6]]]],[[[27,[8]]]],[[[27,[12]]]],[[[27,[2]]]],[[[27,[4]]]],[[[27,[1]]]],[[[27,[13]]]],[[[27,[7]]]],[[[27,[10]]]],[-1,[],[]],[-1,[],[]],[[[27,[9]]]],[[[27,[4]]]],[[[27,[1]]]],[[[27,[3]]]],[[[27,[10]]]],[[[27,[6]]]],[[[27,[7]]]],[[[27,[2]]]],[[[27,[8]]]],[[[27,[12]]]],[[[27,[4]],[27,[4]]]],[[[27,[13]],[27,[13]]]],[[[27,[8]],[27,[8]]]],[[[27,[3]],[27,[3]]]],[[[27,[12]],[27,[12]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[7]],[27,[7]]]],[[[27,[6]],[27,[6]]]],[[[27,[10]],[27,[10]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[2]],[27,[2]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[14]],[27,[14]]]],[[[27,[1]],[27,[1]]]],[[[27,[9]],[27,[9]]]],[[[27,[-1]],-2],15,28,[]],[[[27,[-1]]],[[27,[-1]]],28],[[[27,[-1]]],[[27,[-1]]],28],[[[27,[-1]]],[[27,[-1]]],28],[-1,-1,[]],[[[27,[6]]],[[27,[6]]]],[[[27,[3]]],[[27,[3]]]],[[[27,[4]]],[[27,[4]]]],[[[27,[2]]],[[27,[2]]]],[[[27,[1]]],[[27,[1]]]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[27,[6]],[27,[6]]],[[27,[6]]]],[[[27,[9]],[27,[9]]],[[27,[9]]]],[[[27,[12]],[27,[12]]],[[27,[12]]]],[[[27,[4]],[27,[4]]],[[27,[4]]]],[[[27,[1]],[27,[1]]],[[27,[1]]]],[[[27,[10]],[27,[10]]],[[27,[10]]]],[[[27,[8]],[27,[8]]],[[27,[8]]]],[[[27,[2]],[27,[2]]],[[27,[2]]]],[[[27,[7]],[27,[7]]],[[27,[7]]]],[[[27,[3]],[27,[3]]],[[27,[3]]]],[-1,-1,[]],[[[27,[2]]],[[27,[2]]]],[[[27,[4]]],[[27,[4]]]],[[[27,[6]]],[[27,[6]]]],[[[27,[3]]],[[27,[3]]]],[[[27,[1]]],[[27,[1]]]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[27,[10]],[27,[10]]],[[27,[10]]]],[[[27,[9]],[27,[9]]],[[27,[9]]]],[[[27,[6]],[27,[6]]],[[27,[6]]]],[[[27,[3]],[27,[3]]],[[27,[3]]]],[[[27,[4]],[27,[4]]],[[27,[4]]]],[[[27,[2]],[27,[2]]],[[27,[2]]]],[[[27,[12]],[27,[12]]],[[27,[12]]]],[[[27,[7]],[27,[7]]],[[27,[7]]]],[[[27,[1]],[27,[1]]],[[27,[1]]]],[[[27,[8]],[27,[8]]],[[27,[8]]]],[[[27,[-1]],[16,[-1]],[27,[12]]],15,28],[[[27,[-1]],27],15,28],[[[27,[-1]],[16,[-1]],[34,[6]],[27,[12]]],15,28],[[[27,[-1]],27,[34,[6]]],15,28],[[[27,[-1]],[16,[-1]],[34,[6]],[27,[12]]],15,28],[[[34,[-1]],[27,[-2]],[27,[-2]]],[[27,[-2]]],35,28],[[[34,[-1]],[34,[-1]],[34,[-1]]],[[34,[-1]]],35],[[[34,[-1]],12,33],15,35],[[[34,[-1]],12,33],15,35],[[[27,[12]],[27,[12]]]],[[[27,[8]],[27,[8]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[9]],[27,[9]]]],[[[27,[7]],[27,[7]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[3]],[27,[3]]]],[[[27,[1]],[27,[1]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[6]],[27,[6]]]],[[[27,[2]],[27,[2]]]],[[[27,[10]],[27,[10]]]],[[[27,[4]],[27,[4]]]],[[[27,[-1]],-2],15,28,[]],[[[27,[6]],[27,[6]]]],[[[27,[2]],[27,[2]]]],[[[27,[12]],[27,[12]]]],[[[27,[1]],[27,[1]]]],[[[27,[7]],[27,[7]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[10]],[27,[10]]]],[[[27,[9]],[27,[9]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[3]],[27,[3]]]],[[[27,[8]],[27,[8]]]],[[[27,[4]],[27,[4]]]],[[[27,[-1]],-2],15,28,[]],[-1,-1,[]],[-1,-1,[]],[[[27,[3]]],[[27,[3]]]],[[[27,[6]]],[[27,[6]]]],[[[27,[1]]],[[27,[1]]]],[[[27,[13]]],[[27,[13]]]],[[[27,[4]]],[[27,[4]]]],[[[27,[2]]],[[27,[2]]]],[[[27,[14]]],[[27,[14]]]],[[-1,-1,-1],-1,[]],[[-1,-1,-1],-1,[]],[[[34,[6]],[34,[6]],[34,[6]]],[[34,[6]]]],[[[34,[1]],[34,[1]],[34,[1]]],[[34,[1]]]],[[[34,[2]],[34,[2]],[34,[2]]],[[34,[2]]]],[[[34,[3]],[34,[3]],[34,[3]]],[[34,[3]]]],[[[34,[4]],[34,[4]],[34,[4]]],[[34,[4]]]],[[[27,[2]],[27,[2]],[27,[2]]],[[27,[2]]]],[[27,27,27],27],[[27,27,27],27],[[[27,[3]],[27,[3]],[27,[3]]],[[27,[3]]]],[[[27,[6]],[27,[6]],[27,[6]]],[[27,[6]]]],[[[27,[14]],[27,[14]],[27,[14]]],[[27,[14]]]],[[[27,[12]],[27,[12]],[27,[12]]],[[27,[12]]]],[[[27,[8]],[27,[8]],[27,[8]]],[[27,[8]]]],[[[27,[10]],[27,[10]],[27,[10]]],[[27,[10]]]],[[[27,[4]],[27,[4]],[27,[4]]],[[27,[4]]]],[[[27,[1]],[27,[1]],[27,[1]]],[[27,[1]]]],[[[27,[7]],[27,[7]],[27,[7]]],[[27,[7]]]],[[[27,[13]],[27,[13]],[27,[13]]],[[27,[13]]]],[[[27,[9]],[27,[9]],[27,[9]]],[[27,[9]]]],[[-1,-1],[],[]],[[[34,[3]],[34,[3]]]],[[[34,[6]],[34,[6]]]],[[[34,[2]],[34,[2]]]],[[[34,[4]],[34,[4]]]],[[[34,[1]],[34,[1]]]],[[[27,[14]],[27,[14]]]],[[[27,[9]],[27,[9]]]],[[[27,[6]],[27,[6]]]],[[[27,[4]],[27,[4]]]],[[[27,[3]],[27,[3]]]],[[[27,[12]],[27,[12]]]],[[[27,[2]],[27,[2]]]],[[27,27]],[[[27,[1]],[27,[1]]]],[[27,27]],[[[27,[7]],[27,[7]]]],[[[27,[8]],[27,[8]]]],[[[27,[10]],[27,[10]]]],[[[27,[13]],[27,[13]]]],[[-1,-1],[],[]],[[[34,[1]],[34,[1]]]],[[[34,[2]],[34,[2]]]],[[[34,[3]],[34,[3]]]],[[[34,[4]],[34,[4]]]],[[[34,[6]],[34,[6]]]],[[[27,[7]],[27,[7]]]],[[27,27]],[[[27,[4]],[27,[4]]]],[[[27,[14]],[27,[14]]]],[[[27,[10]],[27,[10]]]],[[[27,[6]],[27,[6]]]],[[[27,[8]],[27,[8]]]],[[[27,[13]],[27,[13]]]],[[[27,[2]],[27,[2]]]],[[[27,[9]],[27,[9]]]],[[[27,[12]],[27,[12]]]],[[[27,[3]],[27,[3]]]],[[27,27]],[[[27,[1]],[27,[1]]]],[[-1,-1],[],[]],[[[34,[4]],[34,[4]]]],[[[34,[2]],[34,[2]]]],[[[34,[6]],[34,[6]]]],[[[34,[3]],[34,[3]]]],[[[34,[1]],[34,[1]]]],[[27,27]],[[[27,[7]],[27,[7]]]],[[[27,[1]],[27,[1]]]],[[[27,[12]],[27,[12]]]],[[[27,[3]],[27,[3]]]],[[27,27]],[[[27,[2]],[27,[2]]]],[[[27,[13]],[27,[13]]]],[[[27,[6]],[27,[6]]]],[[[27,[9]],[27,[9]]]],[[[27,[10]],[27,[10]]]],[[[27,[14]],[27,[14]]]],[[[27,[4]],[27,[4]]]],[[[27,[8]],[27,[8]]]],[[-1,-1],[],[]],[[[34,[6]],[34,[6]]]],[[[34,[3]],[34,[3]]]],[[[34,[4]],[34,[4]]]],[[[34,[1]],[34,[1]]]],[[[34,[2]],[34,[2]]]],[[[27,[7]],[27,[7]]]],[[[27,[8]],[27,[8]]]],[[[27,[10]],[27,[10]]]],[[[27,[1]],[27,[1]]]],[[[27,[12]],[27,[12]]]],[[27,27]],[[[27,[13]],[27,[13]]]],[[27,27]],[[[27,[3]],[27,[3]]]],[[[27,[4]],[27,[4]]]],[[[27,[9]],[27,[9]]]],[[[27,[14]],[27,[14]]]],[[[27,[6]],[27,[6]]]],[[[27,[2]],[27,[2]]]],[[-1,-1],[],[]],[[[34,[2]],[34,[2]]]],[[[34,[3]],[34,[3]]]],[[[34,[1]],[34,[1]]]],[[[34,[6]],[34,[6]]]],[[[34,[4]],[34,[4]]]],[[[27,[6]],[27,[6]]]],[[[27,[2]],[27,[2]]]],[[[27,[9]],[27,[9]]]],[[[27,[8]],[27,[8]]]],[[[27,[13]],[27,[13]]]],[[[27,[14]],[27,[14]]]],[[[27,[4]],[27,[4]]]],[[[27,[7]],[27,[7]]]],[[27,27]],[[27,27]],[[[27,[3]],[27,[3]]]],[[[27,[10]],[27,[10]]]],[[[27,[12]],[27,[12]]]],[[[27,[1]],[27,[1]]]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[34,[3]],[34,[3]]],[[34,[3]]]],[[[34,[1]],[34,[1]]],[[34,[1]]]],[[[34,[4]],[34,[4]]],[[34,[4]]]],[[[34,[6]],[34,[6]]],[[34,[6]]]],[[[34,[2]],[34,[2]]],[[34,[2]]]],[[[27,[1]],[27,[1]]],[[27,[1]]]],[[[27,[12]],[27,[12]]],[[27,[12]]]],[[[27,[4]],[27,[4]]],[[27,[4]]]],[[[27,[9]],[27,[9]]],[[27,[9]]]],[[[27,[7]],[27,[7]]],[[27,[7]]]],[[27,27],27],[[[27,[10]],[27,[10]]],[[27,[10]]]],[[[27,[14]],[27,[14]]],[[27,[14]]]],[[[27,[13]],[27,[13]]],[[27,[13]]]],[[[27,[3]],[27,[3]]],[[27,[3]]]],[[[27,[6]],[27,[6]]],[[27,[6]]]],[[27,27],27],[[[27,[2]],[27,[2]]],[[27,[2]]]],[[[27,[8]],[27,[8]]],[[27,[8]]]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[[34,[3]],[34,[3]]],[[34,[3]]]],[[[34,[6]],[34,[6]]],[[34,[6]]]],[[[34,[2]],[34,[2]]],[[34,[2]]]],[[[34,[1]],[34,[1]]],[[34,[1]]]],[[[34,[4]],[34,[4]]],[[34,[4]]]],[[[27,[7]],[27,[7]]],[[27,[7]]]],[[[27,[8]],[27,[8]]],[[27,[8]]]],[[[27,[2]],[27,[2]]],[[27,[2]]]],[[[27,[9]],[27,[9]]],[[27,[9]]]],[[27,27],27],[[[27,[1]],[27,[1]]],[[27,[1]]]],[[[27,[4]],[27,[4]]],[[27,[4]]]],[[27,27],27],[[[27,[10]],[27,[10]]],[[27,[10]]]],[[[27,[3]],[27,[3]]],[[27,[3]]]],[[[27,[13]],[27,[13]]],[[27,[13]]]],[[[27,[6]],[27,[6]]],[[27,[6]]]],[[[27,[12]],[27,[12]]],[[27,[12]]]],[[[27,[14]],[27,[14]]],[[27,[14]]]],[[-1,-1],[],[]],[[[34,[2]],[34,[2]]]],[[[34,[6]],[34,[6]]]],[[[34,[3]],[34,[3]]]],[[[34,[1]],[34,[1]]]],[[[34,[4]],[34,[4]]]],[[[27,[8]],[27,[8]]]],[[[27,[9]],[27,[9]]]],[[[27,[1]],[27,[1]]]],[[27,27]],[[[27,[10]],[27,[10]]]],[[[27,[13]],[27,[13]]]],[[27,27]],[[[27,[6]],[27,[6]]]],[[[27,[3]],[27,[3]]]],[[[27,[12]],[27,[12]]]],[[[27,[14]],[27,[14]]]],[[[27,[7]],[27,[7]]]],[[[27,[4]],[27,[4]]]],[[[27,[2]],[27,[2]]]],0,[33,[[34,[-1]]],35],[-1,[[27,[-1]]],28],[[[27,[6]],[27,[6]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[3]],[27,[3]]]],[[[27,[1]],[27,[1]]]],[[[27,[8]],[27,[8]]]],[[[27,[9]],[27,[9]]]],[[[27,[2]],[27,[2]]]],[[[27,[7]],[27,[7]]]],[[[27,[10]],[27,[10]]]],[[[27,[14]],[27,[14]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[4]],[27,[4]]]],[[[27,[13]],[27,[13]]]],[[[27,[12]],[27,[12]]]],[[[27,[-1]],[27,[-1]]],[],28],[[[27,[-1]],-2],15,28,[]],[-1,[[27,[1]]],107],[-1,[[27,[4]]],107],[-1,[[27,[6]]],107],[-1,[[27,[14]]],107],[-1,[[27,[3]]],107],[-1,[[27,[1]]],107],[-1,[[27,[10]]],107],[-1,[[27,[2]]],107],[-1,[[27,[9]]],107],[-1,[[27,[7]]],107],[-1,[[27,[8]]],107],[-1,[[27,[6]]],107],[-1,[[27,[14]]],107],[-1,[[27,[13]]],107],[-1,[[27,[12]]],107],[-1,[[27,[12]]],107],[-1,[[27,[8]]],107],[-1,[[27,[4]]],107],[-1,[[27,[3]]],107],[-1,[[27,[7]]],107],[-1,[[27,[10]]],107],[-1,[[27,[13]]],107],[-1,[[27,[2]]],107],[-1,[[27,[9]]],107],[[[27,[-1]]],[[27,[-1]]],28],[[[27,[-1]]],[[27,[-1]]],28],[[[27,[-1]],[27,[-1]]],[[27,[-1]]],28],[[[27,[-1]],[27,[-1]]],[[27,[-1]]],28],[[[27,[7]],[27,[7]]],[[27,[7]]]],[[[34,[-1]],12],33,35],[[[34,[-1]],12],33,35],[[[34,[-1]]],[[23,[33]]],35],[[[27,[-1]]],[[23,[-1]]],28],[-1,[],[]],[[[34,[-1]]],10,35],[[[34,[-1]]],7,35],[[[34,[-1]]],7,35],[[[34,[-1]]],7,35],[[[34,[-1]]],8,35],[[[34,[-1]]],9,35],[[[34,[-1]]],7,35],[-1,[],[]],[[[27,[14]]],[[27,[10]]]],[[[27,[13]]],[[27,[9]]]],[-1,-1,[]],[[[27,[13]]],[[27,[13]]]],[[[27,[14]]],[[27,[14]]]],[[[34,[-1]]],[[27,[-1]]],35],[-1,[],[]],[[[27,[14]]]],[[[27,[13]]]],[-1,-1,[]],[[[27,[13]]],[[27,[13]]]],[[[27,[14]]],[[27,[14]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[16,[-1]]],[[30,[[27,[-1]],137]]],28],[[[16,[-1]]],[[30,[[27,[-1]],137]]],28],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[27,27],[27,27],[-1,-1,[]],[-1,-1,[]],[27,27],[27,27],[-1,-1,[]],[-1,-1,[]],[27,27],[27,27],[-1,-1,[]],[-1,-1,[]],[27,27],[27,27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[93,[-1]],12],[[30,[15,47]]],[]],[[[94,[-1]],12],[[30,[15,47]]],[]],[[[93,[-1]],12],[[30,[15,47]]],[]],[[[94,[-1]],12],[[30,[15,47]]],[]],[[[93,[-1]],-2],33,[],32],[[[94,[-1]],-2],33,[],32],[[[93,[-1]],-2],33,[],32],[[[94,[-1]],-2],33,[],32],[[[94,[-1]]],[[16,[-1]]],[]],[[[93,[-1]]],[[16,[-1]]],[]],[[[94,[-1]]],[[16,[-1]]],[]],[-1,16,[]],[[[93,[-1]]],[[16,[-1]]],[]],[[[94,[-1]]],[[16,[-1]]],[]],[[[121,[-1,-2]]],[[16,[-1]]],[],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[93,[-1]]],[[93,[-1]]],[]],[[[121,[-1,-2]]],[[121,[-1,-2]]],[],[57,32]],[[[124,[-1,-2]]],[[124,[-1,-2]]],[],[57,32]],[[[114,[-1,-2]]],[[114,[-1,-2]]],[],[57,32]],[68,68],[[[139,[-1]]],[[139,[-1]]],[]],[[[51,[-1]]],[[51,[-1]]],[]],[[[52,[-1]]],[[52,[-1]]],[]],[[[19,[-1]]],[[19,[-1]]],57],[[[17,[-1]]],[[17,[-1]]],[]],[[[108,[-1]]],[[108,[-1]]],[]],[[[109,[-1]]],[[109,[-1]]],[]],[[[93,[-1]]],12,[]],[[[94,[-1]]],12,[]],[[[139,[-1]]],12,[]],[[[51,[-1]]],12,[]],[[[54,[-1]]],12,[]],[[[52,[-1]]],12,[]],[[[53,[-1]]],12,[]],[[[19,[-1]]],12,[]],[[[17,[-1]]],12,[]],[[[18,[-1]]],12,[]],[[[108,[-1]]],12,[]],[[[111,[-1]]],12,[]],[[[109,[-1]]],12,[]],[[[110,[-1]]],12,[]],[[],[[93,[-1]]],[]],[[],[[94,[-1]]],[]],[[[93,[-1]],-2],22,[],32],[[[94,[-1]],-2],22,[],32],[[[93,[-1]],-2],[[22,[-3]]],[],32,[]],[[[94,[-1]],-2],[[22,[-3]]],[],32,[]],[[[93,[-1]],77],78,79],[[[94,[-1]],77],78,79],[[[121,[-1,-2]],77],78,79,32],[[[124,[-1,-2]],77],78,79,32],[[[127,[-1,-2]],77],78,79,32],[[[126,[-1,-2]],77],78,79,32],[[[114,[-1,-2]],77],78,79,32],[[[116,[-1,-2]],77],78,79,32],[[[130,[-1,-2]],77],78,79,32],[[[118,[-1,-2]],77],78,79,32],[[[132,[-1,-2]],77],78,79,32],[[[120,[-1,-2]],77],78,79,32],[[[89,[-1,-2]],77],78,79,[]],[[[90,[-1,-2]],77],78,79,[]],[[88,77],78],[[88,77],78],[[68,77],78],[[68,77],78],[[[139,[-1]],77],78,79],[[[51,[-1]],77],78,79],[[[54,[-1]],77],78,79],[[[52,[-1]],77],78,79],[[[53,[-1]],77],78,79],[[[19,[-1]],77],78,79],[[[17,[-1]],77],78,79],[[[18,[-1]],77],78,79],[[[108,[-1]],77],78,79],[[[111,[-1]],77],78,79],[[[109,[-1]],77],78,79],[[[110,[-1]],77],78,79],[[[93,[-1]],-2,-3],-2,[],[],32],[[[94,[-1]],-2,-3],-2,[],[],32],[[68,-1,-2],-1,[],32],[[[93,[-1]],-2],15,[],32],[[[94,[-1]],-2],15,[],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[16,[-1]]],[]],[26,[[16,[-1]]],[]],[26,[[16,[-1]]],[]],[12,[[16,[-1]]],[]],[12,[[16,[-1]]],[]],[-1,[[16,[-1]]],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,[],[]],[-1,[],[]],0,[[-1,-2],[],[],[]],[[-1,-2],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1]]],[[16,[-1]]],[]],[[[18,[-1]]],[[16,[-1]]],[]],[[[110,[-1]]],[[16,[-1]]],[]],[[[94,[-1]]],[[16,[-1]]],[]],[[[93,[-1]]],33,[]],[[[94,[-1]]],33,[]],[[[52,[-1]]],33,[]],[[[53,[-1]]],33,[]],[[[19,[-1]]],33,[]],[[[17,[-1]]],33,[]],[[[18,[-1]]],33,[]],[[[109,[-1]]],33,[]],[[[110,[-1]]],33,[]],[[[93,[-1]],-2],33,[],32],[[[93,[-1]]],[[22,[-1]]],[]],[[[94,[-1]]],[[22,[-1]]],[]],[[[89,[-1,-2]]],22,[],32],[[[90,[-1,-2]]],22,[],32],[68,[[22,[7]]]],[[[139,[-1]]],22,[]],[[[51,[-1]]],22,[]],[[[54,[-1]]],22,[]],[[[52,[-1]]],22,[]],[[[53,[-1]]],22,[]],[[[19,[-1]]],22,[]],[[[17,[-1]]],22,[]],[[[18,[-1]]],22,[]],[[[108,[-1]]],22,[]],[[[111,[-1]]],22,[]],[[[109,[-1]]],22,[]],[[[110,[-1]]],22,[]],[[[93,[-1]]],12,[]],[[[94,[-1]]],12,[]],0,[[[93,[-1]]],[[22,[-1]]],[]],[[[94,[-1]]],[[22,[-1]]],[]],[[[121,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[124,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[127,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[126,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[114,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[116,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[130,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[118,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[132,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[120,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[89,[-1,-2]]],22,[],32],[[[90,[-1,-2]]],22,[],32],[68,[[22,[7]]]],[[[139,[-1]]],[[22,[[16,[-1]]]]],[]],[[[51,[-1]]],[[22,[[16,[-1]]]]],[]],[[[54,[-1]]],[[22,[[16,[-1]]]]],[]],[[[52,[-1]]],[[22,[[16,[-1]]]]],[]],[[[53,[-1]]],[[22,[[16,[-1]]]]],[]],[[[19,[-1]]],22,[]],[[[17,[-1]]],[[22,[[23,[-1]]]]],[]],[[[18,[-1]]],[[22,[[23,[-1]]]]],[]],[[[108,[-1]]],[[22,[[16,[-1]]]]],[]],[[[111,[-1]]],[[22,[[16,[-1]]]]],[]],[[[109,[-1]]],[[22,[[16,[-1]]]]],[]],[[[110,[-1]]],[[22,[[16,[-1]]]]],[]],[[[93,[-1]]],[[22,[-1]]],[]],[[[94,[-1]]],[[22,[-1]]],[]],[[[121,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[124,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[127,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[126,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[114,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[116,[-1,-2]]],[[22,[[16,[-1]]]]],[],32],[[[89,[-1,-2]]],22,[],32],[[[90,[-1,-2]]],22,[],32],[68,[[22,[7]]]],[[[139,[-1]]],[[22,[[16,[-1]]]]],[]],[[[51,[-1]]],[[22,[[16,[-1]]]]],[]],[[[54,[-1]]],[[22,[[16,[-1]]]]],[]],[[[52,[-1]]],[[22,[[16,[-1]]]]],[]],[[[53,[-1]]],[[22,[[16,[-1]]]]],[]],[[[19,[-1]]],[[22,[[23,[-1]]]]],[]],[[[17,[-1]]],[[22,[[23,[-1]]]]],[]],[[[18,[-1]]],[[22,[[23,[-1]]]]],[]],[[[108,[-1]]],[[22,[[16,[-1]]]]],[]],[[[111,[-1]]],[[22,[[16,[-1]]]]],[]],[[[109,[-1]]],[[22,[[16,[-1]]]]],[]],[[[110,[-1]]],[[22,[[16,[-1]]]]],[]],[[[93,[-1]],12],[[22,[-1]]],[]],[[[94,[-1]],12],[[22,[-1]]],[]],[[[139,[-1]],12],22,[]],[[[51,[-1]],12],22,[]],[[[54,[-1]],12],[[22,[[16,[-1]]]]],[]],[[[52,[-1]],12],22,[]],[[[53,[-1]],12],[[22,[[16,[-1]]]]],[]],[[[19,[-1]],12],22,[]],[[[17,[-1]],12],22,[]],[[[18,[-1]],12],22,[]],[[[108,[-1]],12],22,[]],[[[111,[-1]],12],[[22,[[16,[-1]]]]],[]],[[[109,[-1]],12],22,[]],[[[110,[-1]],12],[[22,[[16,[-1]]]]],[]],[[[93,[-1]],12],[[22,[-1]]],[]],[[[94,[-1]],12],[[22,[-1]]],[]],[[[139,[-1]],12],22,[]],[[[51,[-1]],12],22,[]],[[[54,[-1]],12],22,[]],[[[52,[-1]],12],22,[]],[[[53,[-1]],12],22,[]],[[[19,[-1]],12],[[22,[[23,[-1]]]]],[]],[[[17,[-1]],12],22,[]],[[[18,[-1]],12],22,[]],[[[108,[-1]],12],22,[]],[[[111,[-1]],12],22,[]],[[[109,[-1]],12],22,[]],[[[110,[-1]],12],22,[]],[[[93,[-1]],-2],[[22,[12]]],[],32],[[[94,[-1]],-2],[[22,[12]]],[],32],[[-1,[440,[12]]],[[26,[12]]],[[62,[12]]]],[[[52,[-1]]],[[16,[-1]]],[]],[[[17,[-1]]],[[16,[-1]]],[]],[[[109,[-1]]],[[16,[-1]]],[]],[[[93,[-1]],-2],[[22,[12]]],[],32],[[[94,[-1]],-2],[[22,[12]]],[],32],[[[93,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[94,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[121,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[124,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[127,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[126,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[114,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[116,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[130,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[118,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[132,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[120,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[89,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[[[90,[-1,-2]]],[[15,[12,[22,[12]]]]],[],32],[68,[[15,[12,[22,[12]]]]]],[[[139,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[51,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[54,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[52,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[53,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[19,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[17,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[18,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[108,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[111,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[109,[-1]]],[[15,[12,[22,[12]]]]],[]],[[[110,[-1]]],[[15,[12,[22,[12]]]]],[]],0,[[68,-1,-2],-3,[],32,415],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[[7,[16,[7]]],[[22,[12]]]],[[7,[16,[7]]],[[22,[12]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[461,461],[[461,77],78],[-1,-1,[]],[[[16,[-1]],-2],15,[],32],[-1,-2,[],[]],[[[16,[-1]],-2,-3,-4,-5,-6],15,[],32,462,462,462,462],[[[16,[-1]],-2],15,[],32],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[48,-1],33,32],[[48,-1],33,32],[50,24],[49,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[125,[-1]]],[[125,[-1]]],60],[359,359],[84,84],[50,50],[49,49],[48,48],[[[122,[-1]]],[[122,[-1]]],60],[[[115,[-1]]],[[115,[-1]]],60],[[[128,[-1]]],[[128,[-1]]],60],[[[117,[-1]]],[[117,[-1]]],60],[[[131,[-1]]],[[131,[-1]]],60],[[[119,[-1]]],[[119,[-1]]],60],[[[103,[-1]]],[[103,[-1]]],60],[[[112,[-1]]],[[112,[-1]]],60],[[[104,[-1]]],[[104,[-1]]],60],[[[113,[-1]]],[[113,[-1]]],60],[100,100],[101,101],[129,129],[123,123],[66,66],[71,71],[73,73],[75,75],[463,463],[464,464],[50,12],[49,12],[48,12],[359,24],[84,24],[[359,359],33],[[84,84],33],[[463,463],33],[359,[[22,[12]]]],[[48,-1],22,32],[[[125,[-1]],77],78,60],[[359,77],78],[[359,77],78],[[84,77],78],[[84,77],78],[[50,77],78],[[49,77],78],[[48,77],78],[[[122,[-1]],77],78,60],[[[115,[-1]],77],78,60],[[[128,[-1]],77],78,60],[[[117,[-1]],77],78,60],[[[131,[-1]],77],78,60],[[[119,[-1]],77],78,60],[[[103,[-1]],77],78,60],[[[112,[-1]],77],78,60],[[[104,[-1]],77],78,60],[[[113,[-1]],77],78,60],[[100,77],78],[[101,77],78],[[129,77],78],[[123,77],78],[[66,77],78],[[71,77],78],[[71,77],78],[[73,77],78],[[73,77],78],[[75,77],78],[[75,77],78],[[463,77],78],[[464,77],78],[[71,-1,-2],-1,[],32],[[73,-1,-2],-1,[],32],[[75,-1,-2],-1,[],32],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[24,[[30,[-1]]],[]],[[[16,[7]]],[[30,[24,359]]]],[[[16,[7]]],[[30,[24,359]]]],[[[16,[7]]],24],[[[16,[7]]],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[463,[[16,[7]]]],[48,33],[50,[[22,[20]]]],[49,[[22,[[15,[12,20]]]]]],[48,22],[100,[[22,[24]]]],[129,[[22,[24]]]],[123,[[22,[24]]]],[48,12],[[[16,[7]]],464],[[[125,[-1]]],[[22,[24]]],60],[50,[[22,[20]]]],[49,[[22,[[15,[12,20]]]]]],[48,[[22,[7]]]],[[[122,[-1]]],[[22,[24]]],60],[[[115,[-1]]],[[22,[24]]],60],[[[128,[-1]]],[[22,[24]]],60],[[[117,[-1]]],[[22,[24]]],60],[[[131,[-1]]],[[22,[24]]],60],[[[119,[-1]]],[[22,[24]]],60],[[[103,[-1]]],[[22,[[15,[12,24]]]]],60],[[[112,[-1]]],[[22,[[15,[12,24]]]]],60],[[[104,[-1]]],[[22,[24]]],60],[[[113,[-1]]],[[22,[24]]],60],[100,[[22,[24]]]],[101,[[22,[24]]]],[129,[[22,[24]]]],[123,[[22,[24]]]],[66,[[22,[8]]]],[71,[[22,[20]]]],[73,[[22,[20]]]],[75,[[22,[20]]]],[464,[[22,[463]]]],[[[125,[-1]]],[[22,[24]]],60],[50,[[22,[20]]]],[49,[[22,[[15,[12,20]]]]]],[48,[[22,[7]]]],[[[122,[-1]]],[[22,[24]]],60],[[[115,[-1]]],[[22,[24]]],60],[[[128,[-1]]],[[22,[24]]],60],[[[117,[-1]]],[[22,[24]]],60],[[[103,[-1]]],[[22,[[15,[12,24]]]]],60],[[[112,[-1]]],[[22,[[15,[12,24]]]]],60],[[[104,[-1]]],[[22,[24]]],60],[[[113,[-1]]],[[22,[24]]],60],[100,[[22,[24]]]],[101,[[22,[24]]]],[129,[[22,[24]]]],[123,[[22,[24]]]],[-1,[[22,[9]]],107],[[48,12],22],[[48,12],22],[49,12],0,[[48,-1],[[22,[12]]],32],[[[125,[-1]]],[[22,[24]]],60],[[[122,[-1]]],[[22,[24]]],60],[[[115,[-1]]],[[22,[24]]],60],[[[128,[-1]]],[[22,[24]]],60],[[[117,[-1]]],[[22,[24]]],60],[[[131,[-1]]],[[22,[24]]],60],[[[119,[-1]]],[[22,[24]]],60],[129,[[22,[24]]]],[123,[[22,[24]]]],[[48,-1],22,32],[[48,-1],[[22,[12]]],32],[50,[[15,[12,[22,[12]]]]]],[49,[[15,[12,[22,[12]]]]]],[48,[[15,[12,[22,[12]]]]]],[100,[[15,[12,[22,[12]]]]]],[101,[[15,[12,[22,[12]]]]]],[129,[[15,[12,[22,[12]]]]]],[123,[[15,[12,[22,[12]]]]]],[66,[[15,[12,[22,[12]]]]]],[71,[[15,[12,[22,[12]]]]]],[73,[[15,[12,[22,[12]]]]]],[75,[[15,[12,[22,[12]]]]]],[[71,-1,-2],-3,[],32,415],[[73,-1,-2],-3,[],32,415],[[75,-1,-2],-3,[],32,415],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[7,12],[463,24],[359,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[465,465],[466,466],[95,95],[96,96],[97,97],[[[99,[-1]]],[[99,[-1]]],[32,57]],[98,98],[[465,465],33],[[465,77],78],[[466,77],78],[[95,77],78],[[96,77],78],[[97,77],78],[[[99,[-1]],77],78,32],[[98,77],78],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,24,[]],[466,24],[95,24],[96,24],[97,24],[[[99,[-1]]],24,32],[98,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,24],[],[]],[[-1,24],33,[]],[[-1,24],33,[]],[[-1,24],33,[]],[-1,465,[]],[466,465],[95,465],[96,465],[97,465],[[[99,[-1]]],465,32],[98,465],[-1,465,[]],[466,465],[95,465],[96,465],[97,465],[[[99,[-1]]],465,32],[98,465],[-1,[[22,[[15,[12,12]]]]],[]],[466,[[22,[[15,[12,12]]]]]],[95,[[22,[[15,[12,12]]]]]],[96,[[22,[[15,[12,12]]]]]],[97,[[22,[[15,[12,12]]]]]],[[[99,[-1]]],[[22,[[15,[12,12]]]]],32],[98,[[22,[[15,[12,12]]]]]],[-1,[[22,[[15,[12,12]]]]],[]],[466,[[22,[[15,[12,12]]]]]],[95,[[22,[[15,[12,12]]]]]],[96,[[22,[[15,[12,12]]]]]],[97,[[22,[[15,[12,12]]]]]],[[[99,[-1]]],[[22,[[15,[12,12]]]]],32],[98,[[22,[[15,[12,12]]]]]],[-1,[[22,[[15,[12,12]]]]],[]],[95,[[22,[[15,[12,12]]]]]],[96,[[22,[[15,[12,12]]]]]],[97,[[22,[[15,[12,12]]]]]],[[[99,[-1]]],[[22,[[15,[12,12]]]]],32],[-1,[[22,[[15,[12,12]]]]],[]],[95,[[22,[[15,[12,12]]]]]],[96,[[22,[[15,[12,12]]]]]],[97,[[22,[[15,[12,12]]]]]],[[[99,[-1]]],[[22,[[15,[12,12]]]]],32],[[-1,24],[[22,[24]]],[]],[[-1,24],[[22,[24]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[467,[-2]],-1],[],468,[[32,[-1]]]],[[[467,[-2]],-1],[],468,[[102,[-1]]]],[[],[[467,[-1]]],[65,25]],[[[467,[-1]],77],[[30,[15,80]]],25],[-1,-1,[]],[56,-1,[]],[-1,[[467,[-1]]],[]],[-1,[[467,[-1]]],25],[[[329,[-1]]],[[329,[[467,[-1]]]]],25],[[[467,[-1]]],-1,25],[[[329,[[467,[-1]]]]],[[329,[-1]]],25],[-1,-2,[],[]],[-1,[],[]],[[[467,[-1]]],-1,25],[[-1,24],[[99,[-2]]],[],[]],[[-1,24],33,[]],[[-1,24],33,[]],[[-1,24],33,[]],[-1,[[467,[-1]]],25],[[[329,[[467,[-1]]]],330],331,[452,25]],[[[329,[[467,[-2]]]],-1],438,[],[[411,[-1]],25]],[[-1,24],[[22,[24]]],[]],[[-1,24],[[22,[24]]],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[469,33],[[[470,[-1]]],[],[]],[471,1],[472,7],[473,2],[474,8],[475,3],[476,9],[477,4],[478,10],[479,6],[480,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[325,325],[[469,33,33,325],33],[[[470,[-1]],325],[],[]],[[471,1,1,325],1],[[472,7,7,325],7],[[473,2,2,325],2],[[474,8,8,325],8],[[475,3,3,325],3],[[476,9,9,325],9],[[477,4,4,325],4],[[478,10,10,325],10],[[479,6,6,325],6],[[480,12,12,325],12],[[469,33,33,325,325],[[30,[33,33]]]],[[[470,[-1]],325,325],30,[]],[[471,1,1,325,325],[[30,[1,1]]]],[[472,7,7,325,325],[[30,[7,7]]]],[[473,2,2,325,325],[[30,[2,2]]]],[[474,8,8,325,325],[[30,[8,8]]]],[[475,3,3,325,325],[[30,[3,3]]]],[[476,9,9,325,325],[[30,[9,9]]]],[[477,4,4,325,325],[[30,[4,4]]]],[[478,10,10,325,325],[[30,[10,10]]]],[[479,6,6,325,325],[[30,[6,6]]]],[[480,12,12,325,325],[[30,[12,12]]]],[[469,33,33,325,325],[[30,[33,33]]]],[[[470,[-1]],325,325],30,[]],[[471,1,1,325,325],[[30,[1,1]]]],[[472,7,7,325,325],[[30,[7,7]]]],[[473,2,2,325,325],[[30,[2,2]]]],[[474,8,8,325,325],[[30,[8,8]]]],[[475,3,3,325,325],[[30,[3,3]]]],[[476,9,9,325,325],[[30,[9,9]]]],[[477,4,4,325,325],[[30,[4,4]]]],[[478,10,10,325,325],[[30,[10,10]]]],[[479,6,6,325,325],[[30,[6,6]]]],[[480,12,12,325,325],[[30,[12,12]]]],[325,15],[[],469],[[],[[470,[-1]]],[]],[[],471],[[],472],[[],473],[[],474],[[],475],[[],476],[[],477],[[],478],[[],479],[[],480],[[325,325],33],[325,15],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[469,33,325],33],[[[470,[-1]],12,325],[],[]],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[[470,[-1]],12,325],[],[]],[[[470,[-1]],12,325],[],[]],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[469,33,325],33],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[469,325],33],[[469,33,325],33],[[[470,[-1]],12,325],[],[]],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[[470,[-1]],12,325],[],[]],[[[470,[-1]],12,325],[],[]],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[469,325,325,-1],[[30,[33,33]]],32],[[[470,[-1]],325,325,-2],30,[],32],[[471,325,325,-1],[[30,[1,1]]],32],[[472,325,325,-1],[[30,[7,7]]],32],[[473,325,325,-1],[[30,[2,2]]],32],[[474,325,325,-1],[[30,[8,8]]],32],[[475,325,325,-1],[[30,[3,3]]],32],[[476,325,325,-1],[[30,[9,9]]],32],[[477,325,325,-1],[[30,[4,4]]],32],[[478,325,325,-1],[[30,[10,10]]],32],[[479,325,325,-1],[[30,[6,6]]],32],[[480,325,325,-1],[[30,[12,12]]],32],[[469,33,325],33],[[[470,[-1]],12,325],[],[]],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[[469,77],78],[[[470,[-1]],77],78,[]],[[[470,[-1]],77],78,[]],[[325,77],78],[[471,77],78],[[472,77],78],[[473,77],78],[[474,77],78],[[475,77],78],[[476,77],78],[[477,77],78],[[478,77],78],[[479,77],78],[[480,77],78],[-1,-1,[]],[33,469],[-1,-1,[]],[[],[[470,[-1]]],[]],[-1,-1,[]],[1,471],[-1,-1,[]],[7,472],[-1,-1,[]],[-1,-1,[]],[2,473],[-1,-1,[]],[8,474],[-1,-1,[]],[3,475],[9,476],[-1,-1,[]],[4,477],[-1,-1,[]],[10,478],[-1,-1,[]],[6,479],[-1,-1,[]],[12,480],[-1,-1,[]],[33,469],[[],[[470,[-1]]],[]],[1,471],[7,472],[2,473],[8,474],[3,475],[9,476],[4,477],[10,478],[6,479],[12,480],[[[16,[33]]],[[16,[469]]]],[16,[[16,[[470,[-1]]]]],[]],[[[16,[1]]],[[16,[471]]]],[[[16,[7]]],[[16,[472]]]],[[[16,[2]]],[[16,[473]]]],[[[16,[8]]],[[16,[474]]]],[[[16,[3]]],[[16,[475]]]],[[[16,[9]]],[[16,[476]]]],[[[16,[4]]],[[16,[477]]]],[[[16,[10]]],[[16,[478]]]],[[[16,[6]]],[[16,[479]]]],[[[16,[12]]],[[16,[480]]]],[33,469],[[],[[470,[-1]]],[]],[1,471],[7,472],[2,473],[8,474],[3,475],[9,476],[4,477],[10,478],[6,479],[12,480],[469,33],[[[470,[-1]]],[],[]],[471,1],[472,7],[473,2],[474,8],[475,3],[476,9],[477,4],[478,10],[479,6],[480,12],[[[16,[469]]],[[16,[33]]]],[[[16,[[470,[-1]]]]],16,[]],[[[16,[471]]],[[16,[1]]]],[[[16,[472]]],[[16,[7]]]],[[[16,[473]]],[[16,[2]]]],[[[16,[474]]],[[16,[8]]]],[[[16,[475]]],[[16,[3]]]],[[[16,[476]]],[[16,[9]]]],[[[16,[477]]],[[16,[4]]]],[[[16,[478]]],[[16,[10]]]],[[[16,[479]]],[[16,[6]]]],[[[16,[480]]],[[16,[12]]]],[[325,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[469,33],[[[470,[-1]]],[],[]],[471,1],[472,7],[473,2],[474,8],[475,3],[476,9],[477,4],[478,10],[479,6],[480,12],[[469,325],33],[[[470,[-1]],325],[],[]],[[471,325],1],[[472,325],7],[[473,325],2],[[474,325],8],[[475,325],3],[[476,325],9],[[477,325],4],[[478,325],10],[[479,325],6],[[480,325],12],[33,469],[[],[[470,[-1]]],[]],[1,471],[7,472],[2,473],[8,474],[3,475],[9,476],[4,477],[10,478],[6,479],[12,480],[[],15],[[469,33,325],15],[[[470,[-1]],325],15,[]],[[471,1,325],15],[[472,7,325],15],[[473,2,325],15],[[474,8,325],15],[[475,3,325],15],[[476,9,325],15],[[477,4,325],15],[[478,10,325],15],[[479,6,325],15],[[480,12,325],15],[[469,33,325],33],[[[470,[-1]],325],[],[]],[[471,1,325],1],[[472,7,325],7],[[473,2,325],2],[[474,8,325],8],[[475,3,325],3],[[476,9,325],9],[[477,4,325],4],[[478,10,325],10],[[479,6,325],6],[[480,12,325],12],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,[481,482],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[331,[[22,[[30,[-1,-2]]]]]]],437,[],[]],[[[331,[[30,[-1,-2]]]]],437,[],[]],[481,481],[[[331,[-1]]],[[331,[-1]]],57],[483,483],[[[331,[-1]],[331,[-1]]],58,31],[482,15],[481,15],[[[331,[-1]],[331,[-1]]],33,59],[[482,482],33],[[483,483],33],[[330,77],78],[[481,77],78],[[[331,[-1]],77],78,79],[[482,77],78],[[483,77],78],[-1,-1,[]],[-1,-1,[]],[-1,[[331,[-1]]],[]],[-1,-1,[]],[56,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[331,[[22,[[30,[-1,-2]]]]]]],[],[]],[[],[[331,[[30,[-1,-2]]]]],[],[]],[482,481],[[[30,[327,-1]]],[[331,[[22,[[30,[-2,-3]]]]]]],[],[],[[459,[-1]]]],[[[30,[327,-1]]],[[331,[[30,[-2,-3]]]]],[],[],[[459,[-1]]]],[481,330],[[[331,[-1]],-2],15,92,91],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[331,[-1]]],33,[]],[[[331,[-1]]],33,[]],[[[331,[-1]],-2],[[331,[-3]]],[],102,[]],[[[331,[[22,[[30,[-1,-2]]]]]],-3],[[331,[[22,[[30,[-1,-4]]]]]]],[],[],102,[]],[[[331,[[30,[-1,-2]]]],-3],[[331,[[30,[-1,-4]]]]],[],[],102,[]],[[[331,[[22,[[30,[-1,-2]]]]]],-3],[[331,[[22,[[30,[-4,-2]]]]]]],[],[],102,[]],[[[331,[[30,[-1,-2]]]],-3],[[331,[[30,[-4,-2]]]]],[],[],102,[]],[[15,483],482],[[],483],[[],481],[[[331,[-1]],[331,[-1]]],[[22,[58]]],86],0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[-1,138,[]],[482,483],[481,15],[481,15],[330,481],[[481,481],33],0,0,0,0,0,0,0,0,[[105,105],105],[[105,105],15],[105,11],[105,11],[105,11],[105,10],[105,13],[105,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[105,105],[[22,[105]]]],[[105,9],[[22,[105]]]],[[105,9],[[22,[105]]]],[[105,105],[[22,[105]]]],[105,105],[484,484],[[105,105],58],[[],105],[[105,9],105],[[105,9],15],[[105,105],13],[[105,105],14],[[105,13],105],[[105,14],105],[[105,105],33],[[484,484],33],[[105,77],78],[[484,77],78],[[484,77],78],[-1,-1,[]],[-1,-1,[]],[10,105],[10,105],[10,105],[10,105],[13,105],[14,105],[[105,-1],15,91],[-1,-2,[],[]],[-1,-2,[],[]],[105,33],[[105,9],105],[[105,9],15],[[105,13],105],[[105,14],105],[[10,9],105],[[105,105],[[22,[58]]]],[[105,105],105],[[105,9],105],[[105,105],105],[[105,105],105],[[105,105],15],[105,9],[105,9],[105,9],[-1,105,107],[-1,105,107],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[13,[[30,[105,484]]]],[14,[[30,[105,484]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,138,[]],[-1,138,[]],0,0,0,0,0,0,0,0,0,0,[20,33],[20,33],0,0,[20,[[23,[20]]]],[20,[[23,[20]]]],0,0],"c":[1528,1529,1708,1710,1712,1714,1716,1907,1979,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,4488,4489,4739,4740,4829,4830,4832,4833,4836,5017,5019,5021,5023,5025,5097,5293,24617,25301,25303,25334,25335,25336,25337,25338,25339,25340,25341,25342,25343,25344,25345,25346,25347,25373,25374,25375,25376,25377,25378,25379,25380,25381,25382,25383,25384,25385,25386,25595,25728,25751,25752,25780,25781,25782,25783,25784,25785,25786,25787,25788,25789,25921,26056,26057,27040,27041,27079,33001,33546,33547,33548,33606,33607,33608,33609,33610,33611,33612,33613,33614,33615,33616,33617,33910,34134,34135,34136,34137,34138,34139,34140,34141,34142,34143,34150,34151],"p":[[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i128"],[15,"isize"],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[15,"usize"],[15,"f32"],[15,"f64"],[15,"tuple"],[15,"slice"],[3,"ArrayChunks",32477],[3,"ArrayChunksMut",32477],[3,"ArrayWindows",32477],[15,"char"],[4,"Char",24630],[4,"Option",30794],[15,"array"],[15,"str"],[8,"Sized",26924],[3,"Range",30414],[3,"Simd",31336],[8,"SimdElement",31336],[19,"MaybeUninit",26972],[4,"Result",31229],[8,"Ord",25183],[8,"FnMut",30414],[15,"bool"],[3,"Mask",31336],[8,"MaskElement",31336],[3,"NonZeroI8",27329],[3,"NonZeroI16",27329],[3,"NonZeroI32",27329],[3,"NonZeroI64",27329],[3,"NonZeroI128",27329],[3,"NonZeroU8",27329],[3,"NonZeroU16",27329],[3,"NonZeroU32",27329],[3,"NonZeroU64",27329],[3,"NonZeroU128",27329],[3,"NonZeroIsize",27329],[3,"NonZeroUsize",27329],[3,"Bytes",32991],[3,"CharIndices",32991],[3,"Chars",32991],[3,"Chunks",32477],[3,"ChunksExact",32477],[3,"ChunksExactMut",32477],[3,"ChunksMut",32477],[4,"FpCategory",27329],[15,"never"],[8,"Clone",25179],[4,"Ordering",25183],[8,"PartialEq",25183],[8,"Pattern",33386],[8,"Copy",26924],[8,"RangeBounds",30414],[3,"DecodeUtf16",25023],[8,"IntoIterator",26058],[8,"Default",25291],[3,"EncodeUtf16",32991],[4,"Bound",30414],[3,"EscapeAscii",32477],[3,"EscapeDefault",24630],[3,"EscapeDebug",25023],[3,"EscapeDebug",32991],[3,"EscapeDefault",25023],[3,"EscapeDefault",32991],[3,"EscapeUnicode",25023],[3,"EscapeUnicode",32991],[8,"Extend",26058],[3,"Formatter",25520],[6,"Result",25520],[8,"Debug",25520],[3,"Error",25520],[3,"Ipv4Addr",27087],[3,"Ipv6Addr",27087],[3,"Alignment",31117],[3,"ParseBoolError",32991],[3,"ParseIntError",27329],[8,"PartialOrd",25183],[8,"SliceIndex",32477],[3,"GetManyMutError",32477],[3,"GroupBy",32477],[3,"GroupByMut",32477],[8,"Hasher",25722],[8,"Hash",25722],[3,"Iter",32477],[3,"IterMut",32477],[3,"CharArraySearcher",33386],[3,"CharArrayRefSearcher",33386],[3,"CharSliceSearcher",33386],[3,"StrSearcher",33386],[3,"CharPredicateSearcher",33386],[3,"Lines",32991],[3,"LinesAny",32991],[8,"FnOnce",30414],[3,"MatchIndices",32991],[3,"Matches",32991],[3,"Duration",34059],[8,"FromStr",32991],[8,"Iterator",26058],[3,"RChunks",32477],[3,"RChunksExact",32477],[3,"RChunksExactMut",32477],[3,"RChunksMut",32477],[3,"RMatchIndices",32991],[3,"RMatches",32991],[3,"RSplit",32477],[3,"RSplit",32991],[3,"RSplitMut",32477],[3,"RSplitTerminator",32991],[3,"RSplitN",32477],[3,"RSplitN",32991],[3,"RSplitNMut",32477],[3,"Split",32477],[3,"Split",32991],[3,"SplitAsciiWhitespace",32991],[3,"SplitInclusive",32477],[3,"SplitInclusive",32991],[3,"SplitInclusiveMut",32477],[3,"SplitMut",32477],[3,"SplitTerminator",32991],[3,"SplitWhitespace",32991],[3,"SplitN",32477],[3,"SplitN",32991],[3,"SplitNMut",32477],[8,"SlicePattern",32477],[8,"OneSidedRange",30414],[3,"ToLowercase",25023],[3,"ToUppercase",25023],[3,"TryFromSliceError",24585],[3,"TypeId",5357],[3,"Windows",32477],[3,"Layout",5289],[3,"LayoutError",5289],[3,"NonNull",31117],[3,"AllocError",5289],[8,"Any",5357],[3,"float64x1_t",5410],[3,"float64x2_t",5410],[3,"float64x1x2_t",5410],[3,"float64x1x3_t",5410],[3,"float64x1x4_t",5410],[3,"float64x2x2_t",5410],[3,"float64x2x3_t",5410],[3,"float64x2x4_t",5410],[3,"int16x4_t",9371],[3,"int32x2_t",9371],[3,"int8x8_t",9371],[3,"uint16x4_t",9371],[3,"uint32x2_t",9371],[3,"uint8x8_t",9371],[3,"int32x4_t",9371],[3,"int16x8_t",9371],[3,"int64x2_t",9371],[3,"int8x16_t",9371],[3,"uint32x4_t",9371],[3,"uint16x8_t",9371],[3,"uint64x2_t",9371],[3,"uint8x16_t",9371],[3,"float32x2_t",9371],[3,"float32x4_t",9371],[3,"int64x1_t",9371],[3,"poly16x4_t",9371],[3,"poly64x1_t",9371],[3,"poly8x8_t",9371],[3,"uint64x1_t",9371],[3,"poly16x8_t",9371],[3,"poly64x2_t",9371],[3,"poly8x16_t",9371],[3,"float32x2x2_t",9371],[3,"float32x2x3_t",9371],[3,"float32x2x4_t",9371],[3,"poly16x4x2_t",9371],[3,"poly16x4x3_t",9371],[3,"poly16x4x4_t",9371],[3,"poly64x1x2_t",9371],[3,"poly64x1x3_t",9371],[3,"poly64x1x4_t",9371],[3,"poly8x8x2_t",9371],[3,"poly8x8x3_t",9371],[3,"poly8x8x4_t",9371],[3,"int16x4x2_t",9371],[3,"int16x4x3_t",9371],[3,"int16x4x4_t",9371],[3,"int32x2x2_t",9371],[3,"int32x2x3_t",9371],[3,"int32x2x4_t",9371],[3,"int64x1x2_t",9371],[3,"int64x1x3_t",9371],[3,"int64x1x4_t",9371],[3,"int8x8x2_t",9371],[3,"int8x8x3_t",9371],[3,"int8x8x4_t",9371],[3,"uint16x4x2_t",9371],[3,"uint16x4x3_t",9371],[3,"uint16x4x4_t",9371],[3,"uint32x2x2_t",9371],[3,"uint32x2x3_t",9371],[3,"uint32x2x4_t",9371],[3,"uint64x1x2_t",9371],[3,"uint64x1x3_t",9371],[3,"uint64x1x4_t",9371],[3,"uint8x8x2_t",9371],[3,"uint8x8x3_t",9371],[3,"uint8x8x4_t",9371],[3,"float32x4x2_t",9371],[3,"float32x4x3_t",9371],[3,"float32x4x4_t",9371],[3,"poly16x8x2_t",9371],[3,"poly16x8x3_t",9371],[3,"poly16x8x4_t",9371],[3,"poly64x2x2_t",9371],[3,"poly64x2x3_t",9371],[3,"poly64x2x4_t",9371],[3,"poly8x16x2_t",9371],[3,"poly8x16x3_t",9371],[3,"poly8x16x4_t",9371],[3,"int16x8x2_t",9371],[3,"int16x8x3_t",9371],[3,"int16x8x4_t",9371],[3,"int32x4x2_t",9371],[3,"int32x4x3_t",9371],[3,"int32x4x4_t",9371],[3,"int64x2x2_t",9371],[3,"int64x2x3_t",9371],[3,"int64x2x4_t",9371],[3,"int8x16x2_t",9371],[3,"int8x16x3_t",9371],[3,"int8x16x4_t",9371],[3,"uint16x8x2_t",9371],[3,"uint16x8x3_t",9371],[3,"uint16x8x4_t",9371],[3,"uint32x4x2_t",9371],[3,"uint32x4x3_t",9371],[3,"uint32x4x4_t",9371],[3,"uint64x2x2_t",9371],[3,"uint64x2x3_t",9371],[3,"uint64x2x4_t",9371],[3,"uint8x16x2_t",9371],[3,"uint8x16x3_t",9371],[3,"uint8x16x4_t",9371],[3,"int16x2_t",12701],[3,"int8x4_t",9371],[3,"uint8x4_t",9371],[3,"uint16x2_t",12701],[3,"vector_signed_char",12756],[3,"vector_unsigned_char",12756],[3,"vector_bool_char",12756],[3,"vector_signed_short",12756],[3,"vector_unsigned_short",12756],[3,"vector_bool_short",12756],[3,"vector_signed_int",12756],[3,"vector_unsigned_int",12756],[3,"vector_bool_int",12756],[3,"vector_float",12756],[3,"vector_signed_long",12756],[3,"vector_unsigned_long",12756],[3,"vector_bool_long",12756],[3,"vector_double",12756],[3,"v128",13784],[3,"__m128",14471],[3,"CpuidResult",14471],[6,"__mmask32",14471],[6,"__mmask64",14471],[6,"__mmask16",14471],[3,"__m256i",14471],[3,"__m256d",14471],[3,"__m256",14471],[3,"__m128i",14471],[3,"__m128d",14471],[6,"__mmask8",14471],[6,"_MM_CMPINT_ENUM",14471],[3,"__m256bh",14471],[3,"__m128bh",14471],[6,"_MM_MANTISSA_NORM_ENUM",14471],[6,"_MM_MANTISSA_SIGN_ENUM",14471],[6,"_MM_PERM_ENUM",14471],[3,"__m512i",14471],[3,"__m512d",14471],[3,"__m512",14471],[3,"__m512bh",14471],[6,"u16x8",31336],[6,"i32x4",31336],[6,"i64x2",31336],[6,"isizex2",31336],[6,"i16x8",31336],[6,"i8x16",31336],[6,"usizex2",31336],[6,"u8x16",31336],[6,"u64x2",31336],[6,"u32x4",31336],[6,"f32x4",31336],[6,"f64x2",31336],[6,"u16x16",31336],[6,"i8x32",31336],[6,"u32x8",31336],[6,"isizex4",31336],[6,"i64x4",31336],[6,"u8x32",31336],[6,"i32x8",31336],[6,"usizex4",31336],[6,"u64x4",31336],[6,"i16x16",31336],[6,"f32x8",31336],[6,"f64x4",31336],[6,"i32x16",31336],[6,"i16x32",31336],[6,"u8x64",31336],[6,"isizex8",31336],[6,"u32x16",31336],[6,"u64x8",31336],[6,"u16x32",31336],[6,"i64x8",31336],[6,"i8x64",31336],[6,"usizex8",31336],[6,"f32x16",31336],[6,"f64x8",31336],[4,"Ordering",33546],[3,"IntoIter",24585],[4,"Infallible",25257],[3,"FromIter",24808],[3,"Pin",30975],[3,"Context",33974],[4,"Poll",33974],[3,"Cell",24830],[3,"RefCell",24830],[3,"Ref",24830],[3,"RefMut",24830],[3,"OnceCell",24830],[3,"LazyCell",24830],[3,"UnsafeCell",24830],[3,"SyncUnsafeCell",24830],[3,"BorrowError",24830],[3,"BorrowMutError",24830],[8,"Display",25520],[3,"ParseCharError",25023],[3,"CharTryFromError",25023],[3,"DecodeUtf16Error",25023],[3,"TryFromCharError",25023],[3,"Reverse",25183],[8,"Error",25294],[3,"Source",25294],[3,"Request",25294],[3,"VaListImpl",25412],[3,"CStr",25412],[6,"c_char",25412],[3,"VaList",25412],[3,"FromBytesWithNulError",25412],[3,"FromBytesUntilNulError",25412],[4,"c_void",25412],[3,"RangeFrom",30414],[3,"Utf8Error",32991],[4,"Alignment",25520],[3,"Arguments",25520],[3,"DebugList",25520],[3,"DebugMap",25520],[3,"DebugSet",25520],[3,"DebugStruct",25520],[3,"DebugTuple",25520],[8,"Write",25520],[3,"Pending",25675],[3,"Ready",25675],[3,"PollFn",25675],[3,"BuildHasherDefault",25722],[3,"SipHasher",25722],[3,"BasicBlock",26025],[3,"FlatMap",26058],[8,"DoubleEndedIterator",26058],[3,"Flatten",26058],[3,"ByRefSized",26058],[3,"Chain",26058],[3,"Copied",26058],[3,"Enumerate",26058],[8,"ExactSizeIterator",26058],[3,"Rev",26058],[3,"Skip",26058],[3,"Take",26058],[3,"Repeat",26058],[3,"Cycle",26058],[3,"ArrayChunks",26058],[3,"IntersperseWith",26058],[3,"MapWindows",26058],[3,"Empty",26058],[3,"Cloned",26058],[3,"Filter",26058],[3,"FilterMap",26058],[3,"Fuse",26058],[3,"Inspect",26058],[3,"Intersperse",26058],[3,"Map",26058],[3,"MapWhile",26058],[3,"Peekable",26058],[3,"Scan",26058],[3,"SkipWhile",26058],[3,"StepBy",26058],[3,"TakeWhile",26058],[3,"Zip",26058],[3,"FromFn",26058],[3,"Once",26058],[3,"OnceWith",26058],[3,"RepeatWith",26058],[3,"Successors",26058],[8,"FromIterator",26058],[8,"Generator",30414],[8,"Unpin",26924],[8,"Product",26058],[8,"Sum",26058],[8,"Try",30414],[3,"PhantomData",26924],[3,"PhantomPinned",26924],[3,"Assume",26972],[3,"Discriminant",26972],[3,"ManuallyDrop",26972],[4,"IpAddr",27087],[4,"Ipv6MulticastScope",27087],[3,"AddrParseError",27087],[4,"SocketAddr",27087],[3,"SocketAddrV4",27087],[3,"SocketAddrV6",27087],[8,"Into",25257],[3,"Saturating",27329],[3,"Wrapping",27329],[3,"TryFromIntError",27329],[4,"IntErrorKind",27329],[8,"LowerHex",25520],[8,"Binary",25520],[8,"Octal",25520],[8,"UpperHex",25520],[8,"Step",26058],[4,"ControlFlow",30414],[4,"GeneratorState",30414],[3,"RangeFull",30414],[3,"RangeTo",30414],[3,"RangeInclusive",30414],[3,"RangeToInclusive",30414],[3,"Yeet",30414],[8,"Deref",30414],[8,"DerefMut",30414],[3,"Iter",30794],[3,"IntoIter",30794],[3,"IterMut",30794],[3,"AssertUnwindSafe",30914],[3,"Location",30914],[3,"PanicInfo",30914],[8,"Future",25675],[8,"AsyncIterator",24808],[8,"Pointer",25520],[3,"DynMetadata",31117],[3,"Iter",31229],[3,"IntoIter",31229],[3,"IterMut",31229],[8,"From",25257],[4,"Which",31336],[3,"TimSortRun",32978],[8,"Fn",30414],[3,"Utf8Chunk",32991],[3,"Utf8Chunks",32991],[4,"SearchStep",33386],[3,"CharSearcher",33386],[3,"Exclusive",33516],[8,"Tuple",26924],[3,"AtomicBool",33546],[3,"AtomicPtr",33546],[3,"AtomicI8",33546],[3,"AtomicU8",33546],[3,"AtomicI16",33546],[3,"AtomicU16",33546],[3,"AtomicI32",33546],[3,"AtomicU32",33546],[3,"AtomicI64",33546],[3,"AtomicU64",33546],[3,"AtomicIsize",33546],[3,"AtomicUsize",33546],[3,"Waker",33974],[3,"RawWaker",33974],[3,"RawWakerVTable",33974],[3,"TryFromFloatSecsError",34059],[15,"i8",0],[15,"i16",0],[15,"i32",0],[15,"i64",0],[15,"i128",0],[15,"u8",0],[15,"u16",0],[15,"u32",0],[15,"u64",0],[15,"u128",0],[15,"isize",0],[15,"usize",0],[15,"f32",0],[15,"f64",0],[15,"char",0],[15,"pointer",0],[15,"slice",0],[15,"array",0],[15,"str",0],[15,"bool",0],[15,"unit",0],[15,"tuple",0],[15,"fn",0],[15,"never",0],[8,"GlobalAlloc",5289],[8,"Allocator",5289],[3,"SY",9371],[8,"Borrow",24826],[8,"BorrowMut",24826],[8,"TryInto",25257],[8,"TryFrom",25257],[8,"AsMut",25257],[8,"AsRef",25257],[8,"LowerExp",25520],[8,"UpperExp",25520],[8,"IntoFuture",25675],[8,"BuildHasher",25722],[8,"DiscriminantKind",26924],[8,"FnPtr",26924],[8,"Add",30414],[8,"Sub",30414],[8,"Mul",30414],[8,"Div",30414],[8,"Rem",30414],[8,"Neg",30414],[8,"Not",30414],[8,"BitAnd",30414],[8,"BitOr",30414],[8,"BitXor",30414],[8,"Shl",30414],[8,"Shr",30414],[8,"Index",30414],[8,"Residual",30414],[8,"AddAssign",30414],[8,"BitAndAssign",30414],[8,"BitOrAssign",30414],[8,"BitXorAssign",30414],[8,"DivAssign",30414],[8,"Drop",30414],[8,"FromResidual",30414],[8,"IndexMut",30414],[8,"MulAssign",30414],[8,"RemAssign",30414],[8,"ShlAssign",30414],[8,"ShrAssign",30414],[8,"SubAssign",30414],[8,"Pointee",31117],[3,"LaneCount",31336],[8,"ToBitMask",31336],[8,"SimdFloat",31336],[8,"SimdInt",31336],[8,"SimdUint",31336],[8,"SimdConstPtr",31336],[8,"SimdMutPtr",31336],[8,"Swizzle",31336],[8,"Swizzle2",31336],[8,"SimdPartialEq",31336],[8,"SimdOrd",31336],[8,"SimdPartialOrd",31336],[8,"Searcher",33386],[8,"ReverseSearcher",33386]],"a":{"!":[2195,30447],"!=":[25183,25191],"%":[30472,30473],"%=":[30473],"&":[2499,30416],"&*":[30428],"&=":[30417],"&mut":[2499],"(":[4990,5089],"()":[4990,5089],")":[4990,5089],"*":[2443,30428,30429,30444,30445],"*=":[30445],"*const":[2443],"*mut":[2443],"+":[30414,30415],"+=":[30415],"-":[30446,30481,30482],"-=":[30482],"..":[30464,30466,30467,30469],"..=":[30468,30470],"/":[30431,30432],"/=":[30432],"<":[25188,25193],"<<":[30477],"<<=":[30478],"<=":[25188,25193],"==":[25183,25191],">":[25188,25193],">=":[25188,25193],">>":[30479],">>=":[30480],"?":[4836,26936,30484],"?sized":[26936],"[":[4487,30442,30443],"[]":[182,4487,30442,30443],"[t; n]":[182],"[t;n]":[182],"]":[4487,30442,30443],"^":[30420],"^=":[30421],"compare_and_swap":[33618,33630],"drop_while":[26750,26751],"f32x4.abs":[13446,13788,14133],"f32x4.add":[13447,13789,14134],"f32x4.ceil":[13448,13790,14135],"f32x4.convert_i32x4_s":[13449,13791,14136],"f32x4.convert_i32x4_u":[13450,13792,14137],"f32x4.demote_f64x2_zero":[13451,13793,14138],"f32x4.div":[13452,13794,14139],"f32x4.eq":[13453,13795,14140],"f32x4.extract_lane":[13454,13796,14141],"f32x4.floor":[13455,13797,14142],"f32x4.ge":[13456,13798,14143],"f32x4.gt":[13457,13799,14144],"f32x4.le":[13458,13800,14145],"f32x4.lt":[13459,13801,14146],"f32x4.max":[13460,13802,14147],"f32x4.min":[13461,13803,14148],"f32x4.mul":[13462,13804,14149],"f32x4.ne":[13463,13805,14150],"f32x4.nearest":[13464,13806,14151],"f32x4.neg":[13465,13807,14152],"f32x4.pmax":[13466,13808,14153],"f32x4.pmin":[13467,13809,14154],"f32x4.promote_low_f32x4":[13499,13841,14186],"f32x4.relaxed_madd":[13468,13810,14155],"f32x4.relaxed_max":[13469,13811,14156],"f32x4.relaxed_min":[13470,13812,14157],"f32x4.relaxed_nmadd":[13471,13813,14158],"f32x4.replace_lane":[13472,13814,14159],"f32x4.splat":[13473,13815,14160],"f32x4.sqrt":[13474,13816,14161],"f32x4.sub":[13475,13817,14162],"f32x4.trunc":[13476,13818,14163],"f64x2.abs":[13478,13820,14165],"f64x2.add":[13479,13821,14166],"f64x2.ceil":[13480,13822,14167],"f64x2.convert_low_i32x4_s":[13481,13823,14168],"f64x2.convert_low_i32x4_u":[13482,13824,14169],"f64x2.div":[13483,13825,14170],"f64x2.eq":[13484,13826,14171],"f64x2.extract_lane":[13485,13827,14172],"f64x2.floor":[13486,13828,14173],"f64x2.ge":[13487,13829,14174],"f64x2.gt":[13488,13830,14175],"f64x2.le":[13489,13831,14176],"f64x2.lt":[13490,13832,14177],"f64x2.max":[13491,13833,14178],"f64x2.min":[13492,13834,14179],"f64x2.mul":[13493,13835,14180],"f64x2.ne":[13494,13836,14181],"f64x2.nearest":[13495,13837,14182],"f64x2.neg":[13496,13838,14183],"f64x2.pmax":[13497,13839,14184],"f64x2.pmin":[13498,13840,14185],"f64x2.relaxed_madd":[13500,13842,14187],"f64x2.relaxed_max":[13501,13843,14188],"f64x2.relaxed_min":[13502,13844,14189],"f64x2.relaxed_nmadd":[13503,13845,14190],"f64x2.replace_lane":[13504,13846,14191],"f64x2.splat":[13505,13847,14192],"f64x2.sqrt":[13506,13848,14193],"f64x2.sub":[13507,13849,14194],"f64x2.trunc":[13508,13850,14195],"false":[529],"flatmap":[30801],"foldl":[26352,26353],"foldr":[26691,26692],"i16x8.abs":[13510,13854,14197],"i16x8.add":[13511,13656,13855,14004,14198,14343],"i16x8.add_sat_s":[13512,13856,14199],"i16x8.add_sat_u":[13657,14005,14344],"i16x8.all_true":[13513,13658,13857,14006,14200,14345],"i16x8.avgr_u":[13659,14007,14346],"i16x8.bitmask":[13514,13660,13858,14008,14201,14347],"i16x8.eq":[13515,13661,13859,14009,14202,14348],"i16x8.extadd_pairwise_i8x16_s":[13516,13860,14203],"i16x8.extadd_pairwise_i8x16_u":[13517,13662,13861,14010,14204,14349],"i16x8.extend_high_i8x16_s":[13518,13862,14205],"i16x8.extend_high_i8x16_u":[13519,13663,13863,14011,14206,14350],"i16x8.extend_low_i8x16_s":[13520,13864,14207],"i16x8.extend_low_i8x16_u":[13521,13664,13865,14012,14208,14351],"i16x8.extmul_high_i8x16_s":[13522,13866,14209],"i16x8.extmul_high_i8x16_u":[13523,13665,13867,14013,14210,14352],"i16x8.extmul_low_i8x16_s":[13524,13868,14211],"i16x8.extmul_low_i8x16_u":[13525,13666,13869,14014,14212,14353],"i16x8.extract_lane_s":[13526,13870,14213],"i16x8.extract_lane_u":[13667,14015,14354],"i16x8.ge_s":[13527,13871,14214],"i16x8.ge_u":[13668,14016,14355],"i16x8.gt_s":[13528,13872,14215],"i16x8.gt_u":[13669,14017,14356],"i16x8.le_s":[13529,13873,14216],"i16x8.le_u":[13670,14018,14357],"i16x8.lt_s":[13532,13876,14219],"i16x8.lt_u":[13672,14020,14359],"i16x8.max_s":[13533,13877,14220],"i16x8.max_u":[13673,14021,14360],"i16x8.min_s":[13534,13878,14221],"i16x8.min_u":[13674,14022,14361],"i16x8.mul":[13535,13675,13879,14023,14222,14362],"i16x8.narrow_i32x4_s":[13536,13880,14223],"i16x8.narrow_i32x4_u":[13676,14024,14363],"i16x8.ne":[13537,13677,13881,14025,14224,14364],"i16x8.neg":[13538,13882,14225],"i16x8.q15mulr_sat_s":[13539,13883,14226],"i16x8.relaxed_dot_i8x16_i7x16_s":[13540,13884,14227],"i16x8.relaxed_laneselect":[13541,13885,14228],"i16x8.relaxed_q15mulr_s":[13542,13886,14229],"i16x8.replace_lane":[13543,13678,13887,14026,14230,14365],"i16x8.shl":[13544,13679,13888,14027,14231,14366],"i16x8.shr_s":[13545,13889,14232],"i16x8.shr_u":[13680,14028,14367],"i16x8.splat":[13547,13682,13891,14030,14234,14369],"i16x8.sub":[13548,13683,13892,14031,14235,14370],"i16x8.sub_sat_s":[13549,13893,14236],"i16x8.sub_sat_u":[13684,14032,14371],"i32x4.abs":[13551,13895,14238],"i32x4.add":[13552,13686,13896,14034,14239,14373],"i32x4.all_true":[13553,13687,13897,14035,14240,14374],"i32x4.bitmask":[13554,13688,13898,14036,14241,14375],"i32x4.dot_i16x8_s":[13555,13899,14242],"i32x4.eq":[13556,13689,13900,14037,14243,14376],"i32x4.extadd_pairwise_i16x8_s":[13557,13901,14244],"i32x4.extadd_pairwise_i16x8_u":[13558,13690,13902,14038,14245,14377],"i32x4.extend_high_i16x8_s":[13559,13903,14246],"i32x4.extend_high_i16x8_u":[13560,13691,13904,14039,14247,14378],"i32x4.extend_low_i16x8_s":[13561,13905,14248],"i32x4.extend_low_i16x8_u":[13562,13692,13906,14040,14249,14379],"i32x4.extmul_high_i16x8_s":[13563,13907,14250],"i32x4.extmul_high_i16x8_u":[13564,13693,13908,14041,14251,14380],"i32x4.extmul_low_i16x8_s":[13565,13909,14252],"i32x4.extmul_low_i16x8_u":[13566,13694,13910,14042,14253,14381],"i32x4.extract_lane":[13567,13695,13911,14043,14254,14382],"i32x4.ge_s":[13568,13912,14255],"i32x4.ge_u":[13696,14044,14383],"i32x4.gt_s":[13569,13913,14256],"i32x4.gt_u":[13697,14045,14384],"i32x4.le_s":[13570,13914,14257],"i32x4.le_u":[13698,14046,14385],"i32x4.lt_s":[13573,13917,14260],"i32x4.lt_u":[13700,14048,14387],"i32x4.max_s":[13574,13918,14261],"i32x4.max_u":[13701,14049,14388],"i32x4.min_s":[13575,13919,14262],"i32x4.min_u":[13702,14050,14389],"i32x4.mul":[13576,13703,13920,14051,14263,14390],"i32x4.ne":[13577,13704,13921,14052,14264,14391],"i32x4.neg":[13578,13922,14265],"i32x4.relaxed_dot_i8x16_i7x16_add_s":[13579,13923,14266],"i32x4.relaxed_laneselect":[13580,13924,14267],"i32x4.relaxed_trunc_f32x4_s":[13581,13925,14268],"i32x4.relaxed_trunc_f32x4_u":[13705,14053,14392],"i32x4.relaxed_trunc_f64x2_s_zero":[13582,13926,14269],"i32x4.relaxed_trunc_f64x2_u_zero":[13706,14054,14393],"i32x4.replace_lane":[13583,13707,13927,14055,14270,14394],"i32x4.shl":[13584,13708,13928,14056,14271,14395],"i32x4.shr_s":[13585,13929,14272],"i32x4.shr_u":[13709,14057,14396],"i32x4.splat":[13587,13711,13931,14059,14274,14398],"i32x4.sub":[13588,13712,13932,14060,14275,14399],"i32x4.trunc_sat_f32x4_s":[13589,13933,14276],"i32x4.trunc_sat_f32x4_u":[13713,14061,14400],"i32x4.trunc_sat_f64x2_s_zero":[13590,13934,14277],"i32x4.trunc_sat_f64x2_u_zero":[13714,14062,14401],"i64x2.abs":[13592,13936,14279],"i64x2.add":[13593,13716,13937,14064,14280,14403],"i64x2.all_true":[13594,13717,13938,14065,14281,14404],"i64x2.bitmask":[13595,13718,13939,14066,14282,14405],"i64x2.eq":[13596,13719,13940,14067,14283,14406],"i64x2.extend_high_i32x4_s":[13597,13941,14284],"i64x2.extend_high_i32x4_u":[13598,13720,13942,14068,14285,14407],"i64x2.extend_low_i32x4_s":[13599,13943,14286],"i64x2.extend_low_i32x4_u":[13600,13721,13944,14069,14287,14408],"i64x2.extmul_high_i32x4_s":[13601,13945,14288],"i64x2.extmul_high_i32x4_u":[13602,13722,13946,14070,14289,14409],"i64x2.extmul_low_i32x4_s":[13603,13947,14290],"i64x2.extmul_low_i32x4_u":[13604,13723,13948,14071,14291,14410],"i64x2.extract_lane":[13605,13724,13949,14072,14292,14411],"i64x2.ge_s":[13606,13950,14293],"i64x2.gt_s":[13607,13951,14294],"i64x2.le_s":[13608,13952,14295],"i64x2.lt_s":[13611,13955,14298],"i64x2.mul":[13612,13726,13956,14074,14299,14413],"i64x2.ne":[13613,13727,13957,14075,14300,14414],"i64x2.neg":[13614,13958,14301],"i64x2.relaxed_laneselect":[13615,13959,14302],"i64x2.replace_lane":[13616,13728,13960,14076,14303,14415],"i64x2.shl":[13617,13729,13961,14077,14304,14416],"i64x2.shr_s":[13618,13962,14305],"i64x2.shr_u":[13730,14078,14417],"i64x2.splat":[13620,13964,14307],"i64x2.sub":[13621,13733,13965,14081,14308,14420],"i8x16.abs":[13623,13967,14310],"i8x16.add":[13624,13735,13968,14083,14311,14422],"i8x16.add_sat_s":[13625,13969,14312],"i8x16.add_sat_u":[13736,14084,14423],"i8x16.all_true":[13626,13737,13970,14085,14313,14424],"i8x16.avgr_u":[13738,14086,14425],"i8x16.bitmask":[13627,13739,13971,14087,14314,14426],"i8x16.eq":[13628,13740,13972,14088,14315,14427],"i8x16.extract_lane_s":[13629,13973,14316],"i8x16.extract_lane_u":[13741,14089,14428],"i8x16.ge_s":[13630,13974,14317],"i8x16.ge_u":[13742,14090,14429],"i8x16.gt_s":[13631,13975,14318],"i8x16.gt_u":[13743,14091,14430],"i8x16.le_s":[13632,13976,14319],"i8x16.le_u":[13744,14092,14431],"i8x16.lt_s":[13633,13977,14320],"i8x16.lt_u":[13745,14093,14432],"i8x16.max_s":[13634,13978,14321],"i8x16.max_u":[13746,14094,14433],"i8x16.min_s":[13635,13979,14322],"i8x16.min_u":[13747,14095,14434],"i8x16.narrow_i16x8_s":[13636,13980,14323],"i8x16.narrow_i16x8_u":[13748,14096,14435],"i8x16.ne":[13637,13749,13981,14097,14324,14436],"i8x16.neg":[13638,13982,14325],"i8x16.popcnt":[13639,13750,13983,14098,14326,14437],"i8x16.relaxed_laneselect":[13640,13984,14327],"i8x16.relaxed_swizzle":[13641,13985,14328],"i8x16.replace_lane":[13642,13751,13986,14099,14329,14438],"i8x16.shl":[13643,13752,13987,14100,14330,14439],"i8x16.shr_s":[13644,13988,14331],"i8x16.shr_u":[13753,14101,14440],"i8x16.shuffle":[13546,13586,13619,13645,13681,13710,13731,13754,13890,13930,13963,13989,14029,14058,14079,14102,14233,14273,14306,14332,14368,14397,14418,14441],"i8x16.splat":[13646,13755,13990,14103,14333,14442],"i8x16.sub":[13647,13756,13991,14104,14334,14443],"i8x16.sub_sat_s":[13648,13992,14335],"i8x16.sub_sat_u":[13757,14105,14444],"i8x16.swizzle":[13649,13758,13993,14106,14336,14445],"in6addr_any":[27108],"in6addr_any_init":[27108],"in6addr_loopback":[27099],"in6addr_loopback_init":[27099],"inaddr_any":[27107],"inject":[26352,26353],"len":[25465],"memcpy":[921,25910,31154],"memmove":[25909,31153],"memory.atomic.notify":[13650,13995,14337],"memory.atomic.wait32":[13651,13996,14338],"memory.atomic.wait64":[13652,13997,14339],"memory.grow":[13653,13998,14340],"memory.size":[13654,13999,14341],"memset":[1205,5285,26023,31226],"mod":[2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601],"modulo":[2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601],"popcnt":[927,928,929,930,931,932,933,934,935,936,937,938,28415,28416,28417,28418,28419,28420,28421,28422,28423,28424,28425,28426,28427,28428,28429,28430,28431,28432,28433,28434,28435,28436,28437,28438],"popcount":[927,928,929,930,931,932,933,934,935,936,937,938,28415,28416,28417,28418,28419,28420,28421,28422,28423,28424,28425,28426,28427,28428,28429,28430,28431,28432,28433,28434,28435,28436,28437,28438],"ptr":[2443],"reverse":[26682,26683],"stream":[24808],"strlen":[25465],"synccell":[33516],"syncwrapper":[33516],"true":[529],"u64x2.splat":[13732,14080,14419],"unique":[33516],"v128.and":[13761,14109,14448],"v128.andnot":[13762,14110,14449],"v128.any_true":[13763,14111,14450],"v128.bitselect":[13764,14112,14451],"v128.const":[13445,13477,13509,13550,13591,13622,13655,13685,13715,13734,13787,13819,13853,13894,13935,13966,14003,14033,14063,14082,14132,14164,14196,14237,14278,14309,14342,14372,14402,14421],"v128.load":[13765,14113,14452],"v128.load16_lane":[13766,14114,14453],"v128.load16_splat":[13767,14115,14454],"v128.load16x4_s":[13571,13915,14258],"v128.load16x4_u":[13572,13699,13916,14047,14259,14386],"v128.load32_lane":[13768,14116,14455],"v128.load32_splat":[13769,14117,14456],"v128.load32_zero":[13770,14118,14457],"v128.load32x2_s":[13609,13953,14296],"v128.load32x2_u":[13610,13725,13954,14073,14297,14412],"v128.load64_lane":[13771,14119,14458],"v128.load64_splat":[13772,14120,14459],"v128.load64_zero":[13773,14121,14460],"v128.load8_lane":[13774,14122,14461],"v128.load8_splat":[13775,14123,14462],"v128.load8x8_s":[13530,13874,14217],"v128.load8x8_u":[13531,13671,13875,14019,14218,14358],"v128.not":[13776,14124,14463],"v128.or":[13777,14125,14464],"v128.store":[13778,14126,14465],"v128.store16_lane":[13779,14127,14466],"v128.store32_lane":[13780,14128,14467],"v128.store64_lane":[13781,14129,14468],"v128.store8_lane":[13782,14130,14469],"v128.xor":[13783,14131,14470],"{:?}":[25524],"{}":[25531],"|":[30418],"|=":[30419]}},\
"kernel":{"doc":"The <code>kernel</code> crate.","t":"IDLLOLLOOOOOAOLLOAKOLAACOAOOOOOOOOOOOOOOAAOOOAAALOLOLACANDNGRLLLLLALLLLLLLLLLLLLLFLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDIIIIIKLLLKLLLLLLLLLKLLLFFLLLLFFLLKLLKLLFFFFFFFFFFANDDENIDENSNSSSSSSSSSSNNSNSNDNSNNLLLLLLLLLLLLLLLLLLLLLLLLLFLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRCCCCCCCCCCCOOCCCOCCOCOOOOOOOOOOOCGDEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDQDQLLLLLLLLLLLLLKLLKLALLALLLLLLKGDLLLLLLLLLLLLGDLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDIQEINDNDLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLKLLKLLLLKLLLLLLLLLLLLLLLLLQISQDIDIIKLLLLLLLLLLLLLLLLLLKKFFFFFFFLLLLLLLL","n":["Module","ThisModule","__init","__pinned_init","b_str","borrow","borrow_mut","build_assert","build_error","c_str","current","dbg","error","fmt","from","from_ptr","impl_has_work","init","init","init","into","ioctl","kunit","macros","module_phy_driver","net","new_condvar","new_mutex","new_spinlock","new_work","pin_init","pr_alert","pr_cont","pr_crit","pr_debug","pr_emerg","pr_err","pr_info","pr_notice","pr_warn","prelude","print","stack_pin_init","stack_try_pin_init","static_assert","str","sync","task","try_from","try_init","try_into","try_pin_init","type_id","types","uapi","workqueue","Err","Error","Ok","Result","VTABLE_DEFAULT_ERROR","__init","__pinned_init","borrow","borrow_mut","clone","code","eq","fmt","from","from","from","from","from","from","from","from","from","into","name","to_errno","to_result","try_from","try_into","type_id","E2BIG","EACCES","EAGAIN","EBADCOOKIE","EBADF","EBADHANDLE","EBADTYPE","EBUSY","ECHILD","EDOM","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EIOCBQUEUED","EISDIR","EJUKEBOX","EMFILE","EMLINK","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOGRACE","ENOIOCTLCMD","ENOMEM","ENOPARAM","ENOSPC","ENOTBLK","ENOTDIR","ENOTSUPP","ENOTSYNC","ENOTTY","ENXIO","EOPENSTALE","EPERM","EPIPE","EPROBE_DEFER","ERANGE","ERECALLCONFLICT","ERESTARTNOHAND","ERESTARTNOINTR","ERESTARTSYS","ERESTART_RESTARTBLOCK","EROFS","ESERVERFAULT","ESPIPE","ESRCH","ETOOSMALL","ETXTBSY","EXDEV","ChainInit","ChainPinInit","InPlaceInit","Init","PinInit","PinnedDrop","Zeroable","__init","__init","__init","__init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","borrow","borrow","borrow_mut","borrow_mut","chain","drop","from","from","init","init_array_from_fn","init_from_closure","into","into","pin_chain","pin_init","pin_init_array_from_fn","pin_init_from_closure","try_from","try_from","try_init","try_into","try_into","try_pin_init","type_id","type_id","uninit","zeroed","_IO","_IOC_DIR","_IOC_NR","_IOC_SIZE","_IOC_TYPE","_IOR","_IOW","_IOWR","phy","CableTest","Device","DeviceId","DeviceState","Down","Driver","DriverVTable","DuplexMode","Error","FLAGS","Full","HAS_CONFIG_ANEG","HAS_GET_FEATURES","HAS_LINK_CHANGE_NOTIFY","HAS_MATCH_PHY_DEVICE","HAS_READ_MMD","HAS_READ_STATUS","HAS_RESUME","HAS_SOFT_RESET","HAS_SUSPEND","HAS_WRITE_MMD","Half","Halted","NAME","NoLink","PHY_DEVICE_ID","Ready","Registration","Running","USE_VTABLE_ATTR","Unknown","Up","__init","__init","__init","__init","__init","__init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","config_aneg","create_phy_driver","drop","eq","flags","from","from","from","from","from","from","genphy_read_abilities","genphy_read_lpa","genphy_read_status","genphy_resume","genphy_soft_reset","genphy_suspend","genphy_update_link","get_features","init_hw","into","into","into","into","into","into","is_autoneg_completed","is_autoneg_enabled","is_link_up","link_change_notify","mask_as_int","match_phy_device","new_with_custom_mask","new_with_driver","new_with_exact_mask","new_with_model_mask","new_with_vendor_mask","phy_id","read","read_mmd","read_paged","read_status","register","resolve_aneg_linkmode","resume","set_duplex","set_speed","soft_reset","start_aneg","state","suspend","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write_mmd","ALWAYS_CALL_SUSPEND","IS_INTERNAL","POLL_CABLE_TEST","RST_AFTER_CLK_EN","Box","CStr","Error","InPlaceInit","Init","Pin","PinInit","Result","ThisModule","Vec","Zeroable","build_assert","current","dbg","init","init","init","module","pin_data","pin_init","pinned_drop","pr_alert","pr_crit","pr_debug","pr_emerg","pr_err","pr_info","pr_notice","pr_warn","static_assert","try_init","try_pin_init","vtable","BStr","CStr","CStrConvertError","CString","InteriorNul","NotNulTerminated","__init","__init","__pinned_init","__pinned_init","as_bytes","as_bytes_with_nul","as_char_ptr","as_ref","as_str_unchecked","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","deref","deref","fmt","fmt","fmt","fmt","from","from","from_bytes_with_nul","from_bytes_with_nul_unchecked","from_char_ptr","index","index","index","into","into","is_empty","len","len_with_nul","to_cstring","to_str","try_from","try_from","try_from","try_from_fmt","try_into","try_into","type_id","type_id","type_id","Arc","ArcBorrow","CondVar","LockClassKey","LockedBy","Mutex","SpinLock","UniqueArc","__enqueue","__init","__init","__init","__init","__init","__init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","access","access_mut","as_arc_borrow","as_ref","assume_init","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","deref","deref","deref","deref_mut","downcast","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_foreign","from_raw","init","init_with","into","into","into","into","into","into","into_foreign","into_raw","lock","new","new","new","notify_all","notify_one","pin_init","pin_init_with","ptr_eq","run","try_from","try_from","try_from","try_from","try_from","try_from","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new_uninit","try_pin_init","type_id","type_id","type_id","type_id","type_id","type_id","wait","wait_interruptible","write","Backend","Guard","GuardState","Lock","State","__init","__init","__pinned_init","__pinned_init","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","drop","from","from","init","into","into","lock","lock","mutex","new","relock","spinlock","try_from","try_from","try_into","try_into","type_id","type_id","unlock","Mutex","MutexBackend","__init","__pinned_init","borrow","borrow_mut","from","init","into","lock","try_from","try_into","type_id","unlock","SpinLock","SpinLockBackend","__init","__pinned_init","borrow","borrow_mut","from","init","into","lock","try_from","try_into","type_id","unlock","Task","__init","__pinned_init","borrow","borrow_mut","current","dec_ref","from","group_leader","inc_ref","into","pid","signal_pending","try_from","try_into","type_id","wake_up","ARef","AlwaysRefCounted","Borrowed","Either","ForeignOwnable","Left","Opaque","Right","ScopeGuard","__init","__init","__init","__init","__pinned_init","__pinned_init","__pinned_init","__pinned_init","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","dec_ref","deref","deref","deref_mut","dismiss","drop","drop","ffi_init","from","from","from","from","from","from_foreign","from_raw","get","inc_ref","into","into","into","into","into_foreign","new","new","new_with_data","raw_get","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninit","EnqueueOutput","HasWork","OFFSET","Pointer","Queue","RawWorkItem","Work","WorkItem","WorkItemPointer","__enqueue","__init","__init","__pinned_init","__pinned_init","borrow","borrow","borrow_mut","borrow_mut","enqueue","from","from","from_raw","get_work_offset","into","into","new","raw_get","raw_get_work","run","run","system","system_freezable","system_freezable_power_efficient","system_highpri","system_long","system_power_efficient","system_unbound","try_from","try_from","try_into","try_into","try_spawn","type_id","type_id","work_container_of"],"q":[[0,"kernel"],[56,"kernel::error"],[85,"kernel::error::code"],[138,"kernel::init"],[181,"kernel::ioctl"],[189,"kernel::net"],[190,"kernel::net::phy"],[317,"kernel::net::phy::flags"],[321,"kernel::prelude"],[354,"kernel::str"],[406,"kernel::sync"],[514,"kernel::sync::lock"],[548,"kernel::sync::lock::mutex"],[562,"kernel::sync::lock::spinlock"],[576,"kernel::task"],[593,"kernel::types"],[659,"kernel::workqueue"],[704,"core::result"],[705,"bindings::bindings_raw"],[706,"core::any"],[707,"core::fmt"],[708,"core::fmt"],[709,"core::convert"],[710,"core::num::error"],[711,"alloc::collections"],[712,"core::fmt"],[713,"core::alloc::layout"],[714,"core::option"],[715,"core::ffi"],[716,"core::marker"],[717,"core::ops::function"],[718,"core::pin"],[719,"core::ops::function"],[720,"core::ffi"],[721,"core::ops::range"],[722,"core::ptr::non_null"],[723,"bindings::bindings_raw"]],"d":["The top level entrypoint to implementing a kernel module.","Equivalent to <code>THIS_MODULE</code> in the C API.","","","Creates a new <code>BStr</code> from a string literal.","","","Asserts that a boolean expression is <code>true</code> at compile time.","Fails the build if the code path calling <code>build_error!</code> can …","Creates a new <code>CStr</code> from a string literal.","Returns the currently running task.","<code>std::dbg</code>, but using <code>pr_info</code> instead of <code>eprintln</code>.","Kernel errors.","A convenience alias for <code>core::format_args</code>.","Returns the argument unchanged.","Creates a <code>ThisModule</code> given the <code>THIS_MODULE</code> pointer.","Used to safely implement the <code>HasWork&lt;T, ID&gt;</code> trait.","API to safely and fallibly initialize pinned <code>struct</code>s using …","Called at module initialization time.","Construct an in-place initializer for <code>struct</code>s.","Calls <code>U::from(self)</code>.","ioctl() number definitions","KUnit-based macros for Rust unit tests.","","Declares a kernel module for PHYs drivers.","Networking.","Creates a <code>CondVar</code> initialiser with the given name and a …","Creates a <code>Mutex</code> initialiser with the given name and a …","Creates a <code>SpinLock</code> initialiser with the given name and a …","Creates a <code>Work</code> initialiser with the given name and a …","Construct an in-place, pinned initializer for <code>struct</code>s.","Prints an alert-level message (level 1).","Continues a previous log message in the same line.","Prints a critical-level message (level 2).","Prints a debug-level message (level 7).","Prints an emergency-level message (level 0).","Prints an error-level message (level 3).","Prints an info-level message (level 6).","Prints a notice-level message (level 5).","Prints a warning-level message (level 4).","The <code>kernel</code> prelude.","Printing facilities.","Initialize and pin a type directly on the stack.","Initialize and pin a type directly on the stack.","Static assert (i.e. compile-time assert).","String representations.","Synchronisation primitives.","Tasks (threads and processes).","","Construct an in-place fallible initializer for <code>struct</code>s.","","Construct an in-place, fallible pinned initializer for …","","Kernel types.","","Work queues.","Contains the error value","Generic integer kernel error.","Contains the success value","A <code>Result</code> with an <code>Error</code> error type.","Error message for calling a default function of a <code>#[vtable]</code>…","","","","","","Contains the C-compatible error codes.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a string representing the error, if one exists.","Returns the kernel error code.","Converts an integer as returned by a C kernel function to …","","","","Argument list too long.","Permission denied.","Try again.","Cookie is stale.","Bad file number.","Illegal NFS file handle.","Type not supported by server.","Device or resource busy.","No child processes.","Math argument out of domain of func.","File exists.","Bad address.","File too large.","Interrupted system call.","Invalid argument.","I/O error.","iocb queued, will get completion event.","Is a directory.","Request initiated, but will not complete before timeout.","Too many open files.","Too many links.","File table overflow.","No such device.","No such file or directory.","Exec format error.","NFS file lock reclaim refused.","No ioctl command.","Out of memory.","Parameter not supported.","No space left on device.","Block device required.","Not a directory.","Operation is not supported.","Update synchronization mismatch.","Not a typewriter.","No such device or address.","Open found a stale dentry.","Operation not permitted.","Broken pipe.","Driver requests probe retry.","Math result not representable.","Conflict with recalled state.","Restart if no handler.","System call was interrupted by a signal and will be …","Restart the system call.","Restart by calling sys_restart_syscall.","Read-only file system.","An untranslatable error occurred.","Illegal seek.","No such process.","Buffer or request is too small.","Text file busy.","Cross-device link.","An initializer returned by <code>Init::chain</code>.","An initializer returned by <code>PinInit::pin_chain</code>.","Smart pointer that can initialize memory in-place.","An initializer for <code>T</code>.","A pin-initializer for the type <code>T</code>.","Trait facilitating pinned destruction.","Marker trait for types that can be initialized by writing …","Initializes <code>slot</code>.","","","","Initializes <code>slot</code>.","","","","","","","","","First initializes the value using <code>self</code> then calls the …","Executes the pinned destructor of this type.","Returns the argument unchanged.","Returns the argument unchanged.","Use the given initializer to in-place initialize a <code>T</code>.","Initializes an array by initializing each element via the …","Creates a new <code>Init&lt;T, E&gt;</code> from the given closure.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","First initializes the value using <code>self</code> then calls the …","Use the given pin-initializer to pin-initialize a <code>T</code> inside …","Initializes an array by initializing each element via the …","Creates a new <code>PinInit&lt;T, E&gt;</code> from the given closure.","","","Use the given initializer to in-place initialize a <code>T</code>.","","","Use the given pin-initializer to pin-initialize a <code>T</code> inside …","","","An initializer that leaves the memory uninitialized.","Create a new zeroed T.","Build an ioctl number for an argumentless ioctl.","Get the ioctl direction from an ioctl number.","Get the ioctl number from an ioctl number.","Get the ioctl size from an ioctl number.","Get the ioctl type from an ioctl number.","Build an ioctl number for an read-only ioctl.","Build an ioctl number for an write-only ioctl.","Build an ioctl number for a read-write ioctl.","Network PHY device.","PHY is performing a cable test.","An instance of a PHY device.","An identifier for PHY devices on an MDIO/MII bus.","PHY state machine states.","PHY device and driver are not ready for anything.","Driver implementation for a particular PHY type.","Driver structure for a particular PHY type.","A mode of Ethernet communication.","PHY is up, but is in an error state.","Defines certain other features this PHY supports. It is a …","PHY is in full-duplex mode.","Indicates if the <code>config_aneg</code> method is overridden by the …","Indicates if the <code>get_features</code> method is overridden by the …","Indicates if the <code>link_change_notify</code> method is overridden …","Indicates if the <code>match_phy_device</code> method is overridden by …","Indicates if the <code>read_mmd</code> method is overridden by the …","Indicates if the <code>read_status</code> method is overridden by the …","Indicates if the <code>resume</code> method is overridden by the …","Indicates if the <code>soft_reset</code> method is overridden by the …","Indicates if the <code>suspend</code> method is overridden by the …","Indicates if the <code>write_mmd</code> method is overridden by the …","PHY is in half-duplex mode.","PHY is up, but no polling or interrupts are done.","The friendly name of this PHY type.","PHY is up, but not currently plugged in.","This driver only works for PHYs with IDs which match this …","PHY is ready to send and receive packets.","Registration structure for PHY drivers.","PHY is currently running.","A marker to prevent implementors from forgetting to use …","PHY is in unknown duplex mode.","PHY and attached device are ready to do work.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the advertisement and resets auto-negotiation …","Creates a <code>DriverVTable</code> instance from <code>Driver</code>.","","","Defines certain other features this PHY supports (like …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reads PHY abilities.","Reads link partner ability.","Checks the link status and updates current link state.","Resumes the PHY via <code>BMCR_PDOWN</code> bit.","Executes software reset the PHY via <code>BMCR_RESET</code> bit.","Suspends the PHY via <code>BMCR_PDOWN</code> bit.","Updates the link status.","Probes the hardware to determine what abilities it has.","Initializes the PHY.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the current auto-negotiation state.","Gets the current auto-negotiation configuration.","Gets the current link state.","Callback for notification of link change.","Get a <code>mask</code> as u32.","Returns true if this is a suitable driver for the given …","Creates a new instance with a custom match mask.","Creates a new instance from <code>Driver</code>.","Creates a new instance with the exact match mask.","Creates a new instance with the model match mask.","Creates a new instance with the vendor match mask.","Gets the id of the PHY.","Reads a given C22 PHY register.","Overrides the default MMD read function for reading a MMD …","Reads a paged register.","Determines the negotiated speed and duplex.","Registers a PHY driver.","Resolves the advertisements into PHY settings.","Resumes the hardware, restoring state if needed.","Sets duplex mode.","Sets the speed of the PHY.","Issues a PHY software reset.","Starts auto-negotiation.","Gets the state of PHY state machine states.","Suspends the hardware, saving state if needed.","","","","","","","","","","","","","","","","","","","Writes a given C22 PHY register.","Overrides the default MMD write function for writing a MMD …","Don’t suspend.","PHY is internal.","Polling is used to detect PHY status changes.","PHY needs to be reset after the refclk is enabled.","","","","","","","","","","","","Asserts that a boolean expression is <code>true</code> at compile time.","Returns the currently running task.","","","","Construct an in-place initializer for <code>struct</code>s.","","","Construct an in-place, pinned initializer for <code>struct</code>s.","","Prints an alert-level message (level 1).","Prints a critical-level message (level 2).","Prints a debug-level message (level 7).","Prints an emergency-level message (level 0).","Prints an error-level message (level 3).","Prints an info-level message (level 6).","Prints a notice-level message (level 5).","Prints a warning-level message (level 4).","Static assert (i.e. compile-time assert).","Construct an in-place fallible initializer for <code>struct</code>s.","Construct an in-place, fallible pinned initializer for …","","Byte string without UTF-8 validity guarantee.","A string that is guaranteed to have exactly one <code>NUL</code> byte, …","Possible errors when using conversion functions in <code>CStr</code>.","An owned string that is guaranteed to have exactly one <code>NUL</code> …","Supplied bytes contain an interior <code>NUL</code>.","Supplied bytes are not terminated by <code>NUL</code>.","","","","","Convert the string to a byte slice without the trailing 0 …","Convert the string to a byte slice containing the trailing …","Returns a C pointer to the string.","","Unsafely convert this <code>CStr</code> into a <code>&amp;str</code>, without checking …","","","","","","","","","","Formats printable ASCII characters, escaping the rest.","Formats printable ASCII characters with a double quote on …","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>CStr</code> from a <code>[u8]</code>.","Creates a <code>CStr</code> from a <code>[u8]</code> without performing any …","Wraps a raw C string pointer.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the string only includes <code>NUL</code>.","Returns the length of this string excluding <code>NUL</code>.","Returns the length of this string with <code>NUL</code>.","Convert this <code>CStr</code> into a <code>CString</code> by allocating memory and …","Yields a <code>&amp;str</code> slice if the <code>CStr</code> contains valid UTF-8.","","","","Creates an instance of <code>CString</code> from the given formatted …","","","","","","A reference-counted pointer to an instance of <code>T</code>.","A borrowed reference to an <code>Arc</code> instance.","A conditional variable.","Represents a lockdep class. It’s a wrapper around C’s …","Allows access to some data to be serialised by a lock that …","","","A refcounted object that is known to have a refcount of 1.","","","","","","","","","","","","","","Returns a reference to the protected data when the caller …","Returns a mutable reference to the protected data when the …","Returns an <code>ArcBorrow</code> from the given <code>Arc</code>.","","Unsafely assume that <code>self</code> is initialized.","","","","","","","","","","","","","","","","","","","","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Recreates an <code>Arc</code> instance previously deconstructed via …","Use the given initializer to in-place initialize a <code>T</code>.","Initialize <code>self</code> using the given initializer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Convert the <code>Arc</code> into a raw pointer.","Generic kernel lock and guard.","Constructs a new instance of <code>LockedBy</code>.","Creates a new lock class key.","Constructs a new condvar initialiser.","Wakes all waiters up, if any.","Wakes a single waiter up, if any.","Use the given initializer to in-place initialize a <code>T</code>.","Pin-initialize <code>self</code> using the given pin-initializer.","Compare whether two <code>Arc</code> pointers reference the same …","","","","","","","","","","","","","","","Constructs a new reference counted instance of <code>T</code>.","Tries to allocate a new <code>UniqueArc</code> instance.","Tries to allocate a new <code>UniqueArc</code> instance whose contents …","","","","","","","","Releases the lock and waits for a notification in …","Releases the lock and waits for a notification in …","Converts a <code>UniqueArc&lt;MaybeUninit&lt;T&gt;&gt;</code> into a <code>UniqueArc&lt;T&gt;</code> …","The “backend” of a lock.","A lock guard.","The state required to be kept between lock and unlock.","A mutual exclusion primitive.","The state required by the lock.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialises the lock.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Acquires the lock, making the caller its owner.","Acquires the lock and gives the caller access to the data …","A kernel mutex.","Constructs a new lock initialiser.","Reacquires the lock, making the caller its owner.","A kernel spinlock.","","","","","","","Releases the lock, giving up its ownership.","A mutual exclusion primitive.","A kernel <code>struct mutex</code> lock backend.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","A spinlock.","A kernel <code>spinlock_t</code> lock backend.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Wraps the kernel’s <code>struct task_struct</code>.","","","","","Returns a task reference for the currently executing …","","Returns the argument unchanged.","Returns the group leader of the given task.","","Calls <code>U::from(self)</code>.","Returns the PID of the given task.","Determines whether the given task has pending signals.","","","","Wakes up the task.","An owned reference to an always-reference-counted object.","Types that are <em>always</em> reference counted.","Type of values borrowed between calls to …","A sum type that always holds either a value of type <code>L</code> or <code>R</code>.","Used to transfer ownership to and from foreign (non-Rust) …","Constructs an instance of <code>Either</code> containing a value of …","Stores an opaque value.","Constructs an instance of <code>Either</code> containing a value of …","Runs a cleanup function/closure when dropped.","","","","","","","","","Borrows a foreign-owned object.","","","","","","","","","","Decrements the reference count on the object.","","","","Prevents the cleanup function from running and returns the …","","","Creates a pin-initializer from the given initializer …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a foreign-owned object back to a Rust-owned one.","Creates a new instance of <code>ARef</code>.","Returns a raw pointer to the opaque data.","Increments the reference count on the object.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a Rust-owned object to a foreign-owned one.","Creates a new guarded object with the given cleanup …","Creates a new opaque value.","Creates a new guarded object wrapping the given data and …","Gets the value behind <code>this</code>.","","","","","","","","","","","","","Creates an uninitialised value.","The return type of <code>Queue::enqueue</code>.","Declares that a type has a <code>Work&lt;T, ID&gt;</code> field.","The offset of the <code>Work&lt;T, ID&gt;</code> field.","The pointer type that this struct is wrapped in. This will …","A kernel work queue.","A raw work item.","Links for a work item.","Defines the method that should be called when this work …","Defines the method that should be called directly when a …","Enqueues this work item on a queue using the provided …","","","","","","","","","Enqueues a work item.","Returns the argument unchanged.","Returns the argument unchanged.","Use the provided <code>struct workqueue_struct</code> with Rust.","Returns the offset of the <code>Work&lt;T, ID&gt;</code> field.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new instance of <code>Work</code>.","Get a pointer to the inner <code>work_struct</code>.","Returns a pointer to the <code>Work&lt;T, ID&gt;</code> field.","Run this work item.","The method that should be called when this work item is …","Returns the system work queue (<code>system_wq</code>).","Returns the system freezable work queue (…","Returns the system freezable power-efficient work queue (…","Returns the system high-priority work queue (…","Returns the system work queue for potentially long-running …","Returns the system power-efficient work queue (…","Returns the system unbound work queue (<code>system_unbound_wq</code>).","","","","","Tries to spawn the given function or closure as a work …","","","Returns a pointer to the struct containing the <code>Work&lt;T, ID&gt;</code> …"],"i":[0,0,4,4,0,4,4,0,0,0,0,0,0,0,4,4,0,0,82,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,0,0,5,0,5,0,0,7,7,7,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,26,22,22,27,26,26,22,22,26,22,26,22,24,83,26,22,84,0,0,26,22,27,84,0,0,26,22,84,26,22,84,26,22,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,39,0,0,0,39,85,44,85,85,85,85,85,85,85,85,85,85,44,39,85,39,85,39,0,39,85,44,39,44,36,37,38,41,39,44,36,37,38,41,39,44,36,37,38,41,39,44,36,37,38,41,39,85,0,38,39,0,44,36,37,38,41,39,36,36,36,36,36,36,36,85,36,44,36,37,38,41,39,36,36,36,85,41,85,41,41,41,41,41,36,36,85,36,85,38,36,85,36,36,85,36,36,85,44,36,37,38,41,39,44,36,37,38,41,39,44,36,37,38,41,39,36,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,48,15,48,15,19,19,19,19,19,19,48,15,19,48,15,15,19,48,19,19,48,15,48,15,19,19,19,19,19,19,48,15,19,19,19,19,19,48,48,15,48,48,15,19,48,15,0,0,0,0,0,0,0,0,52,52,54,55,53,64,65,52,54,55,53,64,65,53,53,52,52,55,52,52,54,55,53,64,65,52,54,55,53,64,65,52,54,52,54,55,55,52,52,52,52,55,55,52,52,52,52,54,55,53,64,65,52,52,52,55,52,54,55,53,64,65,52,52,0,53,64,65,65,65,52,55,52,52,52,54,55,53,64,65,55,52,54,55,53,64,65,52,55,55,55,52,54,55,53,64,65,65,65,55,0,0,63,0,63,67,62,67,62,67,62,67,62,67,67,67,67,62,63,67,62,63,62,0,62,63,0,67,62,67,62,67,62,63,0,0,86,86,86,86,86,86,86,86,86,86,86,86,0,0,87,87,87,87,87,87,87,87,87,87,87,87,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,88,0,0,89,0,89,0,75,76,73,89,75,76,73,89,88,75,76,73,89,75,76,73,89,73,74,75,73,75,75,75,73,76,75,76,73,73,89,88,73,76,74,75,76,73,89,88,75,76,75,76,75,76,73,89,75,76,73,89,75,76,73,89,76,78,0,90,81,0,0,0,0,0,78,77,80,77,80,77,80,77,80,77,77,80,77,90,77,80,80,80,90,91,81,0,0,0,0,0,0,0,77,80,77,80,77,77,80,90],"f":[0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-1,[]],[3,4],0,0,[4,[[5,[-1]]],[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[2,[-2]]],[],[]],0,[-1,[[2,[-2]]],[],[]],0,[-1,6,[]],0,0,0,0,0,0,0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],0,[[7,7],8],[[7,9],10],[11,7],[12,7],[13,7],[14,7],[15,7],[16,7],[17,7],[18,7],[-1,-1,[]],[-1,-2,[],[]],[7,[[20,[19]]]],[7,21],[21,5],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[[[22,[-3,-4,-1,-2]]],[[2,[1,-2]]],23,[],[[24,[-1,-2]]],25],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[[[26,[-3,-4,-1,-2]]],[[2,[1,-2]]],23,[],[[27,[-1,-2]]],25],[-1,[[2,[1,-2]]],[],[]],[[[22,[-3,-4,-1,-2]]],[[2,[1,-2]]],23,[],[[24,[-1,-2]]],25],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[22,[-1,-2,-3,-4]]],[],25,[],[]],0,[-1,-1,[]],[-1,-1,[]],[-3,[[5,[-4]]],[],[],[[24,[-1,-2]]],[]],[-1,[[0,[[24,[[29,[-2]],-3]]]]],30,[],[]],[-1,[[0,[[24,[-2,-3]]]]],25,23,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[26,[-1,-2,-3,-4]]],[],25,[],[]],[-3,[[5,[[28,[-4]]]]],[],[],[[27,[-1,-2]]],[]],[-1,[[0,[[27,[[29,[-2]],-3]]]]],30,[],[]],[-1,[[0,[[27,[-2,-3]]]]],25,23,[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-3,[[2,[-4,-2]]],[],[[31,[11]]],[[24,[-1,-2]]],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-3,[[2,[[28,[-4]],-2]]],[],[[31,[11]]],[[27,[-1,-2]]],[]],[-1,6,[]],[-1,6,[]],[[],[[0,[[24,[[32,[-1]],-2]]]]],[],[]],[[],[[0,[[24,[-1]]]]],33],[[34,34],34],[34,34],[34,34],[34,35],[34,34],[[34,34],34],[[34,34],34],[[34,34],34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,5],[[],37],[38,1],[[39,39],8],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[36,5],[36,5],[36,[[5,[40]]]],[36,5],[36,5],[36,5],[36,5],[36,5],[36,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,8],[36,8],[36,8],[36,1],[41,34],[36,8],[[34,34],41],[[],41],[34,41],[34,41],[34,41],[36,34],[[36,40],[[5,[40]]]],[[36,42,40],[[5,[40]]]],[[36,40,40],[[5,[40]]]],[36,[[5,[40]]]],[[4,[28,[[43,[37]]]]],[[5,[38]]]],[36,1],[36,5],[[36,44],1],[[36,34],1],[36,5],[36,5],[36,39],[36,5],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[36,40,40],5],[[36,42,40,40],5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[19,[[43,[42]]]],[19,[[43,[42]]]],[19,45],[19,46],[19,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[19],[48],[[19,9],10],[[19,9],10],[[48,9],10],[[15,9],10],[-1,-1,[]],[-1,-1,[]],[[[43,[42]]],[[2,[19,15]]]],[[[43,[42]]],19],[45,19],[[19,[49,[35]]]],[[19,-1],[],0],[[19,50]],[-1,-2,[],[]],[-1,-2,[],[]],[19,8],[19,35],[19,35],[19,[[2,[48,11]]]],[19,[[2,[47,17]]]],[-1,[[2,[-2]]],[],[]],[19,[[2,[48,11]]]],[-1,[[2,[-2]]],[],[]],[51,[[2,[48,7]]]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,0,0,0,0,0,0,[[[52,[-1]],-2],[],[],25],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[[[53,[-1,-2]],-2],-1,23,[]],[[[53,[-1,-2]],-2],-1,23,[]],[[[52,[-1]]],[[54,[-1]]],23],[[[52,[-1]]],-1,23],[[[55,[[32,[-1]]]]],[[55,[-1]]],[]],[-1,-2,[],[]],[56,[[54,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1]]],[[52,[-1]]],23],[[[54,[-1]]],[[54,[-1]]],23],[[[52,[-1]]],[],23],[[[54,[-1]]],[],23],[[[55,[-1]]],[],23],[[[55,[-1]]],[],23],[[[52,[57]]],[[2,[[52,[-1]],[52,[57]]]]],[57,58,59]],[[[52,[-1]]],1,23],[[[52,[-1]],9],10,[60,23]],[[[52,[-1]],9],10,[61,23]],[[[55,[-1]],9],10,[61,23]],[[[55,[-1]],9],10,[60,23]],[[[54,[-1]]],[[52,[-1]]],23],[-1,-1,[]],[[[55,[-1]]],[[52,[-1]]],23],[[[28,[[55,[-1]]]]],[[52,[-1]]],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[56,[[52,[-1]]],[]],[[],[[52,[-1]]],23],[-3,[[5,[[52,[-1]]]]],[],[],[[24,[-1,-2]]]],[[[55,[[32,[-1]]]],-3],[[2,[[55,[-1]],-2]]],[],[],[[24,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1]]],56,[]],[[[52,[-1]]],[],23],0,[[[62,[-1,-2]],-3],[[53,[-3,-1]]],[],63,[]],[[],64],[[19,64],[[0,[[27,[65]]]]]],[65,1],[65,1],[-3,[[5,[[52,[-1]]]]],[],[],[[27,[-1,-2]]]],[[[55,[[32,[-1]]]],-3],[[2,[[28,[[55,[-1]]]],-2]]],[],[],[[27,[-1,-2]]]],[[[52,[-1]],[52,[-1]]],8,23],[66,1],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-3,[[2,[[55,[-1]],-2]]],[],[[31,[11]]],[[24,[-1,-2]]]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[[52,[-1]],11]]],[]],[-1,[[2,[[55,[-1]],11]]],[]],[[],[[2,[[55,[[32,[-1]]]],11]]],[]],[-3,[[2,[[28,[[55,[-1]]]],-2]]],[],[[31,[11]]],[[27,[-1,-2]]]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[65,[67,[-1,-2]]],1,23,63],[[65,[67,[-1,-2]]],8,23,63],[[[55,[[32,[-1]]]],-1],[[55,[-1]]],[]],0,0,0,0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1,-2]]],[],23,63],[[[67,[-1,-2]]],[],23,63],[[[67,[-1,-2]]],1,23,63],[-1,-1,[]],[-1,-1,[]],[[45,68],1],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[[[62,[-1,-2]]],[[67,[-1,-2]]],23,63],0,[[-1,19,64],[[0,[[27,[[62,[-1,-2]]]]]]],[],63],[[],1],0,[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[[],1],0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[45,68],1],[-1,-2,[],[]],[[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[[],1],0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[45,68],1],[-1,-2,[],[]],[[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[[],1],0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[69]]]],[[[71,[70]]],1],[-1,-1,[]],[70,70],[70,1],[-1,-2,[],[]],[70,72],[70,8],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[70,1],0,0,0,0,0,0,0,0,0,[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[56],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[73,[-1]]],[[73,[-1]]],74],[[[71,[-1]]],1,[]],[[[75,[-1,-2]]],-1,[],25],[[[73,[-1]]],[],74],[[[75,[-1,-2]]],-1,[],25],[[[75,[-1,-2]]],-1,[],25],[[[75,[-1,-2]]],1,[],25],[[[73,[-1]]],1,74],[-1,[[0,[[27,[[76,[-2]]]]]]],25,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[73,[-1]]],74],[-1,-1,[]],[-1,-1,[]],[56,-1,[]],[[[71,[-1]]],[[73,[-1]]],74],[[[76,[-1]]],[],[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,56,[]],[-1,[[75,[1,[0,[25]]]]],25],[-1,[[76,[-1]]],[]],[[-1,-2],[[75,[-1,-2]]],[],25],[[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[],[[76,[-1]]],[]],0,0,0,0,0,0,0,0,0,[[-1,-2],[],[],25],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,[[2,[1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[77,-1],[],[78,58]],[-1,-1,[]],[-1,-1,[]],[79,77],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[19,64],[[0,[[27,[[80,[-1]]]]]]],[81,23]],[[],66],[[],80],[66,1],[[],1],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2]]],[],[]],[[77,-1],[[5,[1,11]]],[58,25]],[-1,6,[]],[-1,6,[]],[80]],"c":[],"p":[[15,"tuple"],[4,"Result",704],[3,"module",705],[3,"ThisModule",0],[6,"Result",56],[3,"TypeId",706],[3,"Error",56],[15,"bool"],[3,"Formatter",707],[6,"Result",707],[3,"AllocError",708],[4,"Infallible",709],[3,"TryFromIntError",710],[3,"TryReserveError",711],[4,"CStrConvertError",354],[3,"Error",707],[3,"Utf8Error",712],[3,"LayoutError",713],[3,"CStr",354],[4,"Option",714],[6,"c_int",715],[3,"ChainInit",138],[8,"Sized",716],[8,"Init",138],[8,"FnOnce",717],[3,"ChainPinInit",138],[8,"PinInit",138],[3,"Pin",718],[15,"array"],[8,"FnMut",717],[8,"From",709],[19,"MaybeUninit",719],[8,"Zeroable",138],[15,"u32"],[15,"usize"],[3,"Device",190],[3,"DriverVTable",190],[3,"Registration",190],[4,"DeviceState",190],[15,"u16"],[3,"DeviceId",190],[15,"u8"],[15,"slice"],[4,"DuplexMode",190],[6,"c_char",715],[6,"BStr",354],[15,"str"],[3,"CString",354],[3,"RangeFrom",720],[3,"RangeFull",720],[3,"Arguments",707],[3,"Arc",406],[3,"LockedBy",406],[3,"ArcBorrow",406],[3,"UniqueArc",406],[4,"c_void",715],[8,"Any",706],[8,"Send",716],[8,"Sync",716],[8,"Display",707],[8,"Debug",707],[3,"Lock",514],[8,"Backend",514],[3,"LockClassKey",406],[3,"CondVar",406],[3,"work_struct",705],[3,"Guard",514],[3,"lock_class_key",705],[8,"Deref",721],[3,"Task",576],[3,"NonNull",722],[6,"pid_t",705],[3,"ARef",593],[8,"AlwaysRefCounted",593],[3,"ScopeGuard",593],[3,"Opaque",593],[3,"Queue",659],[8,"RawWorkItem",659],[3,"workqueue_struct",705],[3,"Work",659],[8,"WorkItem",659],[8,"Module",0],[8,"PinnedDrop",138],[8,"InPlaceInit",138],[8,"Driver",190],[3,"MutexBackend",548],[3,"SpinLockBackend",562],[8,"ForeignOwnable",593],[4,"Either",593],[8,"HasWork",659],[8,"WorkItemPointer",659]],"a":{"print":[34,37,344,347]}},\
"macros":{"doc":"Crate for all kernel procedural macros.","t":"YOOOXXX","n":["Zeroable","concat_idents","module","paste","pin_data","pinned_drop","vtable"],"q":[[0,"macros"]],"d":["Derives the <code>Zeroable</code> trait for the given struct.","Concatenate two identifiers.","Declares a kernel module.","Paste identifiers together.","Used to specify the pinning information of the fields of a …","Used to implement <code>PinnedDrop</code> safely.","Declares or implements a vtable trait."],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
